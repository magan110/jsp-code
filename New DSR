using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Transactions;
using Microsoft.Extensions.Logging;

namespace sparshWebService.Controllers
{
    using System;
    using System.Collections.Generic;

    
        public class MeetingPurchDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string PurchaserName { get; set; }
            public string TopicDiscussed { get; set; }
            public string Remarks { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

        public class ContractorMeetingDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string ContractorName { get; set; }
            public string TopicDiscussed { get; set; }
            public string Learnings { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

        public class AnyOtherActivityDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string Activity1 { get; set; }
            public string Activity2 { get; set; }
            public string Activity3 { get; set; }
            public string AnyOtherPoints { get; set; }
            public string CreateId { get; set; }
        }

        public class BtlActivityDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string ActivityType { get; set; }
            public int NoOfParticipants { get; set; }
            public string Town { get; set; }
            public string Learnings { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

        public class CheckSamplingDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string SiteName { get; set; }
            public string ProductName { get; set; }
            public decimal PotentialMT { get; set; }
            public string ApplicatorName { get; set; }
            public string QualityOfSample { get; set; }
            public string StatusOfSample { get; set; }
            public string ContactName { get; set; }
            public string MobileNumber { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

        public class InternalTeamMeetingDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string MeetWith { get; set; }
            public string DiscussionPoints { get; set; }
            public string Learnings { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

        public class OfficeWorkDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string WorkRelatedTo { get; set; }
            public int HoursSpent { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

        public class OnLeaveDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string Remarks { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

        public class PhoneCallBuilderDto
        {
            public string DocuNumb { get; set; }
            public DateOnly ReportDate { get; set; }
            public string AreaCode { get; set; }
            public string CreateId { get; set; }
            public ICollection<string> Base64Images { get; set; }
        }

    // Fix for CS0229: Ambiguity between 'WorkFromHomeDto.DocuNumb' and 'WorkFromHomeDto.DocuNumb'
    // The issue arises because the `WorkFromHomeDto` class has two members with the same name `DocuNumb`.
    // To resolve this, remove the redundant `internal string DocuNumb;` declaration from the class.

    public class WorkFromHomeDto
    {
        public string DocuNumb { get; set; }
        public DateOnly ReportDate { get; set; }
        public string CreateId { get; set; }
        public ICollection<string> Base64Images { get; set; }
    }
    


    [ApiController]
    [Route("api/dsr")]
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        private readonly ILogger<DsrController> _log;

        public DsrController(DatabaseHelper db, ILogger<DsrController> log)
        {
            _db = db;
            _log = log;
        }

        [HttpPost("purchaser")]
        public IActionResult PostPurchaser([FromBody] MeetingPurchDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "50",
                new Dictionary<string, object>
                {
                    {"@PurchaserName", dto.PurchaserName},
                    {"@Topic",         dto.TopicDiscussed},
                    {"@Remarks",       dto.Remarks},
                    {"@CreateId",      dto.CreateId}
                },
                dto.Base64Images,
                "MeetingWithNewPurchaser");

        [HttpPost("contractor")]
        public IActionResult PostContractor([FromBody] ContractorMeetingDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "51",
                new Dictionary<string, object>
                {
                    {"@ContractorName", dto.ContractorName},
                    {"@Topic",          dto.TopicDiscussed},
                    {"@Learn",          dto.Learnings},
                    {"@CreateId",       dto.CreateId}
                },
                dto.Base64Images,
                "MeetingsWithContractor");

        [HttpPost("anyother")]
        public IActionResult PostAnyOther([FromBody] AnyOtherActivityDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "60",
                new Dictionary<string, object>
                {
                    {"@A1",     dto.Activity1},
                    {"@A2",     dto.Activity2},
                    {"@A3",     dto.Activity3},
                    {"@AOP",    dto.AnyOtherPoints},
                    {"@CreateId", dto.CreateId}
                },
                null,   // no images for AnyOther
                "AnyOtherActivity");

        [HttpPost("btl")]
        public IActionResult PostBtl([FromBody] BtlActivityDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "52",
                new Dictionary<string, object>
                {
                    {"@ActivityType",    dto.ActivityType},
                    {"@Num",             dto.NoOfParticipants},
                    {"@Town",            dto.Town},
                    {"@Learn",           dto.Learnings},
                    {"@CreateId",        dto.CreateId}
                },
                dto.Base64Images,
                "BtlActivities");

        [HttpPost("checksampling")]
        public IActionResult PostCheckSampling([FromBody] CheckSamplingDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "31",
                new Dictionary<string, object>
                {
                    {"@Site",    dto.SiteName},
                    {"@Prod",    dto.ProductName},
                    {"@Pot",     dto.PotentialMT},
                    {"@App",     dto.ApplicatorName},
                    {"@Qual",    dto.QualityOfSample},
                    {"@Stat",    dto.StatusOfSample},
                    {"@Cont",    dto.ContactName},
                    {"@Mob",     dto.MobileNumber},
                    {"@CreateId",dto.CreateId}
                },
                dto.Base64Images,
                "CheckSamplingAtSite");

        [HttpPost("internalteam")]
        public IActionResult PostInternal([FromBody] InternalTeamMeetingDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "53",
                new Dictionary<string, object>
                {
                    {"@MW",     dto.MeetWith},
                    {"@DP",     dto.DiscussionPoints},
                    {"@LR",     dto.Learnings},
                    {"@CreateId",dto.CreateId}
                },
                dto.Base64Images,
                "InternalTeamMeeting");

        [HttpPost("officework")]
        public IActionResult PostOfficeWork([FromBody] OfficeWorkDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "54",
                new Dictionary<string, object>
                {
                    {"@Work",    dto.WorkRelatedTo},
                    {"@Hrs",     dto.HoursSpent},
                    {"@CreateId",dto.CreateId}
                },
                dto.Base64Images,
                "OfficeWork");

        [HttpPost("onleave")]
        public IActionResult PostOnLeave([FromBody] OnLeaveDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "55",
                new Dictionary<string, object>
                {
                    {"@Rem",     dto.Remarks},
                    {"@CreateId",dto.CreateId}
                },
                dto.Base64Images,
                "OnLeave");

        [HttpPost("phonecallbuilder")]
        public IActionResult PostPhoneCall([FromBody] PhoneCallBuilderDto dto) =>
            SaveDsr(dto.DocuNumb, dto.ReportDate, "56",
                new Dictionary<string, object>
                {
                    {"@Area",    dto.AreaCode},
                    {"@CrId",    dto.CreateId}
                },
                dto.Base64Images,
                "PhoneCallWithBuilder");

       

        // Reuse this helper for all of the above
        private IActionResult SaveDsr(
    string docuNumb,
    DateOnly reportDate,
    string dsrParam,
    Dictionary<string, object> customParams,
    ICollection<string> images,
    string uploadFolder)
        {
            try
            {
                using var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);

                // 1) insert main row
                var hdr = new Dictionary<string, object>(customParams)
                {
                    ["@N"] = docuNumb,
                    ["@Dt"] = reportDate.ToString("yyyyMMdd"),
                    ["@Param"] = dsrParam
                };
                var cols = string.Join(", ", hdr.Keys.Select(k => k.Substring(1)));
                var vals = string.Join(", ", hdr.Keys);
                var sqlHdr = $@"
                  INSERT INTO dptDSRActvt
                    (docuNumb, dsrParam, docuDate, {cols}, createDt)
                  VALUES
                    (@N, @Param, @Dt, {vals}, GETDATE())";
                _db.ExecuteCommand("bwlive", sqlHdr, hdr);

                // 2) optional images
                var seq = 1;
                foreach (var b64 in images ?? Array.Empty<string>())
                {
                    var data = b64.Contains(',') ? b64.Split(',').Last() : b64;
                    var bytes = Convert.FromBase64String(data);
                    var fileName = $"{docuNumb}_{seq}.jpg";
                    var folder = Path.Combine("Uploads", uploadFolder);
                    Directory.CreateDirectory(folder);
                    var filePath = Path.Combine(folder, fileName);
                    System.IO.File.WriteAllBytes(filePath, bytes); // Fix: Use System.IO.File instead of ControllerBase.File

                    _db.ExecuteCommand("imageData",
                      @"INSERT INTO comDsrImages(docuNumb, imgSeq, imgPath)
                        VALUES(@N, @S, @P)",
                      new Dictionary<string, object>
                      {
                          ["@N"] = docuNumb,
                          ["@S"] = seq,
                          ["@P"] = fileName
                      });

                    seq++;
                }

                tx.Complete();
                return Ok(new { message = "Saved", docuNumb });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "DSR save failed");
                return StatusCode(500, ex.Message);
            }
        }
    }
}
