// --------- DTO Definitions ---------
using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using sparshWebService.Dtos;
using System.Transactions;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Transactions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using sparshWebService.DataAccess;
using sparshWebService.Dtos;

namespace sparshWebService.Dtos
{
    public record MeetingPurchDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string PurchaserName,
        string TopicDiscussed,
        string Remarks,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record ContractorMeetingDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string ContractorName,
        string TopicDiscussed,
        string Learnings,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record AnyOtherActivityDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string Activity1,
        string Activity2,
        string Activity3,
        string AnyOtherPoints,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record BtlActivityDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string ActivityType,
        int NoOfParticipants,
        string Town,
        string Learnings,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record CheckSamplingDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string SiteName,
        string ProductName,
        decimal PotentialMT,
        string ApplicatorName,
        string QualityOfSample,
        string StatusOfSample,
        string ContactName,
        string MobileNumber,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record InternalTeamMeetingDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string MeetWith,
        string DiscussionPoints,
        string Learnings,
        string CreateId,
        ICollection<ICollection<string>> Base64Images
    );

    public record OfficeWorkDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string WorkRelatedTo,
        decimal HoursSpent,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record OnLeaveDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string Remarks,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record PhoneCallBuilderDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string AreaCode,
        string PurchaserType,
        string PurchaserCode,
        string SiteName,
        string ContractorName,
        string MetWith,
        string NameDesg,
        string TopicDiscussed,
        string UgaiRecoveryPlans,
        string PurchaserGrievances,
        string OtherPoints,
        string CreateId,
        ICollection<string> Base64Images
    );

    public record WorkFromHomeDto(
        string DocuNumb,
        DateOnly SubmissionDate,
        DateOnly ReportDate,
        string CreateId,
        ICollection<string> Base64Images
    );
}

// --------- Combined DSR Controller ---------


namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/dsr")]
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        private readonly ILogger<DsrController> _log;

        public DsrController(DatabaseHelper db, ILogger<DsrController> log)
        {
            _db = db;
            _log = log;
        }

        [HttpPost("purchaser")]
        public IActionResult PostPurchaser([FromBody] MeetingPurchDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "50",
                new Dictionary<string, object>
                {
                    ["@PurchaserName"] = dto.PurchaserName,
                    ["@Topic"] = dto.TopicDiscussed,
                    ["@Remarks"] = dto.Remarks,
                    ["@CreateId"] = dto.CreateId
                },
                dto.Base64Images,
                "MeetingWithNewPurchaser");

        [HttpPost("contractor")]
        public IActionResult PostContractor([FromBody] ContractorMeetingDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "51",
                new Dictionary<string, object>
                {
                    ["@ContractorName"] = dto.ContractorName,
                    ["@Topic"] = dto.TopicDiscussed,
                    ["@Learn"] = dto.Learnings,
                    ["@CreateId"] = dto.CreateId
                },
                dto.Base64Images,
                "MeetingsWithContractor");

        [HttpPost("anyother")]
        public IActionResult PostAnyOther([FromBody] AnyOtherActivityDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "60",
                new Dictionary<string, object>
                {
                    ["@A1"] = dto.Activity1,
                    ["@A2"] = dto.Activity2,
                    ["@A3"] = dto.Activity3,
                    ["@AOP"] = dto.AnyOtherPoints,
                    ["@CreateId"] = dto.CreateId
                },
                dto.Base64Images,
                "AnyOtherActivity");

        [HttpPost("btl")]
        public IActionResult PostBtl([FromBody] BtlActivityDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "51",
                new Dictionary<string, object>
                {
                    ["@ActivityType"] = dto.ActivityType,
                    ["@Num"] = dto.NoOfParticipants,
                    ["@Town"] = dto.Town,
                    ["@Learn"] = dto.Learnings,
                    ["@CreateId"] = dto.CreateId
                },
                dto.Base64Images,
                "BtlActivities");

        [HttpPost("checksampling")]
        public IActionResult PostCheckSampling([FromBody] CheckSamplingDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "31",
                new Dictionary<string, object>
                {
                    ["@Site"] = dto.SiteName,
                    ["@Prod"] = dto.ProductName,
                    ["@Pot"] = dto.PotentialMT,
                    ["@App"] = dto.ApplicatorName,
                    ["@Qual"] = dto.QualityOfSample,
                    ["@Stat"] = dto.StatusOfSample,
                    ["@Cont"] = dto.ContactName,
                    ["@Mob"] = dto.MobileNumber,
                    ["@CreateId"] = dto.CreateId
                },
                dto.Base64Images,
                "CheckSamplingAtSite");

        [HttpPost("internalteam")]
        public IActionResult PostInternal([FromBody] InternalTeamMeetingDto dto)
        {
            // Flatten the nested ICollection<ICollection<string>> to ICollection<string>
            var flattenedImages = dto.Base64Images?.SelectMany(innerCollection => innerCollection).ToList();

            return SaveDsr(dto.DocuNumb, dto.ReportDate, "52",
                new Dictionary<string, object>
                {
                    ["@MW"] = dto.MeetWith,
                    ["@DP"] = dto.DiscussionPoints,
                    ["@LR"] = dto.Learnings,
                    ["@CreateId"] = dto.CreateId
                },
                flattenedImages,
                "InternalTeamMeeting");
        }

        [HttpPost("officework")]
        public IActionResult PostOfficeWork([FromBody] OfficeWorkDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "53",
                new Dictionary<string, object>
                {
                    ["@Work"] = dto.WorkRelatedTo,
                    ["@Hrs"] = dto.HoursSpent,
                    ["@CreateId"] = dto.CreateId
                },
                dto.Base64Images,
                "OfficeWork");

        [HttpPost("onleave")]
        public IActionResult PostOnLeave([FromBody] OnLeaveDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "54",
                new Dictionary<string, object>
                {
                    ["@Rem"] = dto.Remarks,
                    ["@CreateId"] = dto.CreateId
                },
                dto.Base64Images,
                "OnLeave");

        [HttpPost("phonecallbuilder")]
        public IActionResult PostPhoneCall([FromBody] PhoneCallBuilderDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "12",
                new Dictionary<string, object>
                {
                    ["@Area"] = dto.AreaCode,
                    ["@CrId"] = dto.CreateId
                },
                dto.Base64Images,
                "PhoneCallWithBuilder");

        [HttpPost("workfromhome")]
        public IActionResult PostWfh([FromBody] WorkFromHomeDto dto)
            => SaveDsr(dto.DocuNumb, dto.ReportDate, "55",
                new Dictionary<string, object>
                {
                    ["@CrId"] = dto.CreateId
                },
                dto.Base64Images,
                "WorkFromHome");

        private IActionResult SaveDsr(
            string docuNumb,
            DateOnly reportDate,
            string dsrParam,
            Dictionary<string, object> customParams,
            ICollection<string> images,
            string uploadFolder)
        {
            try
            {
                using var tx = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled);

                var hdr = new Dictionary<string, object>(customParams)
                {
                    ["@N"] = docuNumb,
                    ["@Dt"] = reportDate.ToString("yyyyMMdd"),
                    ["@Param"] = dsrParam
                };
                var cols = string.Join(", ", hdr.Keys.Select(k => k.TrimStart('@')));
                var vals = string.Join(", ", hdr.Keys);

                string sqlHdr = $@"INSERT INTO dptDSRActvt
                                   (docuNumb, dsrParam, docuDate, {cols}, createDt)
                                 VALUES
                                   (@N, @Param, @Dt, {vals}, GETDATE())";

                _db.ExecuteCommand("bwlive", sqlHdr, hdr);

                int seq = 1;
                foreach (var b64 in images ?? Array.Empty<string>())
                {
                    var data = b64.Contains(',') ? b64.Split(',').Last() : b64;
                    var bytes = Convert.FromBase64String(data);
                    var fname = $"{docuNumb}_{seq}.jpg";
                    var folder = Path.Combine("Uploads", uploadFolder);
                    Directory.CreateDirectory(folder);
                    var path = Path.Combine(folder, fname);
                    System.IO.File.WriteAllBytes(path, bytes); // Fixed by explicitly using System.IO.File

                    _db.ExecuteCommand("imageData",
                      @"INSERT INTO comDsrImages(docuNumb, imgSeq, imgPath)
                        VALUES(@N, @S, @P)",
                      new Dictionary<string, object>
                      {
                          ["@N"] = docuNumb,
                          ["@S"] = seq,
                          ["@P"] = fname
                      });

                    seq++;
                }

                tx.Complete();
                return Ok(new { message = "Saved", docuNumb });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "DSR save failed");
                return StatusCode(500, ex.Message);
            }
        }
    }
}
