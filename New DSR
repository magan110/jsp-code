using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Microsoft.Extensions.Configuration;

namespace MyFirstApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class DsrController : ControllerBase
    {
        private readonly IConfiguration _configuration;
        private readonly string _issuer;
        private readonly string _connectionString;

        public DsrController(IConfiguration configuration)
        {
            _configuration = configuration;
            _issuer = "Birla White IT";
            _connectionString = _configuration.GetConnectionString("DefaultConnection");
        }

        // Helper method to get database connection
        private SqlConnection GetConnection()
        {
            return new SqlConnection(_connectionString);
        }

        // Helper method to execute SQL queries
        private DataTable ExecuteQuery(string query, SqlParameter[] parameters = null)
        {
            using (var connection = GetConnection())
            {
                using (var command = new SqlCommand(query, connection))
                {
                    if (parameters != null)
                    {
                        command.Parameters.AddRange(parameters);
                    }

                    using (var adapter = new SqlDataAdapter(command))
                    {
                        var dataTable = new DataTable();
                        adapter.Fill(dataTable);
                        return dataTable;
                    }
                }
            }
        }

        // Helper method to execute non-query commands
        private int ExecuteNonQuery(string query, SqlParameter[] parameters = null)
        {
            using (var connection = GetConnection())
            {
                using (var command = new SqlCommand(query, connection))
                {
                    if (parameters != null)
                    {
                        command.Parameters.AddRange(parameters);
                    }

                    connection.Open();
                    return command.ExecuteNonQuery();
                }
            }
        }

        // GET: api/Dsr/ValidateUser
        [HttpGet("ValidateUser")]
        public IActionResult ValidateUser()
        {
            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            var userName = User.FindFirstValue(ClaimTypes.Name);
            
            // Get user details from database
            string sql = "SELECT loginIdM, emplName, deptCode, stateCod, areaCode FROM covLoginMas WHERE loginIdM = @loginIdM AND isActive = 'Y'";
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@loginIdM", userId)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            if (result.Rows.Count == 0)
            {
                return NotFound("User not found or inactive");
            }
            
            var userRow = result.Rows[0];
            var userDetails = new
            {
                LoginId = userRow["loginIdM"].ToString(),
                Name = userRow["emplName"].ToString(),
                DeptCode = userRow["deptCode"].ToString(),
                StateCode = userRow["stateCod"].ToString(),
                AreaCode = userRow["areaCode"].ToString()
            };
            
            return Ok(userDetails);
        }

        // GET: api/Dsr/AreaCodes
        [HttpGet("AreaCodes")]
        public IActionResult GetAreaCodes(string loginId)
        {
            string sql = "SELECT areaCode, AreaDesc FROM bkmAreaMast WHERE retlArHd = @loginIdM AND isActive = 'Y' AND isnull(isOnlyDp,'N') <> 'Y'";
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@loginIdM", loginId)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            var areaCodes = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                areaCodes.Add(new
                {
                    AreaCode = row["areaCode"].ToString(),
                    AreaDesc = row["areaDesc"].ToString()
                });
            }
            
            return Ok(areaCodes);
        }

        // GET: api/Dsr/ActivityTypes
        [HttpGet("ActivityTypes")]
        public IActionResult GetActivityTypes(string deptCode)
        {
            string sql = "";
            
            if (deptCode == "KKR115") // Advt Required
            {
                sql = "SELECT paramCod, paramDes FROM wcmParametr WHERE paramTyp = 83 AND paramCod <> '00000' AND paramCod NOT IN ('31', '51','01','02','04') AND (paramCod IN ('02') OR paramAd5 IN ('', @deptCode))";
            }
            else if (deptCode == "KKR162") // VAP Team
            {
                sql = "SELECT paramCod, paramDes FROM wcmParametr WHERE paramTyp = 83 AND paramCod <> '00000' AND paramCod NOT IN ('01','02','04') AND (paramAd3 IN (@deptCode) OR paramAd5 = '')";
            }
            else if (deptCode == "KKR166") // VAP Team
            {
                sql = "SELECT paramCod, paramDes FROM wcmParametr WHERE paramTyp = 83 AND paramCod <> '00000' AND (paramAd4 IN (@deptCode) OR paramAd5 IN ('', @deptCode)) AND paramCod NOT IN ('01','02','04')";
            }
            else
            {
                sql = "SELECT paramCod, paramDes FROM wcmParametr WHERE paramTyp = 83 AND paramCod <> '00000' AND paramAd4 NOT IN (@deptCode) AND paramAd5 IN ('', @deptCode) AND paramCod NOT IN ('01','02','04')";
            }
            
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@deptCode", deptCode)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            var activityTypes = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                activityTypes.Add(new
                {
                    ParamCode = row["paramCod"].ToString(),
                    ParamDesc = row["paramDes"].ToString()
                });
            }
            
            return Ok(activityTypes);
        }

        // GET: api/Dsr/CustomerTypes
        [HttpGet("CustomerTypes")]
        public IActionResult GetCustomerTypes(string dsrParam)
        {
            string sql = "SELECT 'C', 'Stockiest/ Urbon Stockiest' UNION SELECT 'D', 'Direct Dealer' UNION SELECT 'RD', 'Rural Stockiest' UNION SELECT 'R', 'Retailer' UNION SELECT 'RR', 'Rural Retailer' UNION SELECT '07', 'Registered Applicator' UNION SELECT '08', 'Painter'";
            
            if (dsrParam == "50" || dsrParam == "61")
            {
                sql = "SELECT 'C', 'Purchaser' UNION SELECT 'D', 'Direct Dealer' UNION SELECT 'RD', 'Rural Stockiest' UNION SELECT 'R', 'Retailer' UNION SELECT '3', 'Contractor' UNION SELECT '7', 'Applicator' UNION SELECT 'RR', 'Rural Retailer' UNION SELECT '07', 'Registered Applicator' UNION SELECT '08', 'Painter'";
            }
            
            var result = ExecuteQuery(sql);
            
            var customerTypes = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                customerTypes.Add(new
                {
                    Code = row[0].ToString(),
                    Description = row[1].ToString()
                });
            }
            
            return Ok(customerTypes);
        }

        // GET: api/Dsr/DocumentTypes
        [HttpGet("DocumentTypes")]
        public IActionResult GetDocumentTypes()
        {
            string sql = "SELECT '1BF', 'Before' UNION SELECT '2AF', 'After' UNION SELECT 'ADH', 'More Image'";
            
            var result = ExecuteQuery(sql);
            
            var documentTypes = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                documentTypes.Add(new
                {
                    Code = row[0].ToString(),
                    Description = row[1].ToString()
                });
            }
            
            return Ok(documentTypes);
        }

        // GET: api/Dsr/Products
        [HttpGet("Products")]
        public IActionResult GetProducts()
        {
            string sql = "SELECT repoCatg, repoDesc FROM bkmRepoCatg WHERE isActive = 'Y' AND repoCatg IN ('01', '02', '03', '09','12', '15','17','18','19','20')";
            
            var result = ExecuteQuery(sql);
            
            var products = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                products.Add(new
                {
                    RepoCatg = row["repoCatg"].ToString(),
                    RepoDesc = row["repoDesc"].ToString()
                });
            }
            
            return Ok(products);
        }

        // GET: api/Dsr/CounterTypes
        [HttpGet("CounterTypes")]
        public IActionResult GetCounterTypes()
        {
            string sql = "SELECT '03', 'Gypsum counter' UNION ALL SELECT '01', 'Paint Counter' UNION ALL SELECT '02', 'Non Paint Counter' UNION ALL SELECT '04', 'Other'";
            
            var result = ExecuteQuery(sql);
            
            var counterTypes = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                counterTypes.Add(new
                {
                    Code = row[0].ToString(),
                    Description = row[1].ToString()
                });
            }
            
            return Ok(counterTypes);
        }

        // GET: api/Dsr/PinCodes
        [HttpGet("PinCodes")]
        public IActionResult GetPinCodes(string areaCode, string pinCode)
        {
            string sql = "SELECT DISTINCT pinCodeN + '~' + cityName + '~' + district AS pinCodeData FROM bkmPinCode WHERE pinCodeN LIKE @pinCode + '%'";
            
            if (!string.IsNullOrEmpty(areaCode))
            {
                sql = "SELECT DISTINCT pinCodeN + '~' + cityName + '~' + district AS pinCodeData FROM bkmPinCode WHERE areaCode = @areaCode AND pinCodeN LIKE @pinCode + '%'";
            }
            
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@areaCode", areaCode ?? (object)DBNull.Value),
                new SqlParameter("@pinCode", pinCode)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            var pinCodes = new List<string>();
            foreach (DataRow row in result.Rows)
            {
                pinCodes.Add(row["pinCodeData"].ToString());
            }
            
            return Ok(pinCodes);
        }

        // GET: api/Dsr/Customers
        [HttpGet("Customers")]
        public IActionResult GetCustomers(string areaCode, string customerType, string searchTerm)
        {
            string sql = "";
            List<SqlParameter> parameters = new List<SqlParameter>();
            
            parameters.Add(new SqlParameter("@areaCode", areaCode));
            parameters.Add(new SqlParameter("@searchTerm", "%" + searchTerm + "%"));
            
            if (customerType == "C" || customerType == "RD" || customerType == "AD")
            {
                sql = "SELECT custCode, custName FROM dpmCustomer WHERE areaCode = @areaCode AND custName LIKE @searchTerm AND isActive = 'Y'";
            }
            else if (customerType == "R" || customerType == "RR")
            {
                sql = "SELECT retlCode, retlName FROM rtmRetailer WHERE areaCode = @areaCode AND retlName LIKE @searchTerm AND isActive = 'Y'";
            }
            else
            {
                return BadRequest("Invalid customer type");
            }
            
            var result = ExecuteQuery(sql, parameters.ToArray());
            
            var customers = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                customers.Add(new
                {
                    Code = row[0].ToString(),
                    Name = row[1].ToString()
                });
            }
            
            return Ok(customers);
        }

        // GET: api/Dsr/MobileData
        [HttpGet("MobileData")]
        public IActionResult GetMobileData(string mobileNumber, string areaCode)
        {
            string sql = "SELECT TOP 1 a.dsrRem01, a.dsrRem08, a.cuRtType, a.dsrRem03, a.areaCode, a.pinCodeN, a.cityName, a.district, a.cusRtlCd, b.stateCod FROM dptDSRActvt a WITH (NOLOCK), bkmAreaStZn b WITH (NOLOCK) WHERE a.areaCode = b.areaCode AND a.dsrRem08 = @mobileNumber AND a.areaCode = @areaCode AND statFlag NOT IN ('C', 'R') ORDER BY a.createDt DESC";
            
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@mobileNumber", mobileNumber),
                new SqlParameter("@areaCode", areaCode)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            if (result.Rows.Count == 0)
            {
                return NotFound("Mobile number not found");
            }
            
            var row = result.Rows[0];
            var mobileData = new
            {
                DsrRem01 = row["dsrRem01"].ToString(),
                DsrRem08 = row["dsrRem08"].ToString(),
                CuRtType = row["cuRtType"].ToString(),
                DsrRem03 = row["dsrRem03"].ToString(),
                AreaCode = row["areaCode"].ToString(),
                PinCodeN = row["pinCodeN"].ToString(),
                CityName = row["cityName"].ToString(),
                District = row["district"].ToString(),
                CusRtlCd = row["cusRtlCd"].ToString(),
                StateCod = row["stateCod"].ToString()
            };
            
            return Ok(mobileData);
        }

        // POST: api/Dsr/ValidateDocumentDate
        [HttpPost("ValidateDocumentDate")]
        public IActionResult ValidateDocumentDate([FromBody] DocumentDateModel model)
        {
            string sql = "SELECT dbo.cofValidDsrDt(@loginId, @docDate, 'D') AS isValid";
            
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@loginId", model.LoginId),
                new SqlParameter("@docDate", model.DocumentDate)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            if (result.Rows.Count == 0)
            {
                return BadRequest("Invalid request");
            }
            
            var isValid = result.Rows[0]["isValid"].ToString();
            
            return Ok(new { IsValid = isValid });
        }

        // GET: api/Dsr/Documents
        [HttpGet("Documents")]
        public IActionResult GetDocuments(string loginId)
        {
            string sql = "SELECT DISTINCT TOP 30 docuNumb, dbo.wcfParamDes(dsrParam, 'dsrParNw') + ' ~ ' + docuNumb + ' ~ ' + CONVERT(char(10), docuDate, 103) AS docInfo FROM dptDSRActvt WHERE docuDate > GETDATE() - 4 AND createId = @loginId ORDER BY docuNumb DESC";
            
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@loginId", loginId)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            var documents = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                documents.Add(new
                {
                    DocumentNumber = row["docuNumb"].ToString(),
                    DocumentInfo = row["docInfo"].ToString()
                });
            }
            
            return Ok(documents);
        }

        // GET: api/Dsr/DocumentDetails
        [HttpGet("DocumentDetails")]
        public IActionResult GetDocumentDetails(string documentNumber, string loginId)
        {
            string sql = "SELECT docuNumb, CONVERT(char(10), docuDate, 103) AS docuDate, dsrParam, cusRtlFl, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, areaCode, ISNULL(cuRtType, '') AS cuRtType FROM dptDSRActvt WHERE docuNumb = @docuNumb AND createId = @loginId";
            
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@docuNumb", documentNumber),
                new SqlParameter("@loginId", loginId)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            if (result.Rows.Count == 0)
            {
                return NotFound("Document not found");
            }
            
            var row = result.Rows[0];
            var documentDetails = new
            {
                DocumentNumber = row["docuNumb"].ToString(),
                DocumentDate = row["docuDate"].ToString(),
                DsrParam = row["dsrParam"].ToString(),
                CusRtlFl = row["cusRtlFl"].ToString(),
                CusRtlCd = row["cusRtlCd"].ToString(),
                DsrRem01 = row["dsrRem01"].ToString(),
                DsrRem02 = row["dsrRem02"].ToString(),
                DsrRem03 = row["dsrRem03"].ToString(),
                DsrRem04 = row["dsrRem04"].ToString(),
                DsrRem05 = row["dsrRem05"].ToString(),
                DsrRem06 = row["dsrRem06"].ToString(),
                DsrRem07 = row["dsrRem07"].ToString(),
                DsrRem08 = row["dsrRem08"].ToString(),
                AreaCode = row["areaCode"].ToString(),
                CuRtType = row["cuRtType"].ToString()
            };
            
            return Ok(documentDetails);
        }

        // GET: api/Dsr/DocumentDetailItems
        [HttpGet("DocumentDetailItems")]
        public IActionResult GetDocumentDetailItems(string documentNumber, string loginId)
        {
            string sql = "SELECT a.repoCatg, a.repoDesc, ISNULL(prodQnty, 0) AS prodQnty, ISNULL(projQnty, 0) AS projQnty, ISNULL(actnRemk, '') AS actnRemk, ISNULL(CONVERT(char(10), targetDt, 103), '') AS targetDt FROM bkmRepoCatg a WITH (NOLOCK) LEFT JOIN dptDSRActvtDtl b WITH (NOLOCK) ON a.repoCatg = b.repoCatg AND docuNumb = @docuNumb AND b.createId = @loginId WHERE a.repoCatg IN ('01', '02', '03', '09','12','15','17','18','19') AND a.isActive = 'Y'";
            
            var parameters = new SqlParameter[]
            {
                new SqlParameter("@docuNumb", documentNumber),
                new SqlParameter("@loginId", loginId)
            };
            
            var result = ExecuteQuery(sql, parameters);
            
            var documentItems = new List<object>();
            foreach (DataRow row in result.Rows)
            {
                documentItems.Add(new
                {
                    RepoCatg = row["repoCatg"].ToString(),
                    RepoDesc = row["repoDesc"].ToString(),
                    ProdQnty = Convert.ToDecimal(row["prodQnty"]),
                    ProjQnty = Convert.ToDecimal(row["projQnty"]),
                    ActnRemk = row["actnRemk"].ToString(),
                    TargetDt = row["targetDt"].ToString()
                });
            }
            
            return Ok(documentItems);
        }

        // POST: api/Dsr/SaveDocument
        [HttpPost("SaveDocument")]
        public IActionResult SaveDocument([FromBody] DsrDocumentModel model)
        {
            try
            {
                // Generate document number if not provided
                if (string.IsNullOrEmpty(model.DocumentNumber))
                {
                    model.DocumentNumber = GenerateDocumentNumber(model.LoginId, model.DocumentDate);
                }

                // Begin transaction
                using (var connection = GetConnection())
                {
                    connection.Open();
                    using (var transaction = connection.BeginTransaction())
                    {
                        try
                        {
                            // Save header
                            string headerSql = @"INSERT INTO dptDSRActvt (docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, areaCode, cuRtType, createId, createDt, deptCode, geoLatit, geoLongt, dsrRem09, cstBisTy, cityName, district, pinCodeN, custCdRt, statFlag) 
                                           VALUES (@docuNumb, @docuDate, @dsrParam, @cusRtlFl, @cusRtlCd, @dsrRem01, @dsrRem02, @dsrRem03, @dsrRem04, @dsrRem05, @dsrRem06, @dsrRem07, @dsrRem08, @areaCode, @cuRtType, @createId, GETDATE(), @deptCode, @geoLatit, @geoLongt, @dsrRem09, @cstBisTy, @cityName, @district, @pinCodeN, @custCdRt, 'A')";

                            var headerParams = new SqlParameter[]
                            {
                                new SqlParameter("@docuNumb", model.DocumentNumber),
                                new SqlParameter("@docuDate", model.DocumentDate),
                                new SqlParameter("@dsrParam", model.DsrParam),
                                new SqlParameter("@cusRtlFl", model.CusRtlFl ?? (object)DBNull.Value),
                                new SqlParameter("@cusRtlCd", model.CusRtlCd ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem01", model.DsrRem01 ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem02", model.DsrRem02 ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem03", model.DsrRem03 ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem04", model.DsrRem04 ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem05", model.DsrRem05 ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem06", model.DsrRem06 ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem07", model.DsrRem07 ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem08", model.DsrRem08 ?? (object)DBNull.Value),
                                new SqlParameter("@areaCode", model.AreaCode ?? (object)DBNull.Value),
                                new SqlParameter("@cuRtType", model.CuRtType ?? (object)DBNull.Value),
                                new SqlParameter("@createId", model.LoginId),
                                new SqlParameter("@deptCode", model.DeptCode),
                                new SqlParameter("@geoLatit", model.GeoLatit ?? (object)DBNull.Value),
                                new SqlParameter("@geoLongt", model.GeoLongt ?? (object)DBNull.Value),
                                new SqlParameter("@dsrRem09", model.DsrRem09 ?? (object)DBNull.Value),
                                new SqlParameter("@cstBisTy", model.CstBisTy ?? (object)DBNull.Value),
                                new SqlParameter("@cityName", model.CityName ?? (object)DBNull.Value),
                                new SqlParameter("@district", model.District ?? (object)DBNull.Value),
                                new SqlParameter("@pinCodeN", model.PinCodeN ?? (object)DBNull.Value),
                                new SqlParameter("@custCdRt", model.CustCdRt ?? (object)DBNull.Value)
                            };

                            using (var command = new SqlCommand(headerSql, connection, transaction))
                            {
                                command.Parameters.AddRange(headerParams);
                                command.ExecuteNonQuery();
                            }

                            // Delete existing details if updating
                            if (model.ProcType == "U")
                            {
                                string deleteSql = "DELETE FROM dptDSRActvtDtl WHERE docuNumb = @docuNumb AND createId = @loginId";
                                var deleteParams = new SqlParameter[]
                                {
                                    new SqlParameter("@docuNumb", model.DocumentNumber),
                                    new SqlParameter("@loginId", model.LoginId)
                                };

                                using (var command = new SqlCommand(deleteSql, connection, transaction))
                                {
                                    command.Parameters.AddRange(deleteParams);
                                    command.ExecuteNonQuery();
                                }
                            }

                            // Save details
                            if (model.DocumentItems != null && model.DocumentItems.Count > 0)
                            {
                                foreach (var item in model.DocumentItems)
                                {
                                    string detailSql = @"INSERT INTO dptDSRActvtDtl (docuNumb, docuSrNo, repoCatg, repoDesc, prodQnty, projQnty, actnRemk, targetDt, createId, createDt, statFlag) 
                                                      VALUES (@docuNumb, @docuSrNo, @repoCatg, @repoDesc, @prodQnty, @projQnty, @actnRemk, @targetDt, @createId, GETDATE(), 'A')";

                                    var detailParams = new SqlParameter[]
                                    {
                                        new SqlParameter("@docuNumb", model.DocumentNumber),
                                        new SqlParameter("@docuSrNo", item.DocSrNo),
                                        new SqlParameter("@repoCatg", item.RepoCatg ?? (object)DBNull.Value),
                                        new SqlParameter("@repoDesc", item.RepoDesc ?? (object)DBNull.Value),
                                        new SqlParameter("@prodQnty", item.ProdQnty),
                                        new SqlParameter("@projQnty", item.ProjQnty),
                                        new SqlParameter("@actnRemk", item.ActnRemk ?? (object)DBNull.Value),
                                        new SqlParameter("@targetDt", string.IsNullOrEmpty(item.TargetDt) ? (object)DBNull.Value : DateTime.Parse(item.TargetDt)),
                                        new SqlParameter("@createId", model.LoginId)
                                    };

                                    using (var command = new SqlCommand(detailSql, connection, transaction))
                                    {
                                        command.Parameters.AddRange(detailParams);
                                        command.ExecuteNonQuery();
                                    }
                                }
                            }

                            // Commit transaction
                            transaction.Commit();

                            return Ok(new { DocumentNumber = model.DocumentNumber, Message = "Document saved successfully" });
                        }
                        catch (Exception)
                        {
                            // Rollback transaction on error
                            transaction.Rollback();
                            throw;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred while saving the document: {ex.Message}");
            }
        }

        // Helper method to generate document number
        private string GenerateDocumentNumber(string loginId, string documentDate)
        {
            // Format: DSR + YYYYMM + 3 digit sequence
            string datePart = DateTime.Parse(documentDate).ToString("yyyyMM");
            
            string sql = "SELECT ISNULL(MAX(CAST(SUBSTRING(docuNumb, 10, 3) AS INT)), 0) + 1 AS nextSeq FROM dptDSRActvt WHERE docuNumb LIKE 'DSR" + datePart + "%'";
            
            var result = ExecuteQuery(sql);
            
            int nextSeq = 1;
            if (result.Rows.Count > 0)
            {
                nextSeq = Convert.ToInt32(result.Rows[0]["nextSeq"]);
            }
            
            return "DSR" + datePart + nextSeq.ToString("000");
        }

        // GET: api/Dsr/CheckPermissions
        [HttpGet("CheckPermissions")]
        public IActionResult CheckPermissions(string loginId)
        {
            try
            {
                // Check DSR Entry Allowed
                string sql = @"SELECT COUNT(DISTINCT a.areaCode) AS msAreCnt, COUNT(DISTINCT b.areaCode) AS trAreCnt
                              FROM bkmAreaMast a WITH (NOLOCK) 
                              LEFT OUTER JOIN dptMktIntel b WITH (NOLOCK) ON a.areaCode = b.areaCode AND b.mnthYear = dbo.cofPrevMnYr(CONVERT(varchar(6), GETDATE(), 112), GETDATE())
                              WHERE a.retlArHd = @loginId AND a.areaCode NOT IN ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXT','EXR','KKR', 'KAT', 'DLC','PNY','BKM','HAM','JAG') AND a.isActive = 'Y' AND ISNULL(a.isOnlyDp,'N') <> 'Y'";

                var parameters = new SqlParameter[]
                {
                    new SqlParameter("@loginId", loginId)
                };

                var result = ExecuteQuery(sql, parameters);
                
                bool dsrEntAl = true;
                if (result.Rows.Count > 0)
                {
                    var row = result.Rows[0];
                    int msAreCnt = Convert.ToInt32(row["msAreCnt"]);
                    int trAreCnt = Convert.ToInt32(row["trAreCnt"]);
                    
                    if (msAreCnt > 0 && msAreCnt != trAreCnt)
                    {
                        dsrEntAl = false;
                    }
                }

                // Check DSR Stock Allowed
                sql = @"SELECT COUNT(DISTINCT a.areaCode) AS msAreCnt, COUNT(DISTINCT b.areaCode) AS trAreCnt
                        FROM bkmAreaMast a WITH (NOLOCK) 
                        LEFT OUTER JOIN (
                            SELECT DISTINCT a.mnthYear, b.areaCode
                            FROM dptStkTgtRc a WITH (NOLOCK), dpmCustomer b WITH (NOLOCK)
                            WHERE mnthYear = CONVERT(varchar(6), GETDATE(), 112) AND a.custCode = b.custCode AND a.repoCatg = '01'
                        ) b ON a.areaCode = b.areaCode AND b.mnthYear = CONVERT(varchar(6), GETDATE(), 112)
                        WHERE a.areaCode NOT IN ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXR','EXT','KKR','EXT', 'KAT', 'DLC','HAM','KGR','SHI','SGO','DHU','JAG')
                        AND a.retlArHd = @loginId AND a.areaCode NOT IN ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXR','EXT','KKR', 'KAT', 'DLC','PNY','BKM','HAM','JAG','HAM','KGR','SHI','SGO','DHU','JAG') 
                        AND a.isActive = 'Y' AND ISNULL(a.isOnlyDp,'N') <> 'Y'";

                result = ExecuteQuery(sql, parameters);
                
                bool dsrStkAl = true;
                if (result.Rows.Count > 0)
                {
                    var row = result.Rows[0];
                    int msAreCnt = Convert.ToInt32(row["msAreCnt"]);
                    int trAreCnt = Convert.ToInt32(row["trAreCnt"]);
                    
                    if (msAreCnt > 0 && msAreCnt != trAreCnt)
                    {
                        dsrStkAl = false;
                    }
                }

                // Check if second stock check is needed
                if (dsrStkAl)
                {
                    sql = @"SELECT COUNT(DISTINCT a.areaCode) AS msAreCnt, COUNT(DISTINCT b.areaCode) AS trAreCnt
                            FROM bkmAreaMast a WITH (NOLOCK) 
                            LEFT OUTER JOIN (
                                SELECT DISTINCT a.mnthYear, b.areaCode
                                FROM dptStkTgtRc a WITH (NOLOCK), dpmCustomer b WITH (NOLOCK)
                                WHERE mnthYear = CONVERT(varchar(6), GETDATE(), 112) AND a.custCode = b.custCode AND a.repoCatg = '02'
                            ) b ON a.areaCode = b.areaCode AND b.mnthYear = CONVERT(varchar(6), GETDATE(), 112)
                            WHERE a.areaCode NOT IN ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXR','EXT','KKR','EXT', 'KAT', 'DLC','HAM','KGR','SHI','SGO','DHU','JAG')
                            AND a.retlArHd = @loginId AND a.areaCode NOT IN ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXR','EXT','KKR', 'KAT', 'DLC','PNY','BKM','HAM','JAG','HAM','KGR','SHI','SGO','DHU','JAG') 
                            AND a.isActive = 'Y' AND ISNULL(a.isOnlyDp,'N') <> 'Y'";

                    result = ExecuteQuery(sql, parameters);
                    
                    if (result.Rows.Count > 0)
                    {
                        var row = result.Rows[0];
                        int msAreCnt = Convert.ToInt32(row["msAreCnt"]);
                        int trAreCnt = Convert.ToInt32(row["trAreCnt"]);
                        
                        if (msAreCnt > 0 && msAreCnt != trAreCnt)
                        {
                            dsrStkAl = false;
                        }
                    }
                }

                // Get zone code
                sql = "SELECT zoneCode FROM bkmAreaStZn WHERE areaCode = (SELECT areaCode FROM covLoginMas WHERE loginIdM = @loginId)";
                result = ExecuteQuery(sql, parameters);
                
                string zoneCode = "";
                if (result.Rows.Count > 0)
                {
                    zoneCode = result.Rows[0]["zoneCode"].ToString();
                }

                // Check retail target flag
                bool rtlTrgFl = false;
                if (zoneCode == "C")
                {
                    sql = @"SELECT SUM(mapedRtlCnt) AS ttlMpdRt, SUM(trgtEntCt) AS ttlMpdUq, SUM(cmt01) AS targtCmt, SUM(cmt02) AS targtPty, SUM(cmt03) AS targtVAP,
                            dbo.cofCalcPerc('normPerc', SUM(cmt01), SUM(mapedRtlCnt)) AS 'Cmt-%',
                            dbo.cofCalcPerc('normPerc', SUM(cmt02), SUM(mapedRtlCnt)) AS 'Puty-%',
                            dbo.cofCalcPerc('normPerc', SUM(cmt03), SUM(mapedRtlCnt)) AS 'Vap-%'
                            FROM (
                                SELECT b.loginIdM, b.emplName, COUNT(*) AS mapedRtlCnt, 0 AS trgtEntCt, 0 AS cmt01, 0 AS cmt02, 0 AS cmt03, 0 AS ttlCnt
                                FROM rtmRetailer a WITH (NOLOCK), prmEmployee b WITH (NOLOCK), bkmAreaStZn c WITH (NOLOCK)
                                WHERE a.concEmpl = b.loginIdM AND b.areaCode = c.areaCode AND a.isActive = 'Y' AND b.position <> 'EM05' AND b.isActive = 'Y' AND c.zoneCode = 'C' AND a.createDt < CONVERT(varchar(11), DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-1, 0), 113) AND b.loginIdM = @loginId
                                GROUP BY b.loginIdM, b.emplName
                                UNION ALL
                                SELECT b.loginIdM, b.emplName, 0, COUNT(DISTINCT a.retlCode) AS trgtEntCt, 
                                       SUM(CASE WHEN repoCatg = '01' THEN 1 ELSE 0 END) AS cmt01,
                                       SUM(CASE WHEN repoCatg = '02' THEN 1 ELSE 0 END) AS cmt02,
                                       SUM(CASE WHEN repoCatg = '03' THEN 1 ELSE 0 END) AS cmt03, COUNT(*) AS ttlCnt
                                FROM rtmRetailer a WITH (NOLOCK), prmEmployee b WITH (NOLOCK), bkmAreaStZn c WITH (NOLOCK), dptCusRtlTg d WITH (NOLOCK)
                                WHERE a.concEmpl = b.loginIdM AND b.areaCode = c.areaCode AND a.retlCode = d.cusRtlCd AND b.position <> 'EM05' AND d.cusRtlFl = 'R' AND d.mnthYear = CONVERT(varchar(6), getdate(), 112) AND d.statFlag NOT IN ('C','R') AND a.isActive = 'Y' AND b.isActive = 'Y' AND c.zoneCode = 'C' AND b.loginIdM = @loginId
                                GROUP BY b.loginIdM, b.emplName
                            ) x
                            WHERE x.loginIdM = @loginId AND x.loginIdM <> '2603'
                            GROUP BY loginIdM, emplName";

                    result = ExecuteQuery(sql, parameters);
                    
                    if (result.Rows.Count > 0)
                    {
                        var row = result.Rows[0];
                        int ttlMpdRt = Convert.ToInt32(row["ttlMpdRt"]);
                        double trgCmtPr = Convert.ToDouble(row["Cmt-%"]);
                        double trgPtyPr = Convert.ToDouble(row["Puty-%"]);
                        double trgVapPr = Convert.ToDouble(row["Vap-%"]);
                        
                        if (ttlMpdRt > 0 && (trgCmtPr < 100 || trgPtyPr < 100 || trgVapPr < 100))
                        {
                            dsrEntAl = false;
                            rtlTrgFl = true;
                        }
                    }
                }

                // Get area description
                sql = "SELECT AreaDesc FROM bkmAreaMast WITH (NOLOCK) WHERE retlArHd = @loginId AND isActive = 'Y' AND ISNULL(isOnlyDp,'N') <> 'Y'";
                result = ExecuteQuery(sql, parameters);
                
                string areaDesc = "";
                if (result.Rows.Count > 0)
                {
                    var areaDescList = new List<string>();
                    foreach (DataRow row in result.Rows)
                    {
                        areaDescList.Add(row["AreaDesc"].ToString());
                    }
                    areaDesc = string.Join(", ", areaDescList);
                }

                var permissions = new
                {
                    DsrEntAl = dsrEntAl,
                    DsrStkAl = dsrStkAl,
                    RtlTrgFl = rtlTrgFl,
                    AreaDesc = areaDesc
                };

                return Ok(permissions);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred while checking permissions: {ex.Message}");
            }
        }

        // GET: api/Dsr/MarketMappingData
        [HttpGet("MarketMappingData")]
        public IActionResult GetMarketMappingData(string customerCode)
        {
            try
            {
                string sql = @"SELECT TOP 2 a.repoCatg, repoDesc, a.prodQnty, a.projQnty, CONVERT(varchar(10), c.docuDate, 103) AS docuDate
                              FROM dptDSRActvtDtl a WITH (NOLOCK), bkmRepoCatg b WITH (NOLOCK), dptDSRActvt c WITH (NOLOCK)
                              WHERE a.repoCatg = b.repoCatg AND a.docuNumb = c.docuNumb AND a.repoCatg IN ('01', '02')
                              AND mrktData = '01' AND (prodQnty > 0 OR projQnty > 0) AND a.createId = @customerCode
                              ORDER BY a.createDt DESC";

                var parameters = new SqlParameter[]
                {
                    new SqlParameter("@customerCode", customerCode)
                };

                var result = ExecuteQuery(sql, parameters);
                
                var marketMappingData = new List<object>();
                foreach (DataRow row in result.Rows)
                {
                    marketMappingData.Add(new
                    {
                        RepoCatg = row["repoCatg"].ToString(),
                        RepoDesc = row["repoDesc"].ToString(),
                        ProdQnty = Convert.ToDecimal(row["prodQnty"]),
                        ProjQnty = Convert.ToDecimal(row["projQnty"]),
                        DocDate = row["docuDate"].ToString()
                    });
                }

                return Ok(marketMappingData);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred while fetching market mapping data: {ex.Message}");
            }
        }

        // GET: api/Dsr/SnopStatus
        [HttpGet("SnopStatus")]
        public IActionResult GetSnopStatus(string loginId)
        {
            try
            {
                string sql = @"SELECT 'SnOP', nwMtKgLt, COUNT(DISTINCT CASE WHEN noOfEntry > 0 THEN areaCode ELSE NULL END) AS entryCount, 
                              COUNT(DISTINCT areaCode) AS totalCount, 
                              CASE WHEN SUM(noOfEntry) > 0 THEN 'Done' ELSE 'Pending' END AS status
                              FROM (
                                  SELECT c.stLgcCod, c.retlStHd, a.areaCode, d.nwMtKgLt, COUNT(*) AS noOfEntry
                                  FROM dptAreaDemd a WITH (NOLOCK), bkmAreaMast b WITH (NOLOCK), bkmStateLgc c WITH (NOLOCK), bkmCatgPack d WITH (NOLOCK)
                                  WHERE a.areaCode = b.areaCode AND b.stLgcCod = c.stLgcCod AND a.mnthYear = dbo.cofNextYrMn(CONVERT(varchar(6), GETDATE(), 112))
                                  AND a.catPckCd = d.catPckCd AND a.statFlag NOT IN ('C','R')
                                  GROUP BY c.stLgcCod, c.retlStHd, a.areaCode, d.nwMtKgLt
                                  UNION ALL
                                  SELECT c.stLgcCod, c.retlStHd, b.areaCode, d.nwMtKgLt, 0
                                  FROM bkmAreaMast b WITH (NOLOCK), bkmStateLgc c WITH (NOLOCK), bkmCatgPack d WITH (NOLOCK)
                                  WHERE b.stLgcCod = c.stLgcCod AND d.isActive = 'Y' AND b.isActive = 'Y' 
                                  AND b.areaCode NOT IN ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXT','EXR','KKR', 'KAT', 'DLC','PNY','BKM','NAT','KAT','JPF')
                                  AND d.prodCdDs IS NOT NULL
                                  GROUP BY c.stLgcCod, c.retlStHd, b.areaCode, d.nwMtKgLt
                              ) x
                              WHERE retlStHd = @loginId AND DAY(GETDATE()) >= 19
                              GROUP BY stLgcCod, nwMtKgLt";

                var parameters = new SqlParameter[]
                {
                    new SqlParameter("@loginId", loginId)
                };

                var result = ExecuteQuery(sql, parameters);
                
                var snopStatusList = new List<object>();
                foreach (DataRow row in result.Rows)
                {
                    snopStatusList.Add(new
                    {
                        Type = row["SnOP"].ToString(),
                        Unit = row["nwMtKgLt"].ToString(),
                        EntryCount = Convert.ToInt32(row["entryCount"]),
                        TotalCount = Convert.ToInt32(row["totalCount"]),
                        Status = row["status"].ToString()
                    });
                }

                return Ok(snopStatusList);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"An error occurred while fetching SnOP status: {ex.Message}");
            }
        }
    }

    // Model classes
    public class DocumentDateModel
    {
        public string LoginId { get; set; }
        public string DocumentDate { get; set; }
    }

    public class DsrDocumentModel
    {
        public string ProcType { get; set; } // A for Add, U for Update
        public string DocumentNumber { get; set; }
        public string DocumentDate { get; set; }
        public string DsrParam { get; set; }
        public string CusRtlFl { get; set; }
        public string CusRtlCd { get; set; }
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
        public string AreaCode { get; set; }
        public string CuRtType { get; set; }
        public string LoginId { get; set; }
        public string DeptCode { get; set; }
        public string GeoLatit { get; set; }
        public string GeoLongt { get; set; }
        public string DsrRem09 { get; set; }
        public string CstBisTy { get; set; }
        public string CityName { get; set; }
        public string District { get; set; }
        public string PinCodeN { get; set; }
        public string CustCdRt { get; set; }
        public List<DsrDocumentItemModel> DocumentItems { get; set; }
    }

    public class DsrDocumentItemModel
    {
        public int DocSrNo { get; set; }
        public string RepoCatg { get; set; }
        public string RepoDesc { get; set; }
        public decimal ProdQnty { get; set; }
        public decimal ProjQnty { get; set; }
        public string ActnRemk { get; set; }
        public string TargetDt { get; set; }
    }
}
