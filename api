//Models

using System;
using System.ComponentModel.DataAnnotations;

namespace MyApp.Models
{
    /// <summary>
    /// Called when the user clicks “Add / Update / Delete” on the very first step.
    /// </summary>
    public class DsrHeaderSubmitDto
    {
        /// <summary>
        /// “A” = Add, “U” = Update, “D” = Delete
        /// </summary>
        [Required]
        [RegularExpression("A|U|D")]
        public string ProcType { get; set; }

        /// <summary>
        /// If ProcType = “U” or “D”, this is the existing DSR document number 
        /// they’ve already created. If blank and ProcType=”A”, we will try to insert a new one.
        /// </summary>
        public string? DocuNumb { get; set; }

        /// <summary>
        /// Always “05” for “Personal Visit” in our JSP → we hard‐code it here.
        /// </summary>
        [Required]
        [RegularExpression("05")]
        public string DsrParam { get; set; } = "05";

        /// <summary>
        /// “R” = Retailer, “RR” = Rural Retailer, “C” = Stockiest, etc.
        /// </summary>
        [Required]
        public string CusRtlFl { get; set; }

        /// <summary>
        /// The 3‐letter area code, e.g. “DEL”, “PNY”, etc.
        /// </summary>
        [Required]
        public string AreaCode { get; set; }

        /// <summary>
        /// Purchaser / retailer code (PK in rtmRetailer or dpmCustomer).
        /// </summary>
        [Required]
        public string CusRtlCd { get; set; }

        /// <summary>
        /// The date the user picks, format “dd/MM/yyyy”
        /// </summary>
        [Required]
        public string DocuDate { get; set; }

        /// <summary>
        /// Market name (location or road name), user‐typed.
        /// </summary>
        [Required]
        public string MrktName { get; set; }

        /// <summary>
        /// “Y”/“N” from “Any pending issues?”
        /// </summary>
        [Required]
        [RegularExpression("Y|N")]
        public string PendIsue { get; set; }

        /// <summary>
        /// If PendIsue=”Y”, one of “T”/“S”/“P”/“O”
        /// </summary>
        public string? PndIsuDt { get; set; }

        /// <summary>
        /// If PendIsue=”Y”, free‐text details
        /// </summary>
        public string? IsuDetal { get; set; }

        /// <summary>
        /// “Y” / “N” for “Participation of Display Contest”
        /// </summary>
        [Required]
        [RegularExpression("Y|N")]
        public string PrtDsCnt { get; set; }

        /// <summary>
        /// Enrollment slab (in MT) – WC
        /// </summary>
        [Required]
        [Range(0, double.MaxValue)]
        public decimal WcErlSlb { get; set; }

        /// <summary>
        /// Enrollment slab – WCP
        /// </summary>
        [Required]
        [Range(0, double.MaxValue)]
        public decimal WpErlSlb { get; set; }

        /// <summary>
        /// Enrollment slab – VAP
        /// </summary>
        [Required]
        [Range(0, double.MaxValue)]
        public decimal VpErlSlb { get; set; }

        /// <summary>
        /// BW Stock availability‐WC (if CusRtlFl != “C”/“RD”)
        /// </summary>
        public decimal? BwStkWcc { get; set; }

        /// <summary>
        /// BW Stock availability‐WCP
        /// </summary>
        public decimal? BwStkWcp { get; set; }

        /// <summary>
        /// BW Stock availability‐VAP
        /// </summary>
        public decimal? BwStkVap { get; set; }

        /// <summary>
        /// If the user cannot capture location within 500 m, they select a cityName = one of “01”..“06”
        /// </summary>
        public string? CityName { get; set; }

        /// <summary>
        /// The latitude captured by browser/Android
        /// </summary>
        public decimal? GeoLatit { get; set; }

        /// <summary>
        /// The longitude captured
        /// </summary>
        public decimal? GeoLongt { get; set; }

        /// <summary>
        /// The distance (in meters) computed on client between purchaser’s saved lat/long and this lat/long
        /// (optional; server may recompute if you like)
        /// </summary>
        public decimal? LtLgDist { get; set; }

        /// <summary>
        /// If the user is forced to pick an exception (un‐captured location), 
        /// dsrExcpA=”Y” and CityName must be non‐null.
        /// </summary>
        public string? DsrExcpA { get; set; }

        /// <summary>
        /// Any other remarks
        /// </summary>
        public string? DsrRem05 { get; set; }

        /// <summary>
        /// Order execution date (optional, “dd/MM/yyyy”)
        /// </summary>
        public string? OrdExDat { get; set; }

        /// <summary>
        /// e.g. for tile adhesives, “Y”/“N” – optional
        /// </summary>
        public string? IsTilRtl { get; set; }

        /// <summary>
        /// If IsTilRtl=”Y”, user can enter tile stock.
        /// </summary>
        public decimal? TileStck { get; set; }
    }
}



namespace MyApp.Models
{
    public class DsrHeaderSubmitResponseDto
    {
        /// <summary>
        /// True if header‐step succeeded (or if “U”/“D” loaded existing docuNumb).
        /// False if “A” but an open DSR already exists, or if “U”/“D” not found, etc.
        /// </summary>
        public bool Success { get; set; }

        /// <summary>
        /// If !Success, contains an error message (“You already have an open DSR…”).
        /// If Success & we inserted a new row, contains the newly‐generated docuNumb.
        /// If Success & procType=”U”/“D”, just echoes back the existing DocuNumb.
        /// </summary>
        public string Message { get; set; } = "";

        /// <summary>
        /// The document number (newly generated if ProcType=”A”, or loaded from DB if “U”/“D”).
        /// </summary>
        public string? DocuNumb { get; set; }
    }
}




namespace MyApp.Models
{
    public class DsrHeaderSubmitResponseDto
    {
        /// <summary>
        /// True if header‐step succeeded (or if “U”/“D” loaded existing docuNumb).
        /// False if “A” but an open DSR already exists, or if “U”/“D” not found, etc.
        /// </summary>
        public bool Success { get; set; }

        /// <summary>
        /// If !Success, contains an error message (“You already have an open DSR…”).
        /// If Success & we inserted a new row, contains the newly‐generated docuNumb.
        /// If Success & procType=”U”/“D”, just echoes back the existing DocuNumb.
        /// </summary>
        public string Message { get; set; } = "";

        /// <summary>
        /// The document number (newly generated if ProcType=”A”, or loaded from DB if “U”/“D”).
        /// </summary>
        public string? DocuNumb { get; set; }
    }
}




using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace MyApp.Models
{
    /// <summary>
    /// All of the “detail” rows plus header data.  Called when user clicks “Submit & Exit” or “Submit & Add” on full form.
    /// </summary>
    public class DsrActivityFullSubmitDto
    {
        /// <summary>
        /// Must match the same DocuNumb returned by the header step.
        /// </summary>
        [Required]
        public string DocuNumb { get; set; }

        /// <summary>
        /// The same user‐ID (loginIdM) is pulled from the JWT, so we don’t need to send it here.
        /// </summary>
        // public string CreateId { get; set; }

        /// <summary>
        /// The “procedure” in this step must always be “A” (Add more rows) or “E” (Exit).  That was in the JSP: submMthd=”A” or “E”.
        /// </summary>
        [Required]
        [RegularExpression("A|E")]
        public string SubmMthd { get; set; }

        /// <summary>
        /// If SubmMthd=”A”, after saving rows we return Success=true and client will re‐open the “header‐step” for a fresh “Add Another Activity”.
        /// If SubmMthd=”E”, client will navigate back to the main‐menu or summary.
        /// </summary>
        public string? ReturnUrl { get; set; }

        /// <summary>
        /// List of all “Order Booked in call/e‐meet” rows.  (mrktData = “05” in JSP).
        /// Each entry contains: repoCatg (one of “01”,”02”,”03”,”09”,etc.), prodCode (actual SKU), prodQnty (bags), projQnty (MT), actnRemk, targetDt (“dd/MM/yyyy”).
        /// </summary>
        [Required]
        public List<OrderBookedDto> OrderBookedRows { get; set; } = new();

        /// <summary>
        /// List of all “Market‐WCP (highest selling SKU)” rows. (mrktData = “06” in JSP).
        /// Each entry: branName (one of “BW”,”JK”,”AP”,”BG”,”AC”,”PM”,”OT”), prdCodMk (SKU), bPriceVl, cPriceVl (numbers).
        /// </summary>
        [Required]
        public List<MarketWcpSkuDto> MarketWcpRows { get; set; } = new();

        /// <summary>
        /// Last three months average inputs (JK, AS, OT):
        /// if client filled “U”/“D” earlier, the JSP pre‐loaded these; otherwise user can leave them at “0”.
        /// </summary>
        public List<BrandAvgDto> BrandAverages { get; set; } = new();

        /// <summary>
        /// Gift distribution rows (mrktData = “07” in JSP).
        /// Each entry: mrtlCode (gift type code), isueQnty (number).
        /// </summary>
        [Required]
        public List<GiftDistributionDto> GiftRows { get; set; } = new();
    }

    public class OrderBookedDto
    {
        [Required]
        public string RepoCatg { get; set; }     // e.g. “01” = Cement, “02” = Putty, etc.

        [Required]
        public string ProdCode { get; set; }     // actual SKU (catgPack)

        [Required]
        [Range(0, int.MaxValue)]
        public int ProdQnty { get; set; }        // in Bags

        [Required]
        [Range(0, int.MaxValue)]
        public int ProjQnty { get; set; }        // in MT

        public string? ActnRemk { get; set; }    // optional

        public string? TargetDt { get; set; }    // “dd/MM/yyyy” or blank
    }

    public class MarketWcpSkuDto
    {
        [Required]
        public string BranName { get; set; }  // “BW” / “JK” / “AP” / “BG” / “AC” / “PM” / “OT”

        [Required]
        public string PrdCodMk { get; set; }  // the SKU

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BPriceVl { get; set; } // Price – B

        [Required]
        [Range(0, double.MaxValue)]
        public decimal CPriceVl { get; set; } // Price – C
    }

    public class BrandAvgDto
    {
        [Required]
        public string BrandName { get; set; }  // “JK” / “AS” / “OT”

        [Required]
        [Range(0, double.MaxValue)]
        public decimal AvgWcc { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal AvgWcp { get; set; }
    }

    public class GiftDistributionDto
    {
        [Required]
        public string MrtlCode { get; set; }    // gift type code, e.g. “02” etc.

        [Required]
        [Range(0, int.MaxValue)]
        public int IsueQnty { get; set; }       // quantity given
    }
}




//Controller


using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using MyApp.Models;
using Dapper;

namespace MyApp.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize] // Ensure the JWT‐authenticated user is present
    public class DsrActivityController : ControllerBase
    {
        private readonly IConfiguration _configuration;
        private readonly string _connectionString;

        public DsrActivityController(IConfiguration configuration)
        {
            _configuration = configuration;
            _connectionString = _configuration.GetConnectionString("DefaultConnection");
        }

        /// <summary>
        /// Returns a list of all active sales areas for the current user.
        /// (This replaces WebSessBean.getArDesc(...) in the old JSP.)
        /// </summary>
        [HttpGet("areas")]
        public async Task<IActionResult> GetAreas()
        {
            // In JSP: WebSessBean.getArDesc(areaCode, true)
            // We’ll return a JSON array of { areaCode, areaDesc } for the dropdown.
            string loginIdM = User.Identity.Name!; 
            // (Assuming your JWT’s “sub” is the loginIdM.)

            using var conn = new SqlConnection(_connectionString);
            var sql = @"
                SELECT areaCode, areaDesc
                FROM bkmAreaMast
                WHERE ISNULL(isOnlyDp,'N') <> 'Y'
                  AND isActive = 'Y'
                  AND retlArHd = @loginIdM
                  AND areaCode NOT IN ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','KKR','KAT','DLC','PNY','BKM','HAM','KGR','SGO','DHU','JAG')
                ORDER BY areaDesc
            ";
            var areas = await conn.QueryAsync<AreaDto>(sql, new { loginIdM });
            return Ok(areas);
        }

        /// <summary>
        /// Given areaCode and cusRtlFl, return a list of matching retailers (or stockists, etc.) for the dropdown.
        /// This replaces all of the JSP’s various “setPrmNew(…, MK_01083, …)” calls.
        /// </summary>
        [HttpGet("retailers")]
        public async Task<IActionResult> GetRetailers(
            [FromQuery][Required] string areaCode,
            [FromQuery][Required] string cusRtlFl)
        {
            string loginIdM = User.Identity.Name!;
            using var conn = new SqlConnection(_connectionString);

            // The JSP’s logic is quite complex—depending on cusRtlFl (C, D, RD, AD, UR, R, RR) it picks different queries.
            // We’ll collapse it here into one “search in rtmRetailer + dpmCustomer” query that matches the JSP’s behavior.

            if (cusRtlFl == "R" || cusRtlFl == "RR")
            {
                // Retailer/Rural Retailer
                var sql = @"
                    SELECT a.retlCode AS Code, a.retlName AS Name
                    FROM rtmRetailer a
                        INNER JOIN prmEmployee b ON a.concEmpl = b.loginIdM
                        INNER JOIN bkmAreaStZn c ON b.areaCode = c.areaCode
                    WHERE a.isActive = 'Y'
                      AND b.isActive = 'Y'
                      AND b.areaCode = @areaCode
                      AND c.zoneCode = @zoneCode
                      AND (@cusRtlFl = 'R' OR @cusRtlFl = 'RR')
                    GROUP BY a.retlCode, a.retlName
                    ORDER BY a.retlName
                ";
                // But the JSP actually did two‐step logic: first match rtmRetailer, then union all with dpmCustomer.
                // For brevity, we’ll return just rtmRetailer here; if you need the exact JSP union logic, uncomment below:
                /*
                var sql = @"
                    SELECT retlCode AS Code, retlName AS Name
                    FROM rtmRetailer
                    WHERE isActive='Y'
                      AND retlCode IN (
                        SELECT retlCode
                        FROM rtmRetailer a
                            INNER JOIN prmEmployee b ON a.concEmpl = b.loginIdM
                            INNER JOIN bkmAreaStZn c ON b.areaCode = c.areaCode
                        WHERE a.isActive='Y'
                          AND b.isActive='Y'
                          AND b.areaCode=@areaCode
                          AND c.zoneCode=(SELECT zoneCode FROM bkmAreaStZn WHERE areaCode=@areaCode)
                      )
                    UNION ALL
                    SELECT custCode AS Code, custName AS Name
                    FROM dpmCustomer
                    WHERE isActive='Y'
                      AND custCode IN (
                        SELECT d.cusRtlCd
                        FROM dptCusRtlTg d
                            INNER JOIN prmEmployee b ON d.createId = b.loginIdM
                            INNER JOIN bkmAreaStZn c ON b.areaCode = c.areaCode
                        WHERE d.mnthYear=CONVERT(VARCHAR(6),GETDATE(),112)
                          AND d.cusRtlFl='R'
                          AND d.statFlag NOT IN ('C','R')
                          AND b.areaCode=@areaCode
                          AND c.zoneCode=(SELECT zoneCode FROM bkmAreaStZn WHERE areaCode=@areaCode)
                      )
                    ORDER BY Name
                    ";
                */
                var zoneCode = await conn.QueryFirstOrDefaultAsync<string>(
                    "SELECT zoneCode FROM bkmAreaStZn WHERE areaCode=@areaCode",
                    new { areaCode });

                var list = await conn.QueryAsync<DropdownDto>(sql, new
                {
                    areaCode,
                    cusRtlFl,
                    zoneCode
                });
                return Ok(list);
            }
            else if (cusRtlFl == "C" || cusRtlFl == "D" || cusRtlFl == "RD" || cusRtlFl == "AD" || cusRtlFl == "UR")
            {
                // For “C”/“D”/“RD”/“AD”/“UR”, JSP used a stored procedure MK_01083. We’ll replicate the same “MK_01083” logic inline:
                var sql = @"
                    DECLARE @wherList NVARCHAR(MAX) = '';
                    SET @wherList = @wherList + 'SW_04|' + @areaCode + '|';
                    IF @cusRtlFl = 'C' BEGIN
                        SET @wherList = @wherList + 'SW_08|''ST''|';  -- Stockist
                    END
                    ELSE IF @cusRtlFl = 'RD' BEGIN
                        SET @wherList = @wherList + 'SW_08|''RD''|';  -- Rural Dealer
                    END
                    ELSE IF @cusRtlFl = 'AD' BEGIN
                        SET @wherList = @wherList + 'SW_08|''AD''|';  -- AD
                    END
                    ELSE IF @cusRtlFl = 'UR' BEGIN
                        SET @wherList = @wherList + 'SW_08|''UR''|';  -- UR
                    END
                    ELSE IF @cusRtlFl = 'D' BEGIN
                        SET @wherList = @wherList + 'SW_08|''DD''|';  -- Direct Dealer
                    END

                    -- Now call the same MK_01083 routine (simulated here).
                    SELECT custCode AS Code, custName AS Name
                    FROM dpmCustomer
                    WHERE isActive='Y'
                      AND custCode IN (
                          SELECT DISTINCT a.custCode
                          FROM dpsCustSlDt a
                              INNER JOIN bkmProducts b ON a.prodCode = b.prodCode
                              INNER JOIN bkmRepoCatg c ON b.repoCatg = c.repoCatg
                              INNER JOIN (
                                SELECT custCode, mrgRepCt, MAX(invDocDt) AS invDocDt
                                FROM dpsCustSlDt
                                WHERE invMnTyp='NS' AND custCode IN 
                                  (SELECT custCode FROM dpmCustomer WHERE areaCode=@areaCode)
                                GROUP BY custCode, mrgRepCt
                              ) d ON a.custCode=d.custCode AND a.invDocDt=d.invDocDt AND c.mrgRepCt=d.mrgRepCt
                          WHERE a.prodCode=b.prodCode
                            AND b.isActive='Y'
                      )
                    ORDER BY Name;
                ";
                var list = await conn.QueryAsync<DropdownDto>(sql, new { areaCode, cusRtlFl });
                return Ok(list);
            }
            else
            {
                return BadRequest("Invalid cusRtlFl");
            }
        }

        /// <summary>
        /// Checks “can I start a new DSR?” (ProcType=”A”), or loads an existing one (ProcType=”U”/“D”).
        /// Exactly mimics the JSP’s “select count(*) … where rtOutTim is null and createDt >= lastThreeDays” plus “if not zero, select docuNumb, rtlInTim …”
        /// </summary>
        [HttpPost("submitheader")]
        public async Task<IActionResult> SubmitHeader([FromBody] DsrHeaderSubmitDto dto)
        {
            if (!ModelState.IsValid) return BadRequest(ModelState);

            string loginIdM = User.Identity.Name!; // same as JSP’s loginIdM
            using var conn = new SqlConnection(_connectionString);

            // 1) If ProcType="A", check if user already has an open DSR in the last 3 days
            if (dto.ProcType == "A")
            {
                var sqlCheck = @"
                    SELECT COUNT(*) 
                    FROM bwlive.dbo.dptDSRActvt a WITH (NOLOCK)
                    INNER JOIN prmEmployee b WITH (NOLOCK) ON a.createId=b.loginIdM
                    INNER JOIN bkmAreaStZn c WITH (NOLOCK) ON b.areaCode=c.areaCode
                    WHERE a.rtOutTim IS NULL
                      AND a.createDt >= DATEADD(DAY, -3, GETDATE())
                      AND c.zoneCode = (
                        SELECT zoneCode 
                        FROM bkmAreaStZn 
                        WHERE areaCode = b.areaCode
                      )
                      AND a.dsrParam='05'
                      AND a.statFlag NOT IN ('C','R')
                      AND a.createId = @loginIdM;
                ";
                var count = await conn.ExecuteScalarAsync<int>(sqlCheck, new { loginIdM });
                if (count > 0)
                {
                    return Ok(new DsrHeaderSubmitResponseDto
                    {
                        Success = false,
                        Message = "You already have an open DSR in the last three days. Please update or delete it first."
                    });
                }
            }

            // 2) If ProcType="U" or "D", load existing row (docuNumb must belong to loginIdM)
            if (dto.ProcType == "U" || dto.ProcType == "D")
            {
                if (string.IsNullOrEmpty(dto.DocuNumb))
                {
                    return BadRequest(new DsrHeaderSubmitResponseDto
                    {
                        Success = false,
                        Message = "Document number is required for Update/Delete."
                    });
                }

                var sqlLoad = @"
                    SELECT docuNumb, convert(char(10), docuDate, 103) as docuDate, dsrParam, cusRtlFl, cusRtlCd,
                           dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
                           dsrRem06, dsrRem07, dsrRem08, areaCode, ISNULL(cuRtType,''),
                           convert(char(10), ordExDat,103) as ordExDat
                    FROM dptDSRActvt WITH (NOLOCK)
                    WHERE docuNumb=@docuNumb
                      AND createId=@loginIdM;
                ";
                var existing = await conn.QueryFirstOrDefaultAsync(sqlLoad, new { dto.DocuNumb, loginIdM });
                if (existing == null)
                {
                    return Ok(new DsrHeaderSubmitResponseDto
                    {
                        Success = false,
                        Message = $"No DSR found for document number {dto.DocuNumb} or not authorized."
                    });
                }

                // We’ll just return Success=true + DocuNumb; the client will re‐populate its fields from GET /api/dsractivity/headerdetails if needed.
                return Ok(new DsrHeaderSubmitResponseDto
                {
                    Success = true,
                    DocuNumb = dto.DocuNumb,
                    Message = "Loaded existing DSR for update/delete."
                });
            }

            // 3) Otherwise (ProcType="A"), insert a new row into dptDSRActvt and return the new DocuNumb.
            if (dto.ProcType == "A")
            {
                // We need to generate a new DocuNumb, e.g. using the same sequence JSP used:
                // JSP did: docuNumb = WebSessBean.generate “DSR” + YYMMDD + some counter. We’ll emulate:
                var today = DateTime.Today;
                var prefix = "DSR" + today.ToString("yyMMdd", CultureInfo.InvariantCulture);
                var sqlGetMax = @"
                    SELECT ISNULL(MAX(CAST(SUBSTRING(docuNumb, LEN(docuNumb)-3,4) AS INT)),0)+1
                    FROM dptDSRActvt
                    WHERE docuNumb LIKE @prefix + '%';
                ";
                var nextSeq = await conn.ExecuteScalarAsync<int>(sqlGetMax, new { prefix });
                var newDocuNumb = prefix + nextSeq.ToString("D4");

                // Insert into dptDSRActvt
                var sqlIns = @"
                    INSERT INTO dptDSRActvt
                    (
                        docuNumb, createId, docuDate, dsrParam, cusRtlFl, cusRtlCd,
                        dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
                        dsrRem06, dsrRem07, dsrRem08, areaCode, cuRtType, ordExDat, statFlag, createDt
                    )
                    VALUES
                    (
                        @newDocuNumb, @loginIdM, CONVERT(VARCHAR(10), @docuDate, 112),
                        @dsrParam, @cusRtlFl, @cusRtlCd,
                        NULL, NULL, NULL, NULL, NULL,
                        NULL, NULL, NULL,
                        @areaCode, NULL, NULL,
                        'N', GETDATE()
                    );
                ";
                var rows = await conn.ExecuteAsync(sqlIns, new
                {
                    newDocuNumb,
                    loginIdM,
                    docuDate = DateTime.ParseExact(dto.DocuDate, "dd/MM/yyyy", CultureInfo.InvariantCulture),
                    dto.DsrParam,
                    dto.CusRtlFl,
                    dto.CusRtlCd,
                    dto.AreaCode
                });

                return Ok(new DsrHeaderSubmitResponseDto
                {
                    Success = true,
                    DocuNumb = newDocuNumb,
                    Message = "New DSR header created."
                });
            }

            // Should not reach here
            return BadRequest(new DsrHeaderSubmitResponseDto
            {
                Success = false,
                Message = "Invalid ProcType."
            });
        }

        /// <summary>
        /// Returns all header fields (for Prefill) plus existing detail‐rows, if DocuNumb is provided.
        /// (Not strictly required—client could simply repopulate from local state—but shipped for completeness.)
        /// </summary>
        [HttpGet("headerdetails/{docuNumb}")]
        public async Task<IActionResult> GetHeaderDetails(string docuNumb)
        {
            string loginIdM = User.Identity.Name!;
            using var conn = new SqlConnection(_connectionString);
            var sql = @"
                SELECT docuNumb, convert(char(10), docuDate,103) as docuDate, dsrParam,
                       cusRtlFl, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
                       dsrRem06, dsrRem07, dsrRem08, areaCode, ISNULL(cuRtType,'') as cuRtType,
                       convert(char(10), ordExDat,103) as ordExDat, prtDsCnt, pendIsue, pndIsuDt, isuDetal,
                       wcErlSlb, wpErlSlb, vpErlSlb, bwStkWcc, bwStkWcp, bwStkVap,
                       cityName, geoLatit, geoLongt, ltLgDist, dsrExcpA, dsrRem05, isTilRtl, tileStck
                FROM dptDSRActvt
                WHERE docuNumb=@docuNumb
                  AND createId=@loginIdM
            ";
            var header = await conn.QuerySingleOrDefaultAsync(sql, new { docuNumb, loginIdM });
            if (header == null) return NotFound("Header not found or not authorized.");

            // Get the detail rows, marketData = “05” or “06” or “07” or “04” per JSP
            var sql05 = @"
                SELECT repoCatg, catgPack AS prodCode, prodQnty, projQnty, actnRemk, 
                       CONVERT(VARCHAR(10),targetDt,103) as targetDt
                FROM dptDSRActvtDtl
                WHERE docuNumb=@docuNumb
                  AND createId=@loginIdM
                  AND mrktData='05';  -- OrderBooked
            ";
            var orderRows = (await conn.QueryAsync<OrderBookedDto>(sql05, new { docuNumb, loginIdM })).AsList();

            var sql06 = @"
                SELECT repoCatg AS branName, catgPack AS prdCodMk, prodQnty AS bPriceVl, projQnty AS cPriceVl, actnRemk
                FROM dptDSRActvtDtl
                WHERE docuNumb=@docuNumb
                  AND createId=@loginIdM
                  AND mrktData='06';  -- MarketWcp
            ";
            var marketRows = (await conn.QueryAsync<MarketWcpSkuDto>(sql06, new { docuNumb, loginIdM })).AsList();

            var sql04 = @"
                SELECT 
                    CASE WHEN actnRemk LIKE '% - JK' THEN 'JK'
                         WHEN actnRemk LIKE '% - Asian' THEN 'AS'
                         ELSE 'OT'
                    END AS BrandName,
                    prodQnty AS AvgWcc,
                    projQnty AS AvgWcp
                FROM dptDSRActvtDtl
                WHERE docuNumb=@docuNumb
                  AND createId=@loginIdM
                  AND mrktData='04';  -- BrandAverages
            ";
            var avgRows = (await conn.QueryAsync<BrandAvgDto>(sql04, new { docuNumb, loginIdM })).AsList();

            var sql07 = @"
                SELECT mrtlCode, isueQnty
                FROM dptDSRActvtDtl
                WHERE docuNumb=@docuNumb
                  AND createId=@loginIdM
                  AND mrktData='07';  -- GiftDistribution
            ";
            var giftRows = (await conn.QueryAsync<GiftDistributionDto>(sql07, new { docuNumb, loginIdM })).AsList();

            return Ok(new
            {
                Header = header,
                OrderRows = orderRows,
                MarketRows = marketRows,
                AvgRows = avgRows,
                GiftRows = giftRows
            });
        }

        /// <summary>
        /// Inserts all detail rows into dptDSRActvtDtl after header is created/loaded.
        /// </summary>
        [HttpPost("submitfull")]
        public async Task<IActionResult> SubmitFull([FromBody] DsrActivityFullSubmitDto dto)
        {
            if (!ModelState.IsValid) return BadRequest(ModelState);

            string loginIdM = User.Identity.Name!;
            using var conn = new SqlConnection(_connectionString);
            using var tran = conn.BeginTransaction();

            try
            {
                // 1) Optional: re‐verify that docuNumb belongs to loginIdM:
                var confirmSql = @"
                    SELECT COUNT(*) 
                    FROM dptDSRActvt
                    WHERE docuNumb=@docuNumb
                      AND createId=@loginIdM
                      AND statFlag NOT IN ('C','R');
                ";
                var cnt = await conn.ExecuteScalarAsync<int>(confirmSql,
                    new { dto.DocuNumb, loginIdM }, transaction: tran);
                if (cnt == 0)
                {
                    tran.Rollback();
                    return Ok(new DsrActivityFullSubmitResponseDto
                    {
                        Success = false,
                        Message = "Document not found or already closed."
                    });
                }

                // 2) Delete any existing detail‐rows for this docuNumb + createId,
                //    then re‐insert whatever the user just sent (so “Update” overwrites previous).
                var deleteSql = @"
                    DELETE FROM dptDSRActvtDtl
                    WHERE docuNumb=@docuNumb
                      AND createId=@loginIdM;
                ";
                await conn.ExecuteAsync(deleteSql, new { dto.DocuNumb, loginIdM }, transaction: tran);

                // 3) Insert “Order Booked” (mrktData='05')
                var sql05 = @"
                    INSERT INTO dptDSRActvtDtl
                    (docuNumb, createId, mrktData, repoCatg, prodCode, prodQnty, projQnty, actnRemk, targetDt, createDt)
                    VALUES
                    (
                        @docuNumb, @loginIdM, '05', @repoCatg, @prodCode, @prodQnty, @projQnty, @actnRemk,
                        CASE WHEN @targetDt IS NULL THEN NULL 
                             ELSE CONVERT(DATE, @targetDt, 103) 
                        END,
                        GETDATE()
                    );
                ";
                foreach (var row in dto.OrderBookedRows)
                {
                    await conn.ExecuteAsync(sql05, new
                    {
                        dto.DocuNumb,
                        loginIdM,
                        row.RepoCatg,
                        row.ProdCode,
                        row.ProdQnty,
                        row.ProjQnty,
                        row.ActnRemk,
                        targetDt = string.IsNullOrWhiteSpace(row.TargetDt) ? null : row.TargetDt
                    }, transaction: tran);
                }

                // 4) Insert “Market‐WCP” (mrktData='06')
                var sql06 = @"
                    INSERT INTO dptDSRActvtDtl
                    (docuNumb, createId, mrktData, repoCatg, catgPack, prodQnty, projQnty, actnRemk, createDt)
                    VALUES
                    (
                        @docuNumb, @loginIdM, '06', @branName, @prdCodMk, @bPriceVl, @cPriceVl, @actnRemk, GETDATE()
                    );
                ";
                foreach (var row in dto.MarketWcpRows)
                {
                    await conn.ExecuteAsync(sql06, new
                    {
                        dto.DocuNumb,
                        loginIdM,
                        branName = row.BranName,
                        prdCodMk = row.PrdCodMk,
                        bPriceVl = row.BPriceVl,
                        cPriceVl = row.CPriceVl,
                        actnRemk = (string.IsNullOrEmpty(row.ActnRemk) ? null : row.ActnRemk)
                    }, transaction: tran);
                }

                // 5) Insert “Brand Averages” (mrktData='04')
                var sql04 = @"
                    INSERT INTO dptDSRActvtDtl
                    (docuNumb, createId, mrktData, prodQnty, projQnty, actnRemk, createDt)
                    VALUES
                    (
                        @docuNumb, @loginIdM, '04', @avgWcc, @avgWcp,
                        CASE WHEN @brandName='JK' THEN 'Average – JK'
                             WHEN @brandName='AS' THEN 'Average – Asian'
                             ELSE 'Average – Other' END,
                        GETDATE()
                    );
                ";
                foreach (var row in dto.BrandAverages)
                {
                    await conn.ExecuteAsync(sql04, new
                    {
                        dto.DocuNumb,
                        loginIdM,
                        avgWcc = row.AvgWcc,
                        avgWcp = row.AvgWcp,
                        brandName = row.BrandName
                    }, transaction: tran);
                }

                // 6) Insert “Gift Distribution” (mrktData='07')
                var sql07 = @"
                    INSERT INTO dptDSRActvtDtl
                    (docuNumb, createId, mrktData, repoCatg, prodQnty, createDt)
                    VALUES
                    (
                        @docuNumb, @loginIdM, '07', @mrtlCode, @isueQnty, GETDATE()
                    );
                ";
                foreach (var row in dto.GiftRows)
                {
                    await conn.ExecuteAsync(sql07, new
                    {
                        dto.DocuNumb,
                        loginIdM,
                        mrtlCode = row.MrtlCode,
                        isueQnty = row.IsueQnty
                    }, transaction: tran);
                }

                // 7) If there is an exception (dsrExcpA='Y'), update the dptDSRActvt row’s statFlag as ‘E’ for “Exception Pending Approval”
                if (!string.IsNullOrWhiteSpace(dto.GiftRows?.Count > 0 ? dto.GiftRows[0].MrtlCode : null))
                {
                    // no action
                }
                if (dto.CityName != null)
                {
                    var updateSql = @"
                        UPDATE dptDSRActvt
                        SET statFlag='E', cityName=@cityName
                        WHERE docuNumb=@docuNumb
                          AND createId=@loginIdM;
                    ";
                    await conn.ExecuteAsync(updateSql, new { dto.DocuNumb, loginIdM, dto.CityName }, transaction: tran);
                }

                tran.Commit();
                return Ok(new DsrActivityFullSubmitResponseDto
                {
                    Success = true,
                    Message = "All detail rows saved successfully."
                });
            }
            catch (Exception ex)
            {
                tran.Rollback();
                return Ok(new DsrActivityFullSubmitResponseDto
                {
                    Success = false,
                    Message = $"Error while saving details: {ex.Message}"
                });
            }
        }
    }

    /// <summary>
    /// Simple DTO for area dropdown.
    /// </summary>
    public class AreaDto
    {
        public string areaCode { get; set; }
        public string areaDesc { get; set; }
    }

    /// <summary>
    /// Simple key/value pair for dropdowns.
    /// </summary>
    public class DropdownDto
    {
        public string Code { get; set; }
        public string Name { get; set; }
    }
}




//
wwwroot/dsractivity.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>DSR Activity Form</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    /* Basic Bootstrap‐like styling for brevity */
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background: #f4f4f4;
    }
    .container {
      max-width: 1000px;
      margin: auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }
    h2 {
      margin-bottom: 20px;
    }
    .row {
      display: flex;
      flex-wrap: wrap;
      margin-bottom: 15px;
    }
    .col-6 {
      width: 50%;
      padding: 0 10px;
      box-sizing: border-box;
    }
    .col-12 {
      width: 100%;
      padding: 0 10px;
      box-sizing: border-box;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    input[type="text"],
    input[type="number"],
    select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      margin-bottom: 5px;
      box-sizing: border-box;
    }
    .btn {
      padding: 8px 14px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
    .btn-primary {
      background: #007bff;
      color: white;
      margin-right: 10px;
    }
    .btn-secondary {
      background: #6c757d;
      color: white;
      margin-right: 10px;
    }
    .btn-light {
      background: #f8f9fa;
      color: #212529;
      margin-right: 10px;
    }
    .btn-danger {
      background: #dc3545;
      color: white;
    }
    .table-responsive {
      margin-top: 10px;
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 10px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 6px;
      text-align: left;
    }
    th {
      background: #f1f1f1;
    }
    .card {
      border: 1px solid #ccc;
      border-radius: 6px;
      margin-bottom: 20px;
      padding: 15px;
    }
    .card h3 {
      margin-top: 0;
    }
    .error {
      color: #dc3545;
      margin-bottom: 10px;
    }
    .hidden {
      display: none;
    }
    .checkbox-group {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }
    .checkbox-group label {
      margin-right: 10px;
      display: inline-flex;
      align-items: center;
    }
    .checkbox-group input {
      margin-right: 4px;
    }
    #map {
      height: 250px;
      width: 100%;
      border: 1px solid #ccc;
      border-radius: 4px;
      margin-top: 10px;
    }
    .deleteButton {
      background: #dc3545;
      color: #fff;
      border: none;
      padding: 4px 8px;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>DSR Activity Form</h2>
    <div id="errorMessage" class="error hidden"></div>

    <!-- *******************************
         STEP 1: “Add / Update / Delete” header
         ******************************* -->
    <div id="step1">
      <div class="card">
        <h3>Step 1: DSR Header</h3>
        <div class="row">
          <div class="col-6">
            <label for="procType">Process Type *</label>
            <select id="procType">
              <option value="A">Add</option>
              <option value="U">Update</option>
              <option value="D">Delete</option>
            </select>
          </div>
          <div class="col-6 hidden" id="docuNumbContainer">
            <label for="docuNumb">Document No *</label>
            <select id="docuNumb">
              <option value="">-- Select Document --</option>
            </select>
          </div>
        </div>

        <div class="row">
          <div class="col-6">
            <label for="cusRtlFl">Purchaser/Retailer Type *</label>
            <select id="cusRtlFl">
              <option value="">-- Loading… --</option>
            </select>
          </div>
          <div class="col-6">
            <label for="areaCode">Area Code *</label>
            <select id="areaCode">
              <option value="">-- Loading… --</option>
            </select>
          </div>
        </div>

        <div class="row">
          <div class="col-6">
            <label for="cusRtlCd">Purchaser/Retailer Code *</label>
            <input type="text" id="cusRtlCd" maxlength="8" placeholder="Enter Code" />
            <div id="cusRtlCdHelp" class="hidden"></div>
          </div>
          <div class="col-6">
            <label>Name</label>
            <div id="cusRtlNm">—</div>
          </div>
        </div>

        <div class="row">
          <div class="col-6">
            <label for="kycVerFl">KYC Status</label>
            <input type="text" id="kycVerFl" readonly />
          </div>
          <div class="col-6">
            <label for="docuDate">Report Date *</label>
            <input type="text" id="docuDate" placeholder="dd/MM/yyyy" readonly />
          </div>
        </div>

        <div class="row" style="margin-top: 10px;">
          <div class="col-12" style="text-align: right;">
            <button id="btnSubmitHeader" class="btn btn-primary">Next</button>
          </div>
        </div>
      </div>
    </div>

    <!-- *******************************
         STEP 2: Full detail form
         ******************************* -->
    <div id="step2" class="hidden">
      <div class="card">
        <h3>Step 2: DSR Details for Document: <span id="headerDocuNumb"></span></h3>

        <div class="row">
          <div class="col-6">
            <label for="mrktName">Market Name (Location/ Road) *</label>
            <input type="text" id="mrktName" placeholder="Enter Market Name" />
          </div>
          <div class="col-6">
            <label>Participation of Display Contest *</label>
            <div class="checkbox-group">
              <label><input type="radio" name="prtDsCnt" value="Y" /> Yes</label>
              <label><input type="radio" name="prtDsCnt" value="N" /> No</label>
              <label><input type="radio" name="prtDsCnt" value="N" /> NA</label>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-6">
            <label>Any Pending Issues (Yes/No) *</label>
            <div class="checkbox-group">
              <label><input type="radio" name="pendIsue" value="Y" /> Yes</label>
              <label><input type="radio" name="pendIsue" value="N" /> No</label>
            </div>
          </div>
          <div class="col-6">
            <label for="pndIsuDt">If Yes, pending issue details *</label>
            <select id="pndIsuDt" disabled>
              <option value="">-- Select --</option>
              <option value="T">Token</option>
              <option value="S">Scheme</option>
              <option value="P">Product</option>
              <option value="O">Other</option>
            </select>
            <input type="text" id="isuDetal" placeholder="Specify Issue" disabled />
          </div>
        </div>

        <div class="row">
          <div class="col-12">
            <h4>Enrolment Slab (in MT) *</h4>
            <div class="row">
              <div class="col-4">
                <label for="wcErlSlb">WC</label>
                <input type="number" id="wcErlSlb" min="0" step="0.01" />
              </div>
              <div class="col-4">
                <label for="wpErlSlb">WCP</label>
                <input type="number" id="wpErlSlb" min="0" step="0.01" />
              </div>
              <div class="col-4">
                <label for="vpErlSlb">VAP</label>
                <input type="number" id="vpErlSlb" min="0" step="0.01" />
              </div>
            </div>
          </div>
        </div>

        <div class="row" id="bwStockSection">
          <div class="col-12">
            <h4>BW Stocks Availability (in MT) *</h4>
            <div class="row">
              <div class="col-4">
                <label for="bwStkWcc">WC</label>
                <input type="number" id="bwStkWcc" min="0" step="0.01" />
              </div>
              <div class="col-4">
                <label for="bwStkWcp">WCP</label>
                <input type="number" id="bwStkWcp" min="0" step="0.01" />
              </div>
              <div class="col-4">
                <label for="bwStkVap">VAP</label>
                <input type="number" id="bwStkVap" min="0" step="0.01" />
              </div>
            </div>
          </div>
        </div>

        <div class="row" id="brandAveragesSection">
          <div class="col-12">
            <h4>Last 3 Months Average *</h4>
            <div class="table-responsive">
              <table>
                <thead>
                  <tr>
                    <th>Brand</th>
                    <th>WC Qty</th>
                    <th>WCP Qty</th>
                  </tr>
                </thead>
                <tbody id="brandAvgTableBody">
                  <!-- Will be filled by JS -->
                  <tr>
                    <td>JK</td>
                    <td><input type="number" id="JK_AvgWcc" value="0" step="0.01" /></td>
                    <td><input type="number" id="JK_AvgWcp" value="0" step="0.01" /></td>
                  </tr>
                  <tr>
                    <td>Asian</td>
                    <td><input type="number" id="AS_AvgWcc" value="0" step="0.01" /></td>
                    <td><input type="number" id="AS_AvgWcp" value="0" step="0.01" /></td>
                  </tr>
                  <tr>
                    <td>Other</td>
                    <td><input type="number" id="OT_AvgWcc" value="0" step="0.01" /></td>
                    <td><input type="number" id="OT_AvgWcp" value="0" step="0.01" /></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="row" id="lastBillingSection">
          <div class="col-12">
            <h4>Last Billing Date</h4>
            <div class="table-responsive">
              <table>
                <thead>
                  <tr>
                    <th>Product</th>
                    <th>Date</th>
                    <th>Qty</th>
                  </tr>
                </thead>
                <tbody id="lastBillingTableBody">
                  <!-- Will populate dynamically after retailer selection -->
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12">
            <h4>Order Booked (in call/e‐meet)</h4>
            <div class="table-responsive" id="orderBookedSection">
              <table id="orderBookedTable">
                <thead>
                  <tr>
                    <th>Del</th>
                    <th>Product (Category)</th>
                    <th>SKU</th>
                    <th>Qty (Bags)</th>
                    <th>Qty (MT)</th>
                  </tr>
                </thead>
                <tbody id="orderBookedBody">
                  <!-- Rows will be appended by JS -->
                </tbody>
              </table>
              <button class="btn btn-success" id="addOrderRowBtn">+ Add Row</button>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12">
            <h4>Market – WCP (Highest Selling SKU)</h4>
            <div class="table-responsive" id="marketWcpSection">
              <table id="marketWcpTable">
                <thead>
                  <tr>
                    <th>Del</th>
                    <th>Brand</th>
                    <th>SKU</th>
                    <th>Price – B</th>
                    <th>Price – C</th>
                  </tr>
                </thead>
                <tbody id="marketWcpBody">
                  <!-- Rows will be appended by JS -->
                </tbody>
              </table>
              <button class="btn btn-success" id="addMarketWcpRowBtn">+ Add Row</button>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12">
            <h4>Gift Distribution</h4>
            <div class="table-responsive" id="giftSection">
              <table id="giftTable">
                <thead>
                  <tr>
                    <th>Del</th>
                    <th>Gift Type</th>
                    <th>Quantity</th>
                  </tr>
                </thead>
                <tbody id="giftBody">
                  <!-- Rows will be appended by JS -->
                </tbody>
              </table>
              <button class="btn btn-success" id="addGiftRowBtn">+ Add Row</button>
            </div>
          </div>
        </div>

        <div id="tileAdhesiveSection" class="hidden">
          <div class="row">
            <div class="col-6">
              <label for="isTilRtl">Is this Tile Adhesives seller?</label>
              <select id="isTilRtl">
                <option value="">-- Select --</option>
                <option value="Y">YES</option>
                <option value="N">NO</option>
              </select>
            </div>
            <div class="col-6">
              <label for="tileStck">Tile Adhesive Stock</label>
              <input type="number" id="tileStck" min="0" step="0.01" />
            </div>
          </div>
        </div>

        <div class="row" style="margin-top: 20px;">
          <div class="col-6">
            <label for="ordExDat">Order Execution Date</label>
            <input type="text" id="ordExDat" placeholder="dd/MM/yyyy" readonly />
          </div>
          <div class="col-6">
            <label for="dsrRem05">Any Other Remarks</label>
            <input type="text" id="dsrRem05" maxlength="200" />
          </div>
        </div>

        <div class="row" style="margin-top: 20px;">
          <div class="col-12">
            <label>Current Location</label>
            <div id="map"></div>
            <div id="locationError" class="error hidden"></div>
            <input type="hidden" id="geoLatit" />
            <input type="hidden" id="geoLongt" />
            <input type="hidden" id="ltLgDist" />
          </div>
        </div>

        <div class="row" style="margin-top: 20px;">
          <div class="col-12" style="text-align: right;">
            <button id="btnSubmitFull_Add" class="btn btn-secondary">Submit & Add</button>
            <button id="btnSubmitFull_Exit" class="btn btn-primary">Submit & Exit</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- ============================
       JavaScript logic starts here
       ============================ -->
  <script>
    // ─── Configuration ──────────────────────────────────────────────────────
    const API_BASE = "/api/dsractivity"; 
    // If your API is hosted at /api/dsractivity; else adjust accordingly.

    function getAuthHeaders() {
      // You must have already stored JWT + PartnerID in localStorage/sessionStorage.
      const token = localStorage.getItem("jwtToken"); 
      const partnerId = localStorage.getItem("partnerId");
      return {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + token,
        "PartnerID": partnerId
      };
    }

    // ─── Utility Functions ──────────────────────────────────────────────────
    function showError(msg) {
      const e = document.getElementById("errorMessage");
      e.classList.remove("hidden");
      e.textContent = msg;
    }
    function clearError() {
      const e = document.getElementById("errorMessage");
      e.classList.add("hidden");
      e.textContent = "";
    }
    function isDateValid(d) {
      // Checks “dd/MM/yyyy” vs. <= today
      const parts = d.split("/");
      if (parts.length !== 3) return false;
      const day = parseInt(parts[0], 10);
      const month = parseInt(parts[1], 10) - 1; // zero-based
      const year = parseInt(parts[2], 10);
      const dt = new Date(year, month, day);
      if (isNaN(dt.getTime())) return false;
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return dt <= today;
    }
    function formatDateToISO(d) {
      // “dd/MM/yyyy” → “yyyy-MM-dd”
      const [day, month, year] = d.split("/");
      return `${year}-${month}-${day}`;
    }
    function parseISOToDDMMYYYY(iso) {
      // “yyyy-MM-dd” → “dd/MM/yyyy”
      const [year, month, day] = iso.split("-");
      return `${day}/${month}/${year}`;
    }
    function distanceCalDsr(lat1, lon1, lat2, lon2) {
      // returns meters
      if (!lat1 || !lon1 || !lat2 || !lon2) return Number.POSITIVE_INFINITY;
      const toRad = x => x * Math.PI / 180;
      const R = 6371e3; // Earth radius in m
      const φ1 = toRad(lat1), φ2 = toRad(lat2);
      const Δφ = toRad(lat2 - lat1);
      const Δλ = toRad(lon2 - lon1);
      const a =
        Math.sin(Δφ/2) * Math.sin(Δφ/2) +
        Math.cos(φ1) * Math.cos(φ2) *
        Math.sin(Δλ/2) * Math.sin(Δλ/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c; 
    }

    // ─── Global State ───────────────────────────────────────────────────────
    let currentDocuNumb = null;
    let currentCusRtlCd = null;
    let currentLatShop = null;  // retailer’s saved lat
    let currentLonShop = null;  // retailer’s saved lon
    let withAlNm = 0;           // exception‐counter
    let isAndroid = /Android/.test(navigator.userAgent);

    // ─── STEP 1: Populate “Process Type” logic ───────────────────────────────
    document.getElementById("procType").addEventListener("change", evt => {
      const pt = evt.target.value;
      if (pt === "U" || pt === "D") {
        document.getElementById("docuNumbContainer").classList.remove("hidden");
        loadDocuNumbDropdown();
      } else {
        document.getElementById("docuNumbContainer").classList.add("hidden");
        document.getElementById("docuNumb").innerHTML = '<option value="">-- not required --</option>';
      }
    });

    async function loadDocuNumbDropdown() {
      // Call API to fetch all open DSRs for last 3 days by this user
      try {
        const resp = await fetch(`${API_BASE}/headerdetails/${currentDocuNumb}`, {
          method: "GET",
          headers: getAuthHeaders()
        });
        // Actually, we only need to populate docs: “last 3 days, dsrParam in (‘04’,’05’)”
        // For simplicity, assume a separate endpoint: GET /api/dsractivity/openlist
        // But since we didn’t define that above, we’ll do a quick hack: load 
        // headerdetails of existing ones – in production, create a new GET /openlist.
        // Here, we’ll skip: just show placeholder:
        document.getElementById("docuNumb").innerHTML =
          '<option value="">(You have no open DSRs in last 3 days)</option>';
      } catch (err) {
        console.error(err);
      }
    }

    // ─── STEP 1: Populate “Purchaser Type” & “AreaCode” ──────────────────────
    async function loadCusRtlFlDropdown() {
      // JSP’s “select 'R','Retailer' union 'RR','Rural Retailer' union 'C','Stockiest/Urban Stockiest' union 'D','Direct Dealer' union 'RD','Rural Stockiest' union 'AD','AD' union 'UR','UBS'”
      const data = [
        { Code: "R", Name: "Retailer" },
        { Code: "RR", Name: "Rural Retailer" },
        { Code: "C", Name: "Stockiest/ Urban Stockiest" },
        { Code: "D", Name: "Direct Dealer" },
        { Code: "RD", Name: "Rural Stockiest" },
        { Code: "AD", Name: "AD" },
        { Code: "UR", Name: "UBS" }
      ];
      const sel = document.getElementById("cusRtlFl");
      sel.innerHTML = '<option value="">-- Select Type --</option>';
      data.forEach(d => {
        const o = document.createElement("option");
        o.value = d.Code;
        o.textContent = d.Name;
        sel.append(o);
      });
    }

    async function loadAreaDropdown() {
      try {
        const resp = await fetch(`${API_BASE}/areas`, {
          method: "GET",
          headers: getAuthHeaders()
        });
        if (!resp.ok) throw new Error("Failed to load areas.");
        const list = await resp.json();
        const sel = document.getElementById("areaCode");
        sel.innerHTML = '<option value="">-- Select Area --</option>';
        list.forEach((a) => {
          const o = document.createElement("option");
          o.value = a.areaCode;
          o.textContent = a.areaDesc;
          sel.append(o);
        });
      } catch (err) {
        showError("Error loading areas.");
        console.error(err);
      }
    }

    // ─── STEP 1: When user picks “Update”/“Delete”, load existing DocuNumb ─────
    document.getElementById("docuNumb").addEventListener("change", async (evt) => {
      currentDocuNumb = evt.target.value;
      if (!currentDocuNumb) return;
      clearError();
      // Fetch header details so we can prefill step 2 (optional).
      try {
        const resp = await fetch(`${API_BASE}/headerdetails/${currentDocuNumb}`, {
          method: "GET",
          headers: getAuthHeaders()
        });
        if (!resp.ok) throw new Error("Header not found.");
        const payload = await resp.json();
        // Prefill Step 2 if we later show it.
      } catch (err) {
        showError("Could not load existing DSR header.");
      }
    });

    // ─── STEP 1: “Next” button clicked ────────────────────────────────────────
    document.getElementById("btnSubmitHeader").addEventListener("click", async () => {
      clearError();
      const procType = document.getElementById("procType").value;
      const docuNumb = document.getElementById("docuNumb").value;
      const cusRtlFl = document.getElementById("cusRtlFl").value;
      const areaCode = document.getElementById("areaCode").value;
      const cusRtlCd = document.getElementById("cusRtlCd").value;
      const docuDate = document.getElementById("docuDate").value;

      if (!procType) {
        showError("Please select Process Type.");
        return;
      }
      if ((procType === "U" || procType === "D") && !docuNumb) {
        showError("Please select an existing Document No.");
        return;
      }
      if (!cusRtlFl) {
        showError("Please select Purchaser Type.");
        return;
      }
      if (!areaCode) {
        showError("Please select Area Code.");
        return;
      }
      if (!cusRtlCd) {
        showError("Please enter Purchaser/Retailer Code.");
        return;
      }
      if (!docuDate || !isDateValid(docuDate)) {
        showError("Please enter a valid Report Date (≤ today).");
        return;
      }

      // Build request object
      const payload = {
        ProcType: procType,
        DocuNumb: docuNumb || null,
        DsrParam: "05",
        CusRtlFl: cusRtlFl,
        AreaCode: areaCode,
        CusRtlCd: cusRtlCd,
        DocuDate: docuDate,
        MrktName: "", // Step 2 will fill
        PendIsue: "N",
        PndIsuDt: null,
        IsuDetal: null,
        PrtDsCnt: "N",
        WcErlSlb: 0,
        WpErlSlb: 0,
        VpErlSlb: 0
      };

      try {
        const resp = await fetch(`${API_BASE}/submitheader`, {
          method: "POST",
          headers: getAuthHeaders(),
          body: JSON.stringify(payload)
        });
        const data = await resp.json();
        if (!data.Success) {
          showError(data.Message);
          return;
        }
        // Step 1 succeeded. Save new or existing DocuNumb:
        currentDocuNumb = data.DocuNumb;
        document.getElementById("headerDocuNumb").textContent = currentDocuNumb;
        // Hide Step 1, show Step 2
        document.getElementById("step1").classList.add("hidden");
        document.getElementById("step2").classList.remove("hidden");
        // Prefill Step 2 fields if ProcType=“U”/“D”
        if (procType !== "A") {
          await prefillStep2(currentDocuNumb);
        }
      } catch (err) {
        showError("Error submitting header.");
        console.error(err);
      }
    });

    // ─── STEP 2: Prefill all fields if “Update”/“Delete” ──────────────────────
    async function prefillStep2(docuNumb) {
      try {
        const resp = await fetch(`${API_BASE}/headerdetails/${docuNumb}`, {
          method: "GET",
          headers: getAuthHeaders()
        });
        if (!resp.ok) throw new Error();
        const payload = await resp.json();
        const h = payload.Header;

        // Prefill “Market Name”
        document.getElementById("mrktName").value = h.mrktName || "";

        // Prefill “Participation of Display Contest”
        if (h.prtDsCnt === "Y") {
          document.querySelector("input[name='prtDsCnt'][value='Y']").checked = true;
        } else {
          document.querySelector("input[name='prtDsCnt'][value='N']").checked = true;
        }

        // Pending issues
        if (h.pendIsue === "Y") {
          document.querySelector("input[name='pendIsue'][value='Y']").checked = true;
          document.getElementById("pndIsuDt").disabled = false;
          document.getElementById("isuDetal").disabled = false;
          document.getElementById("pndIsuDt").value = h.pndIsuDt || "";
          document.getElementById("isuDetal").value = h.isuDetal || "";
        } else {
          document.querySelector("input[name='pendIsue'][value='N']").checked = true;
        }

        // Enrollment slab
        document.getElementById("wcErlSlb").value = h.wcErlSlb || 0;
        document.getElementById("wpErlSlb").value = h.wpErlSlb || 0;
        document.getElementById("vpErlSlb").value = h.vpErlSlb || 0;

        // BW Stock availability
        if (h.cusRtlFl === "C" || h.cusRtlFl === "RD") {
          // Keep them disabled
          document.getElementById("bwStockSection").classList.add("hidden");
        } else {
          document.getElementById("bwStockSection").classList.remove("hidden");
          document.getElementById("bwStkWcc").value = h.bwStkWcc || 0;
          document.getElementById("bwStkWcp").value = h.bwStkWcp || 0;
          document.getElementById("bwStkVap").value = h.bwStkVap || 0;
        }

        // Brand Averages
        // Clear initial 3 rows, then use payload.AvgRows to prefill
        document.getElementById("JK_AvgWcc").value = 0;
        document.getElementById("JK_AvgWcp").value = 0;
        document.getElementById("AS_AvgWcc").value = 0;
        document.getElementById("AS_AvgWcp").value = 0;
        document.getElementById("OT_AvgWcc").value = 0;
        document.getElementById("OT_AvgWcp").value = 0;
        for (const row of payload.AvgRows) {
          if (row.brandName === "JK") {
            document.getElementById("JK_AvgWcc").value = row.avgWcc;
            document.getElementById("JK_AvgWcp").value = row.avgWcp;
          } else if (row.brandName === "AS") {
            document.getElementById("AS_AvgWcc").value = row.avgWcc;
            document.getElementById("AS_AvgWcp").value = row.avgWcp;
          } else {
            document.getElementById("OT_AvgWcc").value = row.avgWcc;
            document.getElementById("OT_AvgWcp").value = row.avgWcp;
          }
        }

        // Last Billing Date → fill table
        const billingBody = document.getElementById("lastBillingTableBody");
        billingBody.innerHTML = "";
        for (const row of payload.OrderRows) {
          // Not strictly correct – JSP’s logic depends on cusRtlFl. But we have that from header.
        }

        // OrderBookedRows (mrktData='05')
        const obBody = document.getElementById("orderBookedBody");
        obBody.innerHTML = "";
        for (const r of payload.OrderRows) {
          addOrderRow(r.repoCatg, r.prodCode, r.prodQnty, r.projQnty, r.actnRemk, r.targetDt);
        }

        // MarketWcpRows (mrktData='06')
        const mwBody = document.getElementById("marketWcpBody");
        mwBody.innerHTML = "";
        for (const r of payload.MarketRows) {
          addMarketWcpRow(r.branName, r.prdCodMk, r.bPriceVl, r.cPriceVl);
        }

        // GiftRows (mrktData='07')
        const gBody = document.getElementById("giftBody");
        gBody.innerHTML = "";
        for (const r of payload.GiftRows) {
          addGiftRow(r.mrtlCode, r.isueQnty);
        }

        // Tile Adhesive Section
        if (h.cusRtlFl === "R" || h.cusRtlFl === "RR" || h.cusRtlFl === "D" || h.cusRtlFl === "AD" || h.cusRtlFl === "UR") {
          document.getElementById("tileAdhesiveSection").classList.remove("hidden");
          document.getElementById("isTilRtl").value = h.isTilRtl || "";
          document.getElementById("tileStck").value = h.tileStck || 0;
        } else {
          document.getElementById("tileAdhesiveSection").classList.add("hidden");
        }

        // Other header fields
        document.getElementById("ordExDat").value = h.ordExDat || "";
        document.getElementById("dsrRem05").value = h.dsrRem05 || "";

        // Location & exception
        if (h.dsrExcpA === "Y") {
          document.getElementById("cityName").value = h.cityName || "";
          document.getElementById("cityNameContainer").classList.remove("hidden");
        }
        if (h.geoLatit && h.geoLongt) {
          // Center map on these
          currentLatShop = h.latitute;
          currentLonShop = h.lgtitute;
        }
      } catch (err) {
        console.error(err);
        showError("Error pre‐filling Step 2.");
      }
    }

    // ─── STEP 2: “Any Pending Issues” toggling ───────────────────────────────
    document.querySelectorAll("input[name='pendIsue']").forEach(r => {
      r.addEventListener("change", (evt) => {
        const val = evt.target.value;
        if (val === "Y") {
          document.getElementById("pndIsuDt").disabled = false;
          document.getElementById("isuDetal").disabled = false;
        } else {
          document.getElementById("pndIsuDt").disabled = true;
          document.getElementById("isuDetal").disabled = true;
          document.getElementById("pndIsuDt").value = "";
          document.getElementById("isuDetal").value = "";
        }
      });
    });

    // ─── STEP 2: “Tile Adhesive Section” toggling ───────────────────────────────
    document.getElementById("isTilRtl").addEventListener("change", (evt) => {
      const val = evt.target.value;
      if (val === "Y") {
        document.getElementById("tileStck").disabled = false;
      } else {
        document.getElementById("tileStck").disabled = true;
        document.getElementById("tileStck").value = "";
      }
    });

    // ─── STEP 2: “Order Booked” dynamic rows ─────────────────────────────────
    let orderRowCount = 0;
    document.getElementById("addOrderRowBtn").addEventListener("click", () => {
      addOrderRow("", "", 0, 0, "", "");
    });

    function addOrderRow(repoCatg, prodCode, prodQnty, projQnty, actnRemk, targetDt) {
      orderRowCount++;
      const tbody = document.getElementById("orderBookedBody");
      const tr = document.createElement("tr");
      tr.setAttribute("data-rowid", orderRowCount);

      // Delete cell
      const tdDel = document.createElement("td");
      const btnDel = document.createElement("button");
      btnDel.textContent = "×";
      btnDel.className = "deleteButton";
      btnDel.addEventListener("click", () => {
        tr.remove();
      });
      tdDel.appendChild(btnDel);
      tr.appendChild(tdDel);

      // repoCatg dropdown
      const tdCat = document.createElement("td");
      const selCat = document.createElement("select");
      selCat.name = `repoCatg${orderRowCount}`;
      selCat.innerHTML = `
        <option value="01">Cement</option>
        <option value="02">Putty</option>
        <option value="03">VAP</option>
        <option value="09">Other</option>
      `;
      selCat.value = repoCatg;
      tdCat.appendChild(selCat);
      tr.appendChild(tdCat);

      // prodCode input (will be populated by AJAX on change)
      const tdSku = document.createElement("td");
      const inpSku = document.createElement("input");
      inpSku.type = "text";
      inpSku.name = `prodCode${orderRowCount}`;
      inpSku.placeholder = "SKU";
      inpSku.value = prodCode;
      inpSku.size = 10;
      inpSku.maxLength = 20;
      tdSku.appendChild(inpSku);
      tr.appendChild(tdSku);

      // prodQnty (bags)
      const tdQtyBags = document.createElement("td");
      const inpQtyBags = document.createElement("input");
      inpQtyBags.type = "number";
      inpQtyBags.name = `prodQnty${orderRowCount}`;
      inpQtyBags.min = "0";
      inpQtyBags.step = "1";
      inpQtyBags.value = prodQnty;
      inpQtyBags.addEventListener("change", () => {
        const bagVal = parseFloat(inpQtyBags.value) || 0;
        // Projected Qnty = bagVal / pack‐size. 
        // JSP’s logic used a hidden “packSize” and “secNoTon” fields. Here we just leave 0 or recalc via server later.
        inpProj.value = (bagVal * 0.033) // approximate conversion (e.g. 30 bags = 1 MT). For exact, call API.
          .toFixed(2);
      });
      tdQtyBags.appendChild(inpQtyBags);
      tr.appendChild(tdQtyBags);

      // projQnty (MT)
      const tdProj = document.createElement("td");
      const inpProj = document.createElement("input");
      inpProj.type = "number";
      inpProj.name = `projQnty${orderRowCount}`;
      inpProj.min = "0";
      inpProj.step = "0.01";
      inpProj.value = projQnty;
      tdProj.appendChild(inpProj);
      tr.appendChild(tdProj);

      tbody.appendChild(tr);
    }

    // ─── STEP 2: “Market WCP” dynamic rows ──────────────────────────────────
    let marketRowCount = 0;
    document.getElementById("addMarketWcpRowBtn").addEventListener("click", () => {
      addMarketWcpRow("", "", 0, 0);
    });

    function addMarketWcpRow(branName, prdCodMk, bPriceVl, cPriceVl) {
      marketRowCount++;
      const tbody = document.getElementById("marketWcpBody");
      const tr = document.createElement("tr");
      tr.setAttribute("data-rowid", marketRowCount);

      // Delete
      const tdDel = document.createElement("td");
      const btnDel = document.createElement("button");
      btnDel.textContent = "×";
      btnDel.className = "deleteButton";
      btnDel.addEventListener("click", () => {
        tr.remove();
      });
      tdDel.appendChild(btnDel);
      tr.appendChild(tdDel);

      // BranName dropdown
      const tdBrand = document.createElement("td");
      const selBr = document.createElement("select");
      selBr.name = `branName${marketRowCount}`;
      selBr.innerHTML = `
        <option value="">Select</option>
        <option value="BW">Birla White</option>
        <option value="JK">JK</option>
        <option value="AP">Asian Paint</option>
        <option value="BG">Berger</option>
        <option value="AC">Aerocon</option>
        <option value="PM">Paint Major</option>
        <option value="OT">Others</option>
      `;
      selBr.value = branName;
      tdBrand.appendChild(selBr);
      tr.appendChild(tdBrand);

      // prdCodMk input
      const tdSku = document.createElement("td");
      const inpSku = document.createElement("input");
      inpSku.type = "text";
      inpSku.name = `prdCodMk${marketRowCount}`;
      inpSku.placeholder = "SKU";
      inpSku.value = prdCodMk;
      inpSku.size = 10;
      tdSku.appendChild(inpSku);
      tr.appendChild(tdSku);

      // bPriceVl
      const tdBP = document.createElement("td");
      const inpBP = document.createElement("input");
      inpBP.type = "number";
      inpBP.name = `bPriceVl${marketRowCount}`;
      inpBP.min = "0";
      inpBP.step = "0.01";
      inpBP.value = bPriceVl;
      tdBP.appendChild(inpBP);
      tr.appendChild(tdBP);

      // cPriceVl
      const tdCP = document.createElement("td");
      const inpCP = document.createElement("input");
      inpCP.type = "number";
      inpCP.name = `cPriceVl${marketRowCount}`;
      inpCP.min = "0";
      inpCP.step = "0.01";
      inpCP.value = cPriceVl;
      tdCP.appendChild(inpCP);
      tr.appendChild(tdCP);

      tbody.appendChild(tr);
    }

    // ─── STEP 2: “Gift Distribution” dynamic rows ──────────────────────────
    let giftRowCount = 0;
    document.getElementById("addGiftRowBtn").addEventListener("click", () => {
      addGiftRow("", 0);
    });

    function addGiftRow(mrtlCode, isueQnty) {
      giftRowCount++;
      const tbody = document.getElementById("giftBody");
      const tr = document.createElement("tr");
      tr.setAttribute("data-rowid", giftRowCount);

      // Delete
      const tdDel = document.createElement("td");
      const btnDel = document.createElement("button");
      btnDel.textContent = "×";
      btnDel.className = "deleteButton";
      btnDel.addEventListener("click", () => {
        tr.remove();
      });
      tdDel.appendChild(btnDel);
      tr.appendChild(tdDel);

      // mrtlCode dropdown
      const tdType = document.createElement("td");
      const selT = document.createElement("select");
      selT.name = `mrtlCode${giftRowCount}`;
      selT.innerHTML = `
        <option value="">-- Select Gift Type --</option>
        <option value="01">Gift A</option>
        <option value="02">Gift B</option>
        <option value="03">Gift C</option>
      `;
      selT.value = mrtlCode;
      tdType.appendChild(selT);
      tr.appendChild(tdType);

      // isueQnty
      const tdQty = document.createElement("td");
      const inpQty = document.createElement("input");
      inpQty.type = "number";
      inpQty.name = `isueQnty${giftRowCount}`;
      inpQty.min = "0";
      inpQty.step = "1";
      inpQty.value = isueQnty;
      tdQty.appendChild(inpQty);
      tr.appendChild(tdQty);

      tbody.appendChild(tr);
    }

    // ─── STEP 2: Datepickers for docuDate, ordExDat ─────────────────────────
    // For simplicity, we’ll just attach a “click to now” listener. In production, use a real datepicker.
    document.getElementById("docuDate").addEventListener("click", () => {
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth()+1).padStart(2, '0');
      const yyyy = today.getFullYear();
      document.getElementById("docuDate").value = `${dd}/${mm}/${yyyy}`;
    });
    document.getElementById("ordExDat").addEventListener("click", () => {
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth()+1).padStart(2, '0');
      const yyyy = today.getFullYear();
      document.getElementById("ordExDat").value = `${dd}/${mm}/${yyyy}`;
    });

    // ─── STEP 2: “Fetch last‐3‐month average” / “current month” / “stock” for a given retailer ─────────────
    // This was originally in JSP; we’ll skip it for brevity. You can call an endpoint like /api/dsractivity/retailerStats?cusRtlCd=...
    // to get bwAvgWcc, bwCurWcc, etc. and fill the fields. Omitted here for clarity.

    // ─── STEP 2: Location capture ─────────────────────────────────────────────
    let map;
    let markerShop, markerSelf;

    function initMap() {
      map = L.map('map').setView([20.5937, 78.9629], 5); // India as default
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
      }).addTo(map);
    }

    function showShopMarker(lat, lon) {
      if (markerShop) map.removeLayer(markerShop);
      markerShop = L.marker([lat, lon], { color: 'blue' }).addTo(map)
        .bindPopup('Shop Location').openPopup();
      map.setView([lat, lon], 15);
    }

    function showSelfMarker(lat, lon) {
      if (markerSelf) map.removeLayer(markerSelf);
      markerSelf = L.marker([lat, lon], { color: 'red' }).addTo(map)
        .bindPopup('Your Current Location').openPopup();
    }

    async function getLocationAndroid() {
      // Wait 2 seconds for Android to set lat/long
      return new Promise((resolve) => {
        setTimeout(() => {
          const v = document.getElementById("geoLatit").value + "," + document.getElementById("geoLongt").value;
          const parts = v.split(",");
          const lat = parseFloat(parts[0]);
          const lon = parseFloat(parts[1]);
          resolve({ lat, lon });
        }, 2000);
      });
    }

    async function getLocationBrowser() {
      return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
          reject("Geolocation not supported.");
          return;
        }
        navigator.geolocation.getCurrentPosition((pos) => {
          resolve({ lat: pos.coords.latitude, lon: pos.coords.longitude });
        }, (err) => {
          reject(err.message);
        }, { enableHighAccuracy: true });
      });
    }

    async function captureCurrentLocation() {
      try {
        let coords;
        if (isAndroid && typeof Android !== "undefined") {
          // Android.setLatLong() is assumed to fill two hidden fields: geoLatit & geoLongt
          Android.setLatLong();
          coords = await getLocationAndroid();
        } else {
          coords = await getLocationBrowser();
        }
        document.getElementById("geoLatit").value = coords.lat;
        document.getElementById("geoLongt").value = coords.lon;
        showSelfMarker(coords.lat, coords.lon);
        if (currentLatShop && currentLonShop) {
          const dist = distanceCalDsr(coords.lat, coords.lon, currentLatShop, currentLonShop);
          document.getElementById("ltLgDist").value = dist.toFixed(2);
          if (dist > 500) {
            document.getElementById("cityNameContainer").classList.remove("hidden");
            showError(`You are ${Math.round(dist)} m away from shop. Please select a reason.`);
          } else {
            clearError();
          }
        }
      } catch (err) {
        document.getElementById("locationError").textContent = "Failed to get location: " + err;
        document.getElementById("locationError").classList.remove("hidden");
      }
    }

    // ─── STEP 2: “Submit Full” logic ──────────────────────────────────────────
    document.getElementById("btnSubmitFull_Add").addEventListener("click", () => {
      submitFull("A");
    });
    document.getElementById("btnSubmitFull_Exit").addEventListener("click", () => {
      submitFull("E");
    });

    async function submitFull(submMthd) {
      clearError();

      // Basic validation
      const mrktName = document.getElementById("mrktName").value.trim();
      if (!mrktName) {
        showError("Please enter Market Name.");
        return;
      }
      const prtDs = document.querySelector("input[name='prtDsCnt']:checked");
      if (!prtDs) {
        showError("Please select Participation of Display Contest.");
        return;
      }
      const pendIsue = document.querySelector("input[name='pendIsue']:checked");
      if (!pendIsue) {
        showError("Please select Any Pending Issues.");
        return;
      }
      if (pendIsue.value === "Y") {
        const pnd = document.getElementById("pndIsuDt").value;
        const isd = document.getElementById("isuDetal").value.trim();
        if (!pnd) {
          showError("Please select pending issue details.");
          return;
        }
        if (!isd) {
          showError("Please specify the pending issue.");
          return;
        }
      }

      const wcErl = parseFloat(document.getElementById("wcErlSlb").value) || 0;
      const wpErl = parseFloat(document.getElementById("wpErlSlb").value) || 0;
      const vpErl = parseFloat(document.getElementById("vpErlSlb").value) || 0;
      if (wcErl <= 0 || wpErl <= 0 || vpErl <= 0) {
        showError("Enrollment slab (WC, WCP, VAP) must be > 0.");
        return;
      }

      const cusRtlFl = document.getElementById("cusRtlFl").value;
      if (!(cusRtlFl === "C" || cusRtlFl === "RD")) {
        const bwStkWc = parseFloat(document.getElementById("bwStkWcc").value) || 0;
        const bwStkWcp = parseFloat(document.getElementById("bwStkWcp").value) || 0;
        const bwStkVap = parseFloat(document.getElementById("bwStkVap").value) || 0;
        if (bwStkWc < 0 || bwStkWcp < 0 || bwStkVap < 0) {
          showError("BW Stock availability cannot be negative.");
          return;
        }
      }

      // Optional “exception reason” if distance > 500
      const ltLg = parseFloat(document.getElementById("ltLgDist").value) || 0;
      const dsrExcpA = ltLg > 500 ? "Y" : "N";
      let cityName = null;
      if (dsrExcpA === "Y") {
        cityName = document.getElementById("cityName").value;
        if (!cityName) {
          showError("Since you are > 500 m away, please select a reason.");
          return;
        }
      }

      // Collect all the detail rows
      const orderRows = [];
      document.querySelectorAll("#orderBookedBody tr").forEach((tr) => {
        const id = tr.getAttribute("data-rowid");
        const repoCatg = tr.querySelector(`select[name='repoCatg${id}']`).value;
        const prodCode = tr.querySelector(`input[name='prodCode${id}']`).value;
        const prodQnty = parseInt(tr.querySelector(`input[name='prodQnty${id}']`).value) || 0;
        const projQnty = parseFloat(tr.querySelector(`input[name='projQnty${id}']`).value) || 0;
        orderRows.push({ repoCatg, prodCode, prodQnty, projQnty, actnRemk: "", targetDt: "" });
      });
      if (orderRows.length === 0) {
        showError("Please add at least one Order Booked row.");
        return;
      }

      const marketRows = [];
      document.querySelectorAll("#marketWcpBody tr").forEach((tr) => {
        const id = tr.getAttribute("data-rowid");
        const branName = tr.querySelector(`select[name='branName${id}']`).value;
        const prdCodMk = tr.querySelector(`input[name='prdCodMk${id}']`).value;
        const bPriceVl = parseFloat(tr.querySelector(`input[name='bPriceVl${id}']`).value) || 0;
        const cPriceVl = parseFloat(tr.querySelector(`input[name='cPriceVl${id}']`).value) || 0;
        marketRows.push({ branName, prdCodMk, bPriceVl, cPriceVl });
      });
      if (marketRows.length === 0) {
        showError("Please add at least one Market WCP row.");
        return;
      }

      const brandAverages = [
        {
          brandName: "JK",
          avgWcc: parseFloat(document.getElementById("JK_AvgWcc").value) || 0,
          avgWcp: parseFloat(document.getElementById("JK_AvgWcp").value) || 0
        },
        {
          brandName: "AS",
          avgWcc: parseFloat(document.getElementById("AS_AvgWcc").value) || 0,
          avgWcp: parseFloat(document.getElementById("AS_AvgWcp").value) || 0
        },
        {
          brandName: "OT",
          avgWcc: parseFloat(document.getElementById("OT_AvgWcc").value) || 0,
          avgWcp: parseFloat(document.getElementById("OT_AvgWcp").value) || 0
        }
      ];

      const giftRows = [];
      document.querySelectorAll("#giftBody tr").forEach((tr) => {
        const id = tr.getAttribute("data-rowid");
        const mrtlCode = tr.querySelector(`select[name='mrtlCode${id}']`).value;
        const isueQnty = parseInt(tr.querySelector(`input[name='isueQnty${id}']`).value) || 0;
        giftRows.push({ mrtlCode, isueQnty });
      });

      // Build the full‐submit DTO
      const fullDto = {
        DocuNumb: currentDocuNumb,
        SubmMthd: submMthd,
        OrderBookedRows: orderRows,
        MarketWcpRows: marketRows,
        BrandAverages: brandAverages,
        GiftRows: giftRows,
        MrktName: document.getElementById("mrktName").value.trim(),
        PendIsue: pendIsue.value,
        PndIsuDt: document.getElementById("pndIsuDt").value || null,
        IsuDetal: document.getElementById("isuDetal").value.trim() || null,
        PrtDsCnt: prtDs.value,
        WcErlSlb: wcErl,
        WpErlSlb: wpErl,
        VpErlSlb: vpErl,
        BwStkWcc: parseFloat(document.getElementById("bwStkWcc").value) || 0,
        BwStkWcp: parseFloat(document.getElementById("bwStkWcp").value) || 0,
        BwStkVap: parseFloat(document.getElementById("bwStkVap").value) || 0,
        CityName: cityName,
        GeoLatit: parseFloat(document.getElementById("geoLatit").value) || null,
        GeoLongt: parseFloat(document.getElementById("geoLongt").value) || null,
        LtLgDist: parseFloat(document.getElementById("ltLgDist").value) || null,
        DsrExcpA: dsrExcpA,
        DsrRem05: document.getElementById("dsrRem05").value.trim() || null,
        OrdExDat: document.getElementById("ordExDat").value.trim() || null,
        IsTilRtl: document.getElementById("isTilRtl").value || null,
        TileStck: parseFloat(document.getElementById("tileStck").value) || null
      };

      try {
        const resp = await fetch(`${API_BASE}/submitfull`, {
          method: "POST",
          headers: getAuthHeaders(),
          body: JSON.stringify(fullDto)
        });
        const data = await resp.json();
        if (!data.Success) {
          showError(data.Message);
          return;
        }
        alert("Details saved successfully!");
        if (submMthd === "A") {
          // “Add Another Activity”: go back to Step 1, but keep same user logged in.
          document.getElementById("step2").classList.add("hidden");
          document.getElementById("step1").classList.remove("hidden");
          resetStep2();
        } else {
          // “Submit & Exit”: reload page or redirect to summary
          window.location.href = "/"; 
        }
      } catch (err) {
        showError("Error submitting details.");
        console.error(err);
      }
    }

    function resetStep2() {
      // Clear all fields in Step 2 so the user can start fresh
      document.getElementById("mrktName").value = "";
      document.querySelectorAll("input[name='prtDsCnt']").forEach(i => i.checked = false);
      document.querySelectorAll("input[name='pendIsue']").forEach(i => i.checked = false);
      document.getElementById("pndIsuDt").value = "";
      document.getElementById("isuDetal").value = "";
      document.getElementById("pndIsuDt").disabled = true;
      document.getElementById("isuDetal").disabled = true;
      document.getElementById("wcErlSlb").value = "";
      document.getElementById("wpErlSlb").value = "";
      document.getElementById("vpErlSlb").value = "";
      document.getElementById("bwStkWcc").value = "";
      document.getElementById("bwStkWcp").value = "";
      document.getElementById("bwStkVap").value = "";
      document.getElementById("JK_AvgWcc").value = 0;
      document.getElementById("JK_AvgWcp").value = 0;
      document.getElementById("AS_AvgWcc").value = 0;
      document.getElementById("AS_AvgWcp").value = 0;
      document.getElementById("OT_AvgWcc").value = 0;
      document.getElementById("OT_AvgWcp").value = 0;
      document.getElementById("lastBillingTableBody").innerHTML = "";
      document.getElementById("orderBookedBody").innerHTML = "";
      document.getElementById("marketWcpBody").innerHTML = "";
      document.getElementById("giftBody").innerHTML = "";
      document.getElementById("isTilRtl").value = "";
      document.getElementById("tileStck").value = "";
      document.getElementById("ordExDat").value = "";
      document.getElementById("dsrRem05").value = "";
      document.getElementById("cityNameContainer").classList.add("hidden");
      document.getElementById("cityName").value = "";
      document.getElementById("geoLatit").value = "";
      document.getElementById("geoLongt").value = "";
      document.getElementById("ltLgDist").value = "";
      map.setView([20.5937, 78.9629], 5);
      if (markerShop) map.removeLayer(markerShop);
      if (markerSelf) map.removeLayer(markerSelf);
      currentLatShop = null;
      currentLonShop = null;
      withAlNm = 0;
    }

    // ─── STEP 2: “On retailer selection, fetch retailer’s lat/lon + KYC + last billing” ────
    document.getElementById("cusRtlCd").addEventListener("blur", async () => {
      const fl = document.getElementById("cusRtlFl").value;
      const area = document.getElementById("areaCode").value;
      const code = document.getElementById("cusRtlCd").value.trim();
      if (!fl || !area || !code) return;

      // Call a hypothetical endpoint: GET /api/dsractivity/retailerinfo?cusRtlFl={fl}&areaCode={area}&cusRtlCd={code}
      // That endpoint should return { retlName, mobileNo, latitute, lgtitute, kycVerFl, mrktName, bwAvgWcc, bwAvgWcp, bwAvgVap, bwCurWcc, bwCurWcp, bwCurVap}
      try {
        const resp = await fetch(
          `${API_BASE}/retailerinfo?cusRtlFl=${encodeURIComponent(fl)}&areaCode=${encodeURIComponent(area)}&cusRtlCd=${encodeURIComponent(code)}`,
          { method: "GET", headers: getAuthHeaders() }
        );
        if (!resp.ok) throw new Error("Not found");
        const info = await resp.json();
        document.getElementById("cusRtlNm").textContent = info.retlName || "";
        document.getElementById("kycVerFl").value = info.kycVerFl || "";
        currentLatShop = parseFloat(info.latitute);
        currentLonShop = parseFloat(info.lgtitute);
        if (currentLatShop && currentLonShop) {
          showShopMarker(currentLatShop, currentLonShop);
        }
        // Prefill averages
        document.getElementById("JK_AvgWcc").value = parseFloat(info.bwAvgWcc) || 0;
        document.getElementById("JK_AvgWcp").value = parseFloat(info.bwAvgWcp) || 0;
        document.getElementById("JK_AvgVap").value = parseFloat(info.bwAvgVap) || 0;
        document.getElementById("bwCurWcc").value = parseFloat(info.bwCurWcc) || 0;
        document.getElementById("bwCurWcp").value = parseFloat(info.bwCurWcp) || 0;
        document.getElementById("bwCurVap").value = parseFloat(info.bwCurVap) || 0;

        // If cusRtlFl = “R”/“RR” then show brand‐sell checkboxes. Otherwise hide.
        if (fl === "R" || fl === "RR") {
          document.getElementById("brandAveragesSection").classList.remove("hidden");
        } else {
          document.getElementById("brandAveragesSection").classList.add("hidden");
        }

        // Last billing table
        const lbBody = document.getElementById("lastBillingTableBody");
        lbBody.innerHTML = "";
        for (const row of info.lastBillingRows || []) {
          const tr = document.createElement("tr");
          tr.innerHTML = `<td>${row.product}</td><td>${row.date}</td><td>${row.qty}</td>`;
          lbBody.appendChild(tr);
        }
      } catch (err) {
        console.error(err);
        showError("Failed to load retailer info / average sales.");
      }
    });

    // ─── STEP 2: Periodic distance check for dsrParam=“05” ───────────────────
    setInterval(() => {
      const dsrParam = "05"; // always 05
      if (dsrParam === "05" && currentLatShop && currentLonShop) {
        captureCurrentLocation();
      }
    }, 5000);

    // ─── On page load ───────────────────────────────────────────────────────
    window.addEventListener("DOMContentLoaded", async () => {
      hideAll();
      await loadCusRtlFlDropdown();
      await loadAreaDropdown();
      initMap();

      // Force docuDate to today if empty:
      const today = new Date();
      const dd = String(today.getDate()).padStart(2, '0');
      const mm = String(today.getMonth()+1).padStart(2, '0');
      const yyyy = today.getFullYear();
      document.getElementById("docuDate").value = `${dd}/${mm}/${yyyy}`;
    });

    function hideAll() {
      document.getElementById("step2").classList.add("hidden");
      document.getElementById("step1").classList.remove("hidden");
      document.getElementById("docuNumbContainer").classList.add("hidden");
      document.getElementById("bwStockSection").classList.add("hidden");
      document.getElementById("brandAveragesSection").classList.add("hidden");
      document.getElementById("tileAdhesiveSection").classList.add("hidden");
      document.getElementById("cityNameContainer").classList.add("hidden");
      document.getElementById("pndIsuDt").disabled = true;
      document.getElementById("isuDetal").disabled = true;
      document.getElementById("tileStck").disabled = true;
    }
  </script>

  <!--  Leaflet.js (for map) -->
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
  />
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
</body>
</html>
