using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using YourApp.Data;
using YourApp.Models;

namespace YourApp.Controllers
{
    [Authorize]
    [Route("[controller]")]
    public class DsrActvController : Controller
    {
        private readonly IDatabaseHelper _db;

        public DsrActvController(IDatabaseHelper db)
        {
            _db = db;
        }

        // 1. Show form
        [HttpGet("")]
        public async Task<IActionResult> Index(
            string procType = "A",
            string docuNumb = null,
            string dsrParam = null,
            string areaCode = null,
            string cusRtlFl = null)
        {
            var model = new DsrActvViewModel
            {
                ProcType       = procType,
                DocuNumb       = docuNumb,
                DsrParam       = dsrParam,
                AreaCode       = areaCode,
                CusRtlFl       = cusRtlFl,
                SubmissionDate = DateTime.Now.ToString("dd/MM/yyyy"),
                DsrParams      = await LoadDsrParamsAsync(UserDeptCode()),
                AreaCodes      = await LoadAreaCodesAsync(LoginId()),
                CusTypes       = LoadCustomerTypes()
            };

            if (procType == "U" && !string.IsNullOrEmpty(docuNumb))
            {
                model = await _db.QuerySingleAsync<DsrActvViewModel>(
                    @"SELECT docuNumb,
                             CONVERT(char(10), docuDate, 103) AS DocuDate,
                             dsrParam, cusRtlFl, cusRtlCd, dsrRem01, dsrRem02
                        FROM dptDSRActvt
                       WHERE docuNumb=@docuNumb
                         AND createId=@loginId", 
                    new { docuNumb, loginId = LoginId() });
            }

            return View(model);
        }

        // 2. Process submission
        [HttpPost("Submit")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Submit(DsrActvFormModel form)
        {
            if (!ModelState.IsValid)
            {
                var vm = await RebuildViewModelAsync(form);
                return View("Index", vm);
            }

            if (form.ProcType == "A")
            {
                await _db.ExecuteAsync(
                    @"INSERT INTO dptDSRActvt
                        (docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd, dsrRem01)
                      VALUES
                        (@DocuNumb, @DocuDate, @DsrParam, @CusRtlFl, @CusRtlCd, @DsrRem01)",
                    form);
            }
            else
            {
                await _db.ExecuteAsync(
                    @"UPDATE dptDSRActvt
                         SET docuDate = @DocuDate,
                             dsrParam = @DsrParam,
                             cusRtlFl = @CusRtlFl,
                             cusRtlCd = @CusRtlCd,
                             dsrRem01 = @DsrRem01
                       WHERE docuNumb = @DocuNumb
                         AND createId  = @LoginId", 
                    form);
            }

            // TODO: handle detail rows and images here

            if (form.SubmMthd == "A")
                return RedirectToAction("Index");    // Submit & New

            return RedirectToAction("Summary");    // Submit & Exit
        }

        // 3a. AJAX: Area Codes
        [HttpGet("GetAreaCodes")]
        public async Task<JsonResult> GetAreaCodes()
        {
            var codes = await _db.QueryAsync<AreaCodeDto>(
                @"SELECT areaCode AS Value, areaDesc AS Text, isActive
                    FROM bkmAreaMast
                   WHERE retlArHd=@loginId AND isActive='Y'
                   ORDER BY areaDesc", 
                new { loginId = LoginId() });
            return Json(codes);
        }

        // 3b. AJAX: Search Retailers/Purchasers
        [HttpGet("SearchRetailers")]
        public async Task<JsonResult> SearchRetailers(string areaCode, string custType)
        {
            var list = await _db.QueryAsync<RetailerDto>(
                @"EXEC MK_01083 @AreaCode=@areaCode, @CustType=@custType", 
                new { areaCode, custType });
            return Json(list);
        }

        // 3c. AJAX: Pin Code autocomplete
        [HttpGet("GetPinCodes")]
        public async Task<JsonResult> GetPinCodes(string areaCode, string term)
        {
            var list = await _db.QueryAsync<string>(
                @"EXEC MK_00005 @AreaCode=@areaCode, @Prefix=@term", 
                new { areaCode, term });
            return Json(list);
        }

        // 3d. AJAX: Customer lookup by mobile
        [HttpGet("LookupCustomerByMobile")]
        public async Task<JsonResult> LookupCustomerByMobile(string mobile, string areaCode)
        {
            var info = await _db.QuerySingleAsync<CustomerLookupDto>(
                @"EXEC MK_01106 @Mobile=@mobile, @AreaCode=@areaCode", 
                new { mobile, areaCode });
            return Json(info);
        }

        // Helper: rebuild view model on error
        private async Task<DsrActvViewModel> RebuildViewModelAsync(DsrActvFormModel form)
        {
            var model = new DsrActvViewModel()
            {
                ProcType       = form.ProcType,
                DocuNumb       = form.DocuNumb,
                DsrParam       = form.DsrParam,
                AreaCode       = form.AreaCode,
                CusRtlFl       = form.CusRtlFl,
                SubmissionDate = form.DocuDate,
                DsrParams      = await LoadDsrParamsAsync(UserDeptCode()),
                AreaCodes      = await LoadAreaCodesAsync(LoginId()),
                CusTypes       = LoadCustomerTypes()
            };
            return model;
        }

        // Load select lists
        private Task<List<SelectListItem>> LoadDsrParamsAsync(string deptCode)
            => _db.QueryAsync<SelectListItem>(
                @"SELECT paramCod AS Value, paramDes AS Text
                    FROM wcmParametr
                   WHERE paramTyp=83 AND paramCod<>'00000' AND paramAd5 in ('', @dept)",
                new { dept = deptCode });

        private Task<List<SelectListItem>> LoadAreaCodesAsync(string loginId)
            => _db.QueryAsync<SelectListItem>(
                @"SELECT areaCode AS Value, areaDesc AS Text
                    FROM bkmAreaMast
                   WHERE retlArHd=@loginId AND isActive='Y'",
                new { loginId });

        private List<SelectListItem> LoadCustomerTypes() => new()
        {
            new SelectListItem("Stockiest/ Urban Stockiest","C"),
            new SelectListItem("Direct Dealer","D"),
            new SelectListItem("Rural Stockiest","RD"),
            new SelectListItem("Retailer","R"),
            new SelectListItem("Rural Retailer","RR")
        };

        // Helpers for user context
        private string LoginId()    => User.Identity.Name.Substring(2,4);
        private string UserDeptCode() => User.FindFirst("DeptCode")?.Value;
    }
}

namespace YourApp.Models
{
    public class DsrActvViewModel
    {
        public string ProcType { get; set; }
        public string DocuNumb { get; set; }
        public string DsrParam { get; set; }
        public string AreaCode { get; set; }
        public string CusRtlFl { get; set; }
        public string SubmissionDate { get; set; }
        public string DocuDate { get; set; }
        public IEnumerable<SelectListItem> DsrParams { get; set; }
        public IEnumerable<SelectListItem> AreaCodes { get; set; }
        public IEnumerable<SelectListItem> CusTypes { get; set; }
        // add other fields as needed
    }

    public class DsrActvFormModel
    {
        public string ProcType { get; set; }
        public string DocuNumb { get; set; }
        public string DsrParam { get; set; }
        public string AreaCode { get; set; }
        public string CusRtlFl { get; set; }
        public string CusRtlCd { get; set; }
        public string DsrRem01 { get; set; }
        public string DocuDate { get; set; }
        public string SubmMthd { get; set; }  // "A" or "E"
        public string LoginId  => User.Identity.Name.Substring(2,4);
    }

    public class AreaCodeDto
    {
        public string Value { get; set; }
        public string Text { get; set; }
        public string isActive { get; set; }
    }

    public class RetailerDto
    {
        public string Code { get; set; }
        public string Name { get; set; }
    }

    public class CustomerLookupDto
    {
        public string Name      { get; set; }
        public string Phone     { get; set; }
        public string AreaCode  { get; set; }
        public string PinCode   { get; set; }
        public string City      { get; set; }
        public string District  { get; set; }
    }
}

// Stub: IDatabaseHelper interface
namespace YourApp.Data
{
    public interface IDatabaseHelper
    {
        Task<T> QuerySingleAsync<T>(string sql, object param = null);
        Task<IEnumerable<T>> QueryAsync<T>(string sql, object param = null);
        Task<int> ExecuteAsync(string sql, object param = null);
    }
}
