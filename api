using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class RetailerController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public RetailerController(DatabaseHelper dbHelper)
        {
            _db = dbHelper;
        }

        // POST: api/Retailer/register
        [HttpPost("register")]
        public IActionResult Register([FromBody] RetailerRegisterRequest? req = null)
        {
            try
            {
                req ??= new RetailerRegisterRequest();

                // --- sane defaults for NOT NULL columns not present in UI ---
                // Fixed codes and required flags:
                var isActive  = string.IsNullOrWhiteSpace(req.isActive) ? "Y" : req.isActive!.Trim(); // char(1)
                var benfNmFl  = string.IsNullOrWhiteSpace(req.benfNmFl) ? "N" : req.benfNmFl!.Trim(); // char(1)
                var schmAbFL  = string.IsNullOrWhiteSpace(req.schmAbFL) ? "N" : req.schmAbFL!.Trim(); // char(1)
                var ubsRtlF1  = string.IsNullOrWhiteSpace(req.ubsRtlF1) ? "N" : req.ubsRtlF1!.Trim(); // char(1)

                // char lengths: pad/trim to exact where needed
                string FixLen(string? s, int len) {
                    s = (s ?? "").Trim();
                    if (s.Length > len) return s.Substring(0, len);
                    return s;
                }

                // map / normalize a few
                var areaCode = FixLen(req.areaCode, 3);
                var retlCode = FixLen(req.retlCode, 8);       // if you don’t have it, pass "" and let DB/trigger fill if any
                var custCode = FixLen(req.custCode, 8);
                var sapRtlCd = FixLen(req.sapRtlCd, 10);

                // Required-bank fields (not in UI) -> empty string fallback
                var bankAcNo = req.bankAcNo ?? "";
                var benfName = req.benfName ?? (req.firmName ?? "");
                var bankBnDs = req.bankBnDs ?? "";  // branch district/desc
                var bankBnNo = req.bankBnNo ?? "";
                var bankIFSC = req.bankIFSC ?? "";

                // Required identity/phones
                var offTelN1 = req.offTelN1 ?? (req.officeTelephone ?? "");
                var offTelN2 = req.offTelN2 ?? ""; // fallback empty
                var emailAdd = req.emailAdd ?? (req.email ?? "");
                var itxPanNo = req.itxPanNo ?? (req.panNumber ?? "");
                var mobileNo = req.mobileNo ?? (req.mobile ?? "");

                // More required
                var retlAdd3 = req.retlAdd3 ?? (req.address3 ?? "-");
                var district = req.district ?? (req.districtUi ?? "");
                var retlPinC = req.retlPinC ?? ""; // pin is required — keep empty if you truly don’t have it
                var retlCatg = string.IsNullOrWhiteSpace(req.retlCatg)
                    ? (req.retailCategory switch { "Urban" => "U", "Rural" => "R", "Direct Dealer" => "D", _ => "U" })
                    : req.retlCatg!.Trim();

                var typeOfBs  = req.typeOfBs  ?? "Retail";
                var busSttYr  = req.busSttYr  ?? DateTime.Now.Year.ToString().PadLeft(4, '0');
                var busBwYrs  = req.busBwYrs  ?? "0000";
                var locStxNo  = req.locStxNo  ?? (req.stockistCode ?? "");  // NOT NULL
                var createId  = string.IsNullOrWhiteSpace(req.createId) ? "web" : req.createId!;
                var createDt  = DateTime.Now;

                // Optional (NULLable) values:
                object? OrDbNull(string? v) => string.IsNullOrWhiteSpace(v) ? (object?)DBNull.Value : v.Trim();

                var sql = @"
INSERT INTO dbo.rtmRetailer
(
    retlCode, sapRtlCd, retlName, retlChNm, contName, custCode, areaCode, location,
    cityName, mrktName, retlAdd1, retlAdd2, retlAdd3, district, retlPinC,
    benfNmFl, bankAcNo, benfName, bankBnNm, bankBnDs, bankBnNo, bankIFSC, ifscCtNm,
    retlCatg, panGstFl, itxPanNo, gstnNumb, idCardTy, idCardNo, kycVerFl, kycVerDt,
    bnkKycFl, bnkKycDt, concEmpl, offTelN1, offTelN2, mobileNo, emailAdd,
    typeOfBs, busSttYr, busBwYrs, pntNptTy, isActive, createId, createDt, updateId, updateDt,
    locStxNo, retlClss, rtDocCnt, schmAbFL, exclUpld, sapInsDt, sapUpdDt, retRefNo, adhrName, panCName,
    schmEfDt, uniqueCd, locaCapr, latitute, lgtitute, cenLoctn, cenPopln, ubsRtlFl, retlType, refDDCod,
    schmEmpl, retlTrSt, retlCtCh, locUpdNo, finlRermk, rtlCtInd, rtlCtgBw, retlInCt, cityCode, lstLocDt,
    lstLcUsr, alliedCd, posiCode, ubsRtlF1, sistrCnF
)
VALUES
(
    @retlCode, @sapRtlCd, @retlName, @retlChNm, @contName, @custCode, @areaCode, @location,
    @cityName, @mrktName, @retlAdd1, @retlAdd2, @retlAdd3, @district, @retlPinC,
    @benfNmFl, @bankAcNo, @benfName, @bankBnNm, @bankBnDs, @bankBnNo, @bankIFSC, @ifscCtNm,
    @retlCatg, @panGstFl, @itxPanNo, @gstnNumb, @idCardTy, @idCardNo, @kycVerFl, @kycVerDt,
    @bnkKycFl, @bnkKycDt, @concEmpl, @offTelN1, @offTelN2, @mobileNo, @emailAdd,
    @typeOfBs, @busSttYr, @busBwYrs, @pntNptTy, @isActive, @createId, @createDt, @updateId, @updateDt,
    @locStxNo, @retlClss, @rtDocCnt, @schmAbFL, @exclUpld, @sapInsDt, @sapUpdDt, @retRefNo, @adhrName, @panCName,
    @schmEfDt, @uniqueCd, @locaCapr, @latitute, @lgtitute, @cenLoctn, @cenPopln, @ubsRtlFl, @retlType, @refDDCod,
    @schmEmpl, @retlTrSt, @retlCtCh, @locUpdNo, @finlRermk, @rtlCtInd, @rtlCtgBw, @retlInCt, @cityCode, @lstLocDt,
    @lstLcUsr, @alliedCd, @posiCode, @ubsRtlF1, @sistrCnF
);

SELECT SCOPE_IDENTITY() AS NewId;";

                var p = new Dictionary<string, object?>
                {
                    // required identities / names from UI
                    ["@retlCode"]  = retlCode,                       // if you generate server-side, replace with code
                    ["@sapRtlCd"]  = sapRtlCd,
                    ["@retlName"]  = req.firmName ?? "",             // store as Retailer Name
                    ["@retlChNm"]  = req.firmName ?? "",             // channel name -> same as firm for now
                    ["@contName"]  = req.proprietorName ?? "",       // contact name
                    ["@custCode"]  = custCode,
                    ["@areaCode"]  = areaCode,
                    ["@location"]  = req.area ?? "",                 // UI Area as location

                    ["@cityName"]  = OrDbNull(req.cityName),
                    ["@mrktName"]  = OrDbNull(req.marketName),
                    ["@retlAdd1"]  = OrDbNull(req.address1),
                    ["@retlAdd2"]  = OrDbNull(req.address2),
                    ["@retlAdd3"]  = retlAdd3,
                    ["@district"]  = district,
                    ["@retlPinC"]  = retlPinC,

                    ["@benfNmFl"]  = benfNmFl,
                    ["@bankAcNo"]  = bankAcNo,
                    ["@benfName"]  = benfName,
                    ["@bankBnNm"]  = OrDbNull(req.bankBranchName),
                    ["@bankBnDs"]  = bankBnDs,
                    ["@bankBnNo"]  = bankBnNo,
                    ["@bankIFSC"]  = bankIFSC,
                    ["@ifscCtNm"]  = OrDbNull(req.ifscCityName),

                    ["@retlCatg"]  = retlCatg,
                    ["@panGstFl"]  = OrDbNull(req.panGstFlag),       // 'P'/'G' or 'Y'/'N'
                    ["@itxPanNo"]  = itxPanNo,
                    ["@gstnNumb"]  = OrDbNull(req.gstNumber),
                    ["@idCardTy"]  = OrDbNull(req.idCardType),
                    ["@idCardNo"]  = OrDbNull(req.aadharNumber),
                    ["@kycVerFl"]  = OrDbNull(req.kycVerifiedFlag),
                    ["@kycVerDt"]  = (object?)req.kycVerifiedDate ?? DBNull.Value,

                    ["@bnkKycFl"]  = OrDbNull(req.bankKycFlag),
                    ["@bnkKycDt"]  = (object?)req.bankKycDate ?? DBNull.Value,
                    ["@concEmpl"]  = OrDbNull(req.concernEmployee),
                    ["@offTelN1"]  = offTelN1,
                    ["@offTelN2"]  = offTelN2,
                    ["@mobileNo"]  = mobileNo,
                    ["@emailAdd"]  = emailAdd,

                    ["@typeOfBs"]  = typeOfBs,
                    ["@busSttYr"]  = busSttYr,
                    ["@busBwYrs"]  = busBwYrs,
                    ["@pntNptTy"]  = OrDbNull(req.painterNptType),
                    ["@isActive"]  = isActive,
                    ["@createId"]  = createId,
                    ["@createDt"]  = createDt,
                    ["@updateId"]  = DBNull.Value,
                    ["@updateDt"]  = DBNull.Value,

                    ["@locStxNo"]  = locStxNo,
                    ["@retlClss"]  = OrDbNull(req.retailClass),
                    ["@rtDocCnt"]  = DBNull.Value,
                    ["@schmAbFL"]  = schmAbFL,
                    ["@exclUpld"]  = OrDbNull(req.excludeUploadFlag),
                    ["@sapInsDt"]  = DBNull.Value,
                    ["@sapUpdDt"]  = DBNull.Value,
                    ["@retRefNo"]  = OrDbNull(req.retailRefNo),
                    ["@adhrName"]  = OrDbNull(req.aadharName),
                    ["@panCName"]  = OrDbNull(req.panCardName),

                    ["@schmEfDt"]  = DBNull.Value,
                    ["@uniqueCd"]  = OrDbNull(req.uniqueCode),
                    ["@locaCapr"]  = OrDbNull(req.locationCapacity),  // long text ok
                    ["@latitute"]  = OrDbNull(req.latitude),
                    ["@lgtitute"]  = OrDbNull(req.longitude),
                    ["@cenLoctn"]  = OrDbNull(req.centerLocation),
                    ["@cenPopln"]  = DBNull.Value,
                    ["@ubsRtlFl"]  = OrDbNull(req.ubsRetailFlag),
                    ["@retlType"]  = OrDbNull(req.retailType),
                    ["@refDDCod"]  = OrDbNull(req.refDDCode),

                    ["@schmEmpl"]  = OrDbNull(req.schemeEmployee),
                    ["@retlTrSt"]  = OrDbNull(req.retailTrStatus),
                    ["@retlCtCh"]  = OrDbNull(req.retailCtChange),
                    ["@locUpdNo"]  = DBNull.Value,
                    ["@finlRermk"] = OrDbNull(req.finalRemark),
                    ["@rtlCtInd"]  = OrDbNull(req.rtlCtInd),
                    ["@rtlCtgBw"]  = OrDbNull(req.rtlCtgBw),
                    ["@retlInCt"]  = OrDbNull(req.retailInCt),
                    ["@cityCode"]  = OrDbNull(req.cityCode),
                    ["@lstLocDt"]  = DBNull.Value,

                    ["@lstLcUsr"]  = OrDbNull(req.lastLocUser),
                    ["@alliedCd"]  = OrDbNull(req.alliedCode),
                    ["@posiCode"]  = OrDbNull(req.posiCode),
                    ["@ubsRtlF1"]  = ubsRtlF1,
                    ["@sistrCnF"]  = OrDbNull(req.sisterConcernFlag),
                };

                var res = _db.WebSessBean(sql, p);
                var newId = res?.FirstOrDefault()?["NewId"]?.ToString();

                return Ok(new
                {
                    success = true,
                    message = "Retailer registered successfully",
                    retailerId = newId,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return BadRequest(new
                {
                    success = false,
                    message = "Retailer registration failed",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }
    }

    // DTO lining up with Flutter fields, plus DB-only fields you may send as "".
    public class RetailerRegisterRequest
    {
        // From UI
        public string? processType { get; set; }             // Add/Update (not stored)
        public string? retailCategory { get; set; }          // mapped -> retlCatg (U/R/D)
        public string? area { get; set; }                    // -> location
        public string? districtUi { get; set; }              // -> district if district not sent
        public string? gstNumber { get; set; }               // -> gstnNumb
        public string? panNumber { get; set; }               // -> itxPanNo
        public string? mobile { get; set; }                  // -> mobileNo
        public string? address1 { get; set; }                // -> retlAdd1
        public string? address2 { get; set; }                // -> retlAdd2
        public string? address3 { get; set; }                // -> retlAdd3
        public string? firmName { get; set; }                // -> retlName/retlChNm
        public string? officeTelephone { get; set; }         // -> offTelN1
        public string? email { get; set; }                   // -> emailAdd
        public string? tallyRetailerCode { get; set; }       // (optional)
        public string? concernEmployee { get; set; }         // -> concEmpl
        public string? aadharNumber { get; set; }            // -> idCardNo
        public string? proprietorName { get; set; }          // -> contName
        public string? schemeRequired { get; set; }          // (optional UI)

        // Server/DB-bound (you can fill many with "")
        public string? retlCode { get; set; }
        public string? sapRtlCd { get; set; }
        public string? contName { get; set; }
        public string? custCode { get; set; }
        public string? areaCode { get; set; }
        public string? location { get; set; }
        public string? cityName { get; set; }
        public string? mrktName { get; set; }
        public string? retlAdd1 { get; set; }
        public string? retlAdd2 { get; set; }
        public string? retlAdd3 { get; set; }
        public string? district { get; set; }
        public string? retlPinC { get; set; }

        public string? benfNmFl { get; set; }
        public string? bankAcNo { get; set; }
        public string? benfName { get; set; }
        public string? bankBnNm { get; set; }
        public string? bankBnDs { get; set; }
        public string? bankBnNo { get; set; }
        public string? bankIFSC { get; set; }
        public string? ifscCtNm { get; set; }

        public string? retlCatg { get; set; }
        public string? panGstFl { get; set; }
        public string? itxPanNo { get; set; }
        public string? idCardType { get; set; }
        public string? kycVerifiedFlag { get; set; }
        public DateTime? kycVerifiedDate { get; set; }
        public string? bankKycFlag { get; set; }
        public DateTime? bankKycDate { get; set; }
        public string? concEmpl { get; set; }
        public string? offTelN1 { get; set; }
        public string? offTelN2 { get; set; }
        public string? mobileNo { get; set; }
        public string? emailAdd { get; set; }

        public string? typeOfBs { get; set; }
        public string? busSttYr { get; set; }
        public string? busBwYrs { get; set; }
        public string? pntNptTy { get; set; }
        public string? isActive { get; set; }
        public string? createId { get; set; }
        public string? updateId { get; set; }
        public string? locStxNo { get; set; }
        public string? retailClass { get; set; }
        public string? excludeUploadFlag { get; set; }
        public string? retailRefNo { get; set; }
        public string? aadharName { get; set; }
        public string? panCardName { get; set; }
        public string? uniqueCode { get; set; }
        public string? locationCapacity { get; set; } // locaCapr (MAX)
        public string? latitude { get; set; }
        public string? longitude { get; set; }
        public string? centerLocation { get; set; }
        public string? ubsRetailFlag { get; set; }
        public string? retailType { get; set; }
        public string? refDDCode { get; set; }
        public string? schemeEmployee { get; set; }
        public string? retailTrStatus { get; set; }
        public string? retailCtChange { get; set; }
        public string? finalRemark { get; set; }
        public string? rtlCtInd { get; set; }
        public string? rtlCtgBw { get; set; }
        public string? retailInCt { get; set; }
        public string? cityCode { get; set; }
        public string? lastLocUser { get; set; }
        public string? alliedCode { get; set; }
        public string? posiCode { get; set; }
        public string? ubsRtlF1 { get; set; }
        public string? sisterConcernFlag { get; set; }

        // Convenience: stockist code from UI read-only field
        public string? stockistCode { get; set; }
    }
}
