using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using sparshWebService.DataAccess;
using System.IdentityModel.Tokens.Jwt;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add Controllers
builder.Services.AddControllers();
builder.Services.AddSwaggerGen();

// Retrieve Connection Strings
var connectionStrings = builder.Configuration.GetSection("ConnectionStrings").Get<Dictionary<string, string>>();

// Register DatabaseHelper as a Singleton
builder.Services.AddSingleton(provider =>
    new DatabaseHelper(
        connectionStrings["bwlive"],
        connectionStrings["itkHaria"],
        connectionStrings["imageData"]));

// Add HttpClient for DI
builder.Services.AddHttpClient();

// Add Authentication
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = false,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "Birla White IT", // Set your valid issuer
            IssuerSigningKeyResolver = (token, securityToken, kid, parameters) =>
            {
                // Resolve signing key dynamically based on PartnerID
                var jwtToken = new JwtSecurityTokenHandler().ReadJwtToken(token);
                var partnerId = jwtToken.Claims.FirstOrDefault(c => c.Type == "PartnerID")?.Value;
                if (partnerId != null)
                {
                    var dbHelper = builder.Services.BuildServiceProvider().GetRequiredService<DatabaseHelper>();
                    var secretKey = dbHelper.GetSecretKey(partnerId); // Retrieve SecretKey from DB
                    if (!string.IsNullOrEmpty(secretKey))
                    {
                        return new[] { new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey)) };
                    }
                }
                throw new SecurityTokenInvalidSigningKeyException("Invalid PartnerID or SecretKey.");
            }
        };

        options.Events = new JwtBearerEvents
        {
            OnMessageReceived = context =>
            {
                var authHeader = context.Request.Headers["Authorization"].ToString();
                if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith("Bearer "))
                {
                    context.Token = authHeader.Replace("Bearer ", "");
                }
                return Task.CompletedTask;
            }
        };
    });

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Custom Middleware for PartnerID and API access validation
app.UseMiddleware<AuthenticationMiddleware>();

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();

// Add a default home page for the API
app.MapGet("/", async context =>
{
    context.Response.ContentType = "text/html";
    await context.Response.WriteAsync("<h1>Welcome to My API</h1><p>This is the default home page.</p>");
});

app.MapControllers();
app.Run();
