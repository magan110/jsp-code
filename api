using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class ApprovalController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public ApprovalController(DatabaseHelper dbHelper)
        {
            _db = dbHelper;
        }

        // ------------------------------------------------------------
        // 1) PENDING LIST (paged + search + filter by type)
        // GET: /api/Approval/pending?search=&type=All&page=1&pageSize=20
        // ------------------------------------------------------------
        [HttpGet("pending")]
        public IActionResult GetPending(
            [FromQuery] string? search = "",
            [FromQuery] string? type = "All",
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 20,
            [FromQuery] string? sort = "createDt_desc")
        {
            page = page <= 0 ? 1 : page;
            pageSize = pageSize <= 0 ? 20 : pageSize;
            var skip = (page - 1) * pageSize;

            // Only PENDING rows now: isActive NOT IN ('Y','R'); also exclude blocked
            var where = @"
WHERE 
    ISNULL(blkStuts,'N') <> 'Y'
    AND ISNULL(isActive,'') NOT IN ('Y','R')
";
            var p = new Dictionary<string, object?>();

            // Filter by type (friendly label or 2-char code)
            if (!string.IsNullOrWhiteSpace(type) && !type.Equals("All", StringComparison.OrdinalIgnoreCase))
            {
                where += "  AND (contrtyp = @type OR inflType = @typeShort)\n";
                p["@type"] = type;
                p["@typeShort"] = (type.Length >= 2 ? type[..2] : type).ToUpperInvariant();
            }

            // Search
            if (!string.IsNullOrWhiteSpace(search))
            {
                where += @"
  AND (
        inflName LIKE @kw 
        OR (LTRIM(RTRIM(ISNULL(frstname,''))) + ' ' + LTRIM(RTRIM(ISNULL(middname,''))) + ' ' + LTRIM(RTRIM(ISNULL(lastname,'')))) LIKE @kw
        OR mobileNo LIKE @kw
        OR areaCode LIKE @kw
        OR inflCode LIKE @kw
        OR contrtyp LIKE @kw
      )
";
                p["@kw"] = $"%{search.Trim()}%";
            }

            // Sorting
            string orderBy = sort?.ToLowerInvariant() switch
            {
                "name_asc" => "ORDER BY name ASC",
                "name_desc" => "ORDER BY name DESC",
                "type_asc" => "ORDER BY type ASC",
                "type_desc" => "ORDER BY type DESC",
                "date_asc" => "ORDER BY dt ASC",
                _ => "ORDER BY dt DESC", // default date_desc
            };

            // Single result set with COUNT() OVER()
            var sql = $@"
;WITH base AS
(
    SELECT
        inflCode,
        LTRIM(RTRIM(
            NULLIF(
                CONCAT(
                    NULLIF(LTRIM(RTRIM(ISNULL(frstname,''))),''), ' ',
                    NULLIF(LTRIM(RTRIM(ISNULL(middname,''))),''), ' ',
                    NULLIF(LTRIM(RTRIM(ISNULL(lastname,''))),'')
                ), '  ')
        )) AS compositeName,
        inflName,
        ISNULL(contrtyp, '') AS contrtyp,
        ISNULL(inflType, '') AS inflType,
        ISNULL(isActive,'') AS isActive,
        COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) AS dt
    FROM dbo.ctmInfluncr WITH (NOLOCK)
    {where}
)
, shaped AS
(
    SELECT
        inflCode AS id,
        CAST(NULLIF(LTRIM(RTRIM(CASE WHEN ISNULL(compositeName,'') <> '' THEN compositeName ELSE inflName END)), '') AS NVARCHAR(256)) AS name,
        CAST(NULLIF(LTRIM(RTRIM(CASE WHEN ISNULL(contrtyp,'') <> '' THEN contrtyp ELSE inflType END)), '') AS NVARCHAR(255)) AS type,
        dt,
        CASE 
            WHEN isActive = 'Y' THEN 'Approved'
            WHEN isActive = 'R' THEN 'Rejected'
            ELSE 'Pending'
        END AS status
    FROM base
)
SELECT
    id,
    ISNULL(name,'') AS name,
    CASE WHEN ISNULL(type,'')='' THEN 'Contractor' ELSE type END AS type,
    CONVERT(VARCHAR(10), dt, 120) AS [date], -- yyyy-MM-dd
    status,
    COUNT(1) OVER() AS total
FROM shaped
{orderBy}
OFFSET @skip ROWS FETCH NEXT @take ROWS ONLY;
";

            p["@skip"] = skip;
            p["@take"] = pageSize;

            var rows = _db.WebSessBean(sql, p ?? new Dictionary<string, object?>())
                       ?? new List<Dictionary<string, object>>();

            int total = 0;
            if (rows.Count > 0)
            {
                var tStr = rows[0].GetValueOrDefault("total")?.ToString();
                _ = int.TryParse(tStr, out total);
            }

            var items = rows.Select(r =>
            {
                var id = r["id"]?.ToString() ?? "";
                var name = r["name"]?.ToString() ?? "";
                var typeOut = r["type"]?.ToString() ?? "Contractor";
                var date = r["date"]?.ToString() ?? "";
                var status = r["status"]?.ToString() ?? "Pending";
                return new
                {
                    id,
                    name,
                    type = typeOut,
                    date,
                    status,
                    avatar = MakeAvatar(name, id)
                };
            });

            return Ok(new
            {
                success = true,
                page,
                pageSize,
                total,
                items
            });
        }

        // ------------------------------------------------------------
        // 2) STATS for the 3 cards (based on isActive)
        // GET: /api/Approval/stats
        // ------------------------------------------------------------
        [HttpGet("stats")]
        public IActionResult GetStats()
        {
            var sql = @"
;WITH base AS
(
    SELECT
        ISNULL(isActive,'') AS ia,
        ISNULL(contrtyp,'') AS contrtyp,
        ISNULL(inflType,'') AS inflType
    FROM dbo.ctmInfluncr WITH (NOLOCK)
    WHERE ISNULL(blkStuts,'N') <> 'Y'
)
SELECT 
    (SELECT COUNT(1) FROM base WHERE ia NOT IN ('Y','R')) AS totalPending,
    (SELECT COUNT(1) FROM base WHERE ia NOT IN ('Y','R') AND (contrtyp LIKE '%Contractor%' OR inflType = 'CO')) AS contractors,
    (SELECT COUNT(1) FROM base WHERE ia NOT IN ('Y','R') AND (contrtyp LIKE '%Painter%' OR inflType = 'PA')) AS painters;
";
            var rows = _db.WebSessBean(sql, new Dictionary<string, object?>())
                       ?? new List<Dictionary<string, object>>();
            var r = rows.FirstOrDefault() ?? new Dictionary<string, object>();

            int Tot(string k) => int.TryParse(r.GetValueOrDefault(k)?.ToString(), out var v) ? v : 0;

            return Ok(new
            {
                success = true,
                totalPending = Tot("totalPending"),
                contractors = Tot("contractors"),
                painters = Tot("painters"),
                timestamp = DateTime.Now
            });
        }

        // ------------------------------------------------------------
        // 3) APPROVE: set isActive = 'Y'
        // POST: /api/Approval/approve  { inflCode, actorId }
        // ------------------------------------------------------------
        [HttpPost("approve")]
        public IActionResult Approve([FromBody] ApprovalActionRequest req)
        {
            if (string.IsNullOrWhiteSpace(req.InflCode))
                return BadRequest(new { success = false, message = "InflCode is required" });

            var p = new Dictionary<string, object?>
            {
                ["@code"] = req.InflCode,
                ["@usr"] = Cut(req.ActorId ?? "API", 10)
            };

            var sql = @"
UPDATE dbo.ctmInfluncr
   SET isActive = 'Y',
       updateId = @usr,
       updateDt = GETDATE()
 WHERE inflCode = @code;
SELECT @@ROWCOUNT AS rc;
";
            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var rc = rows.FirstOrDefault()?["rc"]?.ToString();
            if (rc == "0") return NotFound(new { success = false, message = "Not found" });

            return Ok(new { success = true, message = "Approved", influencerCode = req.InflCode });
        }

        // ------------------------------------------------------------
        // 4) REJECT: set isActive = 'R'
        // POST: /api/Approval/reject  { inflCode, reason, actorId }
        // ------------------------------------------------------------
        [HttpPost("reject")]
        public IActionResult Reject([FromBody] RejectionActionRequest req)
        {
            if (string.IsNullOrWhiteSpace(req.InflCode))
                return BadRequest(new { success = false, message = "InflCode is required" });

            var p = new Dictionary<string, object?>
            {
                ["@code"] = req.InflCode,
                ["@usr"] = Cut(req.ActorId ?? "API", 10),
                ["@rem"] = Cut(req.Reason ?? "", 1000)
            };

            var sql = @"
UPDATE dbo.ctmInfluncr
   SET isActive = 'R',
       rjcRemrk = @rem,
       updateId = @usr,
       updateDt = GETDATE()
 WHERE inflCode = @code;
SELECT @@ROWCOUNT AS rc;
";
            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var rc = rows.FirstOrDefault()?["rc"]?.ToString();
            if (rc == "0") return NotFound(new { success = false, message = "Not found" });

            return Ok(new { success = true, message = "Rejected", influencerCode = req.InflCode });
        }


        // ------------------------------------------------------------

        // 5) DETAILS by inflCode (for Registration Details screen)

        // GET: /api/Approval/{inflCode}

        // ------------------------------------------------------------

        // Add inside ApprovalController

        // ------------------------------------------------------------

        // COMPACT DETAILS for RegistrationDetailsScreen

        // GET: /api/Approval/details/{inflCode}

        // ------------------------------------------------------------

        [HttpGet("details/{inflCode}")]

        public IActionResult GetCompactDetails([FromRoute] string inflCode)

        {

            if (string.IsNullOrWhiteSpace(inflCode))

                return BadRequest(new { success = false, message = "inflCode is required" });

            var p = new Dictionary<string, object?>

            {

                ["@code"] = inflCode.Trim()

            };

            var sql = @"

SELECT TOP 1

    -- keys / status / typing

    inflCode,

    ISNULL(isActive,'')            AS isActive,

    ISNULL(contrtyp,'')            AS contrtyp,

    ISNULL(inflType,'')            AS inflType,

    CONVERT(VARCHAR(10), COALESCE(createDt, sapInsDt, frstScDt, GETDATE()), 120) AS submittedDate,
 
    -- names

    LTRIM(RTRIM(ISNULL(frstname,''))) AS frstname,

    LTRIM(RTRIM(ISNULL(middname,''))) AS middname,

    LTRIM(RTRIM(ISNULL(lastname,''))) AS lastname,

    LTRIM(RTRIM(ISNULL(inflName,''))) AS inflName,
 
    -- contact

    ISNULL(mobileNo,'')            AS mobileNo,

    ISNULL(emailAdd,'')            AS emailAdd,
 
    -- reference

    ISNULL(referenc,'')            AS referenc,
 
    -- address (present)

    ISNULL(inflAdd1,'')            AS inflAdd1,

    ISNULL(inflAdd2,'')            AS inflAdd2,

    ISNULL(inflAdd3,'')            AS inflAdd3,

    ISNULL(inflCity,'')            AS inflCity,

    ISNULL(district,'')            AS district,

    ISNULL(inflPinC,'')            AS inflPinC,
 
    -- business / VAT / license

    ISNULL(comtrdnm,'')            AS comtrdnm,  -- Trade Name (preferred companyName)

    ISNULL(vatfrmnm,'')            AS vatfrmnm,  -- Firm Name (fallback companyName)

    ISNULL(comlcnno,'')            AS comlcnno,  -- License Number

    ISNULL(vattxreg,'')            AS vattxreg,  -- TRN Number
 
    -- bank

    ISNULL(bankApNm,'')            AS bankApNm,  -- Account Holder

    ISNULL(ibannumb,'')            AS ibannumb,  -- IBAN

    ISNULL(bankBnNm,'')            AS bankBnNm,  -- Bank Name

    ISNULL(bankBnDs,'')            AS bankBnDs   -- Branch

FROM dbo.ctmInfluncr WITH (NOLOCK)

WHERE inflCode = @code;

";

            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();

            var r = rows.FirstOrDefault();

            if (r == null)

                return NotFound(new { success = false, message = "Not found" });

            string G(string k) => r.GetValueOrDefault(k)?.ToString() ?? "";

            static string MapStatus(string ia) => (ia ?? "").Trim().ToUpperInvariant() switch

            {

                "Y" => "Approved",

                "R" => "Rejected",

                _ => "Pending"

            };

            // Compose display name

            var fullName = ComposeName(G("frstname"), G("middname"), G("lastname"), G("inflName"));

            var name = string.IsNullOrWhiteSpace(fullName) ? G("inflName") : fullName;

            // Type: prefer contrtyp; fallback inflType; final fallback "Contractor"

            var typeRaw = string.IsNullOrWhiteSpace(G("contrtyp")) ? G("inflType") : G("contrtyp");

            var type = string.IsNullOrWhiteSpace(typeRaw) ? "Contractor" : typeRaw;

            // Company name: prefer trade name, else firm name

            var companyName = string.IsNullOrWhiteSpace(G("comtrdnm")) ? G("vatfrmnm") : G("comtrdnm");

            // One-line address for the details screen

            string AddressLine(params string[] parts)

            {

                var clean = parts

                    .Select(x => (x ?? "").Trim())

                    .Where(x => !string.IsNullOrWhiteSpace(x))

                    .ToList();

                return string.Join(", ", clean);

            }

            var address = AddressLine(G("inflAdd1"), G("inflAdd2"), G("inflAdd3"), G("inflCity"), G("district"), G("inflPinC"));

            var status = MapStatus(G("isActive"));

            return Ok(new

            {

                success = true,

                // Header / Registration Information

                id = G("inflCode"),

                name = name,

                type = type,

                mobile = G("mobileNo"),

                email = G("emailAdd"),

                submittedDate = G("submittedDate"),

                status = status,

                // Personal Details

                fullName = name,

                address = address,

                reference = G("referenc"),

                // Business Details

                companyName = companyName,

                licenseNumber = G("comlcnno"),

                trnNumber = G("vattxreg"),

                // Bank Details

                accountHolder = G("bankApNm"),

                iban = G("ibannumb"),

                bankName = G("bankBnNm"),

                branch = G("bankBnDs"),

                // UI avatar

                avatar = MakeAvatar(name, G("inflCode"))

            });

        }





        // ========================= Helpers =========================

        private static string MapStatus(string? ia)
        {
            ia = (ia ?? "").Trim().ToUpperInvariant();
            return ia switch
            {
                "Y" => "Approved",
                "R" => "Rejected",
                _ => "Pending"
            };
        }

        private static string MakeAvatar(string? name, string? fallbackId)
        {
            // build initials from name, else from inflCode
            if (!string.IsNullOrWhiteSpace(name))
            {
                var parts = Regex.Split(name.Trim(), @"\s+")
                                 .Where(s => !string.IsNullOrWhiteSpace(s))
                                 .ToList();
                if (parts.Count == 1)
                {
                    return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpperInvariant();
                }
                if (parts.Count >= 2)
                {
                    var a = parts[0][0];
                    var b = parts[^1][0];
                    return $"{char.ToUpperInvariant(a)}{char.ToUpperInvariant(b)}";
                }
            }
            var f = (fallbackId ?? "ID");
            return f.Length >= 2 ? f.Substring(0, 2).ToUpperInvariant() : f.ToUpperInvariant();
        }

        private static string ComposeName(string? f, string? m, string? l, string? fallback)
        {
            var list = new[] { f, m, l }
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .Select(x => x!.Trim());
            var joined = string.Join(" ", list).Trim();
            if (!string.IsNullOrWhiteSpace(joined)) return joined;
            return (fallback ?? "").Trim();
        }

        private static string? Left(string? s, int n)
        {
            if (string.IsNullOrWhiteSpace(s)) return null;
            var t = s.Trim();
            return t.Length <= n ? t : t.Substring(0, n);
        }

        private static string Cut(string? s, int max)
        {
            if (string.IsNullOrWhiteSpace(s)) return "";
            var t = s.Trim();
            return t.Length <= max ? t : t[..max];
        }

        private static string TryDate(string? sqlDate)
        {
            // Expecting yyyy-MM-ddTHH:mm:ss or SQL smalldatetime string; we output yyyy-MM-dd for Flutter
            if (DateTime.TryParse(sqlDate, out var dt))
                return dt.ToString("yyyy-MM-dd");
            return DateTime.Now.ToString("yyyy-MM-dd");
        }
    }

    // ========================= Request Models =========================

    public class ApprovalActionRequest
    {
        public string? InflCode { get; set; }
        public string? ActorId { get; set; }   // loginId to set updateId
    }

    public class RejectionActionRequest : ApprovalActionRequest
    {
        public string? Reason { get; set; }    // goes to rjcRemrk
    }
}
