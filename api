using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;

namespace MyFirstApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        // max‐lengths from your schema
        private const int LDocuNumb  = 16;
        private const int LDsrParam  = 2;
        private const int LCusRtlFl  = 2;
        private const int LAreaCode  = 3;
        private const int LCuRtType  = 2;
        private const int LDeptCode  = 6;
        private const int LStatFlag  = 1;
        private const int LCreateId  = 10;
        private const int LRetlStFl  = 1;
        private const int LCstBisTy  = 2;
        private const int LOrdInsFl  = 1;

        public DsrController(DatabaseHelper db)
        {
            _db = db;
        }

        [HttpGet]
        public IActionResult GetAll()
        {
            try
            {
                var rows = _db.WebSessBean("SELECT * FROM dptDSRActvt", new Dictionary<string, object>());
                return Ok(rows);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpGet("{docuNumb}")]
        public IActionResult Get(string docuNumb)
        {
            try
            {
                var rows = _db.WebSessBean(
                    "SELECT * FROM dptDSRActvt WHERE docuNumb = @DocuNumb",
                    new Dictionary<string, object> { ["@DocuNumb"] = docuNumb });
                if (rows.Count == 0) return NotFound();
                return Ok(rows[0]);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPost]
        public IActionResult Create([FromBody] DsrRequest req)
        {
            // 1) validate all required strings
            var bad = Validate(req);
            if (bad != null) return bad;

            try
            {
                var sql = @"
INSERT INTO dptDSRActvt
  (docuNumb, docuDate,
   deptCode, statFlag, createId, retlStFl, cstBisTy, ordInsFl,
   dsrParam, cusRtlFl, cusRtlCd,
   dsrRem01, dsrRem02, dsrRem03, dsrRem04,
   dsrRem05, dsrRem06, dsrRem07, dsrRem08,
   areaCode, cuRtType, ordExDat,
   createDt)
VALUES
  (@docuNumb, @docuDate,
   @deptCode, @statFlag, @createId, @retlStFl, @cstBisTy, @ordInsFl,
   @dsrParam, @cusRtlFl, @cusRtlCd,
   @dsrRem01, @dsrRem02, @dsrRem03, @dsrRem04,
   @dsrRem05, @dsrRem06, @dsrRem07, @dsrRem08,
   @areaCode, @cuRtType, @ordExDat,
   GETDATE())";

                var p = new Dictionary<string, object>
                {
                    ["@docuNumb"] = req.docuNumb,
                    ["@docuDate"] = req.docuDate,
                    ["@deptCode"] = req.deptCode,
                    ["@statFlag"] = req.statFlag,
                    ["@createId"] = req.createId,
                    ["@retlStFl"] = req.retlStFl,
                    ["@cstBisTy"] = req.cstBisTy,
                    ["@ordInsFl"] = req.ordInsFl,

                    ["@dsrParam"] = req.dsrParam,
                    ["@cusRtlFl"] = req.cusRtlFl,
                    ["@cusRtlCd"] = req.cusRtlCd,

                    ["@dsrRem01"] = req.dsrRem01,
                    ["@dsrRem02"] = req.dsrRem02,
                    ["@dsrRem03"] = req.dsrRem03,
                    ["@dsrRem04"] = req.dsrRem04,
                    ["@dsrRem05"] = req.dsrRem05,
                    ["@dsrRem06"] = req.dsrRem06,
                    ["@dsrRem07"] = req.dsrRem07,
                    ["@dsrRem08"] = req.dsrRem08,

                    ["@areaCode"] = req.areaCode,
                    ["@cuRtType"] = req.cuRtType,
                    ["@ordExDat"] = req.ordExDat ?? (object)DBNull.Value
                };

                _db.WebSessBean(sql, p);
                return CreatedAtAction(nameof(Get), new { docuNumb = req.docuNumb }, req);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPut("{docuNumb}")]
        public IActionResult Update(string docuNumb, [FromBody] DsrRequest req)
        {
            var bad = Validate(req);
            if (bad != null) return bad;

            try
            {
                var sql = @"
UPDATE dptDSRActvt
   SET docuDate = @docuDate,
       -- you can also update deptCode, statFlag, etc. here if needed
       dsrParam  = @dsrParam,
       cusRtlFl  = @cusRtlFl,
       cusRtlCd  = @cusRtlCd,
       dsrRem01  = @dsrRem01,
       dsrRem02  = @dsrRem02,
       dsrRem03  = @dsrRem03,
       dsrRem04  = @dsrRem04,
       dsrRem05  = @dsrRem05,
       dsrRem06  = @dsrRem06,
       dsrRem07  = @dsrRem07,
       dsrRem08  = @dsrRem08,
       areaCode  = @areaCode,
       cuRtType  = @cuRtType,
       ordExDat  = @ordExDat,
       modDt     = GETDATE()
 WHERE docuNumb = @docuNumb";

                var p = new Dictionary<string, object>
                {
                    ["@docuNumb"] = docuNumb,
                    ["@docuDate"] = req.docuDate,
                    ["@dsrParam"] = req.dsrParam,
                    ["@cusRtlFl"] = req.cusRtlFl,
                    ["@cusRtlCd"] = req.cusRtlCd,
                    ["@dsrRem01"] = req.dsrRem01,
                    ["@dsrRem02"] = req.dsrRem02,
                    ["@dsrRem03"] = req.dsrRem03,
                    ["@dsrRem04"] = req.dsrRem04,
                    ["@dsrRem05"] = req.dsrRem05,
                    ["@dsrRem06"] = req.dsrRem06,
                    ["@dsrRem07"] = req.dsrRem07,
                    ["@dsrRem08"] = req.dsrRem08,
                    ["@areaCode"] = req.areaCode,
                    ["@cuRtType"] = req.cuRtType,
                    ["@ordExDat"] = req.ordExDat ?? (object)DBNull.Value
                };

                var rows = _db.WebSessBean(sql, p).Count;
                if (rows == 0) return NotFound();
                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpDelete("{docuNumb}")]
        public IActionResult Delete(string docuNumb)
        {
            try
            {
                var sql = "DELETE FROM dptDSRActvt WHERE docuNumb = @docuNumb";
                var p   = new Dictionary<string, object> { ["@docuNumb"] = docuNumb };
                var rows = _db.WebSessBean(sql, p).Count;
                if (rows == 0) return NotFound();
                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        private IActionResult Validate(DsrRequest req)
        {
            if (req.docuNumb?.Length > LDocuNumb)
                return BadRequest($"docuNumb ≤ {LDocuNumb} chars (you sent {req.docuNumb.Length}).");
            if (req.dsrParam?.Length > LDsrParam)
                return BadRequest($"dsrParam ≤ {LDsrParam} chars (you sent {req.dsrParam.Length}).");
            if (req.cusRtlFl?.Length > LCusRtlFl)
                return BadRequest($"cusRtlFl ≤ {LCusRtlFl} chars (you sent {req.cusRtlFl.Length}).");
            if (req.areaCode?.Length > LAreaCode)
                return BadRequest($"areaCode ≤ {LAreaCode} chars (you sent {req.areaCode.Length}).");
            if (req.cuRtType?.Length > LCuRtType)
                return BadRequest($"cuRtType ≤ {LCuRtType} chars (you sent {req.cuRtType.Length}).");

            if (req.deptCode?.Length > LDeptCode)
                return BadRequest($"deptCode ≤ {LDeptCode} chars (you sent {req.deptCode.Length}).");
            if (req.statFlag?.Length > LStatFlag)
                return BadRequest($"statFlag ≤ {LStatFlag} char (you sent {req.statFlag.Length}).");
            if (req.createId?.Length > LCreateId)
                return BadRequest($"createId ≤ {LCreateId} chars (you sent {req.createId.Length}).");
            if (req.retlStFl?.Length > LRetlStFl)
                return BadRequest($"retlStFl ≤ {LRetlStFl} char (you sent {req.retlStFl.Length}).");
            if (req.cstBisTy?.Length > LCstBisTy)
                return BadRequest($"cstBisTy ≤ {LCstBisTy} chars (you sent {req.cstBisTy.Length}).");
            if (req.ordInsFl?.Length > LOrdInsFl)
                return BadRequest($"ordInsFl ≤ {LOrdInsFl} char (you sent {req.ordInsFl.Length}).");

            return null;
        }
    }

    public class DsrRequest
    {
        public string   docuNumb  { get; set; }
        public DateTime docuDate  { get; set; }

        // **new required fields**
        public string   deptCode  { get; set; }
        public string   statFlag  { get; set; }
        public string   createId  { get; set; }
        public string   retlStFl  { get; set; }
        public string   cstBisTy  { get; set; }
        public string   ordInsFl  { get; set; }

        // your existing fields
        public string   dsrParam  { get; set; }
        public string   cusRtlFl  { get; set; }
        public string   cusRtlCd  { get; set; }
        public string   dsrRem01  { get; set; }
        public string   dsrRem02  { get; set; }
        public string   dsrRem03  { get; set; }
        public string   dsrRem04  { get; set; }
        public string   dsrRem05  { get; set; }
        public string   dsrRem06  { get; set; }
        public string   dsrRem07  { get; set; }
        public string   dsrRem08  { get; set; }
        public string   areaCode  { get; set; }
        public string   cuRtType  { get; set; }
        public DateTime? ordExDat { get; set; }
    }
}
