using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using MyFirstApi.DataAccess;
using MyFirstApi.Middleware;
using MyFirstApi.Models;
using System.IdentityModel.Tokens.Jwt;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// ─── 1) Register EF Core DbContext ──────────────────────────────────────────
//    Replace "DefaultConnection" with whatever name you used above in appsettings.json
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"))
);

// ─── 2) Register DatabaseHelper ──────────────────────────────────────────────
//    We pull three connection strings (bwlive, itkHaria, imageData) from configuration.
//    DatabaseHelper is a singleton because it just holds those connection strings and
//    provides helper methods for raw SQL queries.
var connStrings = builder.Configuration
                          .GetSection("ConnectionStrings")
                          .Get<Dictionary<string, string>>();

builder.Services.AddSingleton(provider =>
    new DatabaseHelper(
        connStrings["bwlive"],
        connStrings["itkHaria"],
        connStrings["imageData"]
    )
);

// ─── 3) Add HttpClient (if you need to call external HTTP) ───────────────────
builder.Services.AddHttpClient();

// ─── 4) Add Controllers + Swagger/OpenAPI ────────────────────────────────────
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// ─── 5) Configure JWT Bearer Authentication ─────────────────────────────────
//    We validate tokens by looking up the PartnerID claim, retrieving its secret key
//    from the DB, and then using that key to validate the signature.

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer           = true,
            ValidateAudience         = false,
            ValidateLifetime         = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer              = builder.Configuration["JwtSettings:Issuer"],
            IssuerSigningKeyResolver = (token, securityToken, kid, parameters) =>
            {
                // At validation time, decode the token, extract PartnerID claim,
                // fetch the corresponding secret key from DB, and return a SymmetricSecurityKey.
                var jwtToken  = new JwtSecurityTokenHandler().ReadJwtToken(token);
                var partnerId = jwtToken.Claims.FirstOrDefault(c => c.Type == "PartnerID")?.Value;
                if (!string.IsNullOrEmpty(partnerId))
                {
                    var dbHelper  = builder.Services.BuildServiceProvider().GetRequiredService<DatabaseHelper>();
                    var secretKey = dbHelper.GetSecretKey(partnerId);
                    if (!string.IsNullOrWhiteSpace(secretKey))
                    {
                        return new[] { new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey)) };
                    }
                }
                throw new SecurityTokenInvalidSigningKeyException("Invalid PartnerID or SecretKey.");
            }
        };

        options.Events = new JwtBearerEvents
        {
            OnMessageReceived = context =>
            {
                // Extract the raw token from "Authorization: Bearer <token>"
                var authHeader = context.Request.Headers["Authorization"].ToString();
                if (!string.IsNullOrEmpty(authHeader) && authHeader.StartsWith("Bearer "))
                {
                    context.Token = authHeader.Substring("Bearer ".Length).Trim();
                }
                return Task.CompletedTask;
            }
        };
    });

var app = builder.Build();

// ─── 6) Enable Swagger in Development ────────────────────────────────────────
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// ─── 7) Custom Middleware for Block‐Check & Allowed‐API Validation ─────────────
//    We run this BEFORE UseAuthentication() so that our middleware can also
//    verify partner ID + block status + allowed‐API list. If we wanted the
//    built‐in JWT middleware to verify signatures first, we would swap order.

app.UseMiddleware<AuthenticationMiddleware>();

app.UseHttpsRedirection();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();




using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace MyFirstApi.Controllers
{
    ///
    /// ─── COMBINED MODELS + DbContext + CONTROLLER ───────────────────────────────
    ///

    // ─── 1) Entity Classes (formerly in Models/Area.cs, Retailer.cs, DsrActivity.cs) ───

    public class Area
    {
        public string AreaCode { get; set; }
        public string AreaDesc { get; set; }
        public bool IsActive   { get; set; }
    }

    public class Retailer
    {
        public string Code      { get; set; }
        public string Name      { get; set; }
        public string Address   { get; set; }
        public string City      { get; set; }
        public double Latitude  { get; set; }
        public double Longitude { get; set; }
        public string AreaCode  { get; set; }
        public bool IsActive    { get; set; }
    }

    public class DsrActivity
    {
        public int Id                      { get; set; }
        public string PurchaserRetailerType { get; set; }
        public string AreaCode             { get; set; }
        public string CustomerCode         { get; set; }
        public string CustomerName         { get; set; }
        public DateTime ReportDate         { get; set; }
        public double YourLatitude         { get; set; }
        public double YourLongitude        { get; set; }
        public double CustLatitude         { get; set; }
        public double CustLongitude        { get; set; }
        public string EntryType            { get; set; }
        public DateTime CreatedAt          { get; set; }
    }

    // ─── 2) EF Core DbContext (formerly in Models/ApplicationDbContext.cs) ───────────

    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        { }

        public DbSet<Area> Areas { get; set; }
        public DbSet<Retailer> Retailers { get; set; }
        public DbSet<DsrActivity> DsrActivities { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Area>()
                .HasKey(a => a.AreaCode);

            modelBuilder.Entity<Retailer>()
                .HasKey(r => r.Code);

            // By convention, DsrActivity.Id is the primary key.
        }
    }

    // ─── 3) DTO Classes (formerly in Controller file) ────────────────────────────────

    /// <summary>
    /// Payload for POST /api/dsractivity/submit
    /// </summary>
    public class DsrSubmitRequest
    {
        public string PurchaserRetailerType { get; set; }
        public string AreaCode              { get; set; }
        public string CodeSearch            { get; set; }
        public string CustomerName          { get; set; }
        public string Date                  { get; set; } // expected format: "yyyy-MM-dd"
        public string YourLatitude          { get; set; }
        public string YourLongitude         { get; set; }
        public string CustLatitude          { get; set; }
        public string CustLongitude         { get; set; }
        public string EntryType             { get; set; } // "IN" or "Exception"
    }

    public class AreaDto
    {
        public string AreaCode { get; set; }
        public string AreaDesc { get; set; }
    }

    public class RetailerDto
    {
        public string Code      { get; set; }
        public string Name      { get; set; }
        public string Address   { get; set; }
        public string City      { get; set; }
        public double Latitude  { get; set; }
        public double Longitude { get; set; }
    }

    // ─── 4) Controller (formerly in Controllers/DsrActivityController.cs) ────────────

    [ApiController]
    [Route("api/[controller]")]
    public class DsrActivityController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public DsrActivityController(ApplicationDbContext context)
        {
            _context = context;
        }

        /// <summary>
        /// GET /api/dsractivity/areas?search=...
        /// Returns up to 50 active area codes, filtered by the 'search' term (case‐insensitive).
        /// </summary>
        [HttpGet("areas")]
        public async Task<IActionResult> GetAreas([FromQuery] string search = "")
        {
            var query = _context.Areas
                                .AsNoTracking()
                                .Where(a => a.IsActive);

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(a =>
                    a.AreaCode.ToLower().Contains(lowered) ||
                    a.AreaDesc.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(a => a.AreaDesc)
                .Select(a => new AreaDto
                {
                    AreaCode = a.AreaCode,
                    AreaDesc = a.AreaDesc
                })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// GET /api/dsractivity/retailers?areaCode=XXX&search=YYY
        /// Returns up to 50 active retailers in a given area, filtered by 'search' term.
        /// </summary>
        [HttpGet("retailers")]
        public async Task<IActionResult> GetRetailers(
            [FromQuery] string areaCode,
            [FromQuery] string search = "")
        {
            if (string.IsNullOrWhiteSpace(areaCode))
                return BadRequest("areaCode is required.");

            var query = _context.Retailers
                                .AsNoTracking()
                                .Where(r => r.IsActive && r.AreaCode == areaCode.Trim());

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(r =>
                    r.Code.ToLower().Contains(lowered) ||
                    r.Name.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(r => r.Name)
                .Select(r => new RetailerDto
                {
                    Code      = r.Code,
                    Name      = r.Name,
                    Address   = r.Address,
                    City      = r.City,
                    Latitude  = r.Latitude,
                    Longitude = r.Longitude
                })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// POST /api/dsractivity/submit
        /// Inserts a new DsrActivity record for IN/Exception entries.
        /// </summary>
        [HttpPost("submit")]
        public async Task<IActionResult> Submit([FromBody] DsrSubmitRequest request)
        {
            if (request == null)
                return BadRequest("Request body is missing.");

            // 1) Validate required fields
            if (string.IsNullOrWhiteSpace(request.PurchaserRetailerType) ||
                string.IsNullOrWhiteSpace(request.AreaCode) ||
                string.IsNullOrWhiteSpace(request.CodeSearch) ||
                string.IsNullOrWhiteSpace(request.CustomerName) ||
                string.IsNullOrWhiteSpace(request.Date) ||
                string.IsNullOrWhiteSpace(request.YourLatitude) ||
                string.IsNullOrWhiteSpace(request.YourLongitude) ||
                string.IsNullOrWhiteSpace(request.CustLatitude) ||
                string.IsNullOrWhiteSpace(request.CustLongitude) ||
                string.IsNullOrWhiteSpace(request.EntryType))
            {
                return BadRequest("All fields are required.");
            }

            // 2) Parse Date ("yyyy-MM-dd")
            if (!DateTime.TryParseExact(
                    request.Date.Trim(),
                    "yyyy-MM-dd",
                    System.Globalization.CultureInfo.InvariantCulture,
                    System.Globalization.DateTimeStyles.None,
                    out var reportDate))
            {
                return BadRequest("Date must be in yyyy-MM-dd format.");
            }

            // 3) Parse lat/long
            if (!double.TryParse(request.YourLatitude, out var yourLat) ||
                !double.TryParse(request.YourLongitude, out var yourLon) ||
                !double.TryParse(request.CustLatitude, out var custLat) ||
                !double.TryParse(request.CustLongitude, out var custLon))
            {
                return BadRequest("Latitude/Longitude values must be valid numbers.");
            }

            // 4) Create and save a new DsrActivity
            var activity = new DsrActivity
            {
                PurchaserRetailerType = request.PurchaserRetailerType.Trim(),
                AreaCode              = request.AreaCode.Trim(),
                CustomerCode          = request.CodeSearch.Trim(),
                CustomerName          = request.CustomerName.Trim(),
                ReportDate            = reportDate,
                YourLatitude          = yourLat,
                YourLongitude         = yourLon,
                CustLatitude          = custLat,
                CustLongitude         = custLon,
                EntryType             = request.EntryType.Trim(),
                CreatedAt             = DateTime.UtcNow
            };

            _context.DsrActivities.Add(activity);
            await _context.SaveChangesAsync();

            return Ok(new
            {
                message    = "DSR activity submitted successfully.",
                activityId = activity.Id
            });
        }
    }
}



using Microsoft.AspNetCore.Http;
using MyFirstApi.DataAccess;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Threading.Tasks;

namespace MyFirstApi.Middleware
{
    /// <summary>
    /// This middleware enforces:
    ///  1) Presence of the “PartnerID” header + “Authorization: Bearer <token>” header.
    ///  2) That the JWT’s PartnerID claim matches the header.
    ///  3) That the user is not blocked (Users.IsBlocked = 1 in your ’Users’ table).
    ///  4) That this PartnerID is allowed to call the current endpoint (path).
    /// 
    /// If any check fails, we short‐circuit with 400/401/403. Otherwise, call _next(context).
    /// </summary>
    public class AuthenticationMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly DatabaseHelper _dbHelper;

        public AuthenticationMiddleware(RequestDelegate next, DatabaseHelper dbHelper)
        {
            _next     = next;
            _dbHelper = dbHelper;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            // 1) Normalize the path (lowercase)
            var currentPath = context.Request.Path.Value?.ToLower();

            // 2) Bypass authentication for certain endpoints (e.g. login, token issuance).
            //    Adjust these as needed for your actual “anonymous” endpoints.
            if (currentPath?.StartsWith("/api/token") == true ||
                currentPath?.StartsWith("/api/auth/login") == true ||
                currentPath?.StartsWith("/api/dsractivity/submit") == true)
            {
                // If you want /api/dsractivity/submit to be public, keep this line.
                // Otherwise, remove "/api/dsractivity/submit" from this list so it is protected.
                await _next(context);
                return;
            }

            // 3) Extract PartnerID header + Authorization header
            var partnerId        = context.Request.Headers["PartnerID"].FirstOrDefault();
            var authorizationHdr = context.Request.Headers["Authorization"].FirstOrDefault();

            if (string.IsNullOrWhiteSpace(partnerId) ||
                string.IsNullOrWhiteSpace(authorizationHdr) ||
                !authorizationHdr.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
            {
                context.Response.StatusCode = StatusCodes.Status400BadRequest;
                await context.Response.WriteAsync("PartnerID header and Bearer token are required.");
                return;
            }

            // 4) Extract the raw JWT (strip "Bearer ")
            var jwtTokenString = authorizationHdr.Substring("Bearer ".Length).Trim();

            try
            {
                var jwtHandler = new JwtSecurityTokenHandler();
                if (!jwtHandler.CanReadToken(jwtTokenString))
                {
                    context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                    await context.Response.WriteAsync("Invalid JWT token format.");
                    return;
                }

                // 5) Read the token without checking signature here (signature was checked by AddJwtBearer)
                var token = jwtHandler.ReadJwtToken(jwtTokenString);
                var tokenPartnerId = token.Claims.FirstOrDefault(c => c.Type == "PartnerID")?.Value;

                // 6) Verify that PartnerID claim matches header
                if (string.IsNullOrEmpty(tokenPartnerId) ||
                    !string.Equals(tokenPartnerId, partnerId, StringComparison.OrdinalIgnoreCase))
                {
                    context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                    await context.Response.WriteAsync("Invalid or mismatched PartnerID in token.");
                    return;
                }

                // 7) Check if this PartnerID is blocked (Users table)
                var blockQuery = @"
                    SELECT IsBlocked, BlockMessage
                    FROM Users
                    WHERE LoginId = @PartnerID";
                var blockParams = new Dictionary<string, object>
                {
                    { "@PartnerID", partnerId }
                };
                var userRows = _dbHelper.KkrSessBean(blockQuery, blockParams);

                if (userRows.Count > 0)
                {
                    bool isBlocked = Convert.ToBoolean(userRows[0]["IsBlocked"]);
                    if (isBlocked)
                    {
                        var blockMsg = userRows[0]["BlockMessage"]?.ToString()
                                       ?? "Your account has been blocked. Contact support.";
                        context.Response.StatusCode = StatusCodes.Status403Forbidden;
                        await context.Response.WriteAsync(blockMsg);
                        return;
                    }
                }
                else
                {
                    // No matching user → unauthorized
                    context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                    await context.Response.WriteAsync("PartnerID not found.");
                    return;
                }

                // 8) Check allowed‐API list for this PartnerID
                var allowedApis = _dbHelper.GetAllowedAPIs(partnerId);
                // Normalize path (no trailing slash)
                var normalizedPath = currentPath?.TrimEnd('/') ?? string.Empty;

                if (!allowedApis.Contains(normalizedPath))
                {
                    context.Response.StatusCode = StatusCodes.Status403Forbidden;
                    await context.Response.WriteAsync("Access to this API is not allowed for this PartnerID.");
                    return;
                }

                // 9) All checks passed → proceed down the pipeline
                await _next(context);
            }
            catch (Exception ex)
            {
                // Any unexpected error → 401 Unauthorized
                context.Response.StatusCode = StatusCodes.Status401Unauthorized;
                await context.Response.WriteAsync($"Token validation failed: {ex.Message}");
            }
        }
    }
}




using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;

namespace MyFirstApi.DataAccess
{
    /// <summary>
    /// Utility to execute raw SQL against three different databases:
    ///   1) bwlive   (connection string name: "bwlive")
    ///   2) itkHaria (connection string name: "itkHaria")
    ///   3) imageData (connection string name: "imageData")
    /// 
    /// Used mostly by AuthenticationMiddleware to:
    ///  - fetch secret key for a PartnerID
    ///  - check if a user is blocked
    ///  - retrieve allowed API list for a PartnerID
    ///  - log requests/responses if desired
    /// </summary>
    public class DatabaseHelper
    {
        private readonly string _bwliveConnectionString;
        private readonly string _itKhariaConnectionString;
        private readonly string _imageDataConnectionString;

        public DatabaseHelper(string bwliveConnectionString, string itKhariaConnectionString, string imageDataConnectionString)
        {
            _bwliveConnectionString  = bwliveConnectionString;
            _itKhariaConnectionString = itKhariaConnectionString;
            _imageDataConnectionString = imageDataConnectionString;
        }

        // Expose public getters in case you need them elsewhere
        public string BwliveConnectionString   => _bwliveConnectionString;
        public string ItKhariaConnectionString => _itKhariaConnectionString;
        public string ImageDataConnectionString => _imageDataConnectionString;

        /// <summary>
        /// Execute a non‐query (INSERT/UPDATE/DELETE) against one of the three databases,
        /// determined by dbKey = "bwlive", "itkharia", or "imagedata".
        /// </summary>
        public int ExecuteCommandForDb(string dbKey, string query, Dictionary<string, object> parameters)
        {
            string connStr = dbKey.ToLower() switch
            {
                "bwlive"   => _bwliveConnectionString,
                "itkharia" => _itKhariaConnectionString,
                "imagedata" => _imageDataConnectionString,
                _ => throw new Exception($"Unknown DB key: {dbKey}")
            };
            return ExecuteCommand(connStr, query, parameters);
        }

        /// <summary>
        /// Execute a SELECT query (returning rows) against a given connection string.
        /// </summary>
        private List<Dictionary<string, object>> ExecuteSelectQuery(string connectionString, string query, Dictionary<string, object> parameters)
        {
            var resultList = new List<Dictionary<string, object>>();

            using (var conn = new SqlConnection(connectionString))
            using (var cmd  = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value);
                }

                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var row = new Dictionary<string, object>();
                        for (int i = 0; i < reader.FieldCount; i++)
                        {
                            row[reader.GetName(i)] = reader[i];
                        }
                        resultList.Add(row);
                    }
                }
            }

            return resultList;
        }

        /// <summary>
        /// Execute an INSERT / UPDATE / DELETE against a connection string.
        /// Returns number of rows affected.
        /// </summary>
        public int ExecuteCommand(string connectionString, string query, Dictionary<string, object> parameters)
        {
            using (var conn = new SqlConnection(connectionString))
            using (var cmd  = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value);
                }

                conn.Open();
                return cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Convenience: SELECT against the bwlive database.
        /// </summary>
        public List<Dictionary<string, object>> WebSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_bwliveConnectionString, query, parameters);

        /// <summary>
        /// Convenience: SELECT against the itKharia database.
        /// </summary>
        public List<Dictionary<string, object>> KkrSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_itKhariaConnectionString, query, parameters);

        /// <summary>
        /// Convenience: SELECT against the imageData database.
        /// </summary>
        public List<Dictionary<string, object>> ImgSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_imageDataConnectionString, query, parameters);

        /// <summary>
        /// Look up the secret key for a given PartnerID from prmApiPrtnr (in itKharia).
        /// Throws if not found.
        /// </summary>
        public string GetSecretKey(string partnerId)
        {
            var query = "SELECT secrtKey FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object>
            {
                { "@PartnerID", partnerId }
            };
            var result = KkrSessBean(query, parameters);
            if (result.Count > 0)
            {
                return result[0]["secrtKey"]?.ToString() ?? throw new Exception("SecretKey was null.");
            }
            throw new Exception($"SecretKey not found for PartnerID '{partnerId}'.");
        }

        /// <summary>
        /// Look up the comma‐separated allowed‐API list (allwdAPI) for this PartnerID.
        /// Returns a List<string> of normalized (lowercase, trimmed) paths.
        /// </summary>
        public List<string> GetAllowedAPIs(string partnerId)
        {
            var query = @"SELECT allwdAPI FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object>
            {
                { "@PartnerID", partnerId }
            };
            var result = KkrSessBean(query, parameters);
            if (result.Count > 0)
            {
                var allowedApis = result[0]["allwdAPI"]?.ToString();
                return allowedApis?
                    .Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(api => api.Trim().ToLower())
                    .ToList()
                    ?? new List<string>();
            }
            throw new Exception($"No allowed APIs found for PartnerID '{partnerId}'.");
        }

        /// <summary>
        /// Insert a row into comApiLogs for auditing. Logs up to 8 request‐body fields.
        /// If PartnerID doesn't exist in prmApiPrtnr, we skip insertion.
        /// </summary>
        public void InsertIntoLog(string partnerId, string endpoint, string responseStatus, int statCode, object requestBody)
        {
            // 1) Check that PartnerID exists
            var checkQuery = "SELECT COUNT(*) AS Count FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var checkParams = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            var exists = KkrSessBean(checkQuery, checkParams);
            if (exists.Count == 0 || Convert.ToInt32(exists[0]["Count"]) == 0)
            {
                Console.WriteLine($"Warning: PartnerID '{partnerId}' not found. Skipping log insertion.");
                return;
            }

            // 2) Flatten up to 8 request‐body props into strings "Name=Value"
            var bodyProps = requestBody?
                .GetType()
                .GetProperties()
                .Where(p => p.GetValue(requestBody) != null)
                .Select(p => $"{p.Name}={p.GetValue(requestBody)}")
                .Take(8)
                .ToList()
                ?? new List<string>();

            while (bodyProps.Count < 8)
                bodyProps.Add(string.Empty);

            // 3) Insert into comApiLogs
            var insertQuery = @"
                INSERT INTO comApiLogs
                (PartnerID, Endpoint, ResponseStatus, statCode,
                 ReqsBod1, ReqsBod2, ReqsBod3, ReqsBod4,
                 ReqsBod5, ReqsBod6, ReqsBod7, ReqsBod8)
                VALUES
                (@PartnerID, @Endpoint, @ResponseStatus, @StatCode,
                 @ReqsBod1, @ReqsBod2, @ReqsBod3, @ReqsBod4,
                 @ReqsBod5, @ReqsBod6, @ReqsBod7, @ReqsBod8)";
            var insertParams = new Dictionary<string, object>
            {
                { "@PartnerID",      partnerId },
                { "@Endpoint",       endpoint },
                { "@ResponseStatus", responseStatus },
                { "@StatCode",       statCode },
                { "@ReqsBod1", bodyProps[0] },
                { "@ReqsBod2", bodyProps[1] },
                { "@ReqsBod3", bodyProps[2] },
                { "@ReqsBod4", bodyProps[3] },
                { "@ReqsBod5", bodyProps[4] },
                { "@ReqsBod6", bodyProps[5] },
                { "@ReqsBod7", bodyProps[6] },
                { "@ReqsBod8", bodyProps[7] }
            };

            ExecuteCommand(_itKhariaConnectionString, insertQuery, insertParams);
        }
    }
}



