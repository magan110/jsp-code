using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        public DsrController(DatabaseHelper db) => _db = db;

        /// <summary>
        /// All lookup lists for your Flutter dropdowns.
        /// </summary>
        [HttpGet("Metadata")]
        public IActionResult GetMetadata()
        {
            // Retailer In/Out lists
            var purchaserRetailerItems = new[] {
                "Select","AD","Stokiest/Urban Stokiest","Direct Dealer","Retailer","Rural Stokiest"
            };
            var majorCities = new[] {
                "Select","Mumbai","Delhi","Bengaluru","Hyderabad","Ahmedabad",
                "Chennai","Kolkata","Pune","Jaipur","Surat","Lucknow","Kanpur",
                "Nagpur","Indore","Thane","Bhopal","Visakhapatnam","Patna","Vadodara"
            };

            // Visit screen lists
            var documentNoList = _db.WebSessBean("SELECT DISTINCT docuNumb FROM dptDSRActvt", new Dictionary<string, object>()).Select(row => row["docuNumb"].ToString()).ToArray();
            var purchaserTypeList = new[] { "Retailer", "Rural Retailer", "Stockiest", "Direct Dealer", "Rural Stockiest", "AD", "UBS" };
            var areaCodeList = _db.WebSessBean("SELECT DISTINCT areaCode FROM dptDSRActvt", new Dictionary<string, object>()).Select(row => row["areaCode"].ToString()).ToArray();
            var pendingIssueDetails = new[] { "Token", "Scheme", "Product", "Other" };
            var cityReasons = new[] {
                "Network Issue","Battery Low","Mobile Not working",
                "Location not capturing","Wrong Location OF Retailer","Wrong Location Captured"
            };
            var tileAdhesiveOptions = new[] { "YES", "NO" };

            // Activity screen lists
            var dsrParamList = _db.WebSessBean("SELECT DISTINCT dsrParam FROM dptDSRActvt", new Dictionary<string, object>()).Select(row => row["dsrParam"].ToString()).ToArray();
            var cusRtlFlList = new[] { "R", "C", "RD", "RR", "07", "08" };
            var deptCodeList = _db.WebSessBean("SELECT DISTINCT deptCode FROM dptDSRActvt", new Dictionary<string, object>()).Select(row => row["deptCode"].ToString()).ToArray();

            return Ok(new
            {
                RetailerInOut = new
                {
                    purchaserRetailerItems,
                    majorCities
                },
                Visit = new
                {
                    documentNoList,
                    purchaserTypeList,
                    areaCodeList,
                    pendingIssueDetails,
                    cityReasons,
                    tileAdhesiveOptions
                },
                Activity = new
                {
                    dsrParamList,
                    cusRtlFlList,
                    deptCodeList
                }
            });
        }

        // -------------------------------
        // RETAILER IN/OUT
        // -------------------------------
        [HttpGet("InOut")]
        public IActionResult GetInOut([FromQuery] DateTime date)
        {
            const string sql = @"
                SELECT * 
                  FROM dptDSRInOut 
                 WHERE CAST(docuDate AS date) = @Date";
            var data = _db.WebSessBean(sql, new Dictionary<string, object> { { "@Date", date.Date } });
            return data.Any() ? Ok(data) : NotFound();
        }

        [HttpPost("InOut")]
        public IActionResult SaveInOut([FromBody] DsrInOutRequest req)
        {
            const string merge = @"
                MERGE dptDSRInOut AS target
                USING (VALUES(@DocuDate,@PurchaserRetailer,@AreaCode,@CodeSearch,@CustName,
                              @YourLat,@YourLng,@CustLat,@CustLng))
                      AS src(docuDate,purchaserRetailer,areaCode,codeSearch,custName,
                             yourLat,yourLng,custLat,custLng)
                  ON CAST(target.docuDate AS date) = CAST(src.docuDate AS date)
                WHEN MATCHED THEN 
                  UPDATE 
                     SET purchaserRetailer=src.purchaserRetailer,
                         areaCode=src.areaCode,
                         codeSearch=src.codeSearch,
                         custName=src.custName,
                         yourLat=src.yourLat,
                         yourLng=src.yourLng,
                         custLat=src.custLat,
                         custLng=src.custLng
                WHEN NOT MATCHED THEN
                  INSERT(docuDate,purchaserRetailer,areaCode,codeSearch,custName,
                         yourLat,yourLng,custLat,custLng)
                  VALUES(src.docuDate,src.purchaserRetailer,src.areaCode,src.codeSearch,src.custName,
                         src.yourLat,src.yourLng,src.custLat,src.custLng);";

            _db.WebSessBean(merge, new Dictionary<string, object>
            {
                { "@DocuDate", req.DocuDate },
                { "@PurchaserRetailer", req.PurchaserRetailer },
                { "@AreaCode", req.AreaCode },
                { "@CodeSearch", req.CodeSearch },
                { "@CustName", req.CustName },
                { "@YourLat", req.YourLat },
                { "@YourLng", req.YourLng },
                { "@CustLat", req.CustLat },
                { "@CustLng", req.CustLng }
            });
            return Ok(new { success = true });
        }

        // -------------------------------
        // VISIT ENTRY
        // -------------------------------
        [HttpGet("Visit")]
        public IActionResult GetVisit([FromQuery] string docuNumb)
        {
            const string sql = @"
                SELECT M.*, D.*
                  FROM dptDSRVisitMaster M
                  LEFT JOIN dptDSRVisitDetail D ON M.docuNumb = D.docuNumb
                 WHERE M.docuNumb = @DocuNumb";
            var data = _db.WebSessBean(sql, new Dictionary<string, object> { { "@DocuNumb", docuNumb } });
            return data.Any() ? Ok(data) : NotFound();
        }

        [HttpPost("Visit")]
        public IActionResult SaveVisit([FromBody] DsrVisitRequest req)
        {
            // Upsert master record
            const string masterMerge = @"
                MERGE dptDSRVisitMaster AS T
                USING (VALUES(@DocuNumb,@ProcType,@PurchaserType,@AreaCode,@PurchaserCode,
                              @Name,@KycStatus,@ReportDate,@MarketName,@DisplayContest,
                              @PendingIssue,@PendingIssueDetail,@IssueDetail,
                              @WcEnrol,@WcpEnrol,@VapEnrol,@WcStock,@WcpStock,@VapStock,
                              @SlWcVol,@SlWpVol,@OrderExecDate,@Remarks,@CityReason,
                              @TileSeller,@TileStock))
                      AS S(docuNumb,procType,purchaserType,areaCode,purchaserCode,
                             name,kycStatus,reportDate,marketName,displayContest,
                             pendingIssue,pendingIssueDetail,issueDetail,
                             wcEnrol,wcpEnrol,vapEnrol,wcStock,wcpStock,vapStock,
                             slWcVol,slWpVol,orderExecDate,remarks,cityReason,
                             tileSeller,tileStock)
                  ON T.docuNumb = S.docuNumb
                WHEN MATCHED THEN
                  UPDATE SET
                    procType = S.procType,
                    purchaserType = S.purchaserType,
                    areaCode = S.areaCode,
                    purchaserCode = S.purchaserCode,
                    name = S.name,
                    kycStatus = S.kycStatus,
                    reportDate = S.reportDate,
                    marketName = S.marketName,
                    displayContest = S.displayContest,
                    pendingIssue = S.pendingIssue,
                    pendingIssueDetail = S.pendingIssueDetail,
                    issueDetail = S.issueDetail,
                    wcEnrol = S.wcEnrol,
                    wcpEnrol = S.wcpEnrol,
                    vapEnrol = S.vapEnrol,
                    wcStock = S.wcStock,
                    wcpStock = S.wcpStock,
                    vapStock = S.vapStock,
                    slWcVol = S.slWcVol,
                    slWpVol = S.slWpVol,
                    orderExecDate = S.orderExecDate,
                    remarks = S.remarks,
                    cityReason = S.cityReason,
                    tileSeller = S.tileSeller,
                    tileStock = S.tileStock
                WHEN NOT MATCHED THEN
                  INSERT (
                    docuNumb,procType,purchaserType,areaCode,purchaserCode,
                    name,kycStatus,reportDate,marketName,displayContest,
                    pendingIssue,pendingIssueDetail,issueDetail,
                    wcEnrol,wcpEnrol,vapEnrol,wcStock,wcpStock,vapStock,
                    slWcVol,slWpVol,orderExecDate,remarks,cityReason,
                    tileSeller,tileStock
                  )
                  VALUES (
                    S.docuNumb,S.procType,S.purchaserType,S.areaCode,S.purchaserCode,
                    S.name,S.kycStatus,S.reportDate,S.marketName,S.displayContest,
                    S.pendingIssue,S.pendingIssueDetail,S.issueDetail,
                    S.wcEnrol,S.wcpEnrol,S.vapEnrol,S.wcStock,S.wcpStock,S.vapStock,
                    S.slWcVol,S.slWpVol,S.orderExecDate,S.remarks,S.cityReason,
                    S.tileSeller,S.tileStock
                  );";

            _db.WebSessBean(masterMerge, new Dictionary<string, object>
            {
                { "@DocuNumb", req.DocuNumb },
                { "@ProcType", req.ProcType },
                { "@PurchaserType", req.PurchaserType },
                { "@AreaCode", req.AreaCode },
                { "@PurchaserCode", req.PurchaserCode },
                { "@Name", req.Name },
                { "@KycStatus", req.KycStatus },
                { "@ReportDate", req.ReportDate },
                { "@MarketName", req.MarketName },
                { "@DisplayContest", req.DisplayContest },
                { "@PendingIssue", req.PendingIssue },
                { "@PendingIssueDetail", req.PendingIssueDetail },
                { "@IssueDetail", req.IssueDetail },
                { "@WcEnrol", req.WcEnrol },
                { "@WcpEnrol", req.WcpEnrol },
                { "@VapEnrol", req.VapEnrol },
                { "@WcStock", req.WcStock },
                { "@WcpStock", req.WcpStock },
                { "@VapStock", req.VapStock },
                { "@SlWcVol", req.SlWcVol },
                { "@SlWpVol", req.SlWpVol },
                { "@OrderExecDate", req.OrderExecDate },
                { "@Remarks", req.Remarks },
                { "@CityReason", req.CityReason },
                { "@TileSeller", req.TileSeller },
                { "@TileStock", req.TileStock }
            });

            // Refresh detail tables
            _db.WebSessBean("DELETE FROM dptDSRVisitDetail WHERE docuNumb = @DocuNumb", new Dictionary<string, object> { { "@DocuNumb", req.DocuNumb } });

            foreach (var p in req.ProductList)
            {
                _db.WebSessBean(@"
                    INSERT INTO dptDSRVisitDetail (docuNumb, lineType, product, sku, qty)
                    VALUES(@DocuNumb, 'PRODUCT', @Product, @Sku, @Qty)",
                    new Dictionary<string, object>
                    {
                        { "@DocuNumb", req.DocuNumb },
                        { "@Product", p.Product },
                        { "@Sku", p.Sku },
                        { "@Qty", p.Qty }
                    });
            }

            foreach (var m in req.MarketSkuList)
            {
                _db.WebSessBean(@"
                    INSERT INTO dptDSRVisitDetail (docuNumb, lineType, brand, product, priceB, priceC)
                    VALUES(@DocuNumb, 'MARKETSKU', @Brand, @Product, @PriceB, @PriceC);",
                    new Dictionary<string, object>
                    {
                        { "@DocuNumb", req.DocuNumb },
                        { "@Brand", m.Brand },
                        { "@Product", m.Product },
                        { "@PriceB", m.PriceB },
                        { "@PriceC", m.PriceC }
                    });
            }

            foreach (var g in req.GiftList)
            {
                _db.WebSessBean(@"
                    INSERT INTO dptDSRVisitDetail (docuNumb, lineType, giftType, qty)
                    VALUES(@DocuNumb, 'GIFT', @GiftType, @Qty);",
                    new Dictionary<string, object>
                    {
                        { "@DocuNumb", req.DocuNumb },
                        { "@GiftType", g.GiftType },
                        { "@Qty", g.Qty }
                    });
            }

            // You can store BrandsWc & BrandsWcp either as JSON or in a side‐table.
            return Ok(new { success = true });
        }

        // -------------------------------
        // ACTIVITY ENTRY
        // -------------------------------
        [HttpGet("Activity")]
        public IActionResult GetActivity([FromQuery] string docuNumb)
        {
            const string sql = @"
                SELECT A.*, D.*
                  FROM dptDSRActvt A
                  LEFT JOIN dptDSRActvtDtl D ON A.docuNumb = D.docuNumb
                 WHERE A.docuNumb = @DocuNumb";
            var data = _db.WebSessBean(sql, new Dictionary<string, object> { { "@DocuNumb", docuNumb } });
            return data.Any() ? Ok(data) : NotFound();
        }

        [HttpPost("Activity")]
        public IActionResult SaveActivity([FromBody] DsrActivityRequest req)
        {
            // Upsert master
            const string masterMerge = @"
                MERGE dptDSRActvt AS T
                USING (VALUES(
                    @DocuNumb,@ProcType,@DocuDate,@DsrParTy,@DsrParam,
                    @CusRtlFl,@AreaCode,@CusRtlCd,@DsrRem01,@DsrRem02,
                    @DsrRem03,@DsrRem04,@DsrRem05,@DsrRem06,@DsrRem07,
                    @DsrRem08,@DsrRem09,@District,@DeptCode,@StatFlag,
                    @CreateId,@LocaCapr,@Latitute,@Lgtitute,@PinCodeN,
                    @CityName,@CstBisTy,@CuRtType))
                  AS S(docuNumb,procType,docuDate,dsrParTy,dsrParam,
                        cusRtlFl,areaCode,cusRtlCd,dsrRem01,dsrRem02,
                        dsrRem03,dsrRem04,dsrRem05,dsrRem06,dsrRem07,
                        dsrRem08,dsrRem09,district,deptCode,statFlag,
                        createId,locaCapr,latitute,lgtitute,pinCodeN,
                        cityName,cstBisTy,cuRtType)
                  ON T.docuNumb = S.docuNumb
                WHEN MATCHED THEN
                  UPDATE SET
                    procType=S.procType,
                    docuDate=S.docuDate,
                    dsrParam=S.dsrParam,
                    cusRtlFl=S.cusRtlFl,
                    areaCode=S.areaCode,
                    cusRtlCd=S.cusRtlCd,
                    dsrRem01=S.dsrRem01,
                    dsrRem02=S.dsrRem02,
                    dsrRem03=S.dsrRem03,
                    dsrRem04=S.dsrRem04,
                    dsrRem05=S.dsrRem05,
                    dsrRem06=S.dsrRem06,
                    dsrRem07=S.dsrRem07,
                    dsrRem08=S.dsrRem08,
                    dsrRem09=S.dsrRem09,
                    district=S.district,
                    deptCode=S.deptCode,
                    statFlag=S.statFlag,
                    locaCapr=S.locaCapr,
                    latitute=S.latitute,
                    lgtitute=S.lgtitute,
                    pinCodeN=S.pinCodeN,
                    cityName=S.cityName,
                    cstBisTy=S.cstBisTy,
                    cuRtType=S.cuRtType,
                    updateDt=GETDATE(),
                    updateId=@UpdateId
                WHEN NOT MATCHED THEN
                  INSERT(
                    docuNumb,procType,docuDate,dsrParTy,dsrParam,
                    cusRtlFl,areaCode,cusRtlCd,dsrRem01,dsrRem02,
                    dsrRem03,dsrRem04,dsrRem05,dsrRem06,dsrRem07,
                    dsrRem08,dsrRem09,district,deptCode,statFlag,
                    createId,createDt,locaCapr,latitute,lgtitute,
                    pinCodeN,cityName,cstBisTy,cuRtType
                  )
                  VALUES(
                    S.docuNumb,S.procType,S.docuDate,S.dsrParTy,S.dsrParam,
                    S.cusRtlFl,S.areaCode,S.cusRtlCd,S.dsrRem01,S.dsrRem02,
                    S.dsrRem03,S.dsrRem04,S.dsrRem05,S.dsrRem06,S.dsrRem07,
                    S.dsrRem08,S.dsrRem09,S.district,S.deptCode,S.statFlag,
                    S.createId,GETDATE(),S.locaCapr,S.latitute,S.lgtitute,
                    S.pinCodeN,S.cityName,S.cstBisTy,S.cuRtType
                  );";

            var masterParams = new
            {
                req.DocuNumb,
                req.ProcType,
                req.DocuDate,
                DsrParTy = "83",
                req.DsrParam,
                req.CusRtlFl,
                req.AreaCode,
                req.CusRtlCd,
                req.DsrRem01,
                req.DsrRem02,
                req.DsrRem03,
                req.DsrRem04,
                req.DsrRem05,
                req.DsrRem06,
                req.DsrRem07,
                req.DsrRem08,
                req.DsrRem09,
                req.District,
                req.DeptCode,
                StatFlag = "N",
                req.CreateId,
                req.LocaCapr,
                req.Latitute,
                req.Lgtitute,
                req.PinCodeN,
                req.CityName,
                req.CstBisTy,
                req.CuRtType,
                req.UpdateId
            };

            // Convert anonymous object to dictionary for WebSessBean
            var masterParamsDict = new Dictionary<string, object>
            {
                { "@DocuNumb", masterParams.DocuNumb },
                { "@ProcType", masterParams.ProcType },
                { "@DocuDate", masterParams.DocuDate },
                { "@DsrParTy", masterParams.DsrParTy },
                { "@DsrParam", masterParams.DsrParam },
                { "@CusRtlFl", masterParams.CusRtlFl },
                { "@AreaCode", masterParams.AreaCode },
                { "@CusRtlCd", masterParams.CusRtlCd },
                { "@DsrRem01", masterParams.DsrRem01 },
                { "@DsrRem02", masterParams.DsrRem02 },
                { "@DsrRem03", masterParams.DsrRem03 },
                { "@DsrRem04", masterParams.DsrRem04 },
                { "@DsrRem05", masterParams.DsrRem05 },
                { "@DsrRem06", masterParams.DsrRem06 },
                { "@DsrRem07", masterParams.DsrRem07 },
                { "@DsrRem08", masterParams.DsrRem08 },
                { "@DsrRem09", masterParams.DsrRem09 },
                { "@District", masterParams.District },
                { "@DeptCode", masterParams.DeptCode },
                { "@StatFlag", masterParams.StatFlag },
                { "@CreateId", masterParams.CreateId },
                { "@LocaCapr", masterParams.LocaCapr },
                { "@Latitute", masterParams.Latitute },
                { "@Lgtitute", masterParams.Lgtitute },
                { "@PinCodeN", masterParams.PinCodeN },
                { "@CityName", masterParams.CityName },
                { "@CstBisTy", masterParams.CstBisTy },
                { "@CuRtType", masterParams.CuRtType },
                { "@UpdateId", masterParams.UpdateId }
            };

            _db.WebSessBean(masterMerge, masterParamsDict);

            // Refresh details
            _db.WebSessBean("DELETE FROM dptDSRActvtDtl WHERE docuNumb = @DocuNumb",
                        new Dictionary<string, object> { { "@DocuNumb", req.DocuNumb } });

            int lineNo = 1;
            foreach (var d in req.Details)
            {
                const string detailSql = @"
                    INSERT INTO dptDSRActvtDtl
                      (docuNumb, docuSrNo, repoCatg, catgPack,
                       prodQnty, projQnty, actnRemk, targetDt,
                       mrktData, statFlag, createId, createDt)
                    VALUES
                      (@DocuNumb,@SrNo,@RepoCatg,@CatgPack,
                       @ProdQnty,@ProjQnty,@ActnRemk,@TargetDt,
                       @MrktData,'N',@CreateId,GETDATE());";

                _db.WebSessBean(detailSql, new Dictionary<string, object>
                {
                    { "@DocuNumb", req.DocuNumb },
                    { "@SrNo", lineNo++ },
                    { "@RepoCatg", d.RepoCatg },
                    { "@CatgPack", d.CatgPack },
                    { "@ProdQnty", d.ProdQnty },
                    { "@ProjQnty", d.ProjQnty },
                    { "@ActnRemk", d.ActnRemk },
                    { "@TargetDt", d.TargetDt },
                    { "@MrktData", d.MrktData },
                    { "@CreateId", req.CreateId }
                });
            }

            return Ok(new { success = true });
        }

        private string GenerateDocumentNumber(string docuType, string areaCode)
            => $"{docuType}-{areaCode}-{Guid.NewGuid():N}".ToUpper().Substring(0, 16);
    }

    // ===== Models =====

    public class DsrInOutRequest
    {
        public DateTime DocuDate { get; set; }
        public string PurchaserRetailer { get; set; }
        public string AreaCode { get; set; }
        public string CodeSearch { get; set; }
        public string CustName { get; set; }
        public double YourLat { get; set; }
        public double YourLng { get; set; }
        public double CustLat { get; set; }
        public double CustLng { get; set; }
    }

    public class DsrVisitRequest
    {
        public string ProcType { get; set; }
        public string DocuNumb { get; set; }
        public string PurchaserType { get; set; }
        public string AreaCode { get; set; }
        public string PurchaserCode { get; set; }
        public string Name { get; set; }
        public string KycStatus { get; set; }
        public DateTime ReportDate { get; set; }
        public string MarketName { get; set; }
        public string DisplayContest { get; set; }
        public string PendingIssue { get; set; }
        public string PendingIssueDetail { get; set; }
        public string IssueDetail { get; set; }
        public decimal WcEnrol { get; set; }
        public decimal WcpEnrol { get; set; }
        public decimal VapEnrol { get; set; }
        public decimal WcStock { get; set; }
        public decimal WcpStock { get; set; }
        public decimal VapStock { get; set; }
        public decimal SlWcVol { get; set; }
        public decimal SlWpVol { get; set; }
        public DateTime? OrderExecDate { get; set; }
        public string Remarks { get; set; }
        public string CityReason { get; set; }
        public string TileSeller { get; set; }
        public decimal TileStock { get; set; }

        public List<ProductDto> ProductList { get; set; } = new();
        public List<MarketSkuDto> MarketSkuList { get; set; } = new();
        public List<GiftDto> GiftList { get; set; } = new();
        public Dictionary<string, bool> BrandsWc { get; set; } = new();
        public Dictionary<string, bool> BrandsWcp { get; set; } = new();
    }

    public class ProductDto { public string Product, Sku; public decimal Qty; }
    public class MarketSkuDto { public string Brand, Product; public decimal PriceB, PriceC; }
    public class GiftDto { public string GiftType; public decimal Qty; }

    public class DsrActivityRequest
    {
        public string DocuNumb { get; set; }
        public string ProcType { get; set; }
        public DateTime DocuDate { get; set; }
        public string DsrParam { get; set; }
        public string CusRtlFl { get; set; }
        public string AreaCode { get; set; }
        public string CusRtlCd { get; set; }
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
        public string DsrRem09 { get; set; }
        public string District { get; set; }
        public string DeptCode { get; set; }
        public string CreateId { get; set; }
        public string LocaCapr { get; set; }
        public double Latitute { get; set; }
        public double Lgtitute { get; set; }
        public string PinCodeN { get; set; }
        public string CityName { get; set; }
        public string CstBisTy { get; set; }
        public string CuRtType { get; set; }
        public string UpdateId { get; set; }
        public List<DsrActivityDetail> Details { get; set; } = new();
    }

    public class DsrActivityDetail
    {
        public string RepoCatg { get; set; }
        public string CatgPack { get; set; }
        public decimal ProdQnty { get; set; }
        public decimal ProjQnty { get; set; }
        public string ActnRemk { get; set; }
        public DateTime TargetDt { get; set; }
        public string MrktData { get; set; }
    }
}
