using Microsoft.AspNetCore.Mvc;

using Microsoft.AspNetCore.Http;

using sparshWebService.DataAccess;

using System;

using System.Collections.Generic;

using System.Linq;

namespace MyFirstApi.Controllers

{

    /// <summary>

    /// DTO carrying only the fields relevant to the chosen activity.

    /// </summary>

    public class DsrEntryDto

    {

        public string ActivityType { get; set; }  // e.g. "Office Work"

        public DateTime SubmissionDate { get; set; }  // → createDt

        public DateTime ReportDate { get; set; }  // → docuDate

        public string CreateId { get; set; } = "SYSTEM";

        // Office Work

        public string WorkRelatedTo { get; set; }

        public string HoursSpent { get; set; }

        // Internal Team Meetings

        public string MeetWith { get; set; }

        public string DiscussionPoints { get; set; }

        public string Learnings { get; set; }

        // New Purchaser

        public string PurchaserName { get; set; }

        public string TopicDiscussed { get; set; }

        public string Remarks { get; set; }

        // Phone Call with Builder / Stockist

        public string AreaCode { get; set; }

        public string Purchaser { get; set; }        // cusRtlFl

        public string PurchaserCode { get; set; }    // custRtlCd

        public string SiteName { get; set; }

        public string ContractorAtSite { get; set; }

        public string MetWith { get; set; }

        public string PersonNameDesignation { get; set; }

        public string UgaiRecoveryPlans { get; set; }

        public string PurchaserGrievances { get; set; }

        public string OtherPoints { get; set; }

        // Sampling at Site
        public string ProductName { get; set; }
        public string PotentialMT { get; set; }
        public string ApplicatorName { get; set; }
        public string QualityOfSample { get; set; }
        public string StatusOfSample { get; set; }
        public string ContactName { get; set; }
        public string MobileNo { get; set; }

        // BTL Activity
        public string typeofActivity { get; set; }
        public string numOfParticipants { get; set; }
        public string townActivityConducted { get; set; }
        public string LearningsfrActivity { get; set; }

        // Any other activity
        public string ActivityDetails01 { get; set; }
        public string ActivityDetails02 { get; set; }
        public string ActivityDetails03 { get; set; }
        public string AnyotherPoints { get; set; }

        // … add additional activity‐specific fields here …

    }

    [Route("api/[controller]")]

    [ApiController]

    public class DsrTryController : ControllerBase

    {

        private readonly DatabaseHelper _db;

        public DsrTryController(DatabaseHelper db) => _db = db;

        [HttpPost]

        [ProducesResponseType(StatusCodes.Status201Created)]

        [ProducesResponseType(StatusCodes.Status400BadRequest)]

        [ProducesResponseType(StatusCodes.Status500InternalServerError)]

        public IActionResult Submit([FromBody] DsrEntryDto dto)

        {

            if (dto == null || string.IsNullOrWhiteSpace(dto.ActivityType))

                return BadRequest("ActivityType is required.");

            var activityMap = new Dictionary<string, (string Prefix, string Param, short ParTy)>(StringComparer.OrdinalIgnoreCase)

            {
                /*
                 * dsrParam = 59
                 * 
                 * 
                 */

                ["Visit to Stockiest(Trade Purchaser) / Retailer"] = ("VSTOPR", "01", 83),

                ["Phone Call with Stockiest / Retailer / Applicator"] = ("PHSRAP", "02", 83),

                ["Site Visit (03)"] = ("SITEVI", "03", 83),

                ["Tele Call"] = ("TELECL", "04", 83),

                ["Personal Visit"] = ("PERSVI", "05", 83),

                ["Architects / Engineers"] = ("ARCHEN", "06", 83),

                ["Sampling"] = ("SAMPLI", "07", 83),

                ["SP Retailer Shop In/Out"] = ("SPRSIO", "08", 83),

                ["Site Visit (11)"] = ("SITEVI", "11", 83),

                ["Phone Call with Builder /Stockist"] = ("PHBUI", "12", 83),

                ["Meetings with Contractor / Stockist"] = ("MECO", "13", 83),

                ["Site Visit (21)"] = ("SITEVI", "21", 83),

                ["Phone Call with Purchaser / Retailer"] = ("PHPURR", "22", 83),

                ["Meeting with IHB / Builder team"] = ("IHEBUI", "23", 83),

                ["Visit to Get / Check Sampling at Site"] = ("CHSMP", "31", 83),

                ["Visited to Stockiest / Retailer"] = ("VSTRTL", "41", 83),

                ["Meeting with New Purchaser(Trade Purchaser) / Retailer"] = ("NEWPUR", "50", 83),

                ["BTL Activities"] = ("BTLACT", "51", 83),

                ["Internal Team Meetings / Review Meetings"] = ("INTTMS", "52", 83),

                ["Office Work"] = ("OFFWOR", "53", 83),

                ["On Leave / Holiday / Off Day"] = ("LEAVEH", "54", 83),

                ["Work From Home"] = ("WFHOME", "55", 83),

                ["Any Other Activity"] = ("ANYOTH", "60", 83),

                ["Phone Call with Unregistered Purchasers"] = ("UNREGPC", "61", 83),

            };

            var match = activityMap.FirstOrDefault(kvp =>

                dto.ActivityType.StartsWith(kvp.Key, StringComparison.OrdinalIgnoreCase));

            if (match.Key == null)

                return BadRequest($"Unknown ActivityType '{dto.ActivityType}'.");

            var meta = match.Value;

            var rawNum = meta.Prefix + DateTime.UtcNow.ToString("yyMMddHHmmss").PadRight(11, '0');

            var docuNumb = rawNum.Substring(0, 16);

            var rem = new string[11];

            for (int i = 1; i <= 10; i++) rem[i] = string.Empty;

            if (dto.ActivityType.StartsWith("Office Work", StringComparison.OrdinalIgnoreCase))
            {

                rem[1] = dto.WorkRelatedTo ?? string.Empty;

                rem[2] = dto.HoursSpent ?? string.Empty;

            }

            else if (dto.ActivityType.StartsWith("Internal Team Meetings", StringComparison.OrdinalIgnoreCase))

            {

                rem[1] = dto.MeetWith ?? string.Empty;

                rem[2] = dto.DiscussionPoints ?? string.Empty;

                rem[3] = dto.Learnings ?? string.Empty;

            }

            else if (dto.ActivityType.StartsWith("Meeting with New Purchaser(Trade Purchaser) / Retailer", StringComparison.OrdinalIgnoreCase))

            {

                rem[1] = dto.PurchaserName ?? string.Empty;

                rem[2] = dto.TopicDiscussed ?? string.Empty;

                rem[3] = dto.Remarks ?? string.Empty;

            }

            else if (dto.ActivityType.StartsWith("Phone Call with Builder /Stockist", StringComparison.OrdinalIgnoreCase))

            {

                rem[1] = dto.SiteName ?? string.Empty;

                rem[2] = dto.ContractorAtSite ?? string.Empty;

                rem[3] = dto.MetWith ?? string.Empty;

                rem[4] = dto.PersonNameDesignation ?? string.Empty;

                rem[5] = dto.TopicDiscussed ?? string.Empty;

                rem[6] = dto.UgaiRecoveryPlans ?? string.Empty;

                rem[7] = dto.PurchaserGrievances ?? string.Empty;

                rem[8] = dto.OtherPoints ?? string.Empty;

            }

            else if (dto.ActivityType.StartsWith("Meetings with Contractor / Stockist", StringComparison.OrdinalIgnoreCase))

            {

            }
            else if (dto.ActivityType.StartsWith("Visit to Get / Check Sampling at Site", StringComparison.OrdinalIgnoreCase))
            {
                rem[1] = dto.SiteName ?? string.Empty;
                rem[2] = dto.ProductName ?? string.Empty;
                rem[3] = dto.PotentialMT ?? string.Empty;
                rem[4] = dto.ApplicatorName ?? string.Empty;
                rem[5] = dto.QualityOfSample ?? string.Empty;
                rem[6] = dto.StatusOfSample ?? string.Empty;
                rem[7] = dto.ContactName ?? string.Empty;
                rem[8] = dto.MobileNo ?? string.Empty;
            }

            else if (dto.ActivityType.StartsWith("BTL Activities", StringComparison.OrdinalIgnoreCase))
            {
                rem[1] = dto.typeofActivity ?? string.Empty;
                rem[2] = dto.numOfParticipants ?? string.Empty;
                rem[3] = dto.townActivityConducted ?? string.Empty;
                rem[4] = dto.LearningsfrActivity ?? string.Empty;
            }
            else if (dto.ActivityType.StartsWith("On Leave / Holiday / Off Day", StringComparison.OrdinalIgnoreCase))
            {
                rem[1] = dto.Remarks ?? string.Empty;
            }

            else if (dto.ActivityType.StartsWith("Work From Home", StringComparison.OrdinalIgnoreCase))
            {

            }

            else if (dto.ActivityType.StartsWith("Any Other Activity", StringComparison.OrdinalIgnoreCase))
            {
                rem[1] = dto.ActivityDetails01 ?? string.Empty;
                rem[2] = dto.ActivityDetails02 ?? string.Empty;
                rem[3] = dto.ActivityDetails03 ?? string.Empty;
                rem[4] = dto.AnyotherPoints ?? string.Empty;
            }
            // … other activities …

            const string sql = @"
 
INSERT INTO dptDSRActvt
 
  (docuNumb, dsrParam, docuDate,
 
   cusRtlFl, cusRtlCd,
 
   dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
 
   dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10,
 
   deptCode, statFlag,
 
   createId, createDt,
 
   updateId, updateDt,
 
   dsrParTy,
 
   atchNmId, locaCapr, latitute, lgtitute, cuRtType, areaCode,
 
   retlStFl, pinCodeN, cityName, district, cstBisTy,
 
   ordExDat,
 
   pendWith, ltLgDist, apprRemk, ordInsFl, refOrdNo, isTilRtl,
 
   tileStck, rtlInTim, rtOutTim)
 
VALUES
 
  (@docuNumb, @dsrParam, @reportDate,
 
   @cusRtlFl, @custRtlCd,
 
   @r1,@r2,@r3,@r4,@r5,
 
   @r6,@r7,@r8,@r9,@r10,
 
   '', '',
 
   @createId, @submissionDate,
 
   '', NULL,
 
   @dsrParTy,
 
   '', '', '', '', '', @areaCode,
 
   '', '', '', '', '',
 
   NULL,
 
   '', '', '', '', '', '',
 
   NULL, NULL, NULL);";

            var parameters = new Dictionary<string, object>

            {

                ["@docuNumb"] = docuNumb,

                ["@dsrParam"] = meta.Param,

                ["@reportDate"] = dto.ReportDate,

                ["@cusRtlFl"] = dto.Purchaser ?? string.Empty,

                ["@custRtlCd"] = dto.PurchaserCode ?? string.Empty,

                ["@submissionDate"] = dto.SubmissionDate,

                ["@createId"] = dto.CreateId,

                ["@dsrParTy"] = meta.ParTy,

                ["@areaCode"] = dto.AreaCode ?? string.Empty,

                ["@r1"] = rem[1],

                ["@r2"] = rem[2],

                ["@r3"] = rem[3],

                ["@r4"] = rem[4],

                ["@r5"] = rem[5],

                ["@r6"] = rem[6],

                ["@r7"] = rem[7],

                ["@r8"] = rem[8],

                ["@r9"] = rem[9],

                ["@r10"] = rem[10],

            };

            try

            {

                _db.WebSessBean(sql, parameters);

                return CreatedAtAction(nameof(Submit), new { docuNumb }, dto);

            }

            catch (Exception ex)

            {

                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);

            }

        }

    }

}

