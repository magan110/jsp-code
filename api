using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DsrActivityController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public DsrActivityController(DatabaseHelper db)
        {
            _db = db;
        }

        // GET: api/DsrActivity/{docuNumb}
        [HttpGet("{docuNumb}")]
        public IActionResult Get(string docuNumb)
        {
            if (string.IsNullOrWhiteSpace(docuNumb))
                return BadRequest("docuNumb is required.");

            try
            {
                // 1) Header
                var headerSql = @"
                    SELECT * 
                      FROM dptDSRActvt 
                     WHERE docuNumb = @docuNumb";
                var header = _db.QuerySingleOrDefault(headerSql, new { docuNumb });
                if (header == null)
                    return NotFound();

                // 2) Activity Lines
                var detailSql = @"
                    SELECT docuSrNo, repoCatg, catgPack, prodQnty, projQnty, actnRemk, targetDt, mrktData
                      FROM dptDSRActvtDtl
                     WHERE docuNumb = @docuNumb
                     ORDER BY docuSrNo";
                var lines = _db.Query(detailSql, new { docuNumb });

                return Ok(new
                {
                    Header = header,
                    Details = lines
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        // POST: api/DsrActivity
        // Single endpoint to Add or Update based on ProcType
        [HttpPost]
        public IActionResult Post([FromBody] DsrActivityDto dto)
        {
            if (dto == null || string.IsNullOrWhiteSpace(dto.ProcType))
                return BadRequest("Invalid request payload.");

            try
            {
                if (dto.ProcType == "A")
                {
                    // generate new document number
                    dto.DocuNumb = GenerateDocuNumb(dto.AreaCode);
                    dto.StatFlag = "N";
                    dto.DsrParTy = "83";

                    // 1) Insert header
                    const string insertH = @"
                        INSERT INTO dptDSRActvt
                          (docuNumb, docuDate, dsrParTy, dsrParam, cusRtlFl, areaCode,
                           cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
                           dsrRem06, dsrRem07, dsrRem08, dsrRem09, district, deptCode,
                           statFlag, createId, createDt, locaCapr, latitute, lgtitute,
                           pinCodeN, cityName, cstBisTy, cuRtType)
                        VALUES
                          (@DocuNumb, @DocuDate, @DsrParTy, @DsrParam, @CusRtlFl, @AreaCode,
                           @CusRtlCd, @DsrRem01, @DsrRem02, @DsrRem03, @DsrRem04, @DsrRem05,
                           @DsrRem06, @DsrRem07, @DsrRem08, @DsrRem09, @District, @DeptCode,
                           @StatFlag, @CreateId, GETDATE(), @LocaCapr, @Latitute, @Lgtitute,
                           @PinCodeN, @CityName, @CstBisTy, @CuRtType)";
                    _db.Execute(insertH, dto);

                    // 2) Insert dynamic lists
                    InsertDetailList(dto);
                }
                else if (dto.ProcType == "U")
                {
                    // 1) Update header
                    const string updateH = @"
                        UPDATE dptDSRActvt
                           SET dsrParTy  = @DsrParTy,
                               dsrParam  = @DsrParam,
                               docuDate  = @DocuDate,
                               cusRtlFl  = @CusRtlFl,
                               cusRtlCd  = @CusRtlCd,
                               dsrRem01  = @DsrRem01,
                               dsrRem02  = @DsrRem02,
                               dsrRem03  = @DsrRem03,
                               dsrRem04  = @DsrRem04,
                               dsrRem05  = @DsrRem05,
                               dsrRem06  = @DsrRem06,
                               dsrRem07  = @DsrRem07,
                               dsrRem08  = @DsrRem08,
                               dsrRem09  = @DsrRem09,
                               district  = @District,
                               pinCodeN  = @PinCodeN,
                               cityName  = @CityName,
                               areaCode  = @AreaCode,
                               cuRtType  = @CuRtType,
                               updateId  = @UpdateId,
                               updateDt  = GETDATE()
                         WHERE docuNumb = @DocuNumb";
                    _db.Execute(updateH, dto);

                    // 2) Delete old lines + re-insert
                    _db.Execute("DELETE FROM dptDSRActvtDtl WHERE docuNumb = @DocuNumb", dto);
                    InsertDetailList(dto);
                }
                else
                {
                    return BadRequest("Unknown ProcType");
                }

                return Ok(new
                {
                    success = true,
                    message = dto.ProcType == "A"
                        ? $"Document saved with {dto.DocuNumb}"
                        : $"Document {dto.DocuNumb} updated"
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        private void InsertDetailList(DsrActivityDto dto)
        {
            const string insLine = @"
                INSERT INTO dptDSRActvtDtl
                  (docuNumb, docuSrNo, repoCatg, catgPack, prodQnty, projQnty, actnRemk, targetDt, mrktData, statFlag, createId, createDt)
                VALUES
                  (@DocuNumb, @SrNo,     @RepoCatg, @CatgPack, @ProdQnty, @ProjQnty, @ActnRemk, @TargetDt, @MrktData, @StatFlag, @CreateId, GETDATE())";

            int idx = 1;
            foreach (var d in dto.ActivityDetails)
            {
                d.DocuNumb = dto.DocuNumb;
                d.SrNo = idx++;
                d.CreateId = dto.CreateId;
                d.StatFlag = dto.StatFlag;
                d.MrktData = null;  // or “01” for market entries
                _db.Execute(insLine, d);
            }

            foreach (var m in dto.MarketSkus)
            {
                m.DocuNumb = dto.DocuNumb;
                m.SrNo = idx++;
                m.CreateId = dto.CreateId;
                m.StatFlag = dto.StatFlag;
                m.MrktData = "01";
                _db.Execute(insLine, m);
            }

            foreach (var g in dto.Gifts)
            {
                g.DocuNumb = dto.DocuNumb;
                g.SrNo = idx++;
                g.CreateId = dto.CreateId;
                g.StatFlag = dto.StatFlag;
                g.MrktData = null;
                _db.Execute(insLine, g);
            }
        }

        private string GenerateDocuNumb(string areaCode)
            => $"{DateTime.UtcNow:yyMMddHHmmss}-{areaCode}".ToUpper();
    }

    // DTOs to bind all dynamic‐fields lists
    public class DsrActivityDto
    {
        public string ProcType { get; set; }    // “A” or “U”
        public string DocuType { get; set; } = "DSR";
        public string DocuNumb { get; set; }
        public DateTime DocuDate { get; set; }
        public string DsrParTy { get; set; }
        public string DsrParam { get; set; }
        public string CusRtlFl { get; set; }
        public string AreaCode { get; set; }
        public string CusRtlCd { get; set; }
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
        public string DsrRem09 { get; set; }
        public string District { get; set; }
        public string DeptCode { get; set; }
        public string StatFlag { get; set; }
        public string CreateId { get; set; }
        public string UpdateId { get; set; }
        public string LocaCapr { get; set; }
        public string Latitute { get; set; }
        public string Lgtitute { get; set; }
        public string PinCodeN { get; set; }
        public string CityName { get; set; }
        public string CstBisTy { get; set; }
        public string CuRtType { get; set; }

        // dynamic lists from your Flutter form
        public List<DsrDetailLine> ActivityDetails { get; set; } = new();
        public List<DsrDetailLine> MarketSkus { get; set; } = new();
        public List<DsrDetailLine> Gifts { get; set; } = new();
    }

    public class DsrDetailLine
    {
        public string DocuNumb { get; set; }
        public int SrNo { get; set; }
        public string RepoCatg { get; set; }
        public string CatgPack { get; set; }
        public decimal ProdQnty { get; set; }
        public decimal ProjQnty { get; set; }
        public string ActnRemk { get; set; }
        public DateTime? TargetDt { get; set; }
        public string MrktData { get; set; }   // null or “01”
        public string StatFlag { get; set; }
        public string CreateId { get; set; }
    }
}
