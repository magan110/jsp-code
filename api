using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace MyFirstApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(AuthenticationSchemes = "Bearer")]
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public DsrController(DatabaseHelper db)
        {
            _db = db;
        }

        // GET api/dsr
        [HttpGet]
        public ActionResult<IEnumerable<DsrDto>> GetAll()
        {
            var sql = @"
                SELECT 
                    docuNumb,
                    CONVERT(char(10), docuDate, 120) AS docuDate,
                    dsrParam,
                    cusRtlFl,
                    cusRtlCd,
                    dsrRem01, dsrRem02, dsrRem03, dsrRem04,
                    dsrRem05, dsrRem06, dsrRem07, dsrRem08,
                    areaCode,
                    cuRtType,
                    CONVERT(char(10), ordExDat, 120) AS ordExDat
                FROM dptDSRActvt";
            
            // NOTE: ExecuteSelectQuery should be public on your DatabaseHelper
            var rows = _db.ExecuteSelectQuery(_db. /* whichever connection you use for DSR */, sql, new Dictionary<string,object>());
            
            var dtos = rows.Select(r => new DsrDto
            {
                DocuNumb  = r["docuNumb"]?.ToString(),
                DocuDate  = DateTime.Parse(r["docuDate"]?.ToString()!),
                DsrParam  = r["dsrParam"]?.ToString(),
                CusRtlFl  = r["cusRtlFl"]?.ToString(),
                CusRtlCd  = r["cusRtlCd"]?.ToString(),
                DsrRem01  = r["dsrRem01"]?.ToString(),
                DsrRem02  = r["dsrRem02"]?.ToString(),
                DsrRem03  = r["dsrRem03"]?.ToString(),
                DsrRem04  = r["dsrRem04"]?.ToString(),
                DsrRem05  = r["dsrRem05"]?.ToString(),
                DsrRem06  = r["dsrRem06"]?.ToString(),
                DsrRem07  = r["dsrRem07"]?.ToString(),
                DsrRem08  = r["dsrRem08"]?.ToString(),
                AreaCode  = r["areaCode"]?.ToString(),
                CuRtType  = r["cuRtType"]?.ToString(),
                OrdExDat  = DateTime.TryParse(r["ordExDat"]?.ToString(), out var dt) ? dt : (DateTime?)null
            })
            .ToList();

            return Ok(dtos);
        }

        // GET api/dsr/{id}
        [HttpGet("{id}")]
        public ActionResult<DsrDto> GetById(string id)
        {
            var sql = @"
                SELECT 
                    docuNumb,
                    CONVERT(char(10), docuDate, 120) AS docuDate,
                    dsrParam,
                    cusRtlFl,
                    cusRtlCd,
                    dsrRem01, dsrRem02, dsrRem03, dsrRem04,
                    dsrRem05, dsrRem06, dsrRem07, dsrRem08,
                    areaCode,
                    cuRtType,
                    CONVERT(char(10), ordExDat, 120) AS ordExDat
                FROM dptDSRActvt
                WHERE docuNumb = @docuNumb";

            var rows = _db.ExecuteSelectQuery(
                _db. /* your DSR DB */,
                sql,
                new Dictionary<string,object>{{ "@docuNumb", id }}
            );

            if (!rows.Any())
                return NotFound();

            var r = rows.First();
            var dto = new DsrDto
            {
                DocuNumb  = r["docuNumb"]?.ToString(),
                DocuDate  = DateTime.Parse(r["docuDate"]?.ToString()!),
                DsrParam  = r["dsrParam"]?.ToString(),
                CusRtlFl  = r["cusRtlFl"]?.ToString(),
                CusRtlCd  = r["cusRtlCd"]?.ToString(),
                DsrRem01  = r["dsrRem01"]?.ToString(),
                DsrRem02  = r["dsrRem02"]?.ToString(),
                DsrRem03  = r["dsrRem03"]?.ToString(),
                DsrRem04  = r["dsrRem04"]?.ToString(),
                DsrRem05  = r["dsrRem05"]?.ToString(),
                DsrRem06  = r["dsrRem06"]?.ToString(),
                DsrRem07  = r["dsrRem07"]?.ToString(),
                DsrRem08  = r["dsrRem08"]?.ToString(),
                AreaCode  = r["areaCode"]?.ToString(),
                CuRtType  = r["cuRtType"]?.ToString(),
                OrdExDat  = DateTime.TryParse(r["ordExDat"]?.ToString(), out var dt) ? dt : (DateTime?)null
            };

            return Ok(dto);
        }

        // POST api/dsr
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] DsrDto dto)
        {
            var sql = @"
                INSERT INTO dptDSRActvt
                    (docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd,
                     dsrRem01, dsrRem02, dsrRem03, dsrRem04,
                     dsrRem05, dsrRem06, dsrRem07, dsrRem08,
                     areaCode, cuRtType, ordExDat)
                VALUES
                    (@docuNumb, @docuDate, @dsrParam, @cusRtlFl, @cusRtlCd,
                     @dsrRem01, @dsrRem02, @dsrRem03, @dsrRem04,
                     @dsrRem05, @dsrRem06, @dsrRem07, @dsrRem08,
                     @areaCode, @cuRtType, @ordExDat)";

            var p = new Dictionary<string,object>
            {
                ["@docuNumb"] = dto.DocuNumb,
                ["@docuDate"] = dto.DocuDate,
                ["@dsrParam"] = dto.DsrParam,
                ["@cusRtlFl"] = dto.CusRtlFl,
                ["@cusRtlCd"] = dto.CusRtlCd,
                ["@dsrRem01"] = dto.DsrRem01 ?? "",
                ["@dsrRem02"] = dto.DsrRem02 ?? "",
                ["@dsrRem03"] = dto.DsrRem03 ?? "",
                ["@dsrRem04"] = dto.DsrRem04 ?? "",
                ["@dsrRem05"] = dto.DsrRem05 ?? "",
                ["@dsrRem06"] = dto.DsrRem06 ?? "",
                ["@dsrRem07"] = dto.DsrRem07 ?? "",
                ["@dsrRem08"] = dto.DsrRem08 ?? "",
                ["@areaCode"] = dto.AreaCode,
                ["@cuRtType"] = dto.CuRtType ?? "",
                ["@ordExDat"] = (object?)dto.OrdExDat ?? DBNull.Value
            };

            await _db.ExecuteNonQueryAsyncBwlive(sql, p);
            return CreatedAtAction(nameof(GetById), new { id = dto.DocuNumb }, dto);
        }

        // PUT api/dsr/{id}
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(string id, [FromBody] DsrDto dto)
        {
            if (id != dto.DocuNumb)
                return BadRequest("Document number mismatch");

            var sql = @"
                UPDATE dptDSRActvt
                   SET docuDate  = @docuDate,
                       dsrParam  = @dsrParam,
                       cusRtlFl  = @cusRtlFl,
                       cusRtlCd  = @cusRtlCd,
                       dsrRem01  = @dsrRem01,
                       dsrRem02  = @dsrRem02,
                       dsrRem03  = @dsrRem03,
                       dsrRem04  = @dsrRem04,
                       dsrRem05  = @dsrRem05,
                       dsrRem06  = @dsrRem06,
                       dsrRem07  = @dsrRem07,
                       dsrRem08  = @dsrRem08,
                       areaCode  = @areaCode,
                       cuRtType  = @cuRtType,
                       ordExDat  = @ordExDat
                WHERE docuNumb = @docuNumb";

            var p = new Dictionary<string,object>
            {
                ["@docuNumb"] = dto.DocuNumb,
                ["@docuDate"] = dto.DocuDate,
                ["@dsrParam"] = dto.DsrParam,
                ["@cusRtlFl"] = dto.CusRtlFl,
                ["@cusRtlCd"] = dto.CusRtlCd,
                ["@dsrRem01"] = dto.DsrRem01 ?? "",
                ["@dsrRem02"] = dto.DsrRem02 ?? "",
                ["@dsrRem03"] = dto.DsrRem03 ?? "",
                ["@dsrRem04"] = dto.DsrRem04 ?? "",
                ["@dsrRem05"] = dto.DsrRem05 ?? "",
                ["@dsrRem06"] = dto.DsrRem06 ?? "",
                ["@dsrRem07"] = dto.DsrRem07 ?? "",
                ["@dsrRem08"] = dto.DsrRem08 ?? "",
                ["@areaCode"] = dto.AreaCode,
                ["@cuRtType"] = dto.CuRtType ?? "",
                ["@ordExDat"] = (object?)dto.OrdExDat ?? DBNull.Value
            };

            var rowsAffected = await _db.ExecuteNonQueryAsyncBwlive(sql, p);
            if (rowsAffected == 0) return NotFound();
            return NoContent();
        }

        // DELETE api/dsr/{id}
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(string id)
        {
            var sql = "DELETE FROM dptDSRActvt WHERE docuNumb = @docuNumb";
            var p   = new Dictionary<string,object>{{ "@docuNumb", id }};
            var deleted = await _db.ExecuteNonQueryAsyncBwlive(sql, p);
            if (deleted == 0) return NotFound();
            return NoContent();
        }
    }

    public class DsrDto
    {
        public string   DocuNumb  { get; set; } = "";
        public DateTime DocuDate  { get; set; }
        public string?  DsrParam  { get; set; }
        public string?  CusRtlFl  { get; set; }
        public string?  CusRtlCd  { get; set; }
        public string?  DsrRem01  { get; set; }
        public string?  DsrRem02  { get; set; }
        public string?  DsrRem03  { get; set; }
        public string?  DsrRem04  { get; set; }
        public string?  DsrRem05  { get; set; }
        public string?  DsrRem06  { get; set; }
        public string?  DsrRem07  { get; set; }
        public string?  DsrRem08  { get; set; }
        public string?  AreaCode  { get; set; }
        public string?  CuRtType  { get; set; }
        public DateTime? OrdExDat { get; set; }
    }
}



{
  "docuNumb": "DSR0001",
  "docuDate": "2023-08-01T00:00:00",
  "dsrParam": "04",
  "cusRtlFl": "R",
  "cusRtlCd": "100123",
  "dsrRem01": "MarketX",
  "dsrRem02": "N",
  "dsrRem03": "",
  "dsrRem04": "",
  "dsrRem05": "",
  "dsrRem06": "",
  "dsrRem07": "",
  "dsrRem08": "",
  "areaCode": "DEL",
  "cuRtType": "RR",
  "ordExDat": "2023-08-10T00:00:00"
}
