using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json.Serialization;

namespace sparshWebService.Controllers
{
    //──────────────────────────────────────────────────────────────────────────────
    // 1) Polymorphic DTO hierarchy
    //──────────────────────────────────────────────────────────────────────────────

    [JsonPolymorphic(TypeDiscriminatorPropertyName = "ActivityType")]
    [JsonDerivedType(typeof(OfficeWorkDto),                   "Office Work")]
    [JsonDerivedType(typeof(InternalTeamMeetingDto),          "Internal Team Meetings")]
    [JsonDerivedType(typeof(NewPurchaserDto),                 "Meeting with New Purchaser(Trade Purchaser) / Retailer")]
    [JsonDerivedType(typeof(PhoneCallBuilderDto),             "Phone Call with Builder /Stockist")]
    [JsonDerivedType(typeof(MeetContractorDto),               "Meetings with Contractor / Stockist")]
    [JsonDerivedType(typeof(VisitCheckSamplingDto),           "Visit to Get / Check Sampling at Site")]
    [JsonDerivedType(typeof(BtlActivitiesDto),                "BTL Activities")]
    [JsonDerivedType(typeof(OnLeaveDto),                      "On Leave / Holiday / Off Day")]
    [JsonDerivedType(typeof(WorkFromHomeDto),                 "Work From Home")]
    [JsonDerivedType(typeof(AnyOtherActivityDto),             "Any Other Activity")]
    [JsonDerivedType(typeof(UnregisteredPurchasersDto),       "Phone Call with Unregistered Purchasers")]
    public abstract class DsrEntryDto
    {
        // common fields for every activity:
        public DateTime SubmissionDate { get; set; }   // → createDt
        public DateTime ReportDate     { get; set; }   // → docuDate
        public string   CreateId       { get; set; } = "SYSTEM";
        public string   AreaCode       { get; set; } = "";
        public string   Purchaser      { get; set; } = ""; // cusRtlFl
        public string   PurchaserCode  { get; set; } = ""; // cusRtlCd
    }

    public class OfficeWorkDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
    }

    public class InternalTeamMeetingDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
    }

    public class NewPurchaserDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
    }

    public class PhoneCallBuilderDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
    }

    public class MeetContractorDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
    }

    public class VisitCheckSamplingDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
    }

    public class BtlActivitiesDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
    }

    public class OnLeaveDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
    }

    public class WorkFromHomeDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
    }

    public class AnyOtherActivityDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
    }

    public class UnregisteredPurchasersDto : DsrEntryDto
    {
        public string DsrRem01 { get; set; }
    }

    //──────────────────────────────────────────────────────────────────────────────
    // 2) Metadata & lookup
    //──────────────────────────────────────────────────────────────────────────────

    public record ActivityMetadata(string Prefix, string Param, short ParTy);

    public static class ActivityLookup
    {
        private static readonly Dictionary<string, ActivityMetadata> _map =
            new(StringComparer.OrdinalIgnoreCase)
        {
            ["Office Work"]                                = new("OFFWOR","53", 83),
            ["Internal Team Meetings"]                     = new("INTTMS","52", 83),
            ["Meeting with New Purchaser(Trade Purchaser) / Retailer"] = new("NEWPUR","50", 83),
            ["Phone Call with Builder /Stockist"]          = new("PHBUI","12", 83),
            ["Meetings with Contractor / Stockist"]        = new("MECO","13", 83),
            ["Visit to Get / Check Sampling at Site"]      = new("CHSMP","31", 83),
            ["BTL Activities"]                             = new("BTLACT","51", 83),
            ["On Leave / Holiday / Off Day"]               = new("LEAVEH","54", 83),
            ["Work From Home"]                             = new("WFHOME","55", 83),
            ["Any Other Activity"]                         = new("ANYOTH","60", 83),
            ["Phone Call with Unregistered Purchasers"]    = new("UNREGPC","61", 83),
        };

        public static bool TryGet(string key, out ActivityMetadata meta)
        {
            foreach (var kvp in _map)
                if (key.StartsWith(kvp.Key, StringComparison.OrdinalIgnoreCase))
                {
                    meta = kvp.Value;
                    return true;
                }

            meta = default!;
            return false;
        }
    }

    //──────────────────────────────────────────────────────────────────────────────
    // 3) Single‐POST controller
    //──────────────────────────────────────────────────────────────────────────────

    [Route("api/[controller]")]
    [ApiController]
    public class DsrTryController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        public DsrTryController(DatabaseHelper db) => _db = db;

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult Submit([FromBody] DsrEntryDto dto)
        {
            // 1) Identify metadata
            if (!ActivityLookup.TryGet(dto.GetType()
                                         .GetCustomAttributes(typeof(JsonDerivedTypeAttribute), false)
                                         .OfType<JsonDerivedTypeAttribute>()
                                         .First(x => x.DerivedType == dto.GetType())
                                         .TypeDiscriminator,
                                     out var meta))
            {
                return BadRequest($"Unknown activity '{dto.GetType().Name}'.");
            }

            // 2) Generate docuNumb
            var rawNum  = meta.Prefix + DateTime.UtcNow.ToString("yyMMddHHmmss").PadRight(11, '0');
            var docuNumb= rawNum.Substring(0, 16);

            // 3) Extract rem-values via pattern matching
            var remValues = dto switch
            {
                OfficeWorkDto ow                  => new[]{ ow.DsrRem01, ow.DsrRem02 },
                InternalTeamMeetingDto itm        => new[]{ itm.DsrRem01, itm.DsrRem02, itm.DsrRem03 },
                NewPurchaserDto np                => new[]{ np.DsrRem01, np.DsrRem02, np.DsrRem03, np.DsrRem04 },
                PhoneCallBuilderDto pb            => new[]{ pb.DsrRem01, pb.DsrRem02, pb.DsrRem03, pb.DsrRem04, pb.DsrRem05, pb.DsrRem06, pb.DsrRem07, pb.DsrRem08 },
                MeetContractorDto mc              => new[]{ mc.DsrRem01, mc.DsrRem02, mc.DsrRem03, mc.DsrRem04, mc.DsrRem05, mc.DsrRem06, mc.DsrRem07, mc.DsrRem08 },
                VisitCheckSamplingDto vcs         => new[]{ vcs.DsrRem01, vcs.DsrRem02, vcs.DsrRem03, vcs.DsrRem04, vcs.DsrRem05, vcs.DsrRem06, vcs.DsrRem07, vcs.DsrRem08 },
                BtlActivitiesDto ba               => new[]{ ba.DsrRem01, ba.DsrRem02, ba.DsrRem03, ba.DsrRem04 },
                OnLeaveDto ol                     => new[]{ ol.DsrRem01 },
                WorkFromHomeDto wfh               => new[]{ wfh.DsrRem01, wfh.DsrRem02, wfh.DsrRem03, wfh.DsrRem04 },
                AnyOtherActivityDto aoa           => new[]{ aoa.DsrRem01, aoa.DsrRem02, aoa.DsrRem03, aoa.DsrRem04 },
                UnregisteredPurchasersDto up      => new[]{ up.DsrRem01 },
                _                                 => Array.Empty<string>()
            };

            // 4) Build rem[1..10] defaulting to ""
            var rem = Enumerable.Repeat(string.Empty, 11).ToArray();
            for (int i = 0; i < remValues.Length && i < 10; i++)
                rem[i+1] = remValues[i] ?? string.Empty;

            // 5) Prepare SQL + parameters
            const string sql = @"
INSERT INTO dptDSRActvt
  (docuNumb, dsrParam, docuDate,
   cusRtlFl, cusRtlCd,
   dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
   dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10,
   deptCode, statFlag,
   createId, createDt,
   updateId, updateDt,
   dsrParTy,
   atchNmId, locaCapr, latitute, lgtitute, cuRtType, areaCode,
   retlStFl, pinCodeN, cityName, district, cstBisTy,
   ordExDat,
   pendWith, ltLgDist, apprRemk, ordInsFl, refOrdNo, isTilRtl,
   tileStck, rtlInTim, rtOutTim)
VALUES
  (@docuNumb, @dsrParam, @reportDate,
   @cusRtlFl, @custRtlCd,
   @r1,@r2,@r3,@r4,@r5,
   @r6,@r7,@r8,@r9,@r10,
   '', '',
   @createId, @submissionDate,
   '', NULL,
   @dsrParTy,
   '', '', '', '', '', @areaCode,
   '', '', '', '', '',
   NULL,
   '', '', '', '', '', '',
   NULL, NULL, NULL);
";

            var parameters = new Dictionary<string, object>
            {
                ["@docuNumb"]       = docuNumb,
                ["@dsrParam"]       = meta.Param,
                ["@reportDate"]     = dto.ReportDate,
                ["@cusRtlFl"]       = dto.Purchaser,
                ["@custRtlCd"]      = dto.PurchaserCode,
                ["@submissionDate"] = dto.SubmissionDate,
                ["@createId"]       = dto.CreateId,
                ["@dsrParTy"]       = meta.ParTy,
                ["@areaCode"]       = dto.AreaCode,
                ["@r1"]             = rem[1],
                ["@r2"]             = rem[2],
                ["@r3"]             = rem[3],
                ["@r4"]             = rem[4],
                ["@r5"]             = rem[5],
                ["@r6"]             = rem[6],
                ["@r7"]             = rem[7],
                ["@r8"]             = rem[8],
                ["@r9"]             = rem[9],
                ["@r10"]            = rem[10],
            };

            // 6) Execute & return
            try
            {
                _db.WebSessBean(sql, parameters);
                return CreatedAtAction(nameof(Submit), new { docuNumb }, dto);
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }
    }
}
