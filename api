using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class RegistrationController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public RegistrationController(DatabaseHelper dbHelper)
        {
            _db = dbHelper;
        }

        // ============================================================
        // Details for RegistrationDetailsScreen
        // GET: /api/Registration/{inflCode}
        // ============================================================
        [HttpGet("{inflCode}")]
        public IActionResult GetByCode([FromRoute] string inflCode)
        {
            if (string.IsNullOrWhiteSpace(inflCode))
                return BadRequest(new { success = false, message = "InflCode is required." });

            var p = new Dictionary<string, object?>
            {
                ["@code"] = inflCode.Trim()
            };

            // Pull only the columns we need for the details page (plus a few helpful ones)
            var sql = @"
SELECT TOP 1
    inflCode,
    -- Names
    LTRIM(RTRIM(ISNULL(frstname,'')))  AS frstname,
    LTRIM(RTRIM(ISNULL(middname,'')))  AS middname,
    LTRIM(RTRIM(ISNULL(lastname,'')))  AS lastname,
    CAST(ISNULL(inflName,'') AS NVARCHAR(256)) AS inflName,

    -- Contact
    ISNULL(mobileNo,'') AS mobileNo,
    ISNULL(emailAdd,'') AS emailAdd,

    -- Address (present + permanent)
    ISNULL(inflAdd1,'') AS inflAdd1,
    ISNULL(inflAdd2,'') AS inflAdd2,
    ISNULL(inflAdd3,'') AS inflAdd3,
    ISNULL(inflCity,'') AS inflCity,
    ISNULL(district,'') AS district,
    ISNULL(inflPinC,'') AS inflPinC,

    -- Reference, type, status, dates
    ISNULL(referenc,'') AS referenc,
    ISNULL(contrtyp,'') AS contrtyp,
    ISNULL(inflType,'') AS inflType,
    ISNULL(isActive,'') AS isActive,
    COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) AS createDt,

    -- Business / License / VAT
    ISNULL(vatfrmnm,'')  AS vatfrmnm,   -- company/firm name
    ISNULL(comtrdnm,'')  AS comtrdnm,   -- trade name fallback
    ISNULL(comlcnno,'')  AS comlcnno,   -- license number
    ISNULL(vattxreg,'')  AS vattxreg,   -- TRN / Tax Registration
    ISNULL(ibannumb,'')  AS ibannumb,   -- IBAN

    -- Bank
    ISNULL(bankApNm,'') AS bankApNm,    -- account holder name
    ISNULL(bankBnNm,'') AS bankBnNm,    -- bank name
    ISNULL(bankBnDs,'') AS bankBnDs     -- branch
FROM dbo.ctmInfluncr WITH (NOLOCK)
WHERE inflCode = @code;
";

            var rows = _db.WebSessBean(sql, p ?? new Dictionary<string, object?>())
                       ?? new List<Dictionary<string, object>>();

            var r = rows.FirstOrDefault();
            if (r == null)
                return NotFound(new { success = false, message = "Registration not found." });

            // Compose fields for the Flutter UI
            var id = ToStr(r, "inflCode");
            var f = ToStr(r, "frstname");
            var m = ToStr(r, "middname");
            var l = ToStr(r, "lastname");
            var fallbackName = ToStr(r, "inflName");

            var fullName = ComposeName(f, m, l, fallbackName);
            var shortType = ToStr(r, "inflType");
            var userType = !string.IsNullOrWhiteSpace(ToStr(r, "contrtyp"))
                           ? ToStr(r, "contrtyp")
                           : (shortType switch { "CO" => "Contractor", "PA" => "Painter", _ => "Contractor" });

            var status = MapStatus(ToStr(r, "isActive"));
            var submitted = TryDate(ToStr(r, "createDt"));
            var mobile = ToStr(r, "mobileNo");
            var email = ToStr(r, "emailAdd");
            var avatar = MakeAvatar(fullName, id);

            var address = JoinAddress(
                ToStr(r, "inflAdd1"),
                ToStr(r, "inflAdd2"),
                ToStr(r, "inflAdd3"),
                ToStr(r, "inflCity"),
                ToStr(r, "district"),
                ToStr(r, "inflPinC")
            );

            var companyName = FirstNonEmpty(ToStr(r, "vatfrmnm"), ToStr(r, "comtrdnm"));
            var licenseNumber = ToStr(r, "comlcnno");
            var trnNumber = ToStr(r, "vattxreg");
            var accountHolder = FirstNonEmpty(ToStr(r, "bankApNm"), fullName);
            var iban = ToStr(r, "ibannumb");
            var bankName = ToStr(r, "bankBnNm");
            var branch = ToStr(r, "bankBnDs");
            var reference = ToStr(r, "referenc");

            var payload = new
            {
                success = true,
                data = new
                {
                    // Header / identity
                    id,
                    name = fullName,
                    type = userType,
                    mobile,
                    email,
                    submittedDate = submitted,
                    status,
                    avatar,

                    // Personal
                    fullName,
                    address,
                    reference,

                    // Business
                    companyName,
                    licenseNumber,
                    trnNumber,

                    // Bank
                    accountHolder,
                    iban,
                    bankName,
                    branch
                },
                timestamp = DateTime.Now
            };

            return Ok(payload);
        }

        // ========================= helpers =========================

        private static string MapStatus(string? ia)
        {
            ia = (ia ?? "").Trim().ToUpperInvariant();
            return ia switch
            {
                "Y" => "Approved",
                "R" => "Rejected",
                _ => "Pending"
            };
        }

        private static string MakeAvatar(string? name, string? fallbackId)
        {
            if (!string.IsNullOrWhiteSpace(name))
            {
                var parts = Regex.Split(name.Trim(), @"\s+")
                                 .Where(s => !string.IsNullOrWhiteSpace(s))
                                 .ToList();
                if (parts.Count == 1)
                    return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpperInvariant();

                if (parts.Count >= 2)
                {
                    var a = parts[0][0];
                    var b = parts[^1][0];
                    return $"{char.ToUpperInvariant(a)}{char.ToUpperInvariant(b)}";
                }
            }
            var f = (fallbackId ?? "ID");
            return f.Length >= 2 ? f.Substring(0, 2).ToUpperInvariant() : f.ToUpperInvariant();
        }

        private static string ComposeName(string? f, string? m, string? l, string? fallback)
        {
            var list = new[] { f, m, l }
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .Select(x => x!.Trim());
            var joined = string.Join(" ", list).Trim();
            if (!string.IsNullOrWhiteSpace(joined)) return joined;
            return (fallback ?? "").Trim();
        }

        private static string JoinAddress(params string[] parts)
        {
            var list = parts
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .Select(s => s.Trim().Trim(',', ' '))
                .Where(s => s.Length > 0);
            var txt = string.Join(", ", list);
            return string.IsNullOrWhiteSpace(txt) ? "" : txt;
        }

        private static string FirstNonEmpty(params string[] inputs)
        {
            foreach (var s in inputs)
            {
                if (!string.IsNullOrWhiteSpace(s)) return s.Trim();
            }
            return "";
        }

        private static string ToStr(Dictionary<string, object> row, string key)
        {
            return row.TryGetValue(key, out var v) && v != null ? v.ToString() ?? "" : "";
        }

        private static string TryDate(string? sqlDate)
        {
            if (DateTime.TryParse(sqlDate, out var dt))
                return dt.ToString("yyyy-MM-dd");
            return DateTime.Now.ToString("yyyy-MM-dd");
        }
    }
}
