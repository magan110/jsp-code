using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using RAKControllers.DataAccess;
using System.Data;

namespace RAKControllers.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ExpertMeetClaimController : ControllerBase
    {
        private readonly ILogger<ExpertMeetClaimController> _logger;
        private readonly DatabaseHelper _dbHelper;

        public ExpertMeetClaimController(ILogger<ExpertMeetClaimController> logger, DatabaseHelper dbHelper)
        {
            _logger = logger;
            _dbHelper = dbHelper;
        }

        // GET endpoint to initialize form data (equivalent to refreshed() function in Java)
        [HttpGet("form-data")]
        public async Task<ActionResult<ApiResponse<ExpertMeetClaimFormData>>> GetFormData(
            [FromQuery] string procType = "A",
            [FromQuery] string docuNumb = "",
            [FromQuery] string catActNo = "",
            [FromQuery] string areaCode = "",
            [FromQuery] string loginIdM = "")
        {
            try
            {
                var formData = new ExpertMeetClaimFormData();

                // Set basic form parameters
                formData.ProcType = procType;
                formData.DocuNumb = docuNumb;
                formData.CatActNo = catActNo;
                formData.AreaCode = areaCode;

                // Check start date validation (equivalent to strtDays check in Java)
                string sql = "SELECT case when getdate() > '01 Feb 2025' then '1' else 0 end as strtDays";
                var strtDaysResult = _dbHelper.WebSessBean(sql, new Dictionary<string, object>());
                if (strtDaysResult.Count > 0 && strtDaysResult[0].Values.First()?.ToString() == "1")
                {
                    return BadRequest(new ApiResponse<ExpertMeetClaimFormData>
                    {
                        Success = false,
                        Message = "Entry is not allowed."
                    });
                }

                // Generate random number for new entries
                if (procType == "A")
                {
                    sql = "select right(newId(), 8)";
                    var randResult = _dbHelper.WebSessBean(sql, new Dictionary<string, object>());
                    formData.RandNmSt = randResult.Count > 0 ? randResult[0].Values.First()?.ToString() ?? "" : "";
                }
                else
                {
                    formData.RandNmSt = docuNumb;
                }

                // Get dropdown options
                formData.ProcessTypeOptions = GetProcessTypeOptions(procType);
                formData.DocumentOptions = GetDocumentOptions(loginIdM);
                formData.ActivityOptions = GetActivityOptions(loginIdM);

                // If updating existing record, get existing data
                if ((procType == "U" || procType == "D") && !string.IsNullOrEmpty(docuNumb))
                {
                    LoadExistingClaimData(formData, docuNumb, loginIdM);
                }

                // If activity is selected, load activity details
                if (!string.IsNullOrEmpty(catActNo))
                {
                    LoadActivityDetails(formData, catActNo);
                }

                return Ok(new ApiResponse<ExpertMeetClaimFormData>
                {
                    Success = true,
                    Data = formData,
                    Message = "Form data loaded successfully"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error loading form data");
                return StatusCode(500, new ApiResponse<ExpertMeetClaimFormData>
                {
                    Success = false,
                    Message = "Error loading form data: " + ex.Message
                });
            }
        }




        // POST endpoint for form submission (equivalent to CascActExpnS.jsp)
        [HttpPost("submit")]
        public async Task<ActionResult<ApiResponse<string>>> SubmitClaim([FromBody] ExpertMeetClaimSubmission request)
        {
            
            
                if (!ModelState.IsValid)
                {
                    return BadRequest(new ApiResponse<string>
                    {
                        Success = false,
                        Message = "Invalid request data",
                        Errors = ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage)).ToList()
                    });
                }

                string docuNumb = "";
                string message = "";

                try
                {
                    if (request.ProcType == "A")
                    {
                        // Generate document number for new entries
                        docuNumb = GenerateDocumentNumber("CAE", request.AreaCode);

                        // Validate and truncate data to match catExcpnsEp schema
                        string truncatedDocuNumb = docuNumb?.Length > 16 ? docuNumb.Substring(0, 16) : docuNumb ?? "";
                        string truncatedCatActNo = request.CatActNo?.Length > 16 ? request.CatActNo.Substring(0, 16) : request.CatActNo ?? "";
                        string truncatedPendWith = request.PendWith?.Length > 20 ? request.PendWith.Substring(0, 20) : request.PendWith ?? "";
                        string truncatedRandNmSt = request.RandNmSt?.Length > 20 ? request.RandNmSt.Substring(0, 20) : request.RandNmSt ?? "";
                        string truncatedLoginIdM = request.LoginIdM?.Length > 10 ? request.LoginIdM.Substring(0, 10) : request.LoginIdM ?? "";

                        // Insert main record into catExcpnsEp
                        string sql = @"INSERT INTO catExcpnsEp(docuNumb, docuDate, catActNo, noOfTtPr, pendWith, statFlag, randNmSt, createId, createDt)
                                      VALUES (@docuNumb, CONVERT(varchar(11), getdate(), 113), @catActNo, @noOfTtPr, @pendWith, 'T', @randNmSt, @loginIdM, getdate())";

                        _dbHelper.WebExecute(sql, new Dictionary<string, object>
                        {
                            { "@docuNumb", truncatedDocuNumb },
                            { "@catActNo", truncatedCatActNo },
                            { "@noOfTtPr", "0" },
                            { "@pendWith", truncatedPendWith },
                            { "@randNmSt", truncatedRandNmSt },
                            { "@loginIdM", truncatedLoginIdM }
                        });

                        // Update docuNumb to use the truncated version for consistency
                        docuNumb = truncatedDocuNumb;

                        // Update activity reference
                        sql = "UPDATE catActPreSl SET refDocNo = @docuNumb WHERE docuNumb = @catActNo";
                        _dbHelper.WebExecute(sql, new Dictionary<string, object>
                        {
                            { "@docuNumb", docuNumb },
                            { "@catActNo", request.CatActNo }
                        });

                        message = $"Insert Successful. Your Document No: {docuNumb}";
                    }
                    else if (request.ProcType == "U")
                    {
                        docuNumb = request.DocuNumb;

                        // Update main record
                        string sql = @"UPDATE catExcpnsEp SET pendWith = @pendWith, statFlag = 'T', updateDt = getdate(), updateId = @loginIdM
                                      WHERE docuNumb = @docuNumb AND createId = @loginIdM";

                        _dbHelper.WebExecute(sql, new Dictionary<string, object>
                        {
                            { "@pendWith", request.PendWith },
                            { "@docuNumb", docuNumb },
                            { "@loginIdM", request.LoginIdM }
                        });

                        // Delete existing expense details
                        sql = "DELETE FROM catExcpnsEpDtl WHERE docuNumb = @docuNumb AND createId = @loginIdM";
                        _dbHelper.WebExecute(sql, new Dictionary<string, object>
                        {
                            { "@docuNumb", docuNumb },
                            { "@loginIdM", request.LoginIdM }
                        });

                        message = "Update Successful";
                    }

                    // Insert expense details and calculate total amount
                    decimal totalExpenseAmount = 0;
                    if (request.ExpenseDetails != null && request.ExpenseDetails.Count > 0)
                    {
                        for (int i = 0; i < request.ExpenseDetails.Count; i++)
                        {
                            var expense = request.ExpenseDetails[i];
                            decimal expenseAmt = Convert.ToDecimal(expense.ExpnsAmt);
                            totalExpenseAmount += expenseAmt;

                            // Validate and truncate data to match catExcpnsEpDtl schema
                            string truncatedDocuNumb = docuNumb?.Length > 16 ? docuNumb.Substring(0, 16) : docuNumb ?? "";
                            string truncatedExpnsTye = i.ToString().Length > 2 ? i.ToString().Substring(0, 2) : i.ToString();
                            string truncatedExpnsBil = expense.ExpnsBil?.Length > 20 ? expense.ExpnsBil.Substring(0, 20) : expense.ExpnsBil ?? "";
                            string truncatedLoginIdM = request.LoginIdM?.Length > 10 ? request.LoginIdM.Substring(0, 10) : request.LoginIdM ?? "";

                            string sql = @"INSERT INTO catExcpnsEpDtl(docuNumb, expnsTye, expnsDat, expnsAmt, expAmtEx, expnsBil, createId, createDt)
                                          VALUES (@docuNumb, @expnsTye, @expnsDat, @expnsAmt, @expAmtEx, @expnsBil, @loginIdM, getdate())";

                            _dbHelper.WebExecute(sql, new Dictionary<string, object>
                            {
                                { "@docuNumb", truncatedDocuNumb },
                                { "@expnsTye", truncatedExpnsTye },
                                { "@expnsDat", ConvertToSqlDate(request.MeetDate) },
                                { "@expnsAmt", expense.ExpnsAmt },
                                { "@expAmtEx", expense.ExpAmtEx ?? "0" },
                                { "@expnsBil", truncatedExpnsBil },
                                { "@loginIdM", truncatedLoginIdM }
                            });
                        }
                    }

                    // Update budget usage (equivalent to ettExpncBud updates in Java)
                    UpdateBudgetUsage(request.ZoneCode, request.CatActNo, request.LoginIdM, totalExpenseAmount);

                    // Update attachment info if any
                    UpdateAttachmentInfo(docuNumb, request.LoginIdM);

                    _logger.LogInformation("Expert meet claim processed successfully. Document: {DocumentNo}", docuNumb);

                    return Ok(new ApiResponse<string>
                    {
                        Success = true,
                        Data = docuNumb,
                        Message = message
                    });
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error processing expert meet claim");
                    return StatusCode(500, new ApiResponse<string>
                    {
                        Success = false,
                        Message = "Error processing expert meet claim: " + ex.Message
                    });
                }

            
        }


        [HttpPost("upload-image")]
        public async Task<ActionResult<ApiResponse<string>>> UploadImage([FromForm] ImageUploadRequest request)
        {
            try
            {
                if (request.Image == null || request.Image.Length == 0)
                {
                    return BadRequest(new ApiResponse<string>
                    {
                        Success = false,
                        Message = "No image file provided"
                    });
                }

                // Validate file type and size
                var allowedTypes = new[] { "image/jpeg", "image/jpg", "image/png" };
                if (!allowedTypes.Contains(request.Image.ContentType.ToLower()))
                {
                    return BadRequest(new ApiResponse<string>
                    {
                        Success = false,
                        Message = "Only JPEG, JPG, and PNG files are allowed"
                    });
                }

                if (request.Image.Length > 3 * 1024 * 1024) // 3MB limit
                {
                    return BadRequest(new ApiResponse<string>
                    {
                        Success = false,
                        Message = "File size cannot exceed 3MB"
                    });
                }

                // Generate unique filename
                string fileName = $"{request.DocumentNo}_{request.ImageSequence}_{Guid.NewGuid()}{Path.GetExtension(request.Image.FileName)}";
                string uploadPath = Path.Combine("uploads", "images");

                // Ensure directory exists
                if (!Directory.Exists(uploadPath))
                {
                    Directory.CreateDirectory(uploadPath);
                }

                string filePath = Path.Combine(uploadPath, fileName);

                // Save file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await request.Image.CopyToAsync(stream);
                }

                // TODO: Save file information to database (imagedata.dbo.cotDocAttch equivalent)

                _logger.LogInformation("Image uploaded successfully: {FileName}", fileName);

                return Ok(new ApiResponse<string>
                {
                    Success = true,
                    Data = $"/uploads/images/{fileName}",
                    Message = "Image uploaded successfully"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error uploading image");
                return StatusCode(500, new ApiResponse<string>
                {
                    Success = false,
                    Message = "Error uploading image"
                });
            }
        }

        [HttpGet("validate-budget")]
        public ActionResult<ApiResponse<BudgetValidationResponse>> ValidateBudget([FromQuery] string activityNo, [FromQuery] decimal totalAmount)
        {
            try
            {
                // Get max budget from activity
                string sql = @"SELECT ISNULL(mxBdgtAl, 0) as maxBudget
                              FROM catActPreSl WITH (NOLOCK)
                              WHERE docuNumb = @activityNo";

                var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
                {
                    { "@activityNo", activityNo }
                });

                decimal maxBudget = result.Count > 0 ? Convert.ToDecimal(result[0].Values.First() ?? 0) : 0;

                var response = new BudgetValidationResponse
                {
                    IsValid = totalAmount <= maxBudget,
                    MaxBudget = maxBudget,
                    RequestedAmount = totalAmount,
                    RemainingBudget = maxBudget - totalAmount
                };

                return Ok(new ApiResponse<BudgetValidationResponse>
                {
                    Success = true,
                    Data = response,
                    Message = response.IsValid ? "Budget is valid" : "Requested amount exceeds maximum budget"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error validating budget");
                return StatusCode(500, new ApiResponse<BudgetValidationResponse>
                {
                    Success = false,
                    Message = "Error validating budget"
                });
            }
        }

        // Helper methods matching Java backend logic
        private string GenerateDocumentNumber(string docuType, string areaCode)
        {
            // Generate document number similar to WebSessBean.getDocumentNo logic
            string sql = @"SELECT ISNULL(MAX(CAST(RIGHT(docuNumb, 4) AS INT)), 0) + 1 as nextNum
                          FROM catExcpnsEp WITH (NOLOCK)
                          WHERE LEFT(docuNumb, 3) = @docuType
                          AND SUBSTRING(docuNumb, 4, 6) = @yearMonth
                          AND SUBSTRING(docuNumb, 10, LEN(@areaCode)) = @areaCode";

            string yearMonth = DateTime.Now.ToString("yyyyMM");
            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@docuType", docuType },
                { "@yearMonth", yearMonth },
                { "@areaCode", areaCode }
            });

            int nextNum = result.Count > 0 ? Convert.ToInt32(result[0].Values.First() ?? 1) : 1;
            return $"{docuType}{yearMonth}{areaCode}{nextNum:D4}";
        }

        private List<ProcessTypeOption> GetProcessTypeOptions(string selectedValue)
        {
            return new List<ProcessTypeOption>
            {
                new ProcessTypeOption { Value = "A", Label = "Add", Selected = selectedValue == "A" },
                new ProcessTypeOption { Value = "U", Label = "Update", Selected = selectedValue == "U" },
                new ProcessTypeOption { Value = "D", Label = "Delete", Selected = selectedValue == "D" }
            };
        }

        private List<DocumentOption> GetDocumentOptions(string loginIdM)
        {
            string sql = @"SELECT docuNumb, docuNumb
                          FROM catExcpnsEp WITH (NOLOCK)
                          WHERE statFlag = 'T' AND createId = @loginIdM
                          ORDER BY createDt DESC";

            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@loginIdM", loginIdM }
            });

            var options = new List<DocumentOption>();
            foreach (var row in result)
            {
                options.Add(new DocumentOption
                {
                    Value = row["docuNumb"]?.ToString() ?? "",
                    Label = row["docuNumb"]?.ToString() ?? ""
                });
            }

            return options;
        }

        private List<ActivityOption> GetActivityOptions(string loginIdM)
        {
            string sql = @"SELECT a.docuNumb, a.docuNumb + ' ' + a.custCode + ' (' + b.custName + ')'
                          FROM catActPreSl a WITH (NOLOCK), dpvConcEmpl b WITH (NOLOCK)
                          WHERE a.cusRtlCd = b.custCode
                          AND a.statFlag IN ('N')
                          AND a.createId = @loginIdM
                          AND ISNULL(a.refDocNo, '') NOT IN (
                              SELECT docuNumb FROM catExcpnsEp a WITH (NOLOCK)
                              WHERE statFlag NOT IN ('T') AND a.createId = @loginIdM
                          )
                          AND a.createDt > GETDATE() - 365
                          ORDER BY a.createDt DESC";

            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@loginIdM", loginIdM }
            });

            var options = new List<ActivityOption>();
            foreach (var row in result)
            {
                var values = row.Values.ToArray();
                options.Add(new ActivityOption
                {
                    Value = values[0]?.ToString() ?? "",
                    Label = values[1]?.ToString() ?? ""
                });
            }

            return options;
        }

        private void LoadExistingClaimData(ExpertMeetClaimFormData formData, string docuNumb, string loginIdM)
        {
            string sql = @"SELECT docuNumb, catActNo, noOfTtPr
                          FROM catExcpnsEp WITH (NOLOCK)
                          WHERE statFlag = 'T' AND docuNumb = @docuNumb AND createId = @loginIdM";

            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@docuNumb", docuNumb },
                { "@loginIdM", loginIdM }
            });

            if (result.Count > 0)
            {
                var row = result[0];
                formData.DocuNumb = row["docuNumb"]?.ToString() ?? "";
                formData.CatActNo = row["catActNo"]?.ToString() ?? "";
            }
        }

        private void LoadActivityDetails(ExpertMeetClaimFormData formData, string catActNo)
        {
            // Load activity details - Updated with correct column names from schema
            string sql = @"SELECT a.docuNumb, CONVERT(varchar(11), a.actvDate, 113), a.docuMnth, a.actvName, a.caaActTy, a.caaObjTy,
                          CONVERT(VARCHAR(10), a.meetDate, 103), a.meetVenu, a.actvCity, a.district, a.pinCodeN, a.noOfPart,
                          a.noOfEnqu, a.noOfVist, a.prodCtLs, a.empPrsLs, a.actvRmrk, a.caaPrjTy, a.mobileNo, a.emailAdd,
                          a.contPers, a.potnInMT, a.maturtMn, a.rejcRmrk, a.areaCode, ISNULL(a.cusRtlCd, ''),
                          ISNULL(a.atchNmId, ''), a.statFlag, ISNULL(a.mxBdgtAl, 0), ISNULL(a.refDocNo, '')
                          FROM catActPreSl a WITH (NOLOCK)
                          WHERE a.docuNumb = @catActNo";

            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@catActNo", catActNo }
            });

            if (result.Count > 0)
            {
                var row = result[0];
                var values = row.Values.ToArray();
                formData.ActivityDetails = new ActivityDetails
                {
                    ActivityNo = values[0]?.ToString() ?? "",
                    ActivityDate = values[1]?.ToString() ?? "",
                    ActivityName = values[3]?.ToString() ?? "",
                    MeetDate = values[6]?.ToString() ?? "",
                    MeetVenue = values[7]?.ToString() ?? "",
                    ActivityCity = values[8]?.ToString() ?? "",
                    District = values[9]?.ToString() ?? "",
                    MaxBudget = Convert.ToDecimal(values[28] ?? 0),
                    AreaCode = values[24]?.ToString() ?? "",
                    RetailerCode = values[25]?.ToString() ?? ""
                };

                // Load retailer details if retailer code exists
                if (!string.IsNullOrEmpty(formData.ActivityDetails.RetailerCode))
                {
                    LoadRetailerDetails(formData, formData.ActivityDetails.RetailerCode);
                }

                // Load painter details
                LoadPainterDetails(formData, catActNo);
            }
        }

        private void LoadRetailerDetails(ExpertMeetClaimFormData formData, string retlSpCd)
        {
            // Updated query to match actual table schemas
            string sql = @"SELECT a.retlCode, a.retlName, a.mobileNo, b.custName, a.sapRtlCd, ISNULL(a.cityName, a.location),
                          a.district, a.retlPinC, CASE WHEN ISNULL(a.kycVerFl, 'N') = 'Y' THEN 'Yes' ELSE 'No' END as kycVerFl,
                          ISNULL(a.mrktName, ''), CASE WHEN a.retlCatg = '' THEN 'U' ELSE 'R' END, c.zoneCode
                          FROM rtmRetailer a WITH (NOLOCK), dpmCustomer b WITH (NOLOCK), bkmareaStZn c WITH (NOLOCK)
                          WHERE a.isActive = 'Y' AND a.custCode = b.custCode AND a.areaCode = c.areaCode
                          AND a.retlCode = @retlSpCd
                          UNION ALL
                          SELECT b.custCode, b.custName, b.mobileNo, b.custName, b.sapCusCd, ISNULL(b.custCity, ''),
                          b.district, b.custPinC, 'Yes' as kycVerFl, ISNULL(b.mrktName, ''), 'U', c.zoneCode
                          FROM dpmCustomer b WITH (NOLOCK), bkmareaStZn c WITH (NOLOCK)
                          WHERE b.isActive = 'Y' AND b.areaCode = c.areaCode
                          AND b.custCode = @retlSpCd";

            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@retlSpCd", retlSpCd }
            });

            if (result.Count > 0)
            {
                var row = result[0];
                var values = row.Values.ToArray();
                formData.RetailerDetails = new RetailerDetails
                {
                    Name = values[1]?.ToString() ?? "",
                    SapCode = values[4]?.ToString() ?? "",
                    MobileNo = values[2]?.ToString() ?? "",
                    StockistName = values[3]?.ToString() ?? "",
                    District = values[6]?.ToString() ?? "",
                    City = values[5]?.ToString() ?? "",
                    PinCode = values[7]?.ToString() ?? "",
                    KycStatus = values[8]?.ToString() ?? ""
                };
            }
        }

        private void LoadPainterDetails(ExpertMeetClaimFormData formData, string catActNo)
        {
            // Updated query to match actual table schemas
            string sql = @"SELECT b.mobileNo, c.paramDes, b.inflName, ISNULL(a.dsrRem08, ''), ISNULL(a.nwPntFlg, ''),
                          ISNULL(a.tlKitFlg, ''), b.inflCode, ISNULL(a.oldKycFl, '')
                          FROM catActPreSlDtl a WITH (NOLOCK), ctvInfluncr b WITH (NOLOCK), wcmParametr c WITH (NOLOCK)
                          WHERE a.attnCode = b.inflCode AND a.dsrRem09 = b.mobileNo AND b.inflType = c.paramCod
                          AND c.paramTyp = 4 AND a.docuNumb = @catActNo AND a.attnType = 'I'";

            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@catActNo", catActNo }
            });

            formData.Painters = new List<PainterDetails>();
            foreach (var row in result)
            {
                var values = row.Values.ToArray();
                formData.Painters.Add(new PainterDetails
                {
                    MobileNo = values[0]?.ToString() ?? "",
                    Type = values[1]?.ToString() ?? "",
                    Name = values[2]?.ToString() ?? ""
                });
            }
        }

        private void UpdateBudgetUsage(string zoneCode, string catActNo, string loginIdM, decimal totalExpenseAmount)
        {
            // Truncate data to match ettExpncBud schema constraints
            string truncatedZoneCode = zoneCode?.Length > 10 ? zoneCode.Substring(0, 10) : zoneCode ?? "";
            string truncatedCatActNo = catActNo?.Length > 16 ? catActNo.Substring(0, 16) : catActNo ?? "";
            string truncatedLoginIdM = loginIdM?.Length > 10 ? loginIdM.Substring(0, 10) : loginIdM ?? "";
            string truncatedFincYear = GetCurrentFinancialYear();
            if (truncatedFincYear.Length > 2) truncatedFincYear = truncatedFincYear.Substring(truncatedFincYear.Length - 2); // Get last 2 digits

            // Update budget status to 'C' (Closed) - Updated to match ettExpncBud schema
            string sql = @"UPDATE ettExpncBud SET statFlag = 'C', updateDt = GETDATE(), updateId = @loginIdM
                          WHERE zoneCode = @zoneCode AND expnsTyp = '11' AND fincYear = @fincYear
                          AND catActDc = @catActNo AND statFlag = 'N'";

            _dbHelper.WebExecute(sql, new Dictionary<string, object>
            {
                { "@zoneCode", truncatedZoneCode },
                { "@catActNo", truncatedCatActNo },
                { "@loginIdM", truncatedLoginIdM },
                { "@fincYear", truncatedFincYear }
            });

            // Insert new budget record - Truncate nrtnRmrk to fit varchar(100)
            string remark = "Budget Use in Casc Activity Expns";
            if (remark.Length > 100) remark = remark.Substring(0, 100);

            sql = @"INSERT INTO ettExpncBud(zoneCode, expnsTyp, fincYear, schBdIdn, catActDc, docuDate, nrtnRmrk, budAmtDb, budAmtCr, statFlag, createId, createDt)
                   VALUES (@zoneCode, '11', @fincYear, 1, @catActNo, CONVERT(varchar(11), GETDATE(), 113),
                   @remark, @expnsAmt, 0, 'N', 'System', getdate())";

            _dbHelper.WebExecute(sql, new Dictionary<string, object>
            {
                { "@zoneCode", truncatedZoneCode },
                { "@fincYear", truncatedFincYear },
                { "@catActNo", truncatedCatActNo },
                { "@expnsAmt", totalExpenseAmount },
                { "@remark", remark }
            });
        }

        private void UpdateAttachmentInfo(string docuNumb, string loginIdM)
        {
            string sql = @"SELECT atchNmId FROM imagedata.dbo.cotDocAttch WITH (NOLOCK) WHERE docuNumb = @docuNumb";
            var result = _dbHelper.WebSessBean(sql, new Dictionary<string, object>
            {
                { "@docuNumb", docuNumb }
            });

            string atchNmIds = "";
            foreach (var row in result)
            {
                if (!string.IsNullOrEmpty(atchNmIds))
                    atchNmIds += ",";
                atchNmIds += row.Values.First()?.ToString() ?? "";
            }

            if (!string.IsNullOrEmpty(atchNmIds))
            {
                sql = "UPDATE catExcpnsEp SET atchNmId = @atchNmIds WHERE docuNumb = @docuNumb";
                _dbHelper.WebExecute(sql, new Dictionary<string, object>
                {
                    { "@atchNmIds", atchNmIds },
                    { "@docuNumb", docuNumb }
                });
            }
        }

        private string ConvertToSqlDate(string dateString)
        {
            if (DateTime.TryParse(dateString, out DateTime date))
            {
                return date.ToString("yyyy-MM-dd");
            }
            return DateTime.Now.ToString("yyyy-MM-dd");
        }

        private string GetCurrentFinancialYear()
        {
            var now = DateTime.Now;
            var startYear = now.Month >= 4 ? now.Year : now.Year - 1;
            return $"{startYear}-{startYear + 1}";
        }
    }

    // DTOs and Models
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public T? Data { get; set; }
        public string Message { get; set; } = string.Empty;
        public List<string> Errors { get; set; } = new List<string>();
    }

    public class ActivityOption
    {
        public string Value { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
    }

    public class DocumentOption
    {
        public string Value { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
    }

    public class ActivityDetails
    {
        public string ActivityNo { get; set; } = string.Empty;
        public string ActivityDate { get; set; } = string.Empty;
        public string ActivityName { get; set; } = string.Empty;
        public string MeetDate { get; set; } = string.Empty;
        public string MeetVenue { get; set; } = string.Empty;
        public string ActivityCity { get; set; } = string.Empty;
        public string District { get; set; } = string.Empty;
        public decimal MaxBudget { get; set; }
        public string AreaCode { get; set; } = string.Empty;
        public string RetailerCode { get; set; } = string.Empty;
        public RetailerDetails? RetailerDetails { get; set; }
        public List<PainterDetails> Painters { get; set; } = new List<PainterDetails>();
    }

    public class RetailerDetails
    {
        public string Name { get; set; } = string.Empty;
        public string SapCode { get; set; } = string.Empty;
        public string MobileNo { get; set; } = string.Empty;
        public string StockistName { get; set; } = string.Empty;
        public string District { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string PinCode { get; set; } = string.Empty;
        public string KycStatus { get; set; } = string.Empty;
    }

    public class PainterDetails
    {
        public string MobileNo { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }

    public class ExpenseDetail
    {
        public string BillNo { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string ImagePath { get; set; } = string.Empty;
    }


    // New DTOs matching the Java backend structure
    public class ExpertMeetClaimFormData
    {
        public string ProcType { get; set; } = "A";
        public string DocuNumb { get; set; } = string.Empty;
        public string CatActNo { get; set; } = string.Empty;
        public string AreaCode { get; set; } = string.Empty;
        public string RandNmSt { get; set; } = string.Empty;
        public List<ProcessTypeOption> ProcessTypeOptions { get; set; } = new List<ProcessTypeOption>();
        public List<DocumentOption> DocumentOptions { get; set; } = new List<DocumentOption>();
        public List<ActivityOption> ActivityOptions { get; set; } = new List<ActivityOption>();
        public ActivityDetails? ActivityDetails { get; set; }
        public RetailerDetails? RetailerDetails { get; set; }
        public List<PainterDetails> Painters { get; set; } = new List<PainterDetails>();
        public List<ExpenseDetailData> ExpenseDetails { get; set; } = new List<ExpenseDetailData>();
    }

    public class ProcessTypeOption
    {
        public string Value { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
        public bool Selected { get; set; }
    }

    public class ExpenseDetailData
    {
        public string ExpnsTye { get; set; } = string.Empty;
        public string ExpnsAmt { get; set; } = string.Empty;
        public string ExpnsBil { get; set; } = string.Empty;
        public string ExpAmtEx { get; set; } = "0";
    }

    public class ExpertMeetClaimSubmission
    {
        [Required]
        public string ProcType { get; set; } = "A"; // A=Add, U=Update, D=Delete

        public string DocuNumb { get; set; } = string.Empty; // For Update/Delete

        [Required]
        public string CatActNo { get; set; } = string.Empty; // Activity Number

        [Required]
        public string AreaCode { get; set; } = string.Empty;

        [Required]
        public string LoginIdM { get; set; } = string.Empty;

        public string PendWith { get; set; } = string.Empty;

        public string RandNmSt { get; set; } = string.Empty;

        public string ZoneCode { get; set; } = string.Empty;

        public string MeetDate { get; set; } = string.Empty;

        [Required]
        public List<ExpenseSubmissionDetail> ExpenseDetails { get; set; } = new List<ExpenseSubmissionDetail>();
    }

    public class ExpenseSubmissionDetail
    {
        [Required]
        public string ExpnsBil { get; set; } = string.Empty; // Bill Number

        [Required]
        [Range(0.01, 999999.99)]
        public string ExpnsAmt { get; set; } = string.Empty; // Amount

        public string ExpAmtEx { get; set; } = "0"; // Extra Amount
    }


    public class ImageUploadRequest
    {
        [Required]
        public IFormFile Image { get; set; } = null!;

        [Required]
        public string DocumentNo { get; set; } = string.Empty;

        [Required]
        public string ImageSequence { get; set; } = string.Empty;
    }

    public class BudgetValidationResponse
    {
        public bool IsValid { get; set; }
        public decimal MaxBudget { get; set; }
        public decimal RequestedAmount { get; set; }
        public decimal RemainingBudget { get; set; }
    }
}
