using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Transactions;
using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class DsrActvController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public DsrActvController(DatabaseHelper dbHelper)
        {
            _db = dbHelper;
        }

        // POST api/DsrActv
        [HttpPost]
        public IActionResult Create([FromBody] DsrActvRequest req)
        {
            try
            {
                using var scope = new TransactionScope();

                // 1) Generate new document number via stored proc
                string docuNumb;
                using (var conn = new SqlConnection(_db.BwliveConnStr))
                using (var cmd = new SqlCommand("usp_GetNextDocumentNo", conn) { CommandType = CommandType.StoredProcedure })
                {
                    cmd.Parameters.AddWithValue("@DocType", "DSR");
                    cmd.Parameters.AddWithValue("@AreaCode", req.AreaCode);
                    var outParam = new SqlParameter("@NextDocNo", SqlDbType.VarChar, 20) { Direction = ParameterDirection.Output };
                    cmd.Parameters.Add(outParam);
                    conn.Open();
                    cmd.ExecuteNonQuery();
                    docuNumb = outParam.Value.ToString();
                }

                // 2) Insert master record
                var masterSql = @"
                    INSERT INTO dptDSRActvt
                        (docuNumb, docuDate, dsrParTy, dsrParam, cusRtlFl, areaCode, cusRtlCd,
                         dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07,
                         dsrRem08, dsrRem09, district, deptCode, statFlag, createId, createDt,
                         locaCapr, latitute, lgtitute, pinCodeN, cityName, cstBisTy, cuRtType)
                    VALUES
                        (@docuNumb,@docuDate,@dsrParTy,@dsrParam,@cusRtlFl,@areaCode,@cusRtlCd,
                         @dsrRem01,@dsrRem02,@dsrRem03,@dsrRem04,@dsrRem05,@dsrRem06,@dsrRem07,
                         @dsrRem08,@dsrRem09,@district,@deptCode,'N',@loginId,GETDATE(),
                         @finlRslt,@geoLat,@geoLong,@pinCode,@city,@bisTy,@cuRtType)";
                var masterParams = new Dictionary<string, object>
                {
                    ["@docuNumb"]  = docuNumb,
                    ["@docuDate"]  = req.DocuDate,
                    ["@dsrParTy"]  = req.DsrParTy,
                    ["@dsrParam"]  = req.DsrParam,
                    ["@cusRtlFl"]  = req.CusRtlFl,
                    ["@areaCode"]  = req.AreaCode,
                    ["@cusRtlCd"]  = req.CusRtlCd,
                    ["@dsrRem01"]  = req.DsrRem01 ?? string.Empty,
                    ["@dsrRem02"]  = req.DsrRem02 ?? string.Empty,
                    ["@dsrRem03"]  = req.DsrRem03 ?? string.Empty,
                    ["@dsrRem04"]  = req.DsrRem04 ?? string.Empty,
                    ["@dsrRem05"]  = req.DsrRem05 ?? string.Empty,
                    ["@dsrRem06"]  = req.DsrRem06 ?? string.Empty,
                    ["@dsrRem07"]  = req.DsrRem07 ?? string.Empty,
                    ["@dsrRem08"]  = req.DsrRem08 ?? string.Empty,
                    ["@dsrRem09"]  = req.DsrRem09 ?? string.Empty,
                    ["@district"]  = req.District ?? string.Empty,
                    ["@deptCode"]  = req.DeptCode,
                    ["@loginId"]   = req.LoginId,
                    ["@finlRslt"]  = req.FinlRslt,
                    ["@geoLat"]    = req.GeoLatit,
                    ["@geoLong"]   = req.GeoLongt,
                    ["@pinCode"]   = req.PinCodeN,
                    ["@city"]      = req.CityName,
                    ["@bisTy"]     = req.CstBisTy,
                    ["@cuRtType"]  = req.CuRtType
                };
                _db.ExecuteNonQueryBwlive(masterSql, masterParams);

                // 3) Insert detail rows
                InsertDetails(req.Details, docuNumb, isMarket: false);
                if (req.MarketDetails?.Any() == true)
                    InsertDetails(req.MarketDetails, docuNumb, isMarket: true);

                scope.Complete();
                return CreatedAtAction(nameof(Create), new { id = docuNumb }, new { message = $"Document saved: {docuNumb}" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        // PUT api/DsrActv/{id}
        [HttpPut("{id}")]
        public IActionResult Update(string id, [FromBody] DsrActvRequest req)
        {
            try
            {
                using var scope = new TransactionScope();

                // 1) Update master record
                var updateSql = @"
                    UPDATE dptDSRActvt SET
                       dsrParTy = @dsrParTy,
                       dsrParam = @dsrParam,
                       docuDate = @docuDate,
                       cusRtlFl = @cusRtlFl,
                       cusRtlCd = @cusRtlCd,
                       dsrRem01 = @dsrRem01,
                       dsrRem02 = @dsrRem02,
                       dsrRem03 = @dsrRem03,
                       dsrRem04 = @dsrRem04,
                       dsrRem05 = @dsrRem05,
                       dsrRem06 = @dsrRem06,
                       cstBisTy = @cstBisTy,
                       dsrRem07 = @dsrRem07,
                       dsrRem08 = @dsrRem08,
                       dsrRem09 = @dsrRem09,
                       district = @district,
                       pinCodeN = @pinCodeN,
                       cityName = @cityName,
                       areaCode = @areaCode,
                       cuRtType = @cuRtType,
                       updateDt = GETDATE(),
                       updateId = @loginId
                    WHERE docuNumb = @docuNumb";
                var updParams = new Dictionary<string, object>(masterParams)
                {
                    ["@loginId"]  = req.LoginId,
                    ["@docuNumb"] = id
                };
                _db.ExecuteNonQueryBwlive(updateSql, updParams);

                // 2) Delete existing details
                _db.ExecuteNonQueryBwlive(
                    "DELETE FROM dptDSRActvtDtl WHERE docuNumb = @docuNumb",
                    new Dictionary<string, object> { ["@docuNumb"] = id }
                );

                // 3) Re-insert details
                InsertDetails(req.Details, id, isMarket: false);
                if (req.MarketDetails?.Any() == true)
                    InsertDetails(req.MarketDetails, id, isMarket: true);

                scope.Complete();
                return Ok(new { message = $"Updated document: {id}" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        private void InsertDetails(IEnumerable<DsrActvDetail> details, string docuNumb, bool isMarket)
        {
            var sql = isMarket
                ? @"INSERT INTO dptDSRActvtDtl
                      (docuNumb, docuSrNo, repoCatg, prodQnty, projQnty, actnRemk, targetDt, mrktData, statFlag, createId, createDt)
                   VALUES
                      (@docuNumb,@srNo,@repoCatg,@prodQnty,@projQnty,@actnRemk,@targetDt,'01','N',@loginId,GETDATE())"
                : @"INSERT INTO dptDSRActvtDtl
                      (docuNumb, docuSrNo, repoCatg, catgPack, prodQnty, projQnty, actnRemk, targetDt, statFlag, createId, createDt)
                   VALUES
                      (@docuNumb,@srNo,@repoCatg,@catgPack,@prodQnty,@projQnty,@actnRemk,@targetDt,'N',@loginId,GETDATE())";

            foreach (var d in details)
            {
                var p = new Dictionary<string, object>
                {
                    ["@docuNumb"] = docuNumb,
                    ["@srNo"]     = d.SerialNo,
                    ["@repoCatg"]  = d.RepoCatg,
                    ["@catgPack"]  = d.CatgPack ?? string.Empty,
                    ["@prodQnty"]  = d.ProdQnty,
                    ["@projQnty"]  = d.ProjQnty,
                    ["@actnRemk"]  = d.ActnRemk ?? string.Empty,
                    ["@targetDt"]  = d.TargetDt ?? (object)DBNull.Value,
                    ["@loginId"]   = d.CreateId
                };
                _db.ExecuteNonQueryBwlive(sql, p);
            }
        }
    }

    public class DsrActvRequest
    {
        public string DsrParam    { get; set; }
        public string CusRtlFl    { get; set; }
        public string AreaCode    { get; set; }
        public string CusRtlCd    { get; set; }
        public string DsrRem01    { get; set; }
        public string DsrRem02    { get; set; }
        public string DsrRem03    { get; set; }
        public string DsrRem04    { get; set; }
        public string DsrRem05    { get; set; }
        public string DsrRem06    { get; set; }
        public string DsrRem07    { get; set; }
        public string DsrRem08    { get; set; }
        public string DsrRem09    { get; set; }
        public string District    { get; set; }
        public string DeptCode    { get; set; }
        public string FinlRslt    { get; set; }
        public string GeoLatit    { get; set; }
        public string GeoLongt    { get; set; }
        public string PinCodeN    { get; set; }
        public string CityName    { get; set; }
        public string CstBisTy    { get; set; }
        public string CuRtType    { get; set; }
        public string DocuDate    { get; set; }
        public string DsrParTy    { get; set; } = "83";
        public string LoginId     { get; set; }
        public List<DsrActvDetail> Details       { get; set; }
        public List<DsrActvDetail> MarketDetails { get; set; }
    }

    public class DsrActvDetail
    {
        public int       SerialNo { get; set; }
        public string    RepoCatg  { get; set; }
        public string    CatgPack  { get; set; }
        public decimal   ProdQnty  { get; set; }
        public decimal   ProjQnty  { get; set; }
        public string    ActnRemk  { get; set; }
        public DateTime? TargetDt  { get; set; }
        public string    CreateId  { get; set; }
    }
}
