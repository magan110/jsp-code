now i need to make a new controller in asp.net take reference from above controller name it ExpertMeetClaimController make this controller using my backed code in java ill give u the code analyze it properly and make me a controller ill also give u my flutter code use both the code to make me a controller 
backend code -> <%@ include file="/Envr/JSP/SecurityCom.jsp"%>

<%
//// System.out.println("Hello Dear How are YOu");
ResultSet rset = null;

String  sql = "",
		procType = "A",
		formName = "CascActExpn",
		docuNumb = "",
		sqlInfSt = "",
		meetDate = "",
		areaCode = "",
		meetVenu = "",
		actvName = "",
		caaActTy = "11",
		caaObjTy = "",
		noOfPart = "",
		docuTySt = "",
		refDocNo = "",
		custAddr = "",
		randNmSt = "",
		atchNmId = "",
		actvCity = "",
		statFlag = "",
		sitePinC = "",
		mxBdgtAl = "",
		district = "",
		actvDate = "",
		sitePtCl = "0",
		contNumb = "",
		urbRurFl = "",
		docuMnth = "",
		pinCodeN = "",
		noOfEnqu = "",
		pendWith = "",
		pendName = "",
		retlSpCd = "",
		cusRtlNm = "",
		retlMbNo = "",
		custName = "",
		sapRtlCd = "",
		cityName = "",
		zoneCode = "",
		retlPinC = "",
		kycVerFl = "",
		mrktName = "",
		noOfVist = "",
		empPrsLs = "",
		caaPrjTy = "",
		contPers = "",
		potnInMT = "",
		maturtMn = "",
		rejcRmrk = "",
		emailAdd = "",
		teleNumb = "",
		mobileNo = "",
		prodCtLs = "",
		docuDate = "",
		catActNo = "",
		expnsTye = "",
		expnsDat = "",
		expnsAmt = "",
		expAmtEx = "",
		expnsbil = "",
		deptCode = "",
		attnTySt = WebSessBean.getSqlToOptionStr("select 'E', 'Employee' union select 'C', 'Conducted By' ", "E"), // union all  select 'I', 'Influncer'
		prodQnty = "0",
		strtDays = "",
		actvRmrk = "";

Double bwAvgWcc = 0.00,
	   bwAvgWcp = 0.00,
	   bwAvgVap = 0.00;


if (XssFilter.parSmGet("procType") != null)
	procType = XssFilter.parSmGet("procType");

if (XssFilter.parSmGet("docuNumb") != null)
	docuNumb = XssFilter.parSmGet("docuNumb");

if (XssFilter.parSmGet("catActNo") != null)
	catActNo = XssFilter.parSmGet("catActNo");

if (XssFilter.parSmGet("caaActTy") != null)
	caaActTy = XssFilter.parSmGet("caaActTy");

if (XssFilter.parSmGet("areaCode") != null)
	areaCode = XssFilter.parSmGet("areaCode");

if (XssFilter.parSmGet("retlSpCd") != null)
	retlSpCd = XssFilter.parSmGet("retlSpCd");


//	sql = "select deptCode from bwlive.dbo.prmEmployee where loginIdM = '" + loginIdM + "' ";
//	rset = WebSessBean.selectRecord(sql);
//		while(rset.next())
//		{
//			deptCode = rset.getString(1); 
//			//out.println(strtDays);
//		}


	sql = "  SELECT case when getdate() > '01 Feb 2025' then '1' else 0 end as strtDays ";
		rset = WebSessBean.selectRecord(sql);
		while(rset.next())
		{
			int i = 1;
			strtDays = rset.getString(i++); 
			//out.println(strtDays);
		}


//	if(strtDays.equals("0"))
//	{
//		out.println("Entry allowed");	
//	}
//	else
//	{
//
//		throw new Exception ("msgDispl- Entry is not allowed. ");
//	}

//	if(deptCode.equals("KKR117"))
//	{
//		out.println("Entry allowed");
//	}
//	else
//	{
//		throw new Exception ("msgDispl- Entry is not allowed. ");
//	}



sql = "select '1AF', 'Image 1' union select '2AF', 'Image 2' union select '3AF', 'Image 3'  union select '4AF', 'Image 4' ";
docuTySt = WebSessBean.getSqlToOptionStr(sql, ""); 
sqlInfSt = "select paramCod, paramCod + '-' + paramDes from wcmParametr with (nolock) where paramTYp = 4 and paramCod <> '00000' and isActive = 'Y'  ";
//union select 'RT', 'RT' + ' - ' + 'Retailer'  union select 'ST', 'ST' + ' - ' + 'Stockiest'  union select 'SM', 'SM' + ' - ' + 'Sales Men'

if(procType.equals("A"))
{
	sql = "select right(newId(), 8)";
	rset = WebSessBean.selectRecord(sql);

	rset.next();
	randNmSt = rset.getString(1);
}
else //if(procType.equals("A"))
{
	randNmSt = docuNumb;
}

/***
   1.  KYC Status Add
   2.  Err-No Record --> New Regisatrtion, Please update Type & Name
**/

%>
<!-- header display area begin -->
<jsp:include page="/Envr/JSP/HeaderCom.jsp" flush="true">
	<jsp:param name="mobFrend" value="B"/>
</jsp:include>
<!-- HEADER DISPLAY AREA ENDS -->

<script language="javascript">

function refreshed()
{

	if(document.<%=formName%>.procType.value == "U")
		document.<%=formName%>.catActNo.value = "";
//	alert(1);
//	if((!isEmpty(document.<%=formName%>.docuNumb.value) && document.<%=formName%>.procType.value != "A") || document.<%=formName%>.procType.value == "A" || (document.<%=formName%>.docuNumb.value != ""))
//	{
		document.<%=formName%>.method = "POST";
		document.<%=formName%>.action = "CascActExpn.jsp";
		document.<%=formName%>.submit();
//	}
}

function docuNumbHlpLoc()
{
	if(document.<%=formName%>.areaCode.value == "")
	{
		alert("Please Select Area Code");
		return false;
	}
	
	var wherList = "SW_02<%=splitChr%>" + document.<%=formName%>.areaCode.value;
	var wherList = "SW_03<%=splitChr%>" + "<%=loginIdM%>";
	var	queryCod = "MK_01094";
	dataLook('<%=formName%>', 'docuNumb', queryCod, 'L', 'DN', wherList);
}

var upldFlNm ;
function photoUpl(varNumRw, imgnumbr)
{
	var flUpLnSt = "";
	var docuType = "";
	var filSeqNo = "Img-" + imgnumbr + varNumRw;

   	if(document.<%=formName%>.procType.value == "A")
		upldFlNm = "<%=randNmSt%><%=loginIdM%>" + imgnumbr + varNumRw;
	else
	   upldFlNm = "<%=randNmSt%>";

//	eval("document.<%=formName%>.upldFlNm" + varNumRw).value = upldFlNm;

	flUpLnSt = "/Envr/JSP/FileUpload.jsp?popupWin=Y&upDocNum=" + upldFlNm + "&fileDocu=0&fileType=jpg,jpeg&maxmSize=3&filSeqNo=" + filSeqNo + "&attFilTy=00";
	//openUpldWind(upldFlNm, '', 'jpg', '');

	createModal('Image Upload', '' + flUpLnSt + '')

	return true;
}

function photView(varNumRw, imgnumbr)
{	
	var imgeView = "";

//	upldFlNm = "<%=docuNumb%>";															
	var atchNmId = "0", atchNmIO = "";
	var filSeqNo = "Img-" + imgnumbr + varNumRw;

	if(atchNmIO != "")
	{
		atchNmId = atchNmIO;
	}

   	if(document.<%=formName%>.procType.value == "A")
		upldFlNm = upldFlNm = "<%=randNmSt%><%=loginIdM%>" + imgnumbr + varNumRw;
	else
	   upldFlNm = "<%=randNmSt%>";

//	alert(imgeView);
	imgeView = "/Envr/JSP/AtchFileShow.jsp?docuNumb=" + upldFlNm + "&atchNmId=" + atchNmId + "&filSeqNo=" + filSeqNo + "&attFilTy=00";
//	alert(imgeView);
	createModal('Image Upload', '' + imgeView + '')
}     

function isDupDtlEml(arrObj, toFinNam, effcValu) // if effcValu passed then it will be searched instead of object value
{
	if(arrObj == null)
		return false;
	var toFinObj = eval(toFinNam);
	var vlToSrch = toFinObj.value;

	if(effcValu != null && effcValu != "")
		vlToSrch = effcValu;

	if(isInArray(arrObj, vlToSrch))
	{
		alert("Please Check Duplicate Participants Type (Employee)");
		toFinObj.focus();
		return true;
	}
	return false;
}



function submitValid(currObjt)
{

//	if(document.<%=formName%>.meetDate.value > "27/01/2025") // Changes done on 28 Jan 2025 Ravindra as per CR - 24/KKR/ACR/00223
//	{
//		displErr("Entry is not allowed after 28 Jan 2025");
//		document.<%=formName%>.meetDate.value = "";
//			return false;
//	}	
	
	var toltVlidrt = totlAmntChk('Y');

	if(!toltVlidrt)
		return false;

	//document.<%=formName%>.plnActFl.value = currObjt;
	if(!textValidApp(document.<%=formName%>.catActNo, "Reference Activity No", false))
		return false;
	if(!textValidApp(document.<%=formName%>.procType, "Add Update", false))
		return false;
/*
	if(!textValidApp(document.<%=formName%>.retlSpCd, "Retailer Code", false))
		return false;
  */

//	if (!subValidCom("<%=formName%>"))
//		return false;	
	
	if (confirm("You have choosen to submit. Press OK to continue"))
	{
		enableDisable("catActNo", "E", false, false);
		document.<%=formName%>.method = "POST";
		document.<%=formName%>.action = "<%=formName%>S.jsp";
		document.<%=formName%>.submit();
	}
} 
$(document).on("click", ".deleteButton", function() 
{
	if(document.<%=formName%>.abc1.length != null)
	{
		if(document.<%=formName%>.abc1.length == 1)
		{
			alert("Can't Delete Last Row");
			return false;
		}
		else
		{
			$(this).closest('.child_div').remove();
		}
	}
	else
	{
		alert("Can't Delete Last Row");
		return false;
	}
	totlAmntChk('')
});
   
function addrowInf(toRefresh, expnsTye, expnsAmt,  expnsBil,  expAmtEx, kycCapFl, inflCode,uplodBtn)
{
	var numrows = getNumRows();
//alert("nwPntFlg : " + nwPntFlg);
//	numrows = parseInt(document.all.project_tableInf.rows.length);
//	var newRow = insertRowBw(document.all.project_tableInf);

	var addRowData = "<div class='card mb-2 p-3 child_div' ><div class='form-row'>";
	
 	name = "abc1";
	addRowData += "<input type='hidden' class='form-control-check remove_field' name='" + name + "' id='" + name + "' value='" + numrows + "'>";

	if(expAmtEx == "")
		expAmtEx = "0";

	name = "expnsTye" + numrows;
	addRowData += "<input type='hidden' name='" + name + "' id='" + name + "' value='" + numrows + "'>";

	name = "expAmtEx" + numrows;
	addRowData += "<input type='hidden' name='" + name + "' id='" + name + "' value='" + expAmtEx + "'>";

	name = "expnsBil" + numrows;
	addRowData += "<div class='form-group col-md-2 col-6'><label>Bill No</label><input type='text' name='" + name + "' id='" + name + "'   class='form-control form-control-solid' value='" + expnsBil + "' maxlength='12'></div>";

	name = "expnsAmt" + numrows;
	addRowData += "<div class='form-group col-md-3 col-6'><label>Total Amount</label><input type='tel' name='" + name + "' class='form-control form-control-solid' value='" + expnsAmt + "' maxlength='5' onChange=\"totlAmntChk('')\"></div>";

	name = "uplodBtn" + numrows;
	addRowData += "<div class='form-group col-md-6 col-12'><label>Image 1 </label><br><input type='button' name='" + name + "' value='Upload Image 1' id='" + name + "' class='btn btn-primary me-5 mb-2 ' onClick=\"photoUpl(" + numrows + ", 'A')\">&nbsp&nbsp<input type='button' type='button' value='OpenImage' size='3' name='imgPop" + numrows + "' id='imgPop" + numrows + "' class='btn btn-primary  me-5 mb-2' onClick=\"photView(" + numrows + ", 'A')\"><input type='hidden' name='serNmInf' value=" + numrows + ">&nbsp&nbsp<input class='btn btn-secondary me-5 mb-2 deleteButton' type='button' value='Del' /></div>";

//	addRowData += "<div class='form-group col-md-2 col-12'><label>Image 2</label><br><input type='button' name='" + name + "' value='Upload Image 2' id='" + name + "' class='btn btn-primary ' onClick=\"photoUpl(" + numrows + ", 'B')\">&nbsp&nbsp<input type='button' type='button' value='OpenImage' size='3' name='imgPop" + numrows + "'  id='imgPop" + numrows + "' class='btn btn-primary ' onClick=\"photView(" + numrows + ", 'B')\"></div>";

//	addRowData += "<div class='form-group col-md-2 col-12'><label>Image 3</label><br><input type='button' name='" + name + "' value='Upload Image 3' id='" + name + "' class='btn btn-primary ' onClick=\"photoUpl(" + numrows + ", 'C')\">&nbsp&nbsp<input type='button' type='button' value='OpenImage' size='3' name='imgPop" + numrows + "'  id='imgPop" + numrows + "' class='btn btn-primary ' onClick=\"photView(" + numrows + ", 'C')\"></div>";

	//addRowData += "<div class='form-group col-md-2 col-12'><label>Add / Remove</label><br><input type=\"button\" value='Add' onclick=\"addrow1Inf(this)\" class=\"btn btn-secondary\" id=\"skAdd\">&nbsp&nbsp<input class='btn btn-secondary deleteButton' type='button' value='Del' /></div>";
	//
	$("#addblock").before(addRowData);
	if($("select").select2 != null)
		$("select").select2();

   if(toRefresh == "Y")
   {
		totlAmntChk('N');
   }
}

function totlAmntChk(currObjt)
{
	var mxBdgtAl = document.<%=formName%>.mxBdgtAl.value;
	var expnsAmt = 0; //eval("document.<%=formName%>.expnsAmt1").value;
	var expnsAmtTot = 0;

	var dtlDupAr = new Array();	
	var dtSrchKy = "";	
	var rowLen = null;
	var abcLen = null;
	var totlNoOf = null;
	//	--	budAmtDb

	if(document.<%=formName%>.serNmInf != null)
	{
		rowLen = document.<%=formName%>.serNmInf.length;
		abcLen = document.<%=formName%>.serNmInf.length;
	}
	else
	{
		alert("Please Enter Expanse Details");
		return false;
	}

	var inflCode = "";
	if(rowLen == null)
	{
		rowLen = 1;
	}
	var fldIndex = "";

	for(ck=0; ck<rowLen; ck++)
	{
		if(abcLen == null)
			fldIndex = document.<%=formName%>.serNmInf.value;
		else
			fldIndex = document.<%=formName%>.serNmInf[ck].value;

		if(currObjt == "Y")
		{
			if(!textValidApp(eval("document.<%=formName%>.expnsBil" + fldIndex), "Bill No", false))
				return false;
			
			if(!textValidApp(eval("document.<%=formName%>.expnsAmt" + fldIndex), "Amount", false))
				return false;
		}		

		if(eval("document.<%=formName%>.expnsAmt" + fldIndex).value != "")
			expnsAmt = eval("document.<%=formName%>.expnsAmt" + fldIndex).value;
		else 
			expnsAmt = "0";

		dtSrchKy = eval("document.<%=formName%>.expnsBil" + fldIndex).value;

		if(isDupDtlVal(dtlDupAr, "document.<%=formName%>.expnsBil" + fldIndex, dtSrchKy))
		{
			eval("document.<%=formName%>.expnsBil" + fldIndex).value = "";
			eval("document.<%=formName%>.expnsAmt" + fldIndex).value = "";
			return false;
		}
		dtlDupAr[ck] = dtSrchKy;

		expnsAmtTot	+= parseInt(expnsAmt);
	}
	
	document.<%=formName%>.expnsAmtTot.value = 	expnsAmtTot;

	if(parseInt(expnsAmtTot) > parseInt(mxBdgtAl))
	{
		document.<%=formName%>.expnsAmt1.value = "";
		alert("You can not claim amount more then maximum limit.");
		return false;
	}
	return true;
}

var hdRowInf = 1;

function deletInf()
{
	deleterCv("<%=formName%>", "abc1", "project_tableInf", hdRowInf);
}

function addrow1Inf(varNumRw)
{
	//	alert(document.<%=formName%>.district.value);
	addrowInf("N", '', '','', '','','', '', '', '', '', '');
	totlAmntChk('N');
}



</script>

<style>
label.checkDel span, .checkDel
{
    border: 2px solid #f1416c;
    display: inline-block;
    color: #fff;
    border-radius: 3px;
}
h4 {
    padding-left: 20px;
}
</style>
<form name="<%=formName%>">
<input type="hidden" name="caaActTy" id="caaActTy" value="<%=caaActTy%>">
<div class="container-fluid">
<%
try
{
	//loginIdM = "3306";
	if((procType.equals("U") || procType.equals("D")) && !docuNumb.equals(""))
	{
		sql = "select docuNumb, catActNo, noOfTtPr From catExcpnsEp with (nolock) where statFlag = 'T' and docuNumb = '" + docuNumb + "' and createId = '" + loginIdM + "' ";
		rset = WebSessBean.selectRecord(sql);

		if(rset.next())
		{
			docuNumb = rset.getString(1);
			catActNo = rset.getString(2);
		}

	}
	if(!catActNo.equals(""))
	{
		sql = "select a.docuNumb, convert(varchar (11), a.actvDate, 113), a.docuMnth, a.actvName, a.caaActTy, a.caaObjTy, CONVERT(VARCHAR (10), a.meetDate, 103), a.meetVenu, a.actvCity, a.district, a.pinCodeN, a.noOfPart, a.noOfEnqu, a.noOfVist, a.prodCtLs, a.empPrsLs, a.actvRmrk, a.caaPrjTy, a.mobileNo, a.emailAdd, a.contPers, a.potnInMT, a.maturtMn, a.rejcRmrk, b.areaCode, isnull(a.cusRtlCd, ''), isnull(a.atchNmId, ''), a.statFlag, isnull(mxBdgtAl, 0), isnull(refDocNo, '') "
			+ "from catActPreSl a with (nolock), bkmareaStZn b with (nolock) "
			+ "where docuNumb = '" + catActNo + "' "
	//		+ "and  docuMnth = substring (CONVERT(VARCHAR, GETDATE(), 112), 1,6) "
			+ " and dbo.cofDocNoVal(a.docuNumb, 'O') = b.areaCode ";
	//		+ "and (a.district = b.district or a.district  = b.cenDistt) ";
	//// System.out.println(sql);
		rset = WebSessBean.selectRecord(sql);
		if(rset.next())
		{
			catActNo = rset.getString(1); 
			actvDate = rset.getString(2); 
			docuMnth = rset.getString(3); 
			actvName = rset.getString(4); 
			caaActTy = rset.getString(5); 
			caaObjTy = rset.getString(6); 
			meetDate = rset.getString(7); 
			meetVenu = rset.getString(8); 
			actvCity = rset.getString(9); 
			district = rset.getString(10);
			sitePinC = rset.getString(11);
			noOfPart = rset.getString(12);
			noOfEnqu = rset.getString(13);
			noOfVist = rset.getString(14);
			prodCtLs = rset.getString(15);
			empPrsLs = rset.getString(16);
			actvRmrk = rset.getString(17);
			caaPrjTy = rset.getString(18);
			mobileNo = rset.getString(19);
			emailAdd = rset.getString(20);
			contPers = rset.getString(21);
			potnInMT = rset.getString(22);
			maturtMn = rset.getString(23);
			rejcRmrk = rset.getString(24);
			areaCode = rset.getString(25);
			retlSpCd = rset.getString(26);
			atchNmId = rset.getString(27);
			statFlag = rset.getString(28);
			mxBdgtAl = rset.getString(29);
			refDocNo = rset.getString(30);
		}
		
		rset = WebSessBean.closeRset(rset);
	}
	
	if(!retlSpCd.equals(""))
	{
		sql = "select  isnull(sum(case when mrgRepCt = '01' then salesQty else 0 end), 0)/3 as wc, "
			+" 		isnull(sum(case when mrgRepCt = '02' then salesQty else 0 end), 0)/3 as wcp, "
			+" 		isnull(sum(case when mrgRepCt = '03' then salesQty else 0 end), 0)/3 as vap "
			+" From sbvTlySlsDt with (nolock) "
			+" where retlCode = '" + retlSpCd + "' "
			+" and rtlInvDt between convert(varchar(11), DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-3, 0), 113) and convert(varchar(11), DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), -1), 113) ";
		rset = WebSessBean.selectRecord(sql);
		
		if (rset.next())
		{
			bwAvgWcc = rset.getDouble(1);
			bwAvgWcp = rset.getDouble(2);
			bwAvgVap = rset.getDouble(3);
		}

		sql = "select a.retlCode, a.retlName, a.mobileNo, b.custName, a.sapRtlCd, isnull(a.cityName, location),	 a.district, a.retlPinC, "
			+ " case when isNull(a.kycVerFl, 'N') = 'Y' then 'Yes' else 'No' end as kycVerFl, ISNULL(a.mrktName, ''), "
			+ " case when a.retlCatg = '' then 'U' else 'R' end, c.zoneCode  "
			+ " From rtmRetailer a with (nolock), dpmCustomer b with (nolock), bkmAreaStZn c with (nolock) "
			+" where a.isActive = 'Y' and  a.custCode = b.custCode and a.areaCode = c.areaCode "
			+" and   retlCode = '" + retlSpCd + "' "
			+ " union all select custCode, b.custName, b.mobileNo, b.custName, b.sapCusCd, isnull(custCity, ''), district, b.custPinC, "
			+ " 'Yes' as kycVerFl, ISNULL(b.mrktName, ''), "
			+ " 'U', c.zoneCode "
			+ " From dpmCustomer b with (nolock), bkmAreaStZn c with (nolock) "
			+" where b.isActive = 'Y' and b.areaCode = c.areaCode "
			+" and   custCode = '" + retlSpCd + "' ";

		rset = WebSessBean.selectRecord(sql);
		
		if (rset.next())
		{
			retlSpCd = rset.getString(1);
			cusRtlNm = rset.getString(2);
			retlMbNo = rset.getString(3);
			custName = rset.getString(4);
			sapRtlCd = rset.getString(5);
			cityName = rset.getString(6);
			district = rset.getString(7);
			retlPinC = rset.getString(8);
			kycVerFl = rset.getString(9);
			mrktName = rset.getString(10);
			urbRurFl = rset.getString(11);
			zoneCode = rset.getString(12);
		}		

		if(mxBdgtAl.equals(""))
			mxBdgtAl = "0";

		sql = "select suprvisr, dbo.wcfLoginVal('N', suprvisr) from prmEmployee with (nolock) where loginIdM = '" + loginIdM + "' ";
		rset = WebSessBean.selectRecord(sql);
		//out.println(sql);
		if(rset.next())
		{
			pendWith = rset.getString(1);
			pendName = rset.getString(2);
		}

	}
if(!refDocNo.equals("") && procType.equals("A"))
{
	out.println("<p>You have already submitted Claim for Activity No :- " + catActNo + ". If it is Not approved Please Open in update Mode and Check. Your Claim Details No is :- " + refDocNo + "</p><a href='" + pageAddress + "'>Click Here To Open Activity Expense</a>");
}
else
{
%>

<!--		<input type="hidden" name="procType" value="<%=procType%>">
		<input type="hidden" name="docuNumb" value="<%=docuNumb%>">
-->
<fieldset>
<div class="form-card">
    <div class="row justify-content-center">
    <div class="col-md-11 col-12">
		<div class="row">
		<input type="hidden" name="areaCode" value="<%=areaCode%>">
			<div class="form-group col-md-4 col-lg-4 col-6">
				<label>Add / Update *</label>
				<select name="procType" id="procType" onchange = "actDocDvChng()" >
					<%=WebSessBean.getSqlToOptionStr("select 'A', 'Add' union all select 'U', 'Update' union all select 'D', 'Delete' ", procType, false)%>
					<%//=KkrSessBean.getProcessType("A,U", procType) docNmbVw%>
				</select>
			</div>
			<div class="form-group col-md-4 col-lg-4 col-6" id="docuNmDiv">
				<label>Document No*</label>
				<select name="docuNumb" id="docuNumb" onchange = "refreshed()" >
					<%=WebSessBean.getSqlToOptionStr("select docuNumb, docuNumb From catExcpnsEp with (nolock) where statFlag = 'T' and createId = '" + loginIdM + "' order by createDt desc", docuNumb, false)%>
				</select>
			</div>
			<div class="form-group col-md-4 col-lg-4 col-6" id="actVtNoDv">
				<label>Refer. Activity No*</label>
				<select name="catActNo" id="catActNo" onchange = "refreshed()"  <%=procType.equals("U") || procType.equals("D") ? " disabled" : ""%>>
					<%=WebSessBean.getSqlToOptionStr("select docuNumb, docuNumb + ' ' + custCode + ' (' + b.custName + ')' From catActPreSl a with (nolock), dpvConcEmpl b with (nolock) where a.cusRtlCd = b.custCode and statFlag in ('N') and a.createId = '" + loginIdM + "' and isnull(refDocNo, '') not in (select docuNumb From catExcpnsEp a with (nolock) where statFlag not in ('T') and a.createId = '" + loginIdM + "' ) and a.createDt > getdate()-365  order by a.createDt desc ", catActNo, false)%>
				</select>
			</div>
			<div class="form-group col-md-4 col-lg-4 col-6" id="">
				<label>Total Max Budget*</label>
				<input type="text" name="mxBdgtAl" id="mxBdgtAl" value="<%=mxBdgtAl%>" readonly>
			</div>
			<div class="form-group col-md-4 col-lg-4 col-6" id="">
				<label>Activity Date</label>
				<input type="text" name="meetDate" id="meetDate" value="<%=meetDate%>" readonly>
			</div>
			<div class="form-group col-md-4 col-lg-4 col-12" id="">
				<label>Approval Authority</label>
				<input type="text" name="pendName" id="pendName" value="<%=pendName%>" readonly>
				<input type="hidden" name="pendWith" id="pendWith" value="<%=pendWith%>" readonly>
			</div>
<div class="row mobile-row">
	<!--begin::Col-->
	<div class="col-xl-12">
		<!--begin::List Widget 3-->
		<div class="card card-xl-stretch mb-xl-8">
			<div class="pt-5">   
				<div class="form-group col-md-12 col-lg-12 col-xs-12 col-sm-12">
					<label class="control-label float-sm-right" style="background-color: #e9e9e9;">Experts Meet Details</label> 
					<div class="row" >
						<div class="form-group col-md-4 col-lg-4 col-xs-4 col-sm-4 col-12" id="idCardDv_Nam">
							<label class="control-label float-sm-right">Plan Date</label> 
							<div class="float-sm-left	border-bottom py-2">
								 <p><%=meetDate%></p>
							</div>
						</div>
						<div class="form-group col-md-4 col-lg-4 col-xs-4 col-sm-4 col-12" id="idCardDv_Nam">
							<label class="control-label float-sm-right">Actual Date*</label> 
							<div class="float-sm-left	border-bottom py-2">
								 <p><%=actvDate%></p>
							</div>
						</div>

					</div>
				</div>
			</div>
		</div>
	</div>
</div>
			<div class="row mobile-row">
				<!--begin::Col-->
				<div class="col-xl-12">
					<!--begin::List Widget 3-->
					<div class="card card-xl-stretch mb-xl-8">
						<div class="">                                 
							<!--begin::Accordion-->
								<div class="accordion" id="kt_accordion_1">
									<div class="accordion-item">
										<h2 class="accordion-header" id="kt_accordion_1_header_1">
											<button class="accordion-button fs-4 fw-semibold" type="button" data-bs-toggle="collapse" data-bs-target="#kt_accordion_1_body_1" aria-expanded="true" aria-controls="kt_accordion_1_body_1">
												Click Here to see Painter Details
											</button>
										</h2>
										<div id="kt_accordion_1_body_1" class="accordion-collapse collapse show" aria-labelledby="kt_accordion_1_header_1" data-bs-parent="#kt_accordion_1">
											<div class="accordion-body">
												<div class="form-group col-md-12 col-lg-12 col-xs-12 col-sm-12" id="adhDtlsHtm">
													<label class="control-label float-sm-right">Retailer Details</label> 
													<div class="row">
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">Name *</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=cusRtlNm%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">SAP Code *</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=sapRtlCd%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">Mobile No *</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=retlMbNo%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">Stockist Name*</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=custName%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">District*</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=district%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">City*</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=cityName%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">Pin Code*</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=retlPinC%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">KYC Status*</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=kycVerFl%></p>
															</div>
														</div>
														<div class="form-group col-md-3 col-lg-3 col-xs-3 col-sm-4 col-12" id="idCardDv_Nam">
															<label class="control-label float-sm-right">Stockist Name*</label> 
															<div class="float-sm-left	border-bottom py-2">
																 <p><%=custName%></p>
															</div>
														</div>
													</div>
													<label class="control-label float-sm-right">Painter List</label> 
													<div class="row">
														<div class="table-border">
														<table>
															<thead>
																<tr>
																	<td>Mobile No</td>
																	<td>Type</td>
																	<td>Name</td>
																	<!-- <td>Name</td> -->
																</tr>
															</thead>
<%															
	if(!catActNo.equals(""))
	{
		sql = "select b.mobileNo, c.paramDes, b.inflName, isnull(a.dsrRem08, ''), isNull(a.nwPntFlg , ''), isNull(a.tlKitFlg, ''), b.inflCode, isnull(oldKycFl, '') "
			+ "from catActPreSlDtl a with (nolock), ctvInfluncr b with (nolock), wcmParametr c with (nolock) "
			+ "where a.attnCode = b.inflCode and   a.dsrRem09 = b.mobileNo and  b.inflType = c.paramCod and paramTyp = '04' "
			+ "and   docuNumb = '" + catActNo + "' and attnType = 'I' ";
		 //out.println(sql);
			rset = WebSessBean.selectRecord(sql);

		while (rset.next())
		{
%>
			<tr>
				<td><%=rset.getString(1)%></td>
				<td><%=rset.getString(2)%></td>
				<td><%=rset.getString(3)%></td>
			</tr>
<%
		}
	}
%>														
														</table>
														</div>
													</div>
												</div>
											</div>			
										</div>			
									</div>			
								</div>			
							</div>
						</div>
					</div>
				</div>
			</div>
</fieldset>
<fieldset style="<%=caaActTy.equals("16") ? "display:none" : ""%>">
<div class="form-card">
	<h4>Enter Expanse Details (Tea & Snacks)</h4>
		<div id="" class="container-fluid">
			<div class="row">
				<div class="accordion" id="accordionExample">
					<div id="addblock" class="addblock">
					<div class="card mb-2 p-3 child_div">
						<div class="form-row">
							<div class="form-group col-md-2 col-6">
							</div>
							<div class="form-group col-md-3 col-6">
								<label class="fs-6 fw-bold-Custm mb-2">Total Amount</label>
								<input readonly name="expnsAmtTot" id="expnsAmtTot" class="form-control form-control-plaintext" value="" maxlength="5">
							</div>
							<div class="form-group col-md-2 col-12">
								<label class="fs-6 fw-bold-Custm mb-2">Add / Remove</label>
								<br>
								<input type="button" value="Add" onclick="addrow1Inf(this)" class="btn btn-secondary" id="skAdd">
							</div>
						</div>
					</div>
					</div>
				</div>
			</div>
		</div>
<%
		if((procType.equals("U") || procType.equals("D")) && !docuNumb.equals(""))
		{
			sql = "select expnsTye, cast(expnsAmt as numeric), expnsBil, expAmtEx "
				+ "From catExcpnsEp a with (nolock), catExcpnsEpDtl b with (nolock) "
				+ "where a.docuNumb = b.docuNumb "
				+ "and   a.docuNumb = '" + docuNumb + "' and  a.statFlag = 'T' ";

			rset = WebSessBean.selectRecord(sql);

			while (rset.next())
			{
				//moblInfl, inflType, inflName, infAdhNo, lstVstDt, giftFlag, kycCapFl
%>
				<script language="Javascript">
					addrowInf("Y", "<%=rset.getString(1)%>","<%=rset.getString(2)%>","<%=rset.getString(3)%>","<%=rset.getString(4)%>", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "");	
				</script>
<%
			}
		}
%>
</div>
</fieldset>
	<div align="center">
		<input type="button" id="saveButnFl" class="btn btn-primary" onClick="return submitValid('N')" value="Submit">
		<input type="hidden" name="randNmSt" value="<%=randNmSt%>">
		<input type="hidden" name="zoneCode" value="<%=zoneCode%>">
		<input type="hidden" name="plnActFl" id="plnActFl" value="P">
		<br>* indicates manditory fields
	</div>
<%
}
}
catch(Exception e)
{
	throw new Exception("error in " + pageAddress + e.toString());
}
%>

<script language="javascript1.2">

//docuNmDiv, actVtNoDv, actDocDvChng
function actDocDvChng()
{
	if(document.<%=formName%>.procType.value == "A")
	{
	  $("#docuNmDiv").hide();
	  $("#actVtNoDv").show();

	  
	  if("<%=procType%>" == "U")
	  {
		  document.<%=formName%>.catActNo.value = "";
		  refreshed();
	  }
	}
	else if(document.<%=formName%>.procType.value == "U" || document.<%=formName%>.procType.value == "D")
	{
	  $("#docuNmDiv").show();
	  $("#actVtNoDv").hide();
	}
}
if("<%=procType%>" == "A")
	addrowInf("N", "", "0", "", "", "", "", "", "", "", "");

actDocDvChng();
</script>

</div>
<jsp:include page="/Envr/JSP/FooterCom.jsp" flush="true"/>
<style>
label.check span {
    margin-left: 1px;
}
.card fieldset .form-card {
    box-shadow: 0 2px 2px 2px rgb(0 0 0 / 20%);
    padding: 20px 0px 20px 0px;
}
</style>


<%@ include file="/Envr/JSP/SecurityCom.jsp"%>
<%
ResultSet rset = null;
String	docuNumb = "",
		procType = XssFilter.parSmGet("procType"),
		sql = "",
		docuType = "CAE",
		noOfEnqu = "",
		noOfVist = "",
		infRwAdd = "",
		actvName = "",
		caaActTy = "",
		caaObjTy = "",
		actvCity = "",
		district = "",
		sitePinC = "",
		noOfPart = "",
		actvRmrk = "",
		expAmtEx = "",
		meetVenu = "",
		meetDate = XssFilter.parSmGet("meetDate"),
		areaCode = log.getArCode(),
		zoneCode = XssFilter.parSmGet("zoneCode"),
		attnType = "",
		expnsBil = "",
		expnsAmt = "",
		urbRurFl = "",
		retlSpCd = "",
		plnActFl = "",
		docuDate = "",
		prodCtLs = "",
		empPrsLs = "",
		actvDate = "",
		inflName = "",
		infAdhNo = "",
		giftFlag = "",
		kycCapFl = "",
		upldFlNm = "",
		attnCode = "",
		caaPrjTy = "",
		mobileNo = "",
		retlMbNo = "",
		emailAdd = "",
		contPers = "",
		retlCode = "",
		tlKitFlg = "",
		potnInMT = "",
		nwPntFlg = "",
		maturtMn = "",
		rejcRmrk = "",
		pendWith = XssFilter.parSmGet("pendWith"),
		noOfTtPr = "0",
		catActNo = XssFilter.parSmGet("catActNo"),
		randNmSt = XssFilter.parSmGet("randNmSt"),
		statFlag = "T";

String  inflType = "",
		contName = "",
		inflCity = "", // Infulancer Table
		distInfl = "",
		inflCode = "",
		inflPinC = "",
		moblInfl = "",
		emailInf = "",
		atchNmId = "",
		atchNId1 = "",
		msg = "";

String siteAddr = "",
	   siteCity = "",
	   distSite = "",
	   pincSite = "",
	   contNameSte = "",
	   steEnqNo = "",
	   mobilSte = "",
	   emailSte = "";

String[] serNmEmp = null;
String[] serNmInf = null;
String[] srNumber = null;

int zonAmUse = 0;
Double budAmtDb = 0.00;

if(XssFilter.parArGet("serNmInf") != null)		// Painter Data
	serNmInf = XssFilter.parArGet("serNmInf");

//// System.out.println("3");
try
{
	WebSessBean.setAutoCommit(false);
	if(procType.equals("A"))
	{
		docuNumb = WebSessBean.getDocumentNo(docuType, areaCode);
		
		sql = "insert into catExcpnsEp(docuNumb, docuDate, catActNo, noOfTtPr, pendWith, statFlag, randNmSt, createId, createDt) values ("
				+ "'" + docuNumb + "', "
				+ " convert(varchar(11), getdate(), 113), "
				+ "'" + catActNo + "', "
				+ "'" + noOfTtPr + "', "
				+ "'" + pendWith + "', "
				+ "'" + statFlag + "', "
				+ "'" + randNmSt + "', "
				+ "'" +	loginIdM + "', "
				+ "getdate())";

		WebSessBean.updateRecord(sql);

		sql = "update catActPreSl set refDocNo = '" + docuNumb + "' where docuNumb = '" + catActNo + "' " ;
	//	// System.out.println(sql);

		WebSessBean.updateRecord(sql);

		sql = "update imagedata.dbo.cotDocAttch "
			+ "set docuNumb = '" + docuNumb + "', updateDt = GETDATE(), updateId = '" + loginIdM + "' " 
			+ "where docuNumb like '" + randNmSt + "" + loginIdM + "%' and createDt > getdate()-1 and createId = '" + loginIdn + "' " ;
		
		KkrSessBean.updateRecord(sql);

		WebSessBean.setDocumentNo(docuType, areaCode);
	}
	else if(procType.equals("U"))
	{
		docuNumb = XssFilter.parSmGet("docuNumb");

		sql = "update catExcpnsEp set "
			+ "pendWith = '" + pendWith + "', "
			+ "statFlag = 'T', "
			+ "updateDt = getdate(), "
			+ "updateId = '" + loginIdM + "' "
			+ "where docuNumb = '" + docuNumb + "' "
			+ "and   createId = '" + loginIdM + "' ";

		sql = "delete from catExcpnsEpDtl where docuNumb = '" + docuNumb + "' and   createId = '" + loginIdM + "' ";
			WebSessBean.updateRecord(sql);
	}

	if(procType.equals("A") || procType.equals("U"))
	{
		if(XssFilter.parArGet("serNmInf") != null)
		{
			for(int i=0; i < serNmInf.length; i++)
			{
				expnsBil = XssFilter.parSmGet("expnsBil" + serNmInf[i]);
				expnsAmt = XssFilter.parSmGet("expnsAmt" + serNmInf[i]);
				expAmtEx = XssFilter.parSmGet("expAmtEx" + serNmInf[i]);

				sql = "insert into catExcpnsEpDtl(docuNumb, expnsTye, expnsDat, expnsAmt, expAmtEx, expnsBil, createId, createDt) values ("
					+ "'" + docuNumb + "', "
					+ "'" + i + "', "
					+ "'" + WebSessBean.dmyTOymd(meetDate) + "', "
					+ "'" + expnsAmt + "', "
					+ "'" + expAmtEx + "', "
			//		+ "'0', "
					+ "'" + expnsBil + "', "
					+ "'" + loginIdM + "', "
					+ "getdate())";

				WebSessBean.updateRecord(sql);
			
			}
		}

		//zonAmUse = 	expnsAmt; //serNmInf.length * 50;
		sql = "update ettExpncBud  set statFlag = 'C', updateDt = GETDATE(), updateId = '" + loginIdM + "' "
			+ " where zoneCode = '" + zoneCode + "' "
			+ " and   expnsTyp = '11' "
			+ " and   fincYear = '" + WebSessBean.getFincYear() + "' "
		//	+ " and   schBdIdn = 1 "
			+ " and   catActDc = '" + catActNo + "' and statFlag = 'N' ";
		WebSessBean.updateRecord(sql);

		sql = "insert into ettExpncBud(zoneCode, expnsTyp, fincYear, schBdIdn, catActDc, docuDate, nrtnRmrk, budAmtDb, budAmtCr, statFlag, createId, createDt) "
			+ "select  '" + zoneCode + "', '11', '" + WebSessBean.getFincYear() + "', 1, '" + catActNo + "', convert(varchar(11), GETDATE(), 113), 'Budget Use in Casc Activity Expns" + docuNumb + "', '" + expnsAmt + "', 0, 'N', 'System', getdate()";
		WebSessBean.updateRecord(sql);


		sql = "select atchNmId from  imagedata.dbo.cotDocAttch with (nolock) where docuNumb = '" + docuNumb + "' ";
		//// System.out.println(sql);
		rset = KkrSessBean.selectRecord(sql);
		while (rset.next())
		{
			atchNmId = rset.getString(1);
			atchNId1 += "," + atchNmId;
		}
		
		if(!atchNId1.equals(""))
		{	
			atchNId1 = atchNId1.substring(1);

			sql = "update catExcpnsEp set atchNmId = '" + atchNId1 + "' where  docuNumb = '" + docuNumb + "' " ;
		//	// System.out.println(sql);
			WebSessBean.updateRecord(sql);
		}
	}	

	WebSessBean.commitConn();
	KkrSessBean.commitConn();
//	WebSessBean.rollbackConn();
//	KkrSessBean.rollbackConn();
	msg = "@br@Your Request has been Processed!";
	msg += " @br@Insert Successfull@br@Your DocuNumb No " + docuNumb;
	response.sendRedirect(errorPage + "?message=" + msg);
	/*if(procType.equals("A"))
		msg += " @br@Insert Successfull@br@Your Influencer No is " + inflCode;
	else
		msg += " @br@" +  (procType.equals("D")?"Delete":"Update")  + " Successfull";

	response.sendRedirect(errorPage + "?message=" + msg);
	if(procType.equals("A"))
		response.sendRedirect("InflEntry.jsp?message=" + msg + "&areaCode=" + areaCode);
	else
*/
}
catch (Exception e)
{
	WebSessBean.rollbackConn();
	KkrSessBean.rollbackConn();
	throw new Exception("Error in updating details in " + pageAddress + e.toString() + sql);
}
finally
{
	UtilBean.sessMgmtRst();
}
%>

flutter code -> import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/custom_back_button.dart';

class ExpertMeetClaimPage extends StatefulWidget {
  const ExpertMeetClaimPage({Key? key}) : super(key: key);

  @override
  _ExpertMeetClaimPageState createState() => _ExpertMeetClaimPageState();
}

class _ExpertMeetClaimPageState extends State<ExpertMeetClaimPage>
    with TickerProviderStateMixin {
  // Form controllers
  final _formKey = GlobalKey<FormState>();
  final _activityNoController = TextEditingController();
  final _budgetController = TextEditingController();
  final _retailerNameController = TextEditingController();
  final _sapCodeController = TextEditingController();
  final _retailerMobileController = TextEditingController();
  final _stockistNameController = TextEditingController();
  final _billNoController = TextEditingController();
  final _totalAmountController = TextEditingController(text: '0');
  
  // Date controllers
  final _planDateController = TextEditingController();
  final _actualDateController = TextEditingController();
  
  // State variables
  bool _showPainterDetails = false;
  String? _uploadedImagePath;
  List<Painter> _painters = [];
  bool _isSubmitting = false;
  
  // Dropdown values
  String? _selectedActivity;
  List<String> _activityOptions = ['Activity 1', 'Activity 2', 'Activity 3'];
  List<String> _processTypeOptions = ['ADD', 'UPDATE'];
  
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    _activityNoController.dispose();
    _budgetController.dispose();
    _retailerNameController.dispose();
    _sapCodeController.dispose();
    _retailerMobileController.dispose();
    _stockistNameController.dispose();
    _billNoController.dispose();
    _totalAmountController.dispose();
    _planDateController.dispose();
    _actualDateController.dispose();
    super.dispose();
  }

  // Handle file upload
  void _onFileUploaded(String? filePath) {
    setState(() {
      _uploadedImagePath = filePath;
    });
  }

  // Date picker
  Future<void> _selectDate(TextEditingController controller) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (picked != null) {
      setState(() {
        controller.text = DateFormat('yyyy-MM-dd').format(picked);
      });
    }
  }

  // Add painter to list
  void _addPainter() {
    setState(() {
      _painters.add(Painter(mobileNo: '', type: 'Type A', name: ''));
    });
  }

  // Remove painter from list
  void _removePainter(int index) {
    setState(() {
      _painters.removeAt(index);
    });
  }

  // Submit form
  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      // Simulate API call
      Future.delayed(const Duration(seconds: 2), () {
        setState(() {
          _isSubmitting = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(child: Text('Claim submitted successfully!')),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
            duration: Duration(seconds: 5),
          ),
        );
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: Column(
                children: [
                  // Activity Details
                  _buildActivityDetailsSection(),
                  const SizedBox(height: 24),
                  // Experts Meet Details
                  _buildExpertsMeetDetailsSection(),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: Column(
                children: [
                  // Painter Details
                  _buildPainterDetailsSection(),
                  const SizedBox(height: 24),
                  // Expense Details
                  _buildExpenseDetailsSection(),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Activity Details
        _buildActivityDetailsSection(),
        const SizedBox(height: 24),
        // Experts Meet Details
        _buildExpertsMeetDetailsSection(),
        const SizedBox(height: 24),
        // Painter Details
        _buildPainterDetailsSection(),
        const SizedBox(height: 24),
        // Expense Details
        _buildExpenseDetailsSection(),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: CustomBackButton(
        onPressed: () => Navigator.pushNamedAndRemoveUntil(
          context,
          '/home',
          (route) => false,
        ),
      ),
      title: Text(
        'Expert Meet Claim',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Expert Meet Claim',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Submit your expert meet expenses',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildActivityDetailsSection() {
    return _buildModernSection(
      title: 'Activity Details',
      icon: Icons.event_note_outlined,
      children: [
        _buildModernDropdown(
          value: _selectedActivity,
          label: 'Process Type',
          icon: Icons.edit_outlined,
          items: _processTypeOptions,
          onChanged: (value) {
            setState(() {
              _selectedActivity = value;
              _activityNoController.text = value ?? '';
            });
          },
          isRequired: true,
        ),
        const SizedBox(height: 20),
        _buildModernDropdown(
          value: _selectedActivity,
          label: 'Refer. Activity No',
          icon: Icons.qr_code_outlined,
          items: _activityOptions,
          onChanged: (value) {
            setState(() {
              _selectedActivity = value;
              _activityNoController.text = value ?? '';
            });
          },
          isRequired: true,
        ),
        const SizedBox(height: 20),
        _buildModernTextField(
          controller: _budgetController,
          label: 'Total Max Budget',
          icon: Icons.account_balance_wallet_outlined,
          isRequired: true,
          isNumber: true,
        ),
      ],
    );
  }

  Widget _buildExpertsMeetDetailsSection() {
    return _buildModernSection(
      title: 'Experts Meet Details',
      icon: Icons.groups_outlined,
      children: [
        _buildModernDateField(
          controller: _planDateController,
          label: 'Plan Date',
          icon: Icons.event_outlined,
        ),
        const SizedBox(height: 20),
        _buildModernDateField(
          controller: _actualDateController,
          label: 'Actual Date',
          icon: Icons.event_available_outlined,
          isRequired: true,
        ),
      ],
    );
  }

  Widget _buildPainterDetailsSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          // Header
          InkWell(
            onTap: () {
              setState(() {
                _showPainterDetails = !_showPainterDetails;
              });
            },
            child: Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: const Color(0xFFF8FAFC),
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(16),
                ),
              ),
              child: Row(
                children: [
                  Container(
                    width: 48,
                    height: 48,
                    decoration: BoxDecoration(
                      color: const Color(0xFF1E3A8A).withOpacity(0.1),
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      Icons.person_outline,
                      color: const Color(0xFF1E3A8A),
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Text(
                      'Click Here to see Painter Details',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: const Color(0xFF1F2937),
                      ),
                    ),
                  ),
                  Icon(
                    _showPainterDetails ? Icons.expand_less : Icons.expand_more,
                    color: const Color(0xFF1E3A8A),
                  ),
                ],
              ),
            ),
          ),
          // Content
          if (_showPainterDetails)
            Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Retailer Details Section
                  _buildModernSubSection(
                    title: 'Retailer Details',
                    icon: Icons.store_outlined,
                    children: [
                      _buildModernTextField(
                        controller: _retailerNameController,
                        label: 'Name',
                        icon: Icons.person_outline_rounded,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _sapCodeController,
                        label: 'SAP Code',
                        icon: Icons.qr_code_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _retailerMobileController,
                        label: 'Mobile No',
                        icon: Icons.phone_outlined,
                        isRequired: true,
                        isPhone: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _stockistNameController,
                        label: 'Stockist Name',
                        icon: Icons.business_outlined,
                        isRequired: true,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  // Painter List Section
                  _buildModernSubSection(
                    title: 'Painter List',
                    icon: Icons.people_outlined,
                    children: [
                      _painters.isEmpty
                          ? _buildEmptyPainterState()
                          : Column(
                              children: _painters.asMap().entries.map((entry) {
                                int index = entry.key;
                                return _buildPainterCard(index);
                              }).toList(),
                            ),
                      const SizedBox(height: 20),
                      // Add Painter Button
                      SizedBox(
                        width: double.infinity,
                        height: 56,
                        child: ElevatedButton.icon(
                          onPressed: _addPainter,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF1E3A8A),
                            foregroundColor: Colors.white,
                            elevation: 0,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          icon: const Icon(Icons.add_circle_outline),
                          label: const Text(
                            'Add Painter',
                            style: TextStyle(fontSize: 16),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildExpenseDetailsSection() {
    return _buildModernSection(
      title: 'Enter Expanse Details (Tea & Snacks)',
      icon: Icons.receipt_long_outlined,
      children: [
        _buildModernTextField(
          controller: _billNoController,
          label: 'Bill No',
          icon: Icons.receipt_outlined,
        ),
        const SizedBox(height: 20),
        _buildModernTextField(
          controller: _totalAmountController,
          label: 'Total Amount',
          icon: Icons.currency_exchange_outlined,
          isNumber: true,
        ),
        const SizedBox(height: 20),
        // Image Upload Section
        FileUploadWidget(
          label: 'Image 1',
          icon: Icons.image,
          onFileSelected: _onFileUploaded,
          allowedExtensions: ['jpg', 'jpeg', 'png'],
          maxSizeInMB: 10.0,
          currentFilePath: _uploadedImagePath,
        ),
      ],
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSubSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Container(
              width: 36,
              height: 36,
              decoration: BoxDecoration(
                color: const Color(0xFF1E3A8A).withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(icon, color: const Color(0xFF1E3A8A), size: 20),
            ),
            const SizedBox(width: 12),
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Color(0xFF1F2937),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ...children,
      ],
    );
  }

  Widget _buildModernDropdown({
    required String? value,
    required String label,
    required IconData icon,
    required List<String> items,
    required void Function(String?) onChanged,
    bool isRequired = true,
  }) {
    return DropdownButtonFormField<String>(
      value: value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      items: items.map((String item) {
        return DropdownMenuItem<String>(
          value: item,
          child: Container(color: Colors.white, child: Text(item)),
        );
      }).toList(),
      onChanged: onChanged,
      validator: (selectedValue) {
        if (isRequired && (selectedValue == null || selectedValue.isEmpty)) {
          return 'Please select $label';
        }
        return null;
      },
      dropdownColor: Colors.white,
      style: const TextStyle(color: Colors.black87, fontSize: 16),
      icon: const Icon(Icons.arrow_drop_down, color: Colors.grey),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumber = false,
    bool isRequired = true,
    bool readOnly = false,
  }) {
    return TextFormField(
      controller: controller,
      readOnly: readOnly,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isNumber
          ? TextInputType.number
          : isPhone
          ? TextInputType.phone
          : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = DateFormat('yyyy-MM-dd').format(date);
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.white),
              ),
      ),
    );
  }

  Widget _buildEmptyPainterState() {
    return Container(
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Column(
        children: [
          Icon(Icons.people_outline, size: 64, color: Colors.grey.shade400),
          const SizedBox(height: 16),
          Text(
            'No Painters Added',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.grey.shade600,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Add painters to include them in this expert meet claim',
            textAlign: TextAlign.center,
            style: TextStyle(fontSize: 14, color: Colors.grey.shade500),
          ),
        ],
      ),
    );
  }

  Widget _buildPainterCard(int index) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFF1E3A8A).withOpacity(0.1)),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF1E3A8A).withOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header with painter number and delete button
          Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: const Color(0xFF1E3A8A).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Center(
                  child: Text(
                    '${index + 1}',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF1E3A8A),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  'Painter ${index + 1}',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: const Color(0xFF1F2937),
                  ),
                ),
              ),
              IconButton(
                onPressed: () => _removePainter(index),
                icon: Icon(Icons.delete_outline, color: Colors.red.shade400),
                style: IconButton.styleFrom(
                  backgroundColor: Colors.red.shade50,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                tooltip: 'Remove Painter',
              ),
            ],
          ),
          const SizedBox(height: 20),
          // Form fields
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Mobile Number *',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.grey.shade700,
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      initialValue: _painters[index].mobileNo,
                      onChanged: (value) {
                        _painters[index].mobileNo = value;
                      },
                      keyboardType: TextInputType.phone,
                      decoration: InputDecoration(
                        hintText: 'Enter mobile number',
                        prefixIcon: Icon(
                          Icons.phone,
                          size: 20,
                          color: Colors.grey.shade600,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(
                            color: const Color(0xFF1E3A8A),
                            width: 2,
                          ),
                        ),
                        filled: true,
                        fillColor: Colors.grey.shade50,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 12,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Painter Type *',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.grey.shade700,
                      ),
                    ),
                    const SizedBox(height: 8),
                    DropdownButtonFormField<String>(
                      value: _painters[index].type,
                      items: ['Type A', 'Type B', 'Type C'].map((type) {
                        return DropdownMenuItem(value: type, child: Text(type));
                      }).toList(),
                      onChanged: (value) {
                        setState(() {
                          _painters[index].type = value!;
                        });
                      },
                      decoration: InputDecoration(
                        hintText: 'Select type',
                        prefixIcon: Icon(
                          Icons.category,
                          size: 20,
                          color: Colors.grey.shade600,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(
                            color: const Color(0xFF1E3A8A),
                            width: 2,
                          ),
                        ),
                        filled: true,
                        fillColor: Colors.grey.shade50,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 12,
                        ),
                      ),
                      dropdownColor: Colors.white,
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // Name field (full width)
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Painter Name *',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: Colors.grey.shade700,
                ),
              ),
              const SizedBox(height: 8),
              TextFormField(
                initialValue: _painters[index].name,
                onChanged: (value) {
                  _painters[index].name = value;
                },
                decoration: InputDecoration(
                  hintText: 'Enter painter name',
                  prefixIcon: Icon(
                    Icons.person,
                    size: 20,
                    color: Colors.grey.shade600,
                  ),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide(
                      color: const Color(0xFF1E3A8A),
                      width: 2,
                    ),
                  ),
                  filled: true,
                  fillColor: Colors.grey.shade50,
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 12,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Expert Meet Claim Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Upload receipts for expense claims.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Painter model
class Painter {
  String mobileNo;
  String type;
  String name;
  Painter({required this.mobileNo, required this.type, required this.name});
}

// Activity Selection Dialog
class ActivitySelectionDialog extends StatelessWidget {
  final List<String> options;
  const ActivitySelectionDialog({Key? key, required this.options})
    : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: const Text(
              'Select Activity',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF1F2937),
              ),
            ),
          ),
          Expanded(
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: options.length,
              itemBuilder: (context, index) {
                return Container(
                  color: Colors.white,
                  child: ListTile(
                    title: Text(options[index]),
                    onTap: () {
                      Navigator.of(context).pop(options[index]);
                    },
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

