using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using sparshWebService.DataAccess;

var builder = WebApplication.CreateBuilder(args);

// 1) Add controllers + Swagger generation
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

// 2) Read connection strings from appsettings.json
var connectionStrings = builder.Configuration.GetSection("ConnectionStrings").Get<Dictionary<string, string>>();

// 3) Register DatabaseHelper as a singleton (so it can be injected into controllers)
builder.Services.AddSingleton(provider =>
    new DatabaseHelper(
        connectionStrings["bwlive"],
        connectionStrings["itkHaria"],
        connectionStrings["imageData"]));

var app = builder.Build();

// 4) Enable Swagger/OpenAPI middleware
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// 5) Map controllers and run
app.UseHttpsRedirection();
app.MapControllers();
app.Run();




{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "bwlive":      "Server=10.4.64.15;Database=bwlive;User ID=birlawhite;Password=M@nsv1530;Trusted_Connection=False;TrustServerCertificate=true;",
    "itkHaria":    "Server=10.4.64.15;Database=ItKharia;User ID=itKharia;Password=Mans^1530;Trusted_Connection=False;TrustServerCertificate=true;",
    "imageData":   "Server=10.4.64.15;Database=imageData;User ID=sa;Password=Point@0652;Trusted_Connection=False;TrustServerCertificate=true;"
  },
  "Jwt": {
    "Key": "SuperLongRandomSecretKey_ChangeThisToYourOwnSecureValue",
    "Issuer": "https://qa.birlawhite.com"
  }
}




using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;

namespace sparshWebService.DataAccess
{
    /// <summary>
    /// A simple helper to run raw SQL queries against three different databases:
    ///   • bwlive
    ///   • ItKharia
    ///   • imageData
    /// </summary>
    public class DatabaseHelper
    {
        private readonly string _bwliveConnectionString;
        private readonly string _itKhariaConnectionString;
        private readonly string _imageDataConnectionString;

        public DatabaseHelper(
            string bwliveConnectionString,
            string itKhariaConnectionString,
            string imageDataConnectionString)
        {
            _bwliveConnectionString    = bwliveConnectionString;
            _itKhariaConnectionString  = itKhariaConnectionString;
            _imageDataConnectionString = imageDataConnectionString;
        }

        /// <summary>
        /// Execute an INSERT/UPDATE/DELETE against one of the three databases,
        /// chosen by the dbKey: "bwlive", "itkharia" or "imagedata".
        /// Returns number of rows affected.
        /// </summary>
        public int ExecuteCommandForDb(
            string dbKey,
            string query,
            Dictionary<string, object> parameters)
        {
            string connStr = dbKey.ToLower() switch
            {
                "bwlive"    => _bwliveConnectionString,
                "itkharia"  => _itKhariaConnectionString,
                "imagedata" => _imageDataConnectionString,
                _ => throw new Exception($"Unknown DB key '{dbKey}'.")
            };

            return ExecuteCommand(connStr, query, parameters);
        }

        /// <summary>
        /// Run a SELECT query and return a list of rows, each row as a dictionary
        /// of columnName → value. Uses the given connectionString directly.
        /// </summary>
        private List<Dictionary<string, object>> ExecuteSelectQuery(
            string connectionString,
            string query,
            Dictionary<string, object> parameters)
        {
            var resultList = new List<Dictionary<string, object>>();

            using (var conn = new SqlConnection(connectionString))
            using (var cmd  = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value ?? DBNull.Value);
                }

                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var row = new Dictionary<string, object>();
                        for (int i = 0; i < reader.FieldCount; i++)
                        {
                            row[reader.GetName(i)] = reader.IsDBNull(i) ? null : reader.GetValue(i);
                        }
                        resultList.Add(row);
                    }
                }
            }

            return resultList;
        }

        /// <summary>
        /// Run an INSERT / UPDATE / DELETE against the given connectionString.
        /// </summary>
        private int ExecuteCommand(
            string connectionString,
            string query,
            Dictionary<string, object> parameters)
        {
            using (var conn = new SqlConnection(connectionString))
            using (var cmd  = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value ?? DBNull.Value);
                }

                conn.Open();
                return cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Run a SELECT against the bwlive database.
        /// </summary>
        public List<Dictionary<string, object>> WebSessBean(
            string query,
            Dictionary<string, object> parameters)
        {
            return ExecuteSelectQuery(_bwliveConnectionString, query, parameters);
        }

        /// <summary>
        /// Run a SELECT against the ItKharia database.
        /// </summary>
        public List<Dictionary<string, object>> KkrSessBean(
            string query,
            Dictionary<string, object> parameters)
        {
            return ExecuteSelectQuery(_itKhariaConnectionString, query, parameters);
        }

        /// <summary>
        /// Run a SELECT against the imageData database.
        /// </summary>
        public List<Dictionary<string, object>> ImgSessBean(
            string query,
            Dictionary<string, object> parameters)
        {
            return ExecuteSelectQuery(_imageDataConnectionString, query, parameters);
        }

        /// <summary>
        /// (Optional) Example: Retrieve a secret key for a partner from prmApiPrtnr table.
        /// Not enforced anywhere in this sample, but left in case you need it for TokenController.
        /// </summary>
        public string GetSecretKey(string partnerId)
        {
            var query = "SELECT secrtKey FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object>
            {
                { "@PartnerID", partnerId }
            };
            var result = KkrSessBean(query, parameters);
            if (result.Count > 0)
                return result[0]["secrtKey"]?.ToString() ?? throw new Exception("SecretKey was null.");

            throw new Exception($"SecretKey not found for PartnerID = '{partnerId}'.");
        }

        /// <summary>
        /// (Optional) Example: Return a list of allowed API routes (lowercased) for a partner.
        /// Not enforced anywhere in this sample, but left in case you wish to enable it later.
        /// </summary>
        public List<string> GetAllowedAPIs(string partnerId)
        {
            var query = "SELECT allwdAPI FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object>
            {
                { "@PartnerID", partnerId }
            };
            var rows = KkrSessBean(query, parameters);
            if (rows.Count > 0)
            {
                var allowed = rows[0]["allwdAPI"]?.ToString() ?? "";
                return allowed
                    .Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(a => a.Trim().ToLower())
                    .ToList();
            }
            return new List<string>();
        }

        /// <summary>
        /// (Optional) Example: Insert a log row into comApiLogs if needed.
        /// Not used in this sample, but left for your future use.
        /// </summary>
        public void InsertIntoLog(
            string partnerId,
            string endpoint,
            string responseStatus,
            int statCode,
            object requestBody)
        {
            // 1) Check if partnerId exists in prmApiPrtnr
            var checkQuery = "SELECT COUNT(*) AS Count FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var checkParams = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            var exists = KkrSessBean(checkQuery, checkParams);
            if (exists.Count == 0 || Convert.ToInt32(exists[0]["Count"]) == 0)
            {
                Console.WriteLine($"Warning: PartnerID '{partnerId}' not found. Skipping log.");
                return;
            }

            // 2) Build an INSERT statement with up to 8 request‐body fields
            var bodyDict = requestBody
                ?.GetType()
                .GetProperties()
                .Where(p => p.GetValue(requestBody) != null)
                .Select(p => $"{p.Name}={p.GetValue(requestBody)}")
                .Take(8)
                .ToList() ?? new List<string>();

            while (bodyDict.Count < 8)
                bodyDict.Add("");

            var insertQuery = @"
                INSERT INTO comApiLogs
                (
                  PartnerID, Endpoint, ResponseStatus, statCode,
                  ReqsBod1, ReqsBod2, ReqsBod3, ReqsBod4,
                  ReqsBod5, ReqsBod6, ReqsBod7, ReqsBod8
                )
                VALUES
                (
                  @PartnerID, @Endpoint, @ResponseStatus, @StatCode,
                  @ReqsBod1, @ReqsBod2, @ReqsBod3, @ReqsBod4,
                  @ReqsBod5, @ReqsBod6, @ReqsBod7, @ReqsBod8
                );";

            var insertParams = new Dictionary<string, object>
            {
                { "@PartnerID",   partnerId },
                { "@Endpoint",    endpoint },
                { "@ResponseStatus", responseStatus },
                { "@StatCode",    statCode },
                { "@ReqsBod1",    bodyDict[0] },
                { "@ReqsBod2",    bodyDict[1] },
                { "@ReqsBod3",    bodyDict[2] },
                { "@ReqsBod4",    bodyDict[3] },
                { "@ReqsBod5",    bodyDict[4] },
                { "@ReqsBod6",    bodyDict[5] },
                { "@ReqsBod7",    bodyDict[6] },
                { "@ReqsBod8",    bodyDict[7] }
            };

            ExecuteCommand(_itKhariaConnectionString, insertQuery, insertParams);
        }
    }
}





using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DsrActivityController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public DsrActivityController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        /// <summary>
        /// GET /api/DsrActivity/{docuNumb}
        /// Returns one DSR header (all columns) plus its detail rows (all columns).
        /// </summary>
        [HttpGet("{docuNumb}")]
        public IActionResult GetDsr(string docuNumb)
        {
            if (string.IsNullOrWhiteSpace(docuNumb))
                return BadRequest("Document number is required.");

            try
            {
                // 1) SELECT * FROM dptDSRActvt
                var headerQuery = "SELECT * FROM dptDSRActvt WITH (NOLOCK) WHERE docuNumb = @docuNumb;";
                var hdrParams   = new Dictionary<string, object> { { "@docuNumb", docuNumb } };
                var hdrRows     = _dbHelper.WebSessBean(headerQuery, hdrParams);

                if (hdrRows.Count == 0)
                    return NotFound($"No DSR found with docuNumb = '{docuNumb}'.");

                // Build a dictionary of header‐column → value
                var headerDict = hdrRows[0];

                // 2) SELECT * FROM dptDSRActvtDtl
                var detailQuery = "SELECT * FROM dptDSRActvtDtl WITH (NOLOCK) WHERE docuNumb = @docuNumb;";
                var dtlRows     = _dbHelper.WebSessBean(detailQuery, hdrParams);

                return Ok(new
                {
                    Header = headerDict,
                    Details = dtlRows
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error retrieving DSR: {ex.Message}");
            }
        }

        /// <summary>
        /// POST /api/DsrActivity
        /// Creates a new DSR header + detail rows.
        /// 
        /// Because we don’t know every column in dptDSRActvt, we explicitly INSERT only
        /// the columns shown in your JSP code’s SELECT statements. Adjust as needed.
        /// </summary>
        [HttpPost]
        public IActionResult CreateDsr([FromBody] DsrActivityCreateDto dto)
        {
            if (dto == null)
                return BadRequest("Request body is required.");
            if (string.IsNullOrWhiteSpace(dto.DocuNumb))
                return BadRequest("DocuNumb is required.");
            if (string.IsNullOrWhiteSpace(dto.CreateId))
                return BadRequest("CreateId is required.");

            try
            {
                //
                // 1) INSERT into dptDSRActvt
                //    (We only list columns that JSP definitely uses: 
                //     docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd,
                //     dsrRem01..dsrRem08, areaCode, cuRtType, ordExDat, createId
                //    )
                //
                var insertHeaderSql = @"
                    INSERT INTO dptDSRActvt
                    (
                      docuNumb,
                      docuDate,
                      dsrParam,
                      cusRtlFl,
                      cusRtlCd,
                      dsrRem01,
                      dsrRem02,
                      dsrRem03,
                      dsrRem04,
                      dsrRem05,
                      dsrRem06,
                      dsrRem07,
                      dsrRem08,
                      areaCode,
                      cuRtType,
                      ordExDat,
                      createId
                    )
                    VALUES
                    (
                      @docuNumb,
                      CONVERT(datetime, @docuDate, 103),
                      @dsrParam,
                      @cusRtlFl,
                      @cusRtlCd,
                      @dsrRem01,
                      @dsrRem02,
                      @dsrRem03,
                      @dsrRem04,
                      @dsrRem05,
                      @dsrRem06,
                      @dsrRem07,
                      @dsrRem08,
                      @areaCode,
                      @cuRtType,
                      CASE WHEN @ordExDat = '' THEN NULL ELSE CONVERT(datetime, @ordExDat, 103) END,
                      @createId
                    );";

                var hdrParams = new Dictionary<string, object>
                {
                    { "@docuNumb", dto.DocuNumb },
                    { "@docuDate", dto.DocuDate      ?? "" },
                    { "@dsrParam", dto.DsrParam      ?? "" },
                    { "@cusRtlFl", dto.CusRtlFl      ?? "" },
                    { "@cusRtlCd", dto.CusRtlCd      ?? "" },
                    { "@dsrRem01", dto.DsrRem01      ?? "" },
                    { "@dsrRem02", dto.DsrRem02      ?? "" },
                    { "@dsrRem03", dto.DsrRem03      ?? "" },
                    { "@dsrRem04", dto.DsrRem04      ?? "" },
                    { "@dsrRem05", dto.DsrRem05      ?? "" },
                    { "@dsrRem06", dto.DsrRem06      ?? "" },
                    { "@dsrRem07", dto.DsrRem07      ?? "" },
                    { "@dsrRem08", dto.DsrRem08      ?? "" },
                    { "@areaCode", dto.AreaCode      ?? "" },
                    { "@cuRtType", dto.CuRtType      ?? "" },
                    { "@ordExDat", dto.OrdExDat      ?? "" },
                    { "@createId", dto.CreateId      ?? "" }
                };

                _dbHelper.ExecuteCommandForDb("bwlive", insertHeaderSql, hdrParams);

                //
                // 2) Insert detail rows into dptDSRActvtDtl
                //    (We only list columns that JSP definitely references:
                //     docuNumb, createId, repoCatg, catgPack, prodQnty, projQnty,
                //     prodQtyV, actnRemk, targetDt, mrktData
                //    )
                //
                if (dto.Details != null)
                {
                    var insertDetailSql = @"
                        INSERT INTO dptDSRActvtDtl
                        (
                          docuNumb,
                          createId,
                          repoCatg,
                          catgPack,
                          prodQnty,
                          projQnty,
                          prodQtyV,
                          actnRemk,
                          targetDt,
                          mrktData
                        )
                        VALUES
                        (
                          @docuNumb,
                          @createId,
                          @repoCatg,
                          @catgPack,
                          @prodQnty,
                          @projQnty,
                          @prodQtyV,
                          @actnRemk,
                          CASE WHEN @targetDt = '' THEN NULL ELSE CONVERT(datetime, @targetDt, 103) END,
                          @mrktData
                        );";

                    foreach (var d in dto.Details)
                    {
                        var dtlParams = new Dictionary<string, object>
                        {
                            { "@docuNumb", dto.DocuNumb   },
                            { "@createId", dto.CreateId   },
                            { "@repoCatg", d.RepoCatg   ?? "" },
                            { "@catgPack", d.CatgPack   ?? "" },
                            { "@prodQnty", d.ProdQnty         },
                            { "@projQnty", d.ProjQnty         },
                            { "@prodQtyV", d.ProdQtyV         },
                            { "@actnRemk", d.ActnRemk   ?? "" },
                            { "@targetDt", d.TargetDt   ?? "" },
                            { "@mrktData", d.MrktData   ?? "" }
                        };
                        _dbHelper.ExecuteCommandForDb("bwlive", insertDetailSql, dtlParams);
                    }
                }

                return CreatedAtAction(nameof(GetDsr), new { docuNumb = dto.DocuNumb }, dto);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error inserting DSR: {ex.Message}");
            }
        }

        /// <summary>
        /// PUT /api/DsrActivity/{docuNumb}
        /// Updates an existing DSR header + details. We first delete existing detail rows,
        /// then re‐insert the ones sent in the request.
        /// </summary>
        [HttpPut("{docuNumb}")]
        public IActionResult UpdateDsr(string docuNumb, [FromBody] DsrActivityCreateDto dto)
        {
            if (string.IsNullOrWhiteSpace(docuNumb))
                return BadRequest("Document number is required.");
            if (dto == null)
                return BadRequest("Request body is required.");
            if (string.IsNullOrWhiteSpace(dto.CreateId))
                return BadRequest("CreateId is required.");

            try
            {
                // 1) Check if the header exists
                var existsQuery = "SELECT COUNT(1) AS Cnt FROM dptDSRActvt WHERE docuNumb = @docuNumb;";
                var existParams = new Dictionary<string, object> { { "@docuNumb", docuNumb } };
                var existRows   = _dbHelper.WebSessBean(existsQuery, existParams);
                if (existRows.Count == 0 || Convert.ToInt32(existRows[0]["Cnt"]) == 0)
                    return NotFound($"No DSR found with docuNumb = '{docuNumb}' to update.");

                //
                // 2) UPDATE the header (same columns as INSERT above)
                //
                var updateHeaderSql = @"
                    UPDATE dptDSRActvt SET
                      docuDate   = CONVERT(datetime, @docuDate, 103),
                      dsrParam   = @dsrParam,
                      cusRtlFl   = @cusRtlFl,
                      cusRtlCd   = @cusRtlCd,
                      dsrRem01   = @dsrRem01,
                      dsrRem02   = @dsrRem02,
                      dsrRem03   = @dsrRem03,
                      dsrRem04   = @dsrRem04,
                      dsrRem05   = @dsrRem05,
                      dsrRem06   = @dsrRem06,
                      dsrRem07   = @dsrRem07,
                      dsrRem08   = @dsrRem08,
                      areaCode   = @areaCode,
                      cuRtType   = @cuRtType,
                      ordExDat   = CASE WHEN @ordExDat = '' THEN NULL ELSE CONVERT(datetime, @ordExDat, 103) END
                    WHERE docuNumb = @docuNumb;";

                var hdrParams = new Dictionary<string, object>
                {
                    { "@docuNumb", docuNumb            },
                    { "@docuDate", dto.DocuDate      ?? "" },
                    { "@dsrParam", dto.DsrParam      ?? "" },
                    { "@cusRtlFl", dto.CusRtlFl      ?? "" },
                    { "@cusRtlCd", dto.CusRtlCd      ?? "" },
                    { "@dsrRem01", dto.DsrRem01      ?? "" },
                    { "@dsrRem02", dto.DsrRem02      ?? "" },
                    { "@dsrRem03", dto.DsrRem03      ?? "" },
                    { "@dsrRem04", dto.DsrRem04      ?? "" },
                    { "@dsrRem05", dto.DsrRem05      ?? "" },
                    { "@dsrRem06", dto.DsrRem06      ?? "" },
                    { "@dsrRem07", dto.DsrRem07      ?? "" },
                    { "@dsrRem08", dto.DsrRem08      ?? "" },
                    { "@areaCode", dto.AreaCode      ?? "" },
                    { "@cuRtType", dto.CuRtType      ?? "" },
                    { "@ordExDat", dto.OrdExDat      ?? "" }
                };

                _dbHelper.ExecuteCommandForDb("bwlive", updateHeaderSql, hdrParams);

                //
                // 3) DELETE existing detail rows for this docuNumb + createId
                //
                var deleteDetailsSql = @"
                    DELETE FROM dptDSRActvtDtl
                    WHERE docuNumb = @docuNumb
                      AND createId = @createId;";
                var delParams = new Dictionary<string, object>
                {
                    { "@docuNumb", docuNumb       },
                    { "@createId", dto.CreateId   }
                };
                _dbHelper.ExecuteCommandForDb("bwlive", deleteDetailsSql, delParams);

                //
                // 4) Re‐INSERT detail rows (same columns as in Create)
                //
                if (dto.Details != null)
                {
                    var insertDetailSql = @"
                        INSERT INTO dptDSRActvtDtl
                        (
                          docuNumb,
                          createId,
                          repoCatg,
                          catgPack,
                          prodQnty,
                          projQnty,
                          prodQtyV,
                          actnRemk,
                          targetDt,
                          mrktData
                        )
                        VALUES
                        (
                          @docuNumb,
                          @createId,
                          @repoCatg,
                          @catgPack,
                          @prodQnty,
                          @projQnty,
                          @prodQtyV,
                          @actnRemk,
                          CASE WHEN @targetDt = '' THEN NULL ELSE CONVERT(datetime, @targetDt, 103) END,
                          @mrktData
                        );";

                    foreach (var d in dto.Details)
                    {
                        var dtlParams = new Dictionary<string, object>
                        {
                            { "@docuNumb", dto.DocuNumb   },
                            { "@createId", dto.CreateId   },
                            { "@repoCatg", d.RepoCatg   ?? "" },
                            { "@catgPack", d.CatgPack   ?? "" },
                            { "@prodQnty", d.ProdQnty         },
                            { "@projQnty", d.ProjQnty         },
                            { "@prodQtyV", d.ProdQtyV         },
                            { "@actnRemk", d.ActnRemk   ?? "" },
                            { "@targetDt", d.TargetDt   ?? "" },
                            { "@mrktData", d.MrktData   ?? "" }
                        };
                        _dbHelper.ExecuteCommandForDb("bwlive", insertDetailSql, dtlParams);
                    }
                }

                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error updating DSR: {ex.Message}");
            }
        }

        /// <summary>
        /// DELETE /api/DsrActivity/{docuNumb}
        /// Deletes both the header and all detail rows.
        /// </summary>
        [HttpDelete("{docuNumb}")]
        public IActionResult DeleteDsr(string docuNumb)
        {
            if (string.IsNullOrWhiteSpace(docuNumb))
                return BadRequest("Document number is required.");

            try
            {
                // 1) Verify existence
                var existsQuery = "SELECT COUNT(1) AS Cnt FROM dptDSRActvt WHERE docuNumb = @docuNumb;";
                var existParams = new Dictionary<string, object> { { "@docuNumb", docuNumb } };
                var existRows   = _dbHelper.WebSessBean(existsQuery, existParams);
                if (existRows.Count == 0 || Convert.ToInt32(existRows[0]["Cnt"]) == 0)
                    return NotFound($"No DSR found with docuNumb = '{docuNumb}' to delete.");

                // 2) DELETE details first
                var deleteDetailsSql = @"
                    DELETE FROM dptDSRActvtDtl
                    WHERE docuNumb = @docuNumb;";
                _dbHelper.ExecuteCommandForDb("bwlive", deleteDetailsSql, existParams);

                // 3) DELETE header
                var deleteHeaderSql = @"
                    DELETE FROM dptDSRActvt
                    WHERE docuNumb = @docuNumb;";
                _dbHelper.ExecuteCommandForDb("bwlive", deleteHeaderSql, existParams);

                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error deleting DSR: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// DTO used for creating/updating a DSR. We explicitly list only the columns
    /// that your JSP actually touched (based on the SELECT statements). If your table
    /// has extra columns, you can add them here as needed.
    /// </summary>
    public class DsrActivityCreateDto
    {
        // *** Header columns (dptDSRActvt) ***
        public string DocuNumb { get; set; }    // e.g. "DSR000123"
        public string DocuDate { get; set; }    // "dd/MM/yyyy"
        public string DsrParam { get; set; }    // e.g. "05"
        public string CusRtlFl { get; set; }    // e.g. "R"
        public string CusRtlCd { get; set; }    // e.g. "CUST001"
        public string DsrRem01 { get; set; }    // JSP uses dsrRem01..08 for various fields
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
        public string AreaCode { get; set; }    // Sale area, e.g. "AREA01"
        public string CuRtType { get; set; }    // e.g. "RR"
        public string OrdExDat { get; set; }    // "dd/MM/yyyy" or empty
        public string CreateId { get; set; }    // loginId, e.g. "2961"

        // *** Detail rows (dptDSRActvtDtl) ***
        public List<DsrActivityDetailCreateDto> Details { get; set; }
    }

    /// <summary>
    /// DTO for each detail row in dptDSRActvtDtl. We only list the columns that JSP used:
    ///   • docuNumb, createId, repoCatg, catgPack, prodQnty, projQnty, prodQtyV, actnRemk, targetDt, mrktData
    /// If your table has other columns, add them here (and update the INSERT SQL accordingly).
    /// </summary>
    public class DsrActivityDetailCreateDto
    {
        public string RepoCatg  { get; set; }   // e.g. "01"
        public string CatgPack  { get; set; }   // e.g. "PACK001"
        public decimal ProdQnty { get; set; }   // numeric
        public decimal ProjQnty { get; set; }   // numeric
        public decimal ProdQtyV { get; set; }   // e.g. “Volume” (some JSP paths used prodQtyV)
        public string ActnRemk  { get; set; }   // any text
        public string TargetDt  { get; set; }   // "dd/MM/yyyy" or empty
        public string MrktData  { get; set; }   // e.g. "05" (indicates market data type)
    }
}





POST https://localhost:5001/api/DsrActivity
Content-Type: application/json

{
  "DocuNumb":    "DSR000999",
  "DocuDate":    "04/06/2025",
  "DsrParam":    "05",
  "CusRtlFl":    "R",
  "CusRtlCd":    "CUST999",
  "DsrRem01":    "Remark1",
  "DsrRem02":    "Remark2",
  "DsrRem03":    "",
  "DsrRem04":    "",
  "DsrRem05":    "",
  "DsrRem06":    "",
  "DsrRem07":    "",
  "DsrRem08":    "",
  "AreaCode":    "AREA99",
  "CuRtType":    "RR",
  "OrdExDat":    "05/06/2025",
  "CreateId":    "2961",
  "Details": [
    {
      "RepoCatg":  "01",
      "CatgPack":  "PACK001",
      "ProdQnty":  2.0,
      "ProjQnty":  1.0,
      "ProdQtyV":  0.0,
      "ActnRemk":  "Detail remark 1",
      "TargetDt":  "06/06/2025",
      "MrktData":  "05"
    },
    {
      "RepoCatg":  "02",
      "CatgPack":  "PACK002",
      "ProdQnty":  3.0,
      "ProjQnty":  2.0,
      "ProdQtyV":  0.0,
      "ActnRemk":  "Detail remark 2",
      "TargetDt":  "",
      "MrktData":  "05"
    }
  ]
}


