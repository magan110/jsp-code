using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace MyFirstApi.Controllers
{
    // DTOs
    public class DsrSubmitRequest
    {
        public string PurchaserRetailerType { get; set; }
        public string AreaCode              { get; set; }
        public string CodeSearch            { get; set; }
        public string CustomerName          { get; set; }
        public string Date                  { get; set; } // expected format: "yyyy-MM-dd"
        public string YourLatitude          { get; set; }
        public string YourLongitude         { get; set; }
        public string CustLatitude          { get; set; }
        public string CustLongitude         { get; set; }
        public string EntryType             { get; set; } // "IN" or "Exception"
    }

    public class AreaDto
    {
        public string AreaCode { get; set; }
        public string AreaDesc { get; set; }
    }

    public class RetailerDto
    {
        public string Code      { get; set; }
        public string Name      { get; set; }
        public string Address   { get; set; }
        public string City      { get; set; }
        public double Latitude  { get; set; }
        public double Longitude { get; set; }
    }

    // Assuming your EF Core DbContext looks something like this:
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        { }

        public DbSet<Area> Areas         { get; set; }
        public DbSet<Retailer> Retailers { get; set; }
        public DbSet<DsrActivity> DsrActivities { get; set; }
        // ... other DbSets ...
    }

    // Entity classes
    public class Area
    {
        public string AreaCode { get; set; }
        public string AreaDesc { get; set; }
        public bool   IsActive { get; set; }
    }

    public class Retailer
    {
        public string Code      { get; set; }
        public string Name      { get; set; }
        public string Address   { get; set; }
        public string City      { get; set; }
        public double Latitude  { get; set; }
        public double Longitude { get; set; }
        public string AreaCode  { get; set; }
        public bool   IsActive  { get; set; }
    }

    public class DsrActivity
    {
        public int      Id                    { get; set; }
        public string   PurchaserRetailerType { get; set; }
        public string   AreaCode              { get; set; }
        public string   CustomerCode          { get; set; }
        public string   CustomerName          { get; set; }
        public DateTime ReportDate            { get; set; }
        public double   YourLatitude          { get; set; }
        public double   YourLongitude         { get; set; }
        public double   CustLatitude          { get; set; }
        public double   CustLongitude         { get; set; }
        public string   EntryType             { get; set; }
        public DateTime CreatedAt             { get; set; }
    }

    [ApiController]
    [Route("api/[controller]")]
    public class DsrActivityController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public DsrActivityController(ApplicationDbContext context)
        {
            _context = context;
        }

        /// <summary>
        /// GET /api/dsractivity/areas?search=...
        /// Returns a list of active area codes filtered by 'search' term (case‐insensitive).
        /// </summary>
        [HttpGet("areas")]
        public async Task<IActionResult> GetAreas([FromQuery] string search = "")
        {
            var query = _context.Areas
                                .AsNoTracking()
                                .Where(a => a.IsActive);

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(a =>
                    a.AreaCode.ToLower().Contains(lowered) ||
                    a.AreaDesc.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(a => a.AreaDesc)
                .Select(a => new AreaDto
                {
                    AreaCode = a.AreaCode,
                    AreaDesc = a.AreaDesc
                })
                .Take(50) // limit to 50 results
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// GET /api/dsractivity/retailers?areaCode=XXX&search=YYY
        /// Returns a list of active retailers in a given area (filtered by 'search' term).
        /// </summary>
        [HttpGet("retailers")]
        public async Task<IActionResult> GetRetailers(
            [FromQuery] string areaCode,
            [FromQuery] string search = "")
        {
            if (string.IsNullOrWhiteSpace(areaCode))
                return BadRequest("areaCode is required.");

            var query = _context.Retailers
                                .AsNoTracking()
                                .Where(r => r.IsActive && r.AreaCode == areaCode.Trim());

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(r =>
                    r.Code.ToLower().Contains(lowered) ||
                    r.Name.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(r => r.Name)
                .Select(r => new RetailerDto
                {
                    Code = r.Code,
                    Name = r.Name,
                    Address = r.Address,
                    City = r.City,
                    Latitude = r.Latitude,
                    Longitude = r.Longitude
                })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// POST /api/dsractivity/submit
        /// Accepts a DSR “IN/Exception” submission from the mobile client.
        /// </summary>
        [HttpPost("submit")]
        public async Task<IActionResult> Submit([FromBody] DsrSubmitRequest request)
        {
            if (request == null)
                return BadRequest("Request body is missing.");

            // Basic validation
            if (string.IsNullOrWhiteSpace(request.PurchaserRetailerType) ||
                string.IsNullOrWhiteSpace(request.AreaCode) ||
                string.IsNullOrWhiteSpace(request.CodeSearch) ||
                string.IsNullOrWhiteSpace(request.CustomerName) ||
                string.IsNullOrWhiteSpace(request.Date) ||
                string.IsNullOrWhiteSpace(request.YourLatitude) ||
                string.IsNullOrWhiteSpace(request.YourLongitude) ||
                string.IsNullOrWhiteSpace(request.CustLatitude) ||
                string.IsNullOrWhiteSpace(request.CustLongitude) ||
                string.IsNullOrWhiteSpace(request.EntryType))
            {
                return BadRequest("All fields are required.");
            }

            // Parse the date
            if (!DateTime.TryParseExact(
                    request.Date.Trim(),
                    "yyyy-MM-dd",
                    System.Globalization.CultureInfo.InvariantCulture,
                    System.Globalization.DateTimeStyles.None,
                    out var reportDate))
            {
                return BadRequest("Date must be in yyyy-MM-dd format.");
            }

            // Parse lat/long fields
            if (!double.TryParse(request.YourLatitude, out var yourLat) ||
                !double.TryParse(request.YourLongitude, out var yourLon) ||
                !double.TryParse(request.CustLatitude, out var custLat) ||
                !double.TryParse(request.CustLongitude, out var custLon))
            {
                return BadRequest("Latitude/Longitude values must be valid numbers.");
            }

            // Create new DsrActivity record
            var activity = new DsrActivity
            {
                PurchaserRetailerType = request.PurchaserRetailerType.Trim(),
                AreaCode              = request.AreaCode.Trim(),
                CustomerCode          = request.CodeSearch.Trim(),
                CustomerName          = request.CustomerName.Trim(),
                ReportDate            = reportDate,
                YourLatitude          = yourLat,
                YourLongitude         = yourLon,
                CustLatitude          = custLat,
                CustLongitude         = custLon,
                EntryType             = request.EntryType.Trim(),
                CreatedAt             = DateTime.UtcNow
            };

            _context.DsrActivities.Add(activity);
            await _context.SaveChangesAsync();

            return Ok(new { message = "DSR activity submitted successfully.", activityId = activity.Id });
        }
    }
}
