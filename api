// Program.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using sparshWebService.DataAccess;       // ← DatabaseHelper
using MyFirstApi.Controllers;           // ← ApplicationDbContext, DsrActivityController

var builder = WebApplication.CreateBuilder(args);

// ─── 1) Read all three connection‐strings from appsettings.json ──────────────
var configuration = builder.Configuration;
var connStrings = configuration.GetSection("ConnectionStrings")
                               .Get<Dictionary<string, string>>();

if (!connStrings.ContainsKey("bwlive") ||
    !connStrings.ContainsKey("itkHaria") ||
    !connStrings.ContainsKey("imageData"))
{
    throw new Exception("Please configure 'bwlive', 'itkHaria' and 'imageData' under ConnectionStrings.");
}

// ─── 2) Register ApplicationDbContext (EF Core) using 'bwlive' ───────────────
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connStrings["bwlive"])
);

// ─── 3) Register DatabaseHelper as a Singleton ────────────────────────────────
builder.Services.AddSingleton(provider =>
    new DatabaseHelper(
        connStrings["bwlive"],
        connStrings["itkHaria"],
        connStrings["imageData"]
    ));

// ─── 4) Register HttpClient (if needed later) ────────────────────────────────
builder.Services.AddHttpClient();

// ─── 5) Add Authentication/Authorization (JWT + custom middleware) ───────────
builder.Services.AddAuthentication();   // (we still expect your Jwt to be validated in middleware)
builder.Services.AddAuthorization();

// ─── 6) Add Controllers & Swagger ────────────────────────────────────────────
builder.Services.AddControllers();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// ─── 7) Enable Swagger in Development ────────────────────────────────────────
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// ─── 8) Custom PartnerID‐Validation Middleware ───────────────────────────────
app.UseMiddleware<AuthenticationMiddleware>();

// ─── 9) Standard ASP.NET Core pipeline ───────────────────────────────────────
app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();

// ─── 10) Optionally a simple GET home page ───────────────────────────────────
app.MapGet("/", async context =>
{
    context.Response.ContentType = "text/html";
    await context.Response.WriteAsync("<h1>Welcome</h1><p>API is running.</p>");
});

// ─── 11) Map Controllers ─────────────────────────────────────────────────────
app.MapControllers();

app.Run();


// File: DsrActivityController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using sparshWebService.DataAccess; //← for DatabaseHelper

namespace MyFirstApi.Controllers
{
    // ===================================================
    // EVERYTHING IN ONE FILE: DbContext + ENTITIES + DTOs + CONTROLLER
    // ===================================================

    /// <summary>
    /// EF Core DbContext, pointed at the ‘bwlive’ database.
    /// </summary>
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        { }

        // ──────────────────────────────────────────────────────────────────────────
        // DbSets for LOOKUP TABLES
        // ──────────────────────────────────────────────────────────────────────────
        public DbSet<Area> Areas { get; set; }
        public DbSet<Retailer> Retailers { get; set; }

        // ──────────────────────────────────────────────────────────────────────────
        // DbSets for DSR ACTIVITY + CHILD TABLES
        // ──────────────────────────────────────────────────────────────────────────
        public DbSet<DsrActivity> DsrActivities { get; set; }
        public DbSet<DsrActivityBrandAvg> DsrActivityBrandAvgs { get; set; }
        public DbSet<DsrActivityBilling> DsrActivityBillings { get; set; }
        public DbSet<DsrActivityOrderBooked> DsrActivityOrderBookeds { get; set; }
        public DbSet<DsrActivityMarketMis> DsrActivityMarketMises { get; set; }
        public DbSet<DsrActivityGift> DsrActivityGifts { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // ──────────────────────────────────────────────────────────────────────────
            // 1) MAP AREA → bkmAreaMast
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<Area>(entity =>
            {
                entity.ToTable("bkmAreaMast");

                entity.HasKey(a => a.AreaCode);

                entity.Property(a => a.AreaCode)
                      .HasColumnName("areaCode")
                      .HasMaxLength(10);

                entity.Property(a => a.AreaDesc)
                      .HasColumnName("areaDesc")
                      .HasMaxLength(100)
                      .IsRequired();

                entity.Property(a => a.IsActive)
                      .HasColumnName("isActive");
            });

            // ──────────────────────────────────────────────────────────────────────────
            // 2) MAP RETAILER → rtmRetailer
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<Retailer>(entity =>
            {
                entity.ToTable("rtmRetailer");

                entity.HasKey(r => r.Code);

                entity.Property(r => r.Code)
                      .HasColumnName("retlCode")
                      .HasMaxLength(10);

                entity.Property(r => r.Name)
                      .HasColumnName("retlName")
                      .HasMaxLength(200)
                      .IsRequired();

                entity.Property(r => r.Address)
                      .HasColumnName("locaCapr")
                      .HasMaxLength(200);

                entity.Property(r => r.City)
                      .HasColumnName("city")
                      .HasMaxLength(50);

                entity.Property(r => r.Latitude)
                      .HasColumnName("latitute");

                entity.Property(r => r.Longitude)
                      .HasColumnName("lgtitute");

                entity.Property(r => r.AreaCode)
                      .HasColumnName("areaCode")
                      .HasMaxLength(10);

                entity.Property(r => r.IsActive)
                      .HasColumnName("isActive");
            });

            // ──────────────────────────────────────────────────────────────────────────
            // 3) MAP DsrActivity → dptDSRActvt
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<DsrActivity>(entity =>
            {
                entity.ToTable("dptDSRActvt");

                entity.HasKey(x => x.Id);

                entity.Property(x => x.Id)
                      .HasColumnName("Id");

                entity.Property(x => x.PurchaserRetailerType)
                      .HasColumnName("cusRtlFl")
                      .HasMaxLength(2)
                      .IsRequired();

                entity.Property(x => x.AreaCode)
                      .HasColumnName("areaCode")
                      .HasMaxLength(10)
                      .IsRequired();

                entity.Property(x => x.CustomerCode)
                      .HasColumnName("cusRtlCd")
                      .HasMaxLength(10)
                      .IsRequired();

                entity.Property(x => x.CustomerName)
                      .HasColumnName("cusRtlNm")
                      .HasMaxLength(100);

                entity.Property(x => x.ReportDate)
                      .HasColumnName("docuDate")
                      .IsRequired();

                entity.Property(x => x.ParticipationDisplayContest)
                      .HasColumnName("prtDsCnt")
                      .HasMaxLength(3);

                entity.Property(x => x.AnyPendingIssues)
                      .HasColumnName("pendIsue")
                      .HasMaxLength(1);

                entity.Property(x => x.PendingIssueType)
                      .HasColumnName("pndIsuDt")
                      .HasMaxLength(1);

                entity.Property(x => x.PendingIssueDetail)
                      .HasColumnName("isuDetal")
                      .HasMaxLength(200);

                entity.Property(x => x.MarketName)
                      .HasColumnName("mrktName")
                      .HasMaxLength(200);

                entity.Property(x => x.WcEnrolmentSlab)
                      .HasColumnName("wcErlSlb")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.WpEnrolmentSlab)
                      .HasColumnName("wpErlSlb")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.VapEnrolmentSlab)
                      .HasColumnName("vpErlSlb")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.BwStockWc)
                      .HasColumnName("bwStkWcc")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.BwStockWp)
                      .HasColumnName("bwStkWcp")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.BwStockVap)
                      .HasColumnName("bwStkVap")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.BrandsSellingWcCsv)
                      .HasColumnName("brndSlWc");

                entity.Property(x => x.WcIndustryVolume)
                      .HasColumnName("slWcVlum")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.BrandsSellingWpCsv)
                      .HasColumnName("brndSlWp");

                entity.Property(x => x.WpIndustryVolume)
                      .HasColumnName("slWpVlum")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.Last3MonthsAvgWc)
                      .HasColumnName("wcAvgWcc")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.Last3MonthsAvgWp)
                      .HasColumnName("wcAvgWcp")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.Last3MonthsAvgVap)
                      .HasColumnName("wcAvgVap")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.CurrentMonthWc)
                      .HasColumnName("bwCurWcc")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.CurrentMonthWp)
                      .HasColumnName("bwCurWcp")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.CurrentMonthVap)
                      .HasColumnName("bwCurVap")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.DsrRemarks)
                      .HasColumnName("dsrRem05")
                      .HasMaxLength(200);

                entity.Property(x => x.ExceptionReasonCode)
                      .HasColumnName("cityName")
                      .HasMaxLength(2);

                entity.Property(x => x.ExceptionApproval)
                      .HasColumnName("dsrExcpA");

                entity.Property(x => x.OrderExecutionDate)
                      .HasColumnName("ordExDat");

                entity.Property(x => x.YourLatitude)
                      .HasColumnName("geoLatit");

                entity.Property(x => x.YourLongitude)
                      .HasColumnName("geoLongt");

                entity.Property(x => x.CustLatitude)
                      .HasColumnName("latitute");

                entity.Property(x => x.CustLongitude)
                      .HasColumnName("lgtitute");

                entity.Property(x => x.DistanceMeters)
                      .HasColumnName("ltLgDist")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.IsTileAdhesivesSeller)
                      .HasColumnName("isTilRtl");

                entity.Property(x => x.TileStock)
                      .HasColumnName("tileStck")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.CreatedAt)
                      .HasColumnName("createDt");

                entity.Property(x => x.CreatedBy)
                      .HasColumnName("createId")
                      .HasMaxLength(50);
            });

            // ──────────────────────────────────────────────────────────────────────────
            // 4) MAP DsrActivityBrandAvg → dptDSRActvtDtl_BrandAvg
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<DsrActivityBrandAvg>(entity =>
            {
                entity.ToTable("dptDSRActvtDtl_BrandAvg");
                entity.HasKey(x => x.Id);

                entity.Property(x => x.Id)
                      .HasColumnName("Id");

                entity.Property(x => x.DsrActivityId)
                      .HasColumnName("docuNumb");

                entity.Property(x => x.BrandName)
                      .HasColumnName("actnRemk")
                      .HasMaxLength(20);

                entity.Property(x => x.AvgWc)
                      .HasColumnName("prodQnty")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.AvgWp)
                      .HasColumnName("projQnty")
                      .HasColumnType("decimal(18,2)");

                entity.HasOne(x => x.DsrActivity)
                      .WithMany(x => x.BrandAverages)
                      .HasForeignKey(x => x.DsrActivityId);
            });

            // ──────────────────────────────────────────────────────────────────────────
            // 5) MAP DsrActivityBilling → dptDSRActvtDtl_Billing
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<DsrActivityBilling>(entity =>
            {
                entity.ToTable("dptDSRActvtDtl_Billing");
                entity.HasKey(x => x.Id);

                entity.Property(x => x.Id)
                      .HasColumnName("Id");

                entity.Property(x => x.DsrActivityId)
                      .HasColumnName("docuNumb");

                entity.Property(x => x.ProductName)
                      .HasColumnName("mrgRepDs")
                      .HasMaxLength(50);

                entity.Property(x => x.BillingDate)
                      .HasColumnName("rtlInvDt")
                      .HasMaxLength(20);

                entity.Property(x => x.Quantity)
                      .HasColumnName("salesQty")
                      .HasColumnType("decimal(18,2)");

                entity.HasOne(x => x.DsrActivity)
                      .WithMany(x => x.LastBillingHistory)
                      .HasForeignKey(x => x.DsrActivityId);
            });

            // ──────────────────────────────────────────────────────────────────────────
            // 6) MAP DsrActivityOrderBooked → dptDSRActvtDtl_Orders
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<DsrActivityOrderBooked>(entity =>
            {
                entity.ToTable("dptDSRActvtDtl_Orders");
                entity.HasKey(x => x.Id);

                entity.Property(x => x.Id)
                      .HasColumnName("Id");

                entity.Property(x => x.DsrActivityId)
                      .HasColumnName("docuNumb");

                entity.Property(x => x.RepoCategory)
                      .HasColumnName("repoCatg")
                      .HasMaxLength(10);

                entity.Property(x => x.ProductCode)
                      .HasColumnName("prodCode")
                      .HasMaxLength(50);

                entity.Property(x => x.ProdQuantity)
                      .HasColumnName("prodQnty")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.ProjectedQuantity)
                      .HasColumnName("projQnty")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.ActionRemark)
                      .HasColumnName("actnRemk")
                      .HasMaxLength(200);

                entity.Property(x => x.TargetDate)
                      .HasColumnName("targetDt")
                      .HasMaxLength(20);

                entity.HasOne(x => x.DsrActivity)
                      .WithMany(x => x.OrdersBooked)
                      .HasForeignKey(x => x.DsrActivityId);
            });

            // ──────────────────────────────────────────────────────────────────────────
            // 7) MAP DsrActivityMarketMis → dptDSRActvtDtl_MarketMis
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<DsrActivityMarketMis>(entity =>
            {
                entity.ToTable("dptDSRActvtDtl_MarketMis");
                entity.HasKey(x => x.Id);

                entity.Property(x => x.Id)
                      .HasColumnName("Id");

                entity.Property(x => x.DsrActivityId)
                      .HasColumnName("docuNumb");

                entity.Property(x => x.BranchName)
                      .HasColumnName("repoCatg")
                      .HasMaxLength(10);

                entity.Property(x => x.ProductSku)
                      .HasColumnName("catgPack")
                      .HasMaxLength(50);

                entity.Property(x => x.PriceB)
                      .HasColumnName("prodQnty")
                      .HasColumnType("decimal(18,2)");

                entity.Property(x => x.PriceC)
                      .HasColumnName("projQnty")
                      .HasColumnType("decimal(18,2)");

                entity.HasOne(x => x.DsrActivity)
                      .WithMany(x => x.MarketMisEntries)
                      .HasForeignKey(x => x.DsrActivityId);
            });

            // ──────────────────────────────────────────────────────────────────────────
            // 8) MAP DsrActivityGift → dptDSRActvtDtl_Gifts
            // ──────────────────────────────────────────────────────────────────────────
            modelBuilder.Entity<DsrActivityGift>(entity =>
            {
                entity.ToTable("dptDSRActvtDtl_Gifts");
                entity.HasKey(x => x.Id);

                entity.Property(x => x.Id)
                      .HasColumnName("Id");

                entity.Property(x => x.DsrActivityId)
                      .HasColumnName("docuNumb");

                entity.Property(x => x.GiftTypeCode)
                      .HasColumnName("mrtlCode")
                      .HasMaxLength(10);

                entity.Property(x => x.IssueQuantity)
                      .HasColumnName("isueQnty")
                      .HasColumnType("decimal(18,2)");

                entity.HasOne(x => x.DsrActivity)
                      .WithMany(x => x.GiftDistributionEntries)
                      .HasForeignKey(x => x.DsrActivityId);
            });
        }
    }

    // ─────────────────────────────────────────────────────────────────────────────
    // ENTITIES (all in one file, as requested)
    // ─────────────────────────────────────────────────────────────────────────────

    /// <summary>
    /// “Area” lookup, mapped to bkmAreaMast.
    /// </summary>
    public class Area
    {
        [Key]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(100)]
        public string AreaDesc { get; set; }

        public bool IsActive { get; set; }
    }

    /// <summary>
    /// “Retailer” lookup, mapped to rtmRetailer.
    /// </summary>
    public class Retailer
    {
        [Key]
        [StringLength(10)]
        public string Code { get; set; }

        [Required]
        [StringLength(200)]
        public string Name { get; set; }

        [StringLength(200)]
        public string Address { get; set; }

        [StringLength(50)]
        public string City { get; set; }

        public double Latitude { get; set; }
        public double Longitude { get; set; }

        [StringLength(10)]
        public string AreaCode { get; set; }

        public bool IsActive { get; set; }
    }

    /// <summary>
    /// Main DSR activity entity, mapped to dptDSRActvt.
    /// </summary>
    public class DsrActivity
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [StringLength(2)]
        public string PurchaserRetailerType { get; set; }

        [Required]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(10)]
        public string CustomerCode { get; set; }

        [StringLength(100)]
        public string CustomerName { get; set; }

        [Required]
        public DateTime ReportDate { get; set; }

        [StringLength(3)]
        public string ParticipationDisplayContest { get; set; }

        [StringLength(1)]
        public string AnyPendingIssues { get; set; }

        [StringLength(1)]
        public string PendingIssueType { get; set; }

        [StringLength(200)]
        public string PendingIssueDetail { get; set; }

        [StringLength(200)]
        public string MarketName { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal WcEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal WpEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal VapEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockVap { get; set; }

        public string BrandsSellingWcCsv { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? WcIndustryVolume { get; set; }

        public string BrandsSellingWpCsv { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? WpIndustryVolume { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgVap { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthVap { get; set; }

        [StringLength(200)]
        public string DsrRemarks { get; set; }

        [StringLength(2)]
        public string ExceptionReasonCode { get; set; }

        public bool ExceptionApproval { get; set; }

        public DateTime? OrderExecutionDate { get; set; }

        public double YourLatitude { get; set; }
        public double YourLongitude { get; set; }

        public double CustLatitude { get; set; }
        public double CustLongitude { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal DistanceMeters { get; set; }

        public bool IsTileAdhesivesSeller { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? TileStock { get; set; }

        public DateTime CreatedAt { get; set; }

        [StringLength(50)]
        public string CreatedBy { get; set; }

        // ────────────────────────────────────────────────────────────────────────
        // Navigation properties
        // ────────────────────────────────────────────────────────────────────────
        public ICollection<DsrActivityBrandAvg>    BrandAverages           { get; set; }
        public ICollection<DsrActivityBilling>      LastBillingHistory      { get; set; }
        public ICollection<DsrActivityOrderBooked>  OrdersBooked            { get; set; }
        public ICollection<DsrActivityMarketMis>    MarketMisEntries        { get; set; }
        public ICollection<DsrActivityGift>         GiftDistributionEntries { get; set; }
    }

    public class DsrActivityBrandAvg
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(20)]
        public string BrandName { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal AvgWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal AvgWp { get; set; }
    }

    public class DsrActivityBilling
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(50)]
        public string ProductName { get; set; }

        [Required]
        [StringLength(20)]
        public string BillingDate { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal Quantity { get; set; }
    }

    public class DsrActivityOrderBooked
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(10)]
        public string RepoCategory { get; set; }

        [StringLength(50)]
        public string ProductCode { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal ProdQuantity { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal ProjectedQuantity { get; set; }

        [StringLength(200)]
        public string ActionRemark { get; set; }

        [StringLength(20)]
        public string TargetDate { get; set; }
    }

    public class DsrActivityMarketMis
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        public DsrActivity DsrActivity { get; set; }

        [StringLength(10)]
        public string BranchName { get; set; }

        [StringLength(50)]
        public string ProductSku { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal PriceB { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal PriceC { get; set; }
    }

    public class DsrActivityGift
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        public DsrActivity DsrActivity { get; set; }

        [StringLength(10)]
        public string GiftTypeCode { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal IssueQuantity { get; set; }
    }

    // ─────────────────────────────────────────────────────────────────────────────
    // REQUEST MODELS (DTOs) – all in one file
    // ─────────────────────────────────────────────────────────────────────────────

    public class DsrActivityRequest
    {
        [Required]
        [StringLength(2)]
        public string PurchaserRetailerType { get; set; }

        [Required]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(10)]
        public string CustomerCode { get; set; }

        [StringLength(100)]
        public string CustomerName { get; set; }

        [Required]
        public DateTime ReportDate { get; set; }

        [Required]
        [RegularExpression("Y|N|NA")]
        public string ParticipationDisplayContest { get; set; }

        [Required]
        [RegularExpression("Y|N")]
        public string AnyPendingIssues { get; set; }

        public string PendingIssueType { get; set; }
        public string PendingIssueDetail { get; set; }

        [Required]
        [StringLength(200)]
        public string MarketName { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal WcEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal WpEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal VapEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockWc { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockWp { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockVap { get; set; }

        public List<string> BrandsSellingWc { get; set; } = new List<string>();
        public decimal? WcIndustryVolume { get; set; }

        public List<string> BrandsSellingWp { get; set; } = new List<string>();
        public decimal? WpIndustryVolume { get; set; }

        public decimal? Last3MonthsAvgWc { get; set; }
        public decimal? Last3MonthsAvgWp { get; set; }
        public decimal? Last3MonthsAvgVap { get; set; }

        public decimal? CurrentMonthWc { get; set; }
        public decimal? CurrentMonthWp { get; set; }
        public decimal? CurrentMonthVap { get; set; }

        public List<BrandAvgEntry> BrandAverages { get; set; } = new();
        public List<LastBillingEntry> LastBillingHistory { get; set; } = new();
        public List<OrderBookedEntry> OrdersBooked { get; set; } = new();
        public List<MarketMisEntry> MarketMisEntries { get; set; } = new();
        public List<GiftDistributionEntry> GiftDistributionEntries { get; set; } = new();

        public bool IsTileAdhesivesSeller { get; set; }
        public decimal? TileStock { get; set; }

        [StringLength(200)]
        public string DsrRemarks { get; set; }

        public string ExceptionReasonCode { get; set; }
        public bool ExceptionApproval { get; set; }

        public DateTime? OrderExecutionDate { get; set; }

        [Required]
        public double YourLatitude { get; set; }

        [Required]
        public double YourLongitude { get; set; }

        [Required]
        public double CustLatitude { get; set; }

        [Required]
        public double CustLongitude { get; set; }

        public double DistanceMeters { get; set; }
    }

    public class BrandAvgEntry
    {
        [Required]
        public string BrandName { get; set; }

        [Range(0, double.MaxValue)]
        public decimal AvgWc { get; set; }

        [Range(0, double.MaxValue)]
        public decimal AvgWp { get; set; }
    }

    public class LastBillingEntry
    {
        [Required]
        public string ProductName { get; set; }

        [Required]
        [StringLength(20)]
        public string BillingDate { get; set; }

        [Range(0, double.MaxValue)]
        public decimal Quantity { get; set; }
    }

    public class OrderBookedEntry
    {
        [Required]
        [StringLength(10)]
        public string RepoCategory { get; set; }

        [Required]
        [StringLength(50)]
        public string ProductCode { get; set; }

        [Range(0, double.MaxValue)]
        public decimal ProdQuantity { get; set; }

        [Range(0, double.MaxValue)]
        public decimal ProjectedQuantity { get; set; }

        [StringLength(200)]
        public string ActionRemark { get; set; }

        [StringLength(20)]
        public string TargetDate { get; set; }
    }

    public class MarketMisEntry
    {
        [StringLength(10)]
        public string BranchName { get; set; }

        [StringLength(50)]
        public string ProductSku { get; set; }

        [Range(0, double.MaxValue)]
        public decimal PriceB { get; set; }

        [Range(0, double.MaxValue)]
        public decimal PriceC { get; set; }
    }

    public class GiftDistributionEntry
    {
        [StringLength(10)]
        public string GiftTypeCode { get; set; }

        [Range(0, double.MaxValue)]
        public decimal IssueQuantity { get; set; }
    }

    // ─────────────────────────────────────────────────────────────────────────────
    // THE CONTROLLER
    // ─────────────────────────────────────────────────────────────────────────────
    [ApiController]
    [Route("api/[controller]")]
    public class DsrActivityController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly DatabaseHelper       _dbHelper;

        public DsrActivityController(ApplicationDbContext context, DatabaseHelper dbHelper)
        {
            _context  = context;
            _dbHelper = dbHelper;
        }

        /// <summary>
        /// GET /api/dsractivity/areas?search=...
        /// Returns active areas.
        /// </summary>
        [HttpGet("areas")]
        public async Task<IActionResult> GetAreas([FromQuery] string search = "")
        {
            var query = _context.Areas
                                .AsNoTracking()
                                .Where(a => a.IsActive);

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(a =>
                    a.AreaCode.ToLower().Contains(lowered) ||
                    a.AreaDesc.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(a => a.AreaDesc)
                .Select(a => new { a.AreaCode, a.AreaDesc })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// GET /api/dsractivity/retailers?areaCode=XXX&search=YYY
        /// Returns active retailers in a given area.
        /// </summary>
        [HttpGet("retailers")]
        public async Task<IActionResult> GetRetailers(
            [FromQuery] string areaCode,
            [FromQuery] string search = "")
        {
            if (string.IsNullOrWhiteSpace(areaCode))
                return BadRequest("areaCode is required.");

            var query = _context.Retailers
                                .AsNoTracking()
                                .Where(r => r.IsActive && r.AreaCode == areaCode.Trim());

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(r =>
                    r.Code.ToLower().Contains(lowered) ||
                    r.Name.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(r => r.Name)
                .Select(r => new
                {
                    r.Code,
                    r.Name,
                    r.Address,
                    r.City,
                    r.Latitude,
                    r.Longitude
                })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// POST /api/dsractivity/submit
        /// Accepts full DSR submission.
        /// </summary>
        [HttpPost("submit")]
        public async Task<IActionResult> Submit([FromBody] DsrActivityRequest request)
        {
            if (request == null)
                return BadRequest("Request body is missing.");

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            // Map to EF entity
            var dsr = new DsrActivity
            {
                PurchaserRetailerType       = request.PurchaserRetailerType.Trim(),
                AreaCode                    = request.AreaCode.Trim(),
                CustomerCode                = request.CustomerCode.Trim(),
                CustomerName                = request.CustomerName?.Trim(),
                ReportDate                  = request.ReportDate,
                ParticipationDisplayContest = request.ParticipationDisplayContest,
                AnyPendingIssues            = request.AnyPendingIssues,
                PendingIssueType            = request.PendingIssueType,
                PendingIssueDetail          = request.PendingIssueDetail,
                MarketName                  = request.MarketName?.Trim(),
                WcEnrolmentSlab             = request.WcEnrolmentSlab,
                WpEnrolmentSlab             = request.WpEnrolmentSlab,
                VapEnrolmentSlab            = request.VapEnrolmentSlab,
                BwStockWc                   = request.BwStockWc,
                BwStockWp                   = request.BwStockWp,
                BwStockVap                  = request.BwStockVap,
                BrandsSellingWcCsv          = (request.BrandsSellingWc != null)
                                                ? string.Join(",", request.BrandsSellingWc)
                                                : null,
                WcIndustryVolume            = request.WcIndustryVolume,
                BrandsSellingWpCsv          = (request.BrandsSellingWp != null)
                                                ? string.Join(",", request.BrandsSellingWp)
                                                : null,
                WpIndustryVolume            = request.WpIndustryVolume,
                Last3MonthsAvgWc            = request.Last3MonthsAvgWc,
                Last3MonthsAvgWp            = request.Last3MonthsAvgWp,
                Last3MonthsAvgVap           = request.Last3MonthsAvgVap,
                CurrentMonthWc              = request.CurrentMonthWc,
                CurrentMonthWp              = request.CurrentMonthWp,
                CurrentMonthVap             = request.CurrentMonthVap,
                DsrRemarks                  = request.DsrRemarks?.Trim(),
                ExceptionReasonCode         = request.ExceptionReasonCode,
                ExceptionApproval           = request.ExceptionApproval,
                OrderExecutionDate          = request.OrderExecutionDate,
                YourLatitude                = request.YourLatitude,
                YourLongitude               = request.YourLongitude,
                CustLatitude                = request.CustLatitude,
                CustLongitude               = request.CustLongitude,
                DistanceMeters              = (decimal)request.DistanceMeters,
                IsTileAdhesivesSeller       = request.IsTileAdhesivesSeller,
                TileStock                   = request.TileStock,
                CreatedAt                   = DateTime.UtcNow,
                CreatedBy                   = User?.Identity?.Name ?? "UNKNOWN"
            };

            // Populate child collections if present
            if (request.BrandAverages?.Any() == true)
            {
                dsr.BrandAverages = request.BrandAverages
                    .Select(b => new DsrActivityBrandAvg
                    {
                        BrandName = b.BrandName,
                        AvgWc     = b.AvgWc,
                        AvgWp     = b.AvgWp
                    }).ToList();
            }

            if (request.LastBillingHistory?.Any() == true)
            {
                dsr.LastBillingHistory = request.LastBillingHistory
                    .Select(b => new DsrActivityBilling
                    {
                        ProductName = b.ProductName,
                        BillingDate = b.BillingDate,
                        Quantity    = b.Quantity
                    }).ToList();
            }

            if (request.OrdersBooked?.Any() == true)
            {
                dsr.OrdersBooked = request.OrdersBooked
                    .Select(o => new DsrActivityOrderBooked
                    {
                        RepoCategory      = o.RepoCategory,
                        ProductCode       = o.ProductCode,
                        ProdQuantity      = o.ProdQuantity,
                        ProjectedQuantity = o.ProjectedQuantity,
                        ActionRemark      = o.ActionRemark,
                        TargetDate        = o.TargetDate
                    }).ToList();
            }

            if (request.MarketMisEntries?.Any() == true)
            {
                dsr.MarketMisEntries = request.MarketMisEntries
                    .Select(m => new DsrActivityMarketMis
                    {
                        BranchName = m.BranchName,
                        ProductSku = m.ProductSku,
                        PriceB     = m.PriceB,
                        PriceC     = m.PriceC
                    }).ToList();
            }

            if (request.GiftDistributionEntries?.Any() == true)
            {
                dsr.GiftDistributionEntries = request.GiftDistributionEntries
                    .Select(g => new DsrActivityGift
                    {
                        GiftTypeCode  = g.GiftTypeCode,
                        IssueQuantity = g.IssueQuantity
                    }).ToList();
            }

            _context.DsrActivities.Add(dsr);
            await _context.SaveChangesAsync();

            return Ok(new
            {
                message    = "DSR activity submitted successfully.",
                activityId = dsr.Id
            });
        }
    }
}
