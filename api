using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;

namespace sparshWebService.Controllers
{
    public class DsrEntryDto
    {
        public string ActivityType { get; set; }
        public DateTime SubmissionDate { get; set; }
        public DateTime ReportDate { get; set; }
        public string CreateId { get; set; } = "SYSTEM";
        public string AreaCode { get; set; }
        public string Purchaser { get; set; }
        public string PurchaserCode { get; set; }
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
    }

    public record ActivityMetadata(string Prefix, string Param, short ParTy);

    public static class ActivityLookup
    {
        private static readonly Dictionary<string, ActivityMetadata> _map = new(StringComparer.OrdinalIgnoreCase)
        {
            ["Office Work"] = new("OFFWOR", "53", 83)
        };

        public static bool TryGet(string activityType, out ActivityMetadata meta)
            => _map.TryGetValue(activityType, out meta);
    }

    [Route("api/[controller]")]
    [ApiController]
    public class DsrTryController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public DsrTryController(DatabaseHelper db) => _db = db;

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult Submit([FromBody] DsrEntryDto dto)
        {
            if (dto == null || dto.ActivityType?.Trim() != "Office Work")
                return BadRequest("ActivityType must be 'Office Work'.");

            if (!ActivityLookup.TryGet(dto.ActivityType, out var meta))
                return BadRequest($"Unknown ActivityType '{dto.ActivityType}'.");

            var rawNum = meta.Prefix + DateTime.UtcNow.ToString("yyMMddHHmmss").PadRight(11, '0');
            var docuNumb = rawNum.Substring(0, 16);

            var rem = Enumerable.Repeat(string.Empty, 11).ToArray();
            rem[1] = dto.DsrRem01 ?? string.Empty;
            rem[2] = dto.DsrRem02 ?? string.Empty;

            const string sql = @"
INSERT INTO dptDSRActvt
  (docuNumb, dsrParam, docuDate,
   cusRtlFl, cusRtlCd,
   dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
   dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10,
   deptCode, statFlag,
   createId, createDt,
   updateId, updateDt,
   dsrParTy, atchNmId, locaCapr, latitute, lgtitute,
   cuRtType, areaCode,
   retlStFl, pinCodeN, cityName, district, cstBisTy,
   ordExDat,
   pendWith, ltLgDist, apprRemk, ordInsFl, refOrdNo, isTilRtl,
   tileStck, rtlInTim, rtOutTim)
VALUES
  (@docuNumb, @dsrParam, @reportDate,
   @cusRtlFl, @custRtlCd,
   @r1,@r2,@r3,@r4,@r5,
   @r6,@r7,@r8,@r9,@r10,
   '', '',
   @createId, @submissionDate,
   '', NULL,
   @dsrParTy,
   '', '', '', '', '',
   '', @areaCode,
   '', '', '', '', '',
   NULL,
   '', '', '', '', '', '',
   NULL, NULL, NULL);
";

            var parameters = new Dictionary<string, object>
            {
                ["@docuNumb"] = docuNumb,
                ["@dsrParam"] = meta.Param,
                ["@reportDate"] = dto.ReportDate,
                ["@cusRtlFl"] = dto.Purchaser,
                ["@custRtlCd"] = dto.PurchaserCode,
                ["@submissionDate"] = dto.SubmissionDate,
                ["@createId"] = dto.CreateId,
                ["@dsrParTy"] = meta.ParTy,
                ["@areaCode"] = dto.AreaCode,
                ["@r1"] = rem[1],
                ["@r2"] = rem[2],
                ["@r3"] = rem[3],
                ["@r4"] = rem[4],
                ["@r5"] = rem[5],
                ["@r6"] = rem[6],
                ["@r7"] = rem[7],
                ["@r8"] = rem[8],
                ["@r9"] = rem[9],
                ["@r10"] = rem[10],
            };

            try
            {
                _db.WebSessBean(sql, parameters);
                return CreatedAtAction(nameof(Submit), new { docuNumb }, dto);
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }
    }
}
