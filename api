{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "bwlive": "Server=10.4.64.15;Database=bwlive;User ID=birlawhite;Password=M@nsv1530;Trusted_Connection=False;TrustServerCertificate=true;",
    "itkHaria": "Server=10.4.64.15;Database=ItKharia;User ID=itKharia;Password=Mans^1530;Trusted_Connection=False;TrustServerCertificate=true;",
    "imageData": "Server=10.4.64.15;Database=imageData;User ID=sa;Password=Point@0652;Trusted_Connection=False;TrustServerCertificate=true;"
  },
  "Jwt": {
    "Key": "SuperLongRandomSecretKey_ChangeThisToYourOwnSecureValue",
    "Issuer": "https://qa.birlawhite.com"
  }
} 

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace MyFirstApi.Controllers
{
    // ===================================================
    // EF CORE ENTITIES (all in one file as requested)
    // ===================================================
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        { }

        public DbSet<DsrActivity> DsrActivities { get; set; }
        public DbSet<DsrActivityBrandAvg> DsrActivityBrandAvgs { get; set; }
        public DbSet<DsrActivityBilling> DsrActivityBillings { get; set; }
        public DbSet<DsrActivityOrderBooked> DsrActivityOrderBookeds { get; set; }
        public DbSet<DsrActivityMarketMis> DsrActivityMarketMises { get; set; }
        public DbSet<DsrActivityGift> DsrActivityGifts { get; set; }

        // Example lookup tables
        public DbSet<Area> Areas { get; set; }
        public DbSet<Retailer> Retailers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            // If your actual table names differ, map them here, e.g.:
            // modelBuilder.Entity<DsrActivity>().ToTable("dptDSRActvt");
            // modelBuilder.Entity<DsrActivityBrandAvg>().ToTable("dptDSRActvtDtl_BrandAvg");
            // ...and so on.
        }
    }

    /// <summary>
    /// Represents an “Area” lookup (for GET /areas).
    /// </summary>
    public class Area
    {
        [Key]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(100)]
        public string AreaDesc { get; set; }

        public bool IsActive { get; set; }
    }

    /// <summary>
    /// Represents a retailer lookup record (for GET /retailers).
    /// </summary>
    public class Retailer
    {
        [Key]
        [StringLength(10)]
        public string Code { get; set; }

        [Required]
        [StringLength(200)]
        public string Name { get; set; }

        [StringLength(200)]
        public string Address { get; set; }

        [StringLength(50)]
        public string City { get; set; }

        public double Latitude { get; set; }
        public double Longitude { get; set; }

        [StringLength(10)]
        public string AreaCode { get; set; }
        public bool IsActive { get; set; }
    }

    /// <summary>
    /// Main DSR activity entity (maps roughly to dptDSRActvt).
    /// </summary>
    public class DsrActivity
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [StringLength(2)]
        public string PurchaserRetailerType { get; set; }

        [Required]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(10)]
        public string CustomerCode { get; set; }

        [StringLength(100)]
        public string CustomerName { get; set; }

        [Required]
        public DateTime ReportDate { get; set; }

        [StringLength(3)]
        public string ParticipationDisplayContest { get; set; }

        [StringLength(1)]
        public string AnyPendingIssues { get; set; }

        [StringLength(1)]
        public string PendingIssueType { get; set; }

        [StringLength(200)]
        public string PendingIssueDetail { get; set; }

        [StringLength(200)]
        public string MarketName { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal WcEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal WpEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal VapEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockVap { get; set; }

        // Store comma‐separated lists for checkboxes
        public string BrandsSellingWcCsv { get; set; }
        [Column(TypeName = "decimal(18,2)")]
        public decimal? WcIndustryVolume { get; set; }

        public string BrandsSellingWpCsv { get; set; }
        [Column(TypeName = "decimal(18,2)")]
        public decimal? WpIndustryVolume { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgVap { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthVap { get; set; }

        [StringLength(200)]
        public string DsrRemarks { get; set; }

        [StringLength(2)]
        public string ExceptionReasonCode { get; set; }

        public bool ExceptionApproval { get; set; }

        public DateTime? OrderExecutionDate { get; set; }

        public double YourLatitude { get; set; }
        public double YourLongitude { get; set; }

        public double CustLatitude { get; set; }
        public double CustLongitude { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal DistanceMeters { get; set; }

        public bool IsTileAdhesivesSeller { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? TileStock { get; set; }

        public DateTime CreatedAt { get; set; }
        [StringLength(50)]
        public string CreatedBy { get; set; }

        // Child navigation properties
        public ICollection<DsrActivityBrandAvg> BrandAverages { get; set; }
        public ICollection<DsrActivityBilling> LastBillingHistory { get; set; }
        public ICollection<DsrActivityOrderBooked> OrdersBooked { get; set; }
        public ICollection<DsrActivityMarketMis> MarketMisEntries { get; set; }
        public ICollection<DsrActivityGift> GiftDistributionEntries { get; set; }
    }

    public class DsrActivityBrandAvg
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(20)]
        public string BrandName { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal AvgWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal AvgWp { get; set; }
    }

    public class DsrActivityBilling
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(50)]
        public string ProductName { get; set; }

        [Required]
        [StringLength(20)]
        public string BillingDate { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal Quantity { get; set; }
    }

    public class DsrActivityOrderBooked
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(10)]
        public string RepoCategory { get; set; }

        [StringLength(50)]
        public string ProductCode { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal ProdQuantity { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal ProjectedQuantity { get; set; }

        [StringLength(200)]
        public string ActionRemark { get; set; }

        [StringLength(20)]
        public string TargetDate { get; set; }
    }

    public class DsrActivityMarketMis
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [StringLength(10)]
        public string BranchName { get; set; }

        [StringLength(50)]
        public string ProductSku { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal PriceB { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal PriceC { get; set; }
    }

    public class DsrActivityGift
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [StringLength(10)]
        public string GiftTypeCode { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal IssueQuantity { get; set; }
    }

    // ===================================================
    // REQUEST MODELS (DTOs) – all in one file
    // ===================================================
    public class DsrActivityRequest
    {
        [Required]
        [StringLength(2)]
        public string PurchaserRetailerType { get; set; }

        [Required]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(10)]
        public string CustomerCode { get; set; }

        [StringLength(100)]
        public string CustomerName { get; set; }

        [Required]
        public DateTime ReportDate { get; set; }

        [Required]
        [RegularExpression("Y|N|NA")]
        public string ParticipationDisplayContest { get; set; }

        [Required]
        [RegularExpression("Y|N")]
        public string AnyPendingIssues { get; set; }

        public string PendingIssueType { get; set; }
        public string PendingIssueDetail { get; set; }

        [Required]
        [StringLength(200)]
        public string MarketName { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal WcEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal WpEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal VapEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockWc { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockWp { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockVap { get; set; }

        public List<string> BrandsSellingWc { get; set; } = new List<string>();
        public decimal? WcIndustryVolume { get; set; }

        public List<string> BrandsSellingWp { get; set; } = new List<string>();
        public decimal? WpIndustryVolume { get; set; }

        public decimal? Last3MonthsAvgWc { get; set; }
        public decimal? Last3MonthsAvgWp { get; set; }
        public decimal? Last3MonthsAvgVap { get; set; }

        public decimal? CurrentMonthWc { get; set; }
        public decimal? CurrentMonthWp { get; set; }
        public decimal? CurrentMonthVap { get; set; }

        public List<BrandAvgEntry> BrandAverages { get; set; } = new List<BrandAvgEntry>();
        public List<LastBillingEntry> LastBillingHistory { get; set; } = new List<LastBillingEntry>();
        public List<OrderBookedEntry> OrdersBooked { get; set; } = new List<OrderBookedEntry>();
        public List<MarketMisEntry> MarketMisEntries { get; set; } = new List<MarketMisEntry>();
        public List<GiftDistributionEntry> GiftDistributionEntries { get; set; } = new List<GiftDistributionEntry>();

        public bool IsTileAdhesivesSeller { get; set; }
        public decimal? TileStock { get; set; }

        [StringLength(200)]
        public string DsrRemarks { get; set; }

        public string ExceptionReasonCode { get; set; }
        public bool ExceptionApproval { get; set; }

        public DateTime? OrderExecutionDate { get; set; }

        [Required]
        public double YourLatitude { get; set; }

        [Required]
        public double YourLongitude { get; set; }

        [Required]
        public double CustLatitude { get; set; }

        [Required]
        public double CustLongitude { get; set; }

        public double DistanceMeters { get; set; }
    }

    public class BrandAvgEntry
    {
        [Required]
        public string BrandName { get; set; }

        [Range(0, double.MaxValue)]
        public decimal AvgWc { get; set; }

        [Range(0, double.MaxValue)]
        public decimal AvgWp { get; set; }
    }

    public class LastBillingEntry
    {
        [Required]
        public string ProductName { get; set; }

        [Required]
        [StringLength(20)]
        public string BillingDate { get; set; }

        [Range(0, double.MaxValue)]
        public decimal Quantity { get; set; }
    }

    public class OrderBookedEntry
    {
        [Required]
        [StringLength(10)]
        public string RepoCategory { get; set; }

        [Required]
        [StringLength(50)]
        public string ProductCode { get; set; }

        [Range(0, double.MaxValue)]
        public decimal ProdQuantity { get; set; }

        [Range(0, double.MaxValue)]
        public decimal ProjectedQuantity { get; set; }

        [StringLength(200)]
        public string ActionRemark { get; set; }

        [StringLength(20)]
        public string TargetDate { get; set; }
    }

    public class MarketMisEntry
    {
        [StringLength(10)]
        public string BranchName { get; set; }

        [StringLength(50)]
        public string ProductSku { get; set; }

        [Range(0, double.MaxValue)]
        public decimal PriceB { get; set; }

        [Range(0, double.MaxValue)]
        public decimal PriceC { get; set; }
    }

    public class GiftDistributionEntry
    {
        [StringLength(10)]
        public string GiftTypeCode { get; set; }

        [Range(0, double.MaxValue)]
        public decimal IssueQuantity { get; set; }
    }

    // ===================================================
    // THE ACTUAL CONTROLLER
    // ===================================================
    [ApiController]
    [Route("api/[controller]")]
    public class DsrActivityController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public DsrActivityController(ApplicationDbContext context)
        {
            _context = context;
        }

        /// <summary>
        /// GET /api/dsractivity/areas?search=...
        /// </summary>
        [HttpGet("areas")]
        public async Task<IActionResult> GetAreas([FromQuery] string search = "")
        {
            var query = _context.Areas
                                .AsNoTracking()
                                .Where(a => a.IsActive);

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(a =>
                    a.AreaCode.ToLower().Contains(lowered) ||
                    a.AreaDesc.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(a => a.AreaDesc)
                .Select(a => new { a.AreaCode, a.AreaDesc })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// GET /api/dsractivity/retailers?areaCode=XXX&search=YYY
        /// </summary>
        [HttpGet("retailers")]
        public async Task<IActionResult> GetRetailers(
            [FromQuery] string areaCode,
            [FromQuery] string search = "")
        {
            if (string.IsNullOrWhiteSpace(areaCode))
                return BadRequest("areaCode is required.");

            var query = _context.Retailers
                                .AsNoTracking()
                                .Where(r => r.IsActive && r.AreaCode == areaCode.Trim());

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(r =>
                    r.Code.ToLower().Contains(lowered) ||
                    r.Name.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(r => r.Name)
                .Select(r => new
                {
                    r.Code,
                    r.Name,
                    r.Address,
                    r.City,
                    r.Latitude,
                    r.Longitude
                })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// POST /api/dsractivity/submit
        /// Accepts entire DSR submission.
        /// </summary>
        [HttpPost("submit")]
        public async Task<IActionResult> Submit([FromBody] DsrActivityRequest request)
        {
            if (request == null)
                return BadRequest("Request body is missing.");

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            // Map to EF entity
            var dsr = new DsrActivity
            {
                PurchaserRetailerType = request.PurchaserRetailerType.Trim(),
                AreaCode = request.AreaCode.Trim(),
                CustomerCode = request.CustomerCode.Trim(),
                CustomerName = request.CustomerName?.Trim(),
                ReportDate = request.ReportDate,
                ParticipationDisplayContest = request.ParticipationDisplayContest,
                AnyPendingIssues = request.AnyPendingIssues,
                PendingIssueType = request.PendingIssueType,
                PendingIssueDetail = request.PendingIssueDetail,
                MarketName = request.MarketName?.Trim(),
                WcEnrolmentSlab = request.WcEnrolmentSlab,
                WpEnrolmentSlab = request.WpEnrolmentSlab,
                VapEnrolmentSlab = request.VapEnrolmentSlab,
                BwStockWc = request.BwStockWc,
                BwStockWp = request.BwStockWp,
                BwStockVap = request.BwStockVap,
                BrandsSellingWcCsv = (request.BrandsSellingWc != null)
                                     ? string.Join(",", request.BrandsSellingWc)
                                     : null,
                WcIndustryVolume = request.WcIndustryVolume,
                BrandsSellingWpCsv = (request.BrandsSellingWp != null)
                                     ? string.Join(",", request.BrandsSellingWp)
                                     : null,
                WpIndustryVolume = request.WpIndustryVolume,
                Last3MonthsAvgWc = request.Last3MonthsAvgWc,
                Last3MonthsAvgWp = request.Last3MonthsAvgWp,
                Last3MonthsAvgVap = request.Last3MonthsAvgVap,
                CurrentMonthWc = request.CurrentMonthWc,
                CurrentMonthWp = request.CurrentMonthWp,
                CurrentMonthVap = request.CurrentMonthVap,
                DsrRemarks = request.DsrRemarks?.Trim(),
                ExceptionReasonCode = request.ExceptionReasonCode,
                ExceptionApproval = request.ExceptionApproval,
                OrderExecutionDate = request.OrderExecutionDate,
                YourLatitude = request.YourLatitude,
                YourLongitude = request.YourLongitude,
                CustLatitude = request.CustLatitude,
                CustLongitude = request.CustLongitude,
                DistanceMeters = (decimal)request.DistanceMeters,
                IsTileAdhesivesSeller = request.IsTileAdhesivesSeller,
                TileStock = request.TileStock,
                CreatedAt = DateTime.UtcNow,
                CreatedBy = User?.Identity?.Name ?? "UNKNOWN"
            };

            // Populate child collections
            if (request.BrandAverages != null && request.BrandAverages.Any())
            {
                dsr.BrandAverages = request.BrandAverages
                    .Select(b => new DsrActivityBrandAvg
                    {
                        BrandName = b.BrandName,
                        AvgWc = b.AvgWc,
                        AvgWp = b.AvgWp
                    }).ToList();
            }

            if (request.LastBillingHistory != null && request.LastBillingHistory.Any())
            {
                dsr.LastBillingHistory = request.LastBillingHistory
                    .Select(b => new DsrActivityBilling
                    {
                        ProductName = b.ProductName,
                        BillingDate = b.BillingDate,
                        Quantity = b.Quantity
                    }).ToList();
            }

            if (request.OrdersBooked != null && request.OrdersBooked.Any())
            {
                dsr.OrdersBooked = request.OrdersBooked
                    .Select(o => new DsrActivityOrderBooked
                    {
                        RepoCategory = o.RepoCategory,
                        ProductCode = o.ProductCode,
                        ProdQuantity = o.ProdQuantity,
                        ProjectedQuantity = o.ProjectedQuantity,
                        ActionRemark = o.ActionRemark,
                        TargetDate = o.TargetDate
                    }).ToList();
            }

            if (request.MarketMisEntries != null && request.MarketMisEntries.Any())
            {
                dsr.MarketMisEntries = request.MarketMisEntries
                    .Select(m => new DsrActivityMarketMis
                    {
                        BranchName = m.BranchName,
                        ProductSku = m.ProductSku,
                        PriceB = m.PriceB,
                        PriceC = m.PriceC
                    }).ToList();
            }

            if (request.GiftDistributionEntries != null && request.GiftDistributionEntries.Any())
            {
                dsr.GiftDistributionEntries = request.GiftDistributionEntries
                    .Select(g => new DsrActivityGift
                    {
                        GiftTypeCode = g.GiftTypeCode,
                        IssueQuantity = g.IssueQuantity
                    }).ToList();
            }

            _context.DsrActivities.Add(dsr);
            await _context.SaveChangesAsync();

            return Ok(new
            {
                message = "DSR activity submitted successfully.",
                activityId = dsr.Id
            });
        }
    }
}



using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using sparshWebService.DataAccess;    // ← DatabaseHelper
   

var builder = WebApplication.CreateBuilder(args);

// ─── 1) Read ConnectionStrings from appsettings.json ─────────────────────────
var configuration = builder.Configuration;
var connStrings = configuration.GetSection("ConnectionStrings")
                               .Get<Dictionary<string, string>>();

if (!connStrings.ContainsKey("bwlive") ||
    !connStrings.ContainsKey("itkHaria") ||
    !connStrings.ContainsKey("imageData"))
{
    throw new Exception("Please configure bwlive, itkHaria, and imageData in ConnectionStrings.");
}

// ─── 2) Register DatabaseHelper as a Singleton ────────────────────────────────
builder.Services.AddSingleton(provider =>
    new DatabaseHelper(
        connStrings["bwlive"],
        connStrings["itkHaria"],
        connStrings["imageData"]
    ));

// ─── 3) Add HttpClient (if you need it later) ─────────────────────────────────
builder.Services.AddHttpClient();

// ─── 4) Add Authentication/Authorization (JWT, plus your custom Middleware) ───
// (Assuming you still want JWT and PartnerID‐validation.)
builder.Services.AddAuthorization();

// ─── 5) Add Controllers and Swagger ─────────────────────────────────────────
builder.Services.AddControllers();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// ─── 6) Swagger in Development ───────────────────────────────────────────────
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// ─── 7) Custom PartnerID + “IsBlocked” + Allowed-APIs middleware ─────────────
app.UseMiddleware<AuthenticationMiddleware>();

// ─── 8) Standard ASP.NET Core pipeline ───────────────────────────────────────
app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();

// ─── 9) Home page (optional) ────────────────────────────────────────────────
app.MapGet("/", async context =>
{
    context.Response.ContentType = "text/html";
    await context.Response.WriteAsync("<h1>Welcome</h1><p>API is running.</p>");
});

// ─── 10) Map Controllers ─────────────────────────────────────────────────────
app.MapControllers();

app.Run();



using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Routing;
using sparshWebService.DataAccess;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Threading.Tasks;

public class AuthenticationMiddleware
{
    private readonly RequestDelegate _next;
    private readonly DatabaseHelper _dbHelper;

    public AuthenticationMiddleware(RequestDelegate next, DatabaseHelper dbHelper)
    {
        _next = next;
        _dbHelper = dbHelper;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // Bypass authentication for TokenController
        var currentPath = context.Request.Path.Value?.ToLower();

        if (
    currentPath?.StartsWith("/api/token", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/auth/login", StringComparison.OrdinalIgnoreCase) == true ||

    // DsrActivityController GETs
    currentPath?.StartsWith("/api/dsractivity/areas", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsractivity/retailers", StringComparison.OrdinalIgnoreCase) == true ||

    // DsrActivityController POST
    currentPath?.StartsWith("/api/dsractivity/submit", StringComparison.OrdinalIgnoreCase) == true ||

    // (other existing bypasses...)
    currentPath?.StartsWith("/api/dsrbtlactivity/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrworkhome/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrsampling/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrphnpurc/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrphnbldr/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsroffleave/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrofficework/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrmeetnpur/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrmeetconr/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsrintmeett/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/dsranyactiv/submit", StringComparison.OrdinalIgnoreCase) == true ||
    currentPath?.StartsWith("/api/retailerinout/submit", StringComparison.OrdinalIgnoreCase) == true
   )
        {
            await _next(context);
            return;
        }


        // Extract PartnerID and Authorization header
        var partnerId = context.Request.Headers["PartnerID"].FirstOrDefault();
        var authorizationHeader = context.Request.Headers["Authorization"].FirstOrDefault();

        if (string.IsNullOrEmpty(partnerId) || string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
        {
            context.Response.StatusCode = 400; // Bad Request
            await context.Response.WriteAsync("PartnerID header and Authorization Bearer token are required.");
            return;
        }

        // Extract JWT token
        var jwtToken = authorizationHeader.Replace("Bearer ", "", StringComparison.OrdinalIgnoreCase).Trim();
        try
        {
            var jwtHandler = new JwtSecurityTokenHandler();
            if (!jwtHandler.CanReadToken(jwtToken))
            {
                context.Response.StatusCode = 401; // Unauthorized
                await context.Response.WriteAsync("Invalid JWT token.");
                return;
            }

            // Validate the JWT token
            var token = jwtHandler.ReadJwtToken(jwtToken);
            var tokenPartnerId = token.Claims.FirstOrDefault(c => c.Type == "PartnerID")?.Value;

            if (string.IsNullOrEmpty(tokenPartnerId) || !string.Equals(tokenPartnerId, partnerId, StringComparison.OrdinalIgnoreCase))
            {
                context.Response.StatusCode = 401; // Unauthorized
                await context.Response.WriteAsync("Invalid or mismatched PartnerID in token.");
                return;
            }

            // Validate API access
            var allowedApis = _dbHelper.GetAllowedAPIs(partnerId);
            if (!allowedApis.Contains(currentPath))
            {
                context.Response.StatusCode = 403; // Forbidden
                await context.Response.WriteAsync("Access to the API is not allowed for this PartnerID.");
                return;
            }

            // Call the next middleware
            await _next(context);
        }
        catch (Exception ex)
        {
            context.Response.StatusCode = 401; // Unauthorized
            await context.Response.WriteAsync($"Token validation failed: {ex.Message}");
        }
    }
}




using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;

namespace sparshWebService.DataAccess
{
    public class DatabaseHelper
    {
        private readonly string _bwliveConnectionString;
        private readonly string _itKhariaConnectionString;
        private readonly string _imageDataConnectionString;

        public DatabaseHelper(string bwliveConnectionString, string itKhariaConnectionString, string imageDataConnectionString)
        {
            _bwliveConnectionString = bwliveConnectionString;
            _itKhariaConnectionString = itKhariaConnectionString;
            _imageDataConnectionString = imageDataConnectionString;
        }

        // Public getters for connection strings
        public string BwliveConnectionString => _bwliveConnectionString;
        public string ItKhariaConnectionString => _itKhariaConnectionString;
        public string ImageDataConnectionString => _imageDataConnectionString;

        // Utility: ExecuteCommand by dbKey
        public int ExecuteCommandForDb(string dbKey, string query, Dictionary<string, object> parameters)
        {
            string connStr = dbKey.ToLower() switch
            {
                "bwlive" => _bwliveConnectionString,
                "itkharia" => _itKhariaConnectionString,
                "imagedata" => _imageDataConnectionString,
                _ => throw new Exception("Unknown DB key")
            };
            return ExecuteCommand(connStr, query, parameters);
        }

        // General method to execute SELECT queries for any connection string
        private List<Dictionary<string, object>> ExecuteSelectQuery(string connectionString, string query, Dictionary<string, object> parameters)
        {
            var resultList = new List<Dictionary<string, object>>();
            using (var conn = new SqlConnection(connectionString))
            using (var cmd = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value);
                }

                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var row = new Dictionary<string, object>();
                        for (int i = 0; i < reader.FieldCount; i++)
                        {
                            row[reader.GetName(i)] = reader[i];
                        }
                        resultList.Add(row);
                    }
                }
            }
            return resultList;
        }

        // General method to execute INSERT, UPDATE, or DELETE queries for any connection string
        public int ExecuteCommand(string connectionString, string query, Dictionary<string, object> parameters)
        {
            using (var conn = new SqlConnection(connectionString))
            using (var cmd = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value);
                }

                conn.Open();
                return cmd.ExecuteNonQuery(); // Returns the number of rows affected
            }
        }

        // SELECT helpers
        public List<Dictionary<string, object>> WebSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_bwliveConnectionString, query, parameters);

        public List<Dictionary<string, object>> KkrSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_itKhariaConnectionString, query, parameters);

        public List<Dictionary<string, object>> ImgSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_imageDataConnectionString, query, parameters);

        public string GetSecretKey(string partnerId)
        {
            var query = "SELECT secrtKey FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            var result = KkrSessBean(query, parameters);
            if (result.Count > 0)
                return result[0]["secrtKey"]?.ToString();
            throw new Exception("SecretKey not found for the given PartnerID.");
        }

        public List<string> GetAllowedAPIs(string partnerId)
        {
            var query = @"SELECT allwdAPI FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            var result = KkrSessBean(query, parameters);
            if (result.Count > 0)
            {
                var allowedApis = result[0]["allwdAPI"]?.ToString();
                return allowedApis?.Split(',').Select(api => api.Trim().ToLower()).ToList();
            }
            throw new Exception("No APIs found for the given PartnerID.");
        }

        public void InsertIntoLog(string partnerId, string endpoint, string responseStatus, int statCode, object requestBody)
        {
            var checkQuery = "SELECT COUNT(*) AS Count FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var checkParams = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            var exists = KkrSessBean(checkQuery, checkParams);
            if (exists.Count == 0 || Convert.ToInt32(exists[0]["Count"]) == 0)
            {
                Console.WriteLine($"Warning: PartnerID '{partnerId}' does not exist. Log insertion skipped.");
                return;
            }
            var bodyDict = requestBody?.GetType().GetProperties()
                .Where(p => p.GetValue(requestBody) != null)
                .Select(p => $"{p.Name}={p.GetValue(requestBody)}")
                .Take(8)
                .ToList() ?? new List<string>();
            while (bodyDict.Count < 8)
                bodyDict.Add("");
            var insertQuery = @"
        INSERT INTO comApiLogs (PartnerID, Endpoint, ResponseStatus, statCode, ReqsBod1, ReqsBod2, ReqsBod3, ReqsBod4, ReqsBod5, ReqsBod6, ReqsBod7, ReqsBod8)
        VALUES (@PartnerID, @Endpoint, @ResponseStatus, @StatCode, @ReqsBod1, @ReqsBod2, @ReqsBod3, @ReqsBod4, @ReqsBod5, @ReqsBod6, @ReqsBod7, @ReqsBod8)";
            var insertParams = new Dictionary<string, object>
            {
                { "@PartnerID", partnerId },
                { "@Endpoint", endpoint },
                { "@ResponseStatus", responseStatus },
                { "@StatCode", statCode },
                { "@ReqsBod1", bodyDict[0] },
                { "@ReqsBod2", bodyDict[1] },
                { "@ReqsBod3", bodyDict[2] },
                { "@ReqsBod4", bodyDict[3] },
                { "@ReqsBod5", bodyDict[4] },
                { "@ReqsBod6", bodyDict[5] },
                { "@ReqsBod7", bodyDict[6] },
                { "@ReqsBod8", bodyDict[7] }
            };
            ExecuteCommand(_itKhariaConnectionString, insertQuery, insertParams);
        }
    }
}


System.InvalidOperationException: Unable to resolve service for type 'MyFirstApi.Controllers.ApplicationDbContext' while attempting to activate 'MyFirstApi.Controllers.DsrActivityController'.
   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.ThrowHelperUnableToResolveService(Type type, Type requiredBy)
   at lambda_method9(Closure, IServiceProvider, Object[])
   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass6_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at AuthenticationMiddleware.InvokeAsync(HttpContext context) in C:\Users\Magan.Dhaniya-mkt\Desktop\SparshAPIs\SparshWebServices\AuthenticationMiddleware.cs:line 51
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)

HEADERS
=======
Accept: */*
Host: localhost:7223
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36
Accept-Encoding: gzip, deflate, br, zstd
Accept-Language: en-US,en;q=0.9
Referer: https://localhost:7223/swagger/index.html
sec-ch-ua-platform: "Windows"
sec-ch-ua: "Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"
sec-ch-ua-mobile: ?0
sec-fetch-site: same-origin
sec-fetch-mode: cors
sec-fetch-dest: empty
priority: u=1, i
