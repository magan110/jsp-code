using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;

namespace MyFirstApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        public DsrController(DatabaseHelper db) => _db = db;

        // Shared map of endpoint key → (dsrParam, dsrParTy)
        private static readonly Dictionary<string,(string Param, short ParTy)> _paramMap
            = new(StringComparer.OrdinalIgnoreCase)
        {
            ["officeWork"]            = ("53", 53),
            ["internalTeamMeeting"]   = ("52", 52),
            ["newPurchaser"]          = ("50", 50)
            // … add other activity keys here …
        };

        // ----------------------------
        // Office Work
        // ----------------------------
        public class OfficeWorkDto
        {
            public DateTime SubmissionDate { get; set; }
            public DateTime ReportDate     { get; set; }
            public string   WorkRelatedTo  { get; set; } = null!;
            public string   HoursSpent     { get; set; } = null!;
            public string   CreateId       { get; set; } = "SYSTEM";
        }

        [HttpPost("officeWork")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult SubmitOfficeWork([FromBody] OfficeWorkDto dto)
        {
            if (string.IsNullOrWhiteSpace(dto.WorkRelatedTo))
                return BadRequest("WorkRelatedTo is required.");
            if (string.IsNullOrWhiteSpace(dto.HoursSpent))
                return BadRequest("HoursSpent is required.");

            var (dsrParam, dsrParTy) = _paramMap[nameof(SubmitOfficeWork)[..^("Submit".Length)] /* => "officeWork" */];

            var raw = "OFFWK" + DateTime.UtcNow.ToString("yyMMddHHmmss").PadRight(11, '0');
            var docuNumb = raw.Substring(0, 16);

            const string sql = @"
INSERT INTO dptDSRActvt
  (docuNumb, dsrParam, docuDate,
   cusRtlFl, cusRtlCd,
   dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
   dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10,
   deptCode, statFlag,
   createId, createDt,
   updateId, updateDt,
   dsrParTy,
   atchNmId, locaCapr, latitute, lgtitute, cuRtType, areaCode,
   retlStFl, pinCodeN, cityName, district, cstBisTy,
   ordExDat,
   pendWith, ltLgDist, apprRemk, ordInsFl, refOrdNo, isTilRtl,
   tileStck, rtlInTim, rtOutTim)
VALUES
  (@docuNumb, @dsrParam, @reportDate,
   '', '',
   @workRelatedTo, @hoursSpent, '', '', '',
   '', '', '', '', '',
   '', '',
   @createId, @submissionDate,
   '', NULL,
   @dsrParTy,
   '', '', '', '', '', '',
   '', '', '', '', '',
   NULL,
   '', '', '', '', '', '',
   NULL, NULL, NULL);";

            var p = new Dictionary<string, object>
            {
                ["@docuNumb"]       = docuNumb,
                ["@dsrParam"]       = dsrParam,
                ["@dsrParTy"]       = dsrParTy,
                ["@reportDate"]     = dto.ReportDate,
                ["@submissionDate"]= dto.SubmissionDate,
                ["@createId"]       = dto.CreateId,
                ["@workRelatedTo"]  = dto.WorkRelatedTo,
                ["@hoursSpent"]     = dto.HoursSpent
            };

            try
            {
                _db.WebSessBean(sql, p);
                return CreatedAtAction(nameof(SubmitOfficeWork), new { docuNumb }, dto);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        // ----------------------------
        // Internal Team Meetings
        // ----------------------------
        public class InternalTeamMeetingDto
        {
            public DateTime SubmissionDate  { get; set; }
            public DateTime ReportDate      { get; set; }
            public string   MeetWith        { get; set; } = null!;
            public string   DiscussionPoints{ get; set; } = null!;
            public string   Learnings       { get; set; } = null!;
            public string   CreateId        { get; set; } = "SYSTEM";
        }

        [HttpPost("internalTeamMeeting")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult SubmitInternalTeamMeeting([FromBody] InternalTeamMeetingDto dto)
        {
            if (string.IsNullOrWhiteSpace(dto.MeetWith))
                return BadRequest("MeetWith is required.");
            if (string.IsNullOrWhiteSpace(dto.DiscussionPoints))
                return BadRequest("DiscussionPoints is required.");
            if (string.IsNullOrWhiteSpace(dto.Learnings))
                return BadRequest("Learnings is required.");

            var (dsrParam, dsrParTy) = _paramMap[nameof(SubmitInternalTeamMeeting)[..^("Submit".Length)]];

            var raw = "INTMT" + DateTime.UtcNow.ToString("yyMMddHHmmss").PadRight(11, '0');
            var docuNumb = raw.Substring(0, 16);

            const string sql = @"
INSERT INTO dptDSRActvt
  (docuNumb, dsrParam, docuDate,
   cusRtlFl, cusRtlCd,
   dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
   dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10,
   deptCode, statFlag,
   createId, createDt,
   updateId, updateDt,
   dsrParTy,
   atchNmId, locaCapr, latitute, lgtitute, cuRtType, areaCode,
   retlStFl, pinCodeN, cityName, district, cstBisTy,
   ordExDat,
   pendWith, ltLgDist, apprRemk, ordInsFl, refOrdNo, isTilRtl,
   tileStck, rtlInTim, rtOutTim)
VALUES
  (@docuNumb, @dsrParam, @reportDate,
   '', '',
   @meetWith, @discussionPoints, @learnings, '', '',
   '', '', '', '', '',
   '', '',
   @createId, @submissionDate,
   '', NULL,
   @dsrParTy,
   '', '', '', '', '', '',
   '', '', '', '', '',
   NULL,
   '', '', '', '', '', '',
   NULL, NULL, NULL);";

            var p = new Dictionary<string, object>
            {
                ["@docuNumb"]         = docuNumb,
                ["@dsrParam"]         = dsrParam,
                ["@dsrParTy"]         = dsrParTy,
                ["@reportDate"]       = dto.ReportDate,
                ["@submissionDate"]   = dto.SubmissionDate,
                ["@createId"]         = dto.CreateId,
                ["@meetWith"]         = dto.MeetWith,
                ["@discussionPoints"] = dto.DiscussionPoints,
                ["@learnings"]        = dto.Learnings
            };

            try
            {
                _db.WebSessBean(sql, p);
                return CreatedAtAction(nameof(SubmitInternalTeamMeeting), new { docuNumb }, dto);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        // ----------------------------
        // New Purchaser
        // ----------------------------
        public class NewPurchaserDto
        {
            public DateTime SubmissionDate { get; set; }
            public DateTime ReportDate     { get; set; }
            public string   PurchaserName  { get; set; } = null!;
            public string   TopicDiscussed { get; set; } = null!;
            public string   Remarks         { get; set; } = null!;
            public string   CreateId        { get; set; } = "SYSTEM";
        }

        [HttpPost("newPurchaser")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public IActionResult SubmitNewPurchaser([FromBody] NewPurchaserDto dto)
        {
            if (string.IsNullOrWhiteSpace(dto.PurchaserName))
                return BadRequest("PurchaserName is required.");
            if (string.IsNullOrWhiteSpace(dto.TopicDiscussed))
                return BadRequest("TopicDiscussed is required.");
            if (string.IsNullOrWhiteSpace(dto.Remarks))
                return BadRequest("Remarks is required.");

            var (dsrParam, dsrParTy) = _paramMap[nameof(SubmitNewPurchaser)[..^("Submit".Length)]];

            var raw = "NEWPU" + DateTime.UtcNow.ToString("yyMMddHHmmss").PadRight(11, '0');
            var docuNumb = raw.Substring(0, 16);

            const string sql = @"
INSERT INTO dptDSRActvt
  (docuNumb, dsrParam, docuDate,
   cusRtlFl, cusRtlCd,
   dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05,
   dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10,
   deptCode, statFlag,
   createId, createDt,
   updateId, updateDt,
   dsrParTy,
   atchNmId, locaCapr, latitute, lgtitute, cuRtType, areaCode,
   retlStFl, pinCodeN, cityName, district, cstBisTy,
   ordExDat,
   pendWith, ltLgDist, apprRemk, ordInsFl, refOrdNo, isTilRtl,
   tileStck, rtlInTim, rtOutTim)
VALUES
  (@docuNumb, @dsrParam, @reportDate,
   '', '',
   @purchaserName, @topicDiscussed, @remarks, '', '',
   '', '', '', '', '',
   '', '',
   @createId, @submissionDate,
   '', NULL,
   @dsrParTy,
   '', '', '', '', '', '',
   '', '', '', '', '',
   NULL,
   '', '', '', '', '', '',
   NULL, NULL, NULL);";

            var p = new Dictionary<string, object>
            {
                ["@docuNumb"]       = docuNumb,
                ["@dsrParam"]       = dsrParam,
                ["@dsrParTy"]       = dsrParTy,
                ["@reportDate"]     = dto.ReportDate,
                ["@submissionDate"]= dto.SubmissionDate,
                ["@createId"]       = dto.CreateId,
                ["@purchaserName"]  = dto.PurchaserName,
                ["@topicDiscussed"] = dto.TopicDiscussed,
                ["@remarks"]        = dto.Remarks
            };

            try
            {
                _db.WebSessBean(sql, p);
                return CreatedAtAction(nameof(SubmitNewPurchaser), new { docuNumb }, dto);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }
}
