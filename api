using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace MyFirstApi.Controllers
{
    // ===================================================
    // EF CORE ENTITIES (all in one file as requested)
    // ===================================================
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        { }

        public DbSet<DsrActivity> DsrActivities { get; set; }
        public DbSet<DsrActivityBrandAvg> DsrActivityBrandAvgs { get; set; }
        public DbSet<DsrActivityBilling> DsrActivityBillings { get; set; }
        public DbSet<DsrActivityOrderBooked> DsrActivityOrderBookeds { get; set; }
        public DbSet<DsrActivityMarketMis> DsrActivityMarketMises { get; set; }
        public DbSet<DsrActivityGift> DsrActivityGifts { get; set; }

        // Example lookup tables
        public DbSet<Area> Areas { get; set; }
        public DbSet<Retailer> Retailers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            // If your actual table names differ, map them here, e.g.:
            // modelBuilder.Entity<DsrActivity>().ToTable("dptDSRActvt");
            // modelBuilder.Entity<DsrActivityBrandAvg>().ToTable("dptDSRActvtDtl_BrandAvg");
            // ...and so on.
        }
    }

    /// <summary>
    /// Represents an “Area” lookup (for GET /areas).
    /// </summary>
    public class Area
    {
        [Key]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(100)]
        public string AreaDesc { get; set; }

        public bool IsActive { get; set; }
    }

    /// <summary>
    /// Represents a retailer lookup record (for GET /retailers).
    /// </summary>
    public class Retailer
    {
        [Key]
        [StringLength(10)]
        public string Code { get; set; }

        [Required]
        [StringLength(200)]
        public string Name { get; set; }

        [StringLength(200)]
        public string Address { get; set; }

        [StringLength(50)]
        public string City { get; set; }

        public double Latitude { get; set; }
        public double Longitude { get; set; }

        [StringLength(10)]
        public string AreaCode { get; set; }
        public bool IsActive { get; set; }
    }

    /// <summary>
    /// Main DSR activity entity (maps roughly to dptDSRActvt).
    /// </summary>
    public class DsrActivity
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [StringLength(2)]
        public string PurchaserRetailerType { get; set; }

        [Required]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(10)]
        public string CustomerCode { get; set; }

        [StringLength(100)]
        public string CustomerName { get; set; }

        [Required]
        public DateTime ReportDate { get; set; }

        [StringLength(3)]
        public string ParticipationDisplayContest { get; set; }

        [StringLength(1)]
        public string AnyPendingIssues { get; set; }

        [StringLength(1)]
        public string PendingIssueType { get; set; }

        [StringLength(200)]
        public string PendingIssueDetail { get; set; }

        [StringLength(200)]
        public string MarketName { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal WcEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal WpEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal VapEnrolmentSlab { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal BwStockVap { get; set; }

        // Store comma‐separated lists for checkboxes
        public string BrandsSellingWcCsv { get; set; }
        [Column(TypeName = "decimal(18,2)")]
        public decimal? WcIndustryVolume { get; set; }

        public string BrandsSellingWpCsv { get; set; }
        [Column(TypeName = "decimal(18,2)")]
        public decimal? WpIndustryVolume { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? Last3MonthsAvgVap { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthWp { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? CurrentMonthVap { get; set; }

        [StringLength(200)]
        public string DsrRemarks { get; set; }

        [StringLength(2)]
        public string ExceptionReasonCode { get; set; }

        public bool ExceptionApproval { get; set; }

        public DateTime? OrderExecutionDate { get; set; }

        public double YourLatitude { get; set; }
        public double YourLongitude { get; set; }

        public double CustLatitude { get; set; }
        public double CustLongitude { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal DistanceMeters { get; set; }

        public bool IsTileAdhesivesSeller { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal? TileStock { get; set; }

        public DateTime CreatedAt { get; set; }
        [StringLength(50)]
        public string CreatedBy { get; set; }

        // Child navigation properties
        public ICollection<DsrActivityBrandAvg> BrandAverages { get; set; }
        public ICollection<DsrActivityBilling> LastBillingHistory { get; set; }
        public ICollection<DsrActivityOrderBooked> OrdersBooked { get; set; }
        public ICollection<DsrActivityMarketMis> MarketMisEntries { get; set; }
        public ICollection<DsrActivityGift> GiftDistributionEntries { get; set; }
    }

    public class DsrActivityBrandAvg
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(20)]
        public string BrandName { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal AvgWc { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal AvgWp { get; set; }
    }

    public class DsrActivityBilling
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(50)]
        public string ProductName { get; set; }

        [Required]
        [StringLength(20)]
        public string BillingDate { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal Quantity { get; set; }
    }

    public class DsrActivityOrderBooked
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [Required]
        [StringLength(10)]
        public string RepoCategory { get; set; }

        [StringLength(50)]
        public string ProductCode { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal ProdQuantity { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal ProjectedQuantity { get; set; }

        [StringLength(200)]
        public string ActionRemark { get; set; }

        [StringLength(20)]
        public string TargetDate { get; set; }
    }

    public class DsrActivityMarketMis
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [StringLength(10)]
        public string BranchName { get; set; }

        [StringLength(50)]
        public string ProductSku { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal PriceB { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal PriceC { get; set; }
    }

    public class DsrActivityGift
    {
        [Key]
        public int Id { get; set; }

        [Required]
        public int DsrActivityId { get; set; }
        [ForeignKey(nameof(DsrActivityId))]
        public DsrActivity DsrActivity { get; set; }

        [StringLength(10)]
        public string GiftTypeCode { get; set; }

        [Column(TypeName = "decimal(18,2)")]
        public decimal IssueQuantity { get; set; }
    }

    // ===================================================
    // REQUEST MODELS (DTOs) – all in one file
    // ===================================================
    public class DsrActivityRequest
    {
        [Required]
        [StringLength(2)]
        public string PurchaserRetailerType { get; set; }

        [Required]
        [StringLength(10)]
        public string AreaCode { get; set; }

        [Required]
        [StringLength(10)]
        public string CustomerCode { get; set; }

        [StringLength(100)]
        public string CustomerName { get; set; }

        [Required]
        public DateTime ReportDate { get; set; }

        [Required]
        [RegularExpression("Y|N|NA")]
        public string ParticipationDisplayContest { get; set; }

        [Required]
        [RegularExpression("Y|N")]
        public string AnyPendingIssues { get; set; }

        public string PendingIssueType { get; set; }
        public string PendingIssueDetail { get; set; }

        [Required]
        [StringLength(200)]
        public string MarketName { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal WcEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal WpEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal VapEnrolmentSlab { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockWc { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockWp { get; set; }

        [Required]
        [Range(0, double.MaxValue)]
        public decimal BwStockVap { get; set; }

        public List<string> BrandsSellingWc { get; set; } = new List<string>();
        public decimal? WcIndustryVolume { get; set; }

        public List<string> BrandsSellingWp { get; set; } = new List<string>();
        public decimal? WpIndustryVolume { get; set; }

        public decimal? Last3MonthsAvgWc { get; set; }
        public decimal? Last3MonthsAvgWp { get; set; }
        public decimal? Last3MonthsAvgVap { get; set; }

        public decimal? CurrentMonthWc { get; set; }
        public decimal? CurrentMonthWp { get; set; }
        public decimal? CurrentMonthVap { get; set; }

        public List<BrandAvgEntry> BrandAverages { get; set; } = new List<BrandAvgEntry>();
        public List<LastBillingEntry> LastBillingHistory { get; set; } = new List<LastBillingEntry>();
        public List<OrderBookedEntry> OrdersBooked { get; set; } = new List<OrderBookedEntry>();
        public List<MarketMisEntry> MarketMisEntries { get; set; } = new List<MarketMisEntry>();
        public List<GiftDistributionEntry> GiftDistributionEntries { get; set; } = new List<GiftDistributionEntry>();

        public bool IsTileAdhesivesSeller { get; set; }
        public decimal? TileStock { get; set; }

        [StringLength(200)]
        public string DsrRemarks { get; set; }

        public string ExceptionReasonCode { get; set; }
        public bool ExceptionApproval { get; set; }

        public DateTime? OrderExecutionDate { get; set; }

        [Required]
        public double YourLatitude { get; set; }

        [Required]
        public double YourLongitude { get; set; }

        [Required]
        public double CustLatitude { get; set; }

        [Required]
        public double CustLongitude { get; set; }

        public double DistanceMeters { get; set; }
    }

    public class BrandAvgEntry
    {
        [Required]
        public string BrandName { get; set; }

        [Range(0, double.MaxValue)]
        public decimal AvgWc { get; set; }

        [Range(0, double.MaxValue)]
        public decimal AvgWp { get; set; }
    }

    public class LastBillingEntry
    {
        [Required]
        public string ProductName { get; set; }

        [Required]
        [StringLength(20)]
        public string BillingDate { get; set; }

        [Range(0, double.MaxValue)]
        public decimal Quantity { get; set; }
    }

    public class OrderBookedEntry
    {
        [Required]
        [StringLength(10)]
        public string RepoCategory { get; set; }

        [Required]
        [StringLength(50)]
        public string ProductCode { get; set; }

        [Range(0, double.MaxValue)]
        public decimal ProdQuantity { get; set; }

        [Range(0, double.MaxValue)]
        public decimal ProjectedQuantity { get; set; }

        [StringLength(200)]
        public string ActionRemark { get; set; }

        [StringLength(20)]
        public string TargetDate { get; set; }
    }

    public class MarketMisEntry
    {
        [StringLength(10)]
        public string BranchName { get; set; }

        [StringLength(50)]
        public string ProductSku { get; set; }

        [Range(0, double.MaxValue)]
        public decimal PriceB { get; set; }

        [Range(0, double.MaxValue)]
        public decimal PriceC { get; set; }
    }

    public class GiftDistributionEntry
    {
        [StringLength(10)]
        public string GiftTypeCode { get; set; }

        [Range(0, double.MaxValue)]
        public decimal IssueQuantity { get; set; }
    }

    // ===================================================
    // THE ACTUAL CONTROLLER
    // ===================================================
    [ApiController]
    [Route("api/[controller]")]
    public class DsrActivityController : ControllerBase
    {
        private readonly ApplicationDbContext _context;

        public DsrActivityController(ApplicationDbContext context)
        {
            _context = context;
        }

        /// <summary>
        /// GET /api/dsractivity/areas?search=...
        /// </summary>
        [HttpGet("areas")]
        public async Task<IActionResult> GetAreas([FromQuery] string search = "")
        {
            var query = _context.Areas
                                .AsNoTracking()
                                .Where(a => a.IsActive);

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(a =>
                    a.AreaCode.ToLower().Contains(lowered) ||
                    a.AreaDesc.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(a => a.AreaDesc)
                .Select(a => new { a.AreaCode, a.AreaDesc })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// GET /api/dsractivity/retailers?areaCode=XXX&search=YYY
        /// </summary>
        [HttpGet("retailers")]
        public async Task<IActionResult> GetRetailers(
            [FromQuery] string areaCode,
            [FromQuery] string search = "")
        {
            if (string.IsNullOrWhiteSpace(areaCode))
                return BadRequest("areaCode is required.");

            var query = _context.Retailers
                                .AsNoTracking()
                                .Where(r => r.IsActive && r.AreaCode == areaCode.Trim());

            if (!string.IsNullOrWhiteSpace(search))
            {
                var lowered = search.Trim().ToLower();
                query = query.Where(r =>
                    r.Code.ToLower().Contains(lowered) ||
                    r.Name.ToLower().Contains(lowered));
            }

            var result = await query
                .OrderBy(r => r.Name)
                .Select(r => new
                {
                    r.Code,
                    r.Name,
                    r.Address,
                    r.City,
                    r.Latitude,
                    r.Longitude
                })
                .Take(50)
                .ToListAsync();

            return Ok(result);
        }

        /// <summary>
        /// POST /api/dsractivity/submit
        /// Accepts entire DSR submission.
        /// </summary>
        [HttpPost("submit")]
        public async Task<IActionResult> Submit([FromBody] DsrActivityRequest request)
        {
            if (request == null)
                return BadRequest("Request body is missing.");

            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            // Map to EF entity
            var dsr = new DsrActivity
            {
                PurchaserRetailerType = request.PurchaserRetailerType.Trim(),
                AreaCode = request.AreaCode.Trim(),
                CustomerCode = request.CustomerCode.Trim(),
                CustomerName = request.CustomerName?.Trim(),
                ReportDate = request.ReportDate,
                ParticipationDisplayContest = request.ParticipationDisplayContest,
                AnyPendingIssues = request.AnyPendingIssues,
                PendingIssueType = request.PendingIssueType,
                PendingIssueDetail = request.PendingIssueDetail,
                MarketName = request.MarketName?.Trim(),
                WcEnrolmentSlab = request.WcEnrolmentSlab,
                WpEnrolmentSlab = request.WpEnrolmentSlab,
                VapEnrolmentSlab = request.VapEnrolmentSlab,
                BwStockWc = request.BwStockWc,
                BwStockWp = request.BwStockWp,
                BwStockVap = request.BwStockVap,
                BrandsSellingWcCsv = (request.BrandsSellingWc != null)
                                     ? string.Join(",", request.BrandsSellingWc)
                                     : null,
                WcIndustryVolume = request.WcIndustryVolume,
                BrandsSellingWpCsv = (request.BrandsSellingWp != null)
                                     ? string.Join(",", request.BrandsSellingWp)
                                     : null,
                WpIndustryVolume = request.WpIndustryVolume,
                Last3MonthsAvgWc = request.Last3MonthsAvgWc,
                Last3MonthsAvgWp = request.Last3MonthsAvgWp,
                Last3MonthsAvgVap = request.Last3MonthsAvgVap,
                CurrentMonthWc = request.CurrentMonthWc,
                CurrentMonthWp = request.CurrentMonthWp,
                CurrentMonthVap = request.CurrentMonthVap,
                DsrRemarks = request.DsrRemarks?.Trim(),
                ExceptionReasonCode = request.ExceptionReasonCode,
                ExceptionApproval = request.ExceptionApproval,
                OrderExecutionDate = request.OrderExecutionDate,
                YourLatitude = request.YourLatitude,
                YourLongitude = request.YourLongitude,
                CustLatitude = request.CustLatitude,
                CustLongitude = request.CustLongitude,
                DistanceMeters = (decimal)request.DistanceMeters,
                IsTileAdhesivesSeller = request.IsTileAdhesivesSeller,
                TileStock = request.TileStock,
                CreatedAt = DateTime.UtcNow,
                CreatedBy = User?.Identity?.Name ?? "UNKNOWN"
            };

            // Populate child collections
            if (request.BrandAverages != null && request.BrandAverages.Any())
            {
                dsr.BrandAverages = request.BrandAverages
                    .Select(b => new DsrActivityBrandAvg
                    {
                        BrandName = b.BrandName,
                        AvgWc = b.AvgWc,
                        AvgWp = b.AvgWp
                    }).ToList();
            }

            if (request.LastBillingHistory != null && request.LastBillingHistory.Any())
            {
                dsr.LastBillingHistory = request.LastBillingHistory
                    .Select(b => new DsrActivityBilling
                    {
                        ProductName = b.ProductName,
                        BillingDate = b.BillingDate,
                        Quantity = b.Quantity
                    }).ToList();
            }

            if (request.OrdersBooked != null && request.OrdersBooked.Any())
            {
                dsr.OrdersBooked = request.OrdersBooked
                    .Select(o => new DsrActivityOrderBooked
                    {
                        RepoCategory = o.RepoCategory,
                        ProductCode = o.ProductCode,
                        ProdQuantity = o.ProdQuantity,
                        ProjectedQuantity = o.ProjectedQuantity,
                        ActionRemark = o.ActionRemark,
                        TargetDate = o.TargetDate
                    }).ToList();
            }

            if (request.MarketMisEntries != null && request.MarketMisEntries.Any())
            {
                dsr.MarketMisEntries = request.MarketMisEntries
                    .Select(m => new DsrActivityMarketMis
                    {
                        BranchName = m.BranchName,
                        ProductSku = m.ProductSku,
                        PriceB = m.PriceB,
                        PriceC = m.PriceC
                    }).ToList();
            }

            if (request.GiftDistributionEntries != null && request.GiftDistributionEntries.Any())
            {
                dsr.GiftDistributionEntries = request.GiftDistributionEntries
                    .Select(g => new DsrActivityGift
                    {
                        GiftTypeCode = g.GiftTypeCode,
                        IssueQuantity = g.IssueQuantity
                    }).ToList();
            }

            _context.DsrActivities.Add(dsr);
            await _context.SaveChangesAsync();

            return Ok(new
            {
                message = "DSR activity submitted successfully.",
                activityId = dsr.Id
            });
        }
    }
}
