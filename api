using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;

namespace MyFirstApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public DsrController(DatabaseHelper db)
        {
            _db = db;
        }

        [HttpGet]
        public IActionResult GetAll()
        {
            try
            {
                var rows = _db.WebSessBean("SELECT * FROM dptDSRActvt", new Dictionary<string, object>());
                return Ok(rows);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpGet("{docuNumb}")]
        public IActionResult Get(string docuNumb)
        {
            try
            {
                var rows = _db.WebSessBean(
                    "SELECT * FROM dptDSRActvt WHERE docuNumb = @DocuNumb",
                    new Dictionary<string, object> { ["@DocuNumb"] = docuNumb });

                if (rows.Count == 0)
                    return NotFound();

                return Ok(rows[0]);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPost]
        public IActionResult Create([FromBody] DsrRequest req)
        {
            try
            {
                var sql = @"
                    INSERT INTO dptDSRActvt
                      (docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd, dsrRem01, dsrRem02,
                       dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08,
                       areaCode, cuRtType, ordExDat, createDt)
                    VALUES
                      (@docuNumb, @docuDate, @dsrParam, @cusRtlFl, @cusRtlCd, @dsrRem01, @dsrRem02,
                       @dsrRem03, @dsrRem04, @dsrRem05, @dsrRem06, @dsrRem07, @dsrRem08,
                       @areaCode, @cuRtType, @ordExDat, GETDATE())";

                var p = new Dictionary<string, object>
                {
                    ["@docuNumb"] = req.docuNumb,
                    ["@docuDate"] = req.docuDate,
                    ["@dsrParam"] = req.dsrParam,
                    ["@cusRtlFl"] = req.cusRtlFl,
                    ["@cusRtlCd"] = req.cusRtlCd,
                    ["@dsrRem01"] = req.dsrRem01,
                    ["@dsrRem02"] = req.dsrRem02,
                    ["@dsrRem03"] = req.dsrRem03,
                    ["@dsrRem04"] = req.dsrRem04,
                    ["@dsrRem05"] = req.dsrRem05,
                    ["@dsrRem06"] = req.dsrRem06,
                    ["@dsrRem07"] = req.dsrRem07,
                    ["@dsrRem08"] = req.dsrRem08,
                    ["@areaCode"] = req.areaCode,
                    ["@cuRtType"] = req.cuRtType,
                    ["@ordExDat"] = req.ordExDat ?? (object)DBNull.Value
                };

                _db.WebSessBean(sql, p);
                return CreatedAtAction(nameof(Get), new { docuNumb = req.docuNumb }, req);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpPut("{docuNumb}")]
        public IActionResult Update(string docuNumb, [FromBody] DsrRequest req)
        {
            try
            {
                var sql = @"
                    UPDATE dptDSRActvt
                       SET docuDate = @docuDate,
                           dsrParam = @dsrParam,
                           cusRtlFl = @cusRtlFl,
                           cusRtlCd = @cusRtlCd,
                           dsrRem01 = @dsrRem01,
                           dsrRem02 = @dsrRem02,
                           dsrRem03 = @dsrRem03,
                           dsrRem04 = @dsrRem04,
                           dsrRem05 = @dsrRem05,
                           dsrRem06 = @dsrRem06,
                           dsrRem07 = @dsrRem07,
                           dsrRem08 = @dsrRem08,
                           areaCode = @areaCode,
                           cuRtType = @cuRtType,
                           ordExDat = @ordExDat,
                           modDt    = GETDATE()
                     WHERE docuNumb = @docuNumb";

                var p = new Dictionary<string, object>
                {
                    ["@docuNumb"] = docuNumb,
                    ["@docuDate"] = req.docuDate,
                    ["@dsrParam"] = req.dsrParam,
                    ["@cusRtlFl"] = req.cusRtlFl,
                    ["@cusRtlCd"] = req.cusRtlCd,
                    ["@dsrRem01"] = req.dsrRem01,
                    ["@dsrRem02"] = req.dsrRem02,
                    ["@dsrRem03"] = req.dsrRem03,
                    ["@dsrRem04"] = req.dsrRem04,
                    ["@dsrRem05"] = req.dsrRem05,
                    ["@dsrRem06"] = req.dsrRem06,
                    ["@dsrRem07"] = req.dsrRem07,
                    ["@dsrRem08"] = req.dsrRem08,
                    ["@areaCode"] = req.areaCode,
                    ["@cuRtType"] = req.cuRtType,
                    ["@ordExDat"] = req.ordExDat ?? (object)DBNull.Value
                };

                var rowsAffected = _db.WebSessBean(sql, p).Count;
                if (rowsAffected == 0)
                    return NotFound();

                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        [HttpDelete("{docuNumb}")]
        public IActionResult Delete(string docuNumb)
        {
            try
            {
                var sql = "DELETE FROM dptDSRActvt WHERE docuNumb = @docuNumb";
                var p = new Dictionary<string, object> { ["@docuNumb"] = docuNumb };

                var rowsAffected = _db.WebSessBean(sql, p).Count;
                if (rowsAffected == 0)
                    return NotFound();

                return NoContent();
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }

    public class DsrRequest
    {
        public string docuNumb { get; set; }
        public DateTime docuDate { get; set; }
        public string dsrParam { get; set; }
        public string cusRtlFl { get; set; }
        public string cusRtlCd { get; set; }
        public string dsrRem01 { get; set; }
        public string dsrRem02 { get; set; }
        public string dsrRem03 { get; set; }
        public string dsrRem04 { get; set; }
        public string dsrRem05 { get; set; }
        public string dsrRem06 { get; set; }
        public string dsrRem07 { get; set; }
        public string dsrRem08 { get; set; }
        public string areaCode { get; set; }
        public string cuRtType { get; set; }
        public DateTime? ordExDat { get; set; }
    }
}


String or binary data would be truncated.
The statement has been terminated.
