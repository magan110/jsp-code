using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;

namespace MyFirstApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]  // require JWT + PartnerID header
    public class DsrController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        private readonly string _partnerId;

        public DsrController(DatabaseHelper db, IHttpContextAccessor httpCtxAccessor)
        {
            _db = db;
            // grab PartnerID from the header
            _partnerId = httpCtxAccessor.HttpContext.Request.Headers["PartnerID"];
        }

        // GET api/dsr
        [HttpGet]
        public IActionResult GetAll()
        {
            var path = HttpContext.Request.Path.Value;
            try
            {
                var rows = _db.WebSessBean(
                    "SELECT * FROM dptDSRActvt",
                    new Dictionary<string, object>());

                _db.InsertIntoLog(_partnerId, path, "OK", 200, null);
                return Ok(rows);
            }
            catch (Exception ex)
            {
                _db.InsertIntoLog(_partnerId, path, "ERROR", 500, null);
                return StatusCode(500, ex.Message);
            }
        }

        // GET api/dsr/{docuNumb}
        [HttpGet("{docuNumb}")]
        public IActionResult Get(string docuNumb)
        {
            var path = HttpContext.Request.Path.Value;
            try
            {
                var rows = _db.WebSessBean(
                    "SELECT * FROM dptDSRActvt WHERE docuNumb = @DocuNumb",
                    new Dictionary<string, object> { ["@DocuNumb"] = docuNumb });

                if (rows.Count == 0)
                {
                    _db.InsertIntoLog(_partnerId, path, "NotFound", 404, new { docuNumb });
                    return NotFound();
                }

                _db.InsertIntoLog(_partnerId, path, "OK", 200, new { docuNumb });
                return Ok(rows[0]);
            }
            catch (Exception ex)
            {
                _db.InsertIntoLog(_partnerId, path, "ERROR", 500, new { docuNumb });
                return StatusCode(500, ex.Message);
            }
        }

        // POST api/dsr
        [HttpPost]
        public IActionResult Create([FromBody] DsrRequest req)
        {
            var path = HttpContext.Request.Path.Value;
            try
            {
                var sql = @"
                    INSERT INTO dptDSRActvt
                      (docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd, dsrRem01, dsrRem02,
                       dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08,
                       areaCode, cuRtType, ordExDat, createId, createDt)
                    VALUES
                      (@docuNumb, @docuDate, @dsrParam, @cusRtlFl, @cusRtlCd, @dsrRem01, @dsrRem02,
                       @dsrRem03, @dsrRem04, @dsrRem05, @dsrRem06, @dsrRem07, @dsrRem08,
                       @areaCode, @cuRtType, @ordExDat, @createId, GETDATE())";

                var p = new Dictionary<string, object>()
                {
                    ["@docuNumb"] = req.docuNumb,
                    ["@docuDate"] = req.docuDate,
                    ["@dsrParam"] = req.dsrParam,
                    ["@cusRtlFl"] = req.cusRtlFl,
                    ["@cusRtlCd"] = req.cusRtlCd,
                    ["@dsrRem01"] = req.dsrRem01,
                    ["@dsrRem02"] = req.dsrRem02,
                    ["@dsrRem03"] = req.dsrRem03,
                    ["@dsrRem04"] = req.dsrRem04,
                    ["@dsrRem05"] = req.dsrRem05,
                    ["@dsrRem06"] = req.dsrRem06,
                    ["@dsrRem07"] = req.dsrRem07,
                    ["@dsrRem08"] = req.dsrRem08,
                    ["@areaCode"] = req.areaCode,
                    ["@cuRtType"] = req.cuRtType,
                    ["@ordExDat"] = req.ordExDat,
                    ["@createId"] = _partnerId
                };

                _db.KkrSessBean(sql, p); // use bwlive or itKharia as appropriate
                _db.InsertIntoLog(_partnerId, path, "Created", 201, req);

                return CreatedAtAction(nameof(Get), new { docuNumb = req.docuNumb }, req);
            }
            catch (Exception ex)
            {
                _db.InsertIntoLog(_partnerId, path, "ERROR", 500, req);
                return StatusCode(500, ex.Message);
            }
        }

        // PUT api/dsr/{docuNumb}
        [HttpPut("{docuNumb}")]
        public IActionResult Update(string docuNumb, [FromBody] DsrRequest req)
        {
            var path = HttpContext.Request.Path.Value;
            try
            {
                var sql = @"
                    UPDATE dptDSRActvt
                       SET docuDate = @docuDate,
                           dsrParam = @dsrParam,
                           cusRtlFl = @cusRtlFl,
                           cusRtlCd = @cusRtlCd,
                           dsrRem01 = @dsrRem01,
                           dsrRem02 = @dsrRem02,
                           dsrRem03 = @dsrRem03,
                           dsrRem04 = @dsrRem04,
                           dsrRem05 = @dsrRem05,
                           dsrRem06 = @dsrRem06,
                           dsrRem07 = @dsrRem07,
                           dsrRem08 = @dsrRem08,
                           areaCode = @areaCode,
                           cuRtType = @cuRtType,
                           ordExDat = @ordExDat,
                           modId    = @modId,
                           modDt    = GETDATE()
                     WHERE docuNumb = @docuNumb";

                var p = new Dictionary<string, object>()
                {
                    ["@docuNumb"] = docuNumb,
                    ["@docuDate"] = req.docuDate,
                    ["@dsrParam"] = req.dsrParam,
                    ["@cusRtlFl"] = req.cusRtlFl,
                    ["@cusRtlCd"] = req.cusRtlCd,
                    ["@dsrRem01"] = req.dsrRem01,
                    ["@dsrRem02"] = req.dsrRem02,
                    ["@dsrRem03"] = req.dsrRem03,
                    ["@dsrRem04"] = req.dsrRem04,
                    ["@dsrRem05"] = req.dsrRem05,
                    ["@dsrRem06"] = req.dsrRem06,
                    ["@dsrRem07"] = req.dsrRem07,
                    ["@dsrRem08"] = req.dsrRem08,
                    ["@areaCode"] = req.areaCode,
                    ["@cuRtType"] = req.cuRtType,
                    ["@ordExDat"] = req.ordExDat,
                    ["@modId"] = _partnerId
                };

                // Fix for the CS0039 error in the Update method
                var rowsAffected = _db.KkrSessBean(sql, p).Count; // Use .Count to get the number of rows affected
                _db.InsertIntoLog(_partnerId, path, "OK", 200, req);

                if (rowsAffected == 0)
                    return NotFound();

                return NoContent();
            }
            catch (Exception ex)
            {
                _db.InsertIntoLog(_partnerId, path, "ERROR", 500, req);
                return StatusCode(500, ex.Message);
            }
        }

        // Fix for the CS0019 error in the Delete method
        [HttpDelete("{docuNumb}")]
        public IActionResult Delete(string docuNumb)
        {
            var path = HttpContext.Request.Path.Value;
            try
            {
                var sql = "DELETE FROM dptDSRActvt WHERE docuNumb = @docuNumb";
                var p = new Dictionary<string, object> { ["@docuNumb"] = docuNumb };

                var rowsAffected = _db.KkrSessBean(sql, p).Count; // Use .Count to get the number of rows affected
                _db.InsertIntoLog(_partnerId, path, "Deleted", 200, new { docuNumb });

                if (rowsAffected == 0)
                    return NotFound();

                return NoContent();
            }
            catch (Exception ex)
            {
                _db.InsertIntoLog(_partnerId, path, "ERROR", 500, new { docuNumb });
                return StatusCode(500, ex.Message);
            }
        }
    }

    /// <summary>
    /// DTO for Create/Update payload
    /// </summary>
    public class DsrRequest
    {
        public string docuNumb { get; set; }
        public DateTime docuDate { get; set; }
        public string dsrParam { get; set; }
        public string cusRtlFl { get; set; }
        public string cusRtlCd { get; set; }
        public string dsrRem01 { get; set; }
        public string dsrRem02 { get; set; }
        public string dsrRem03 { get; set; }
        public string dsrRem04 { get; set; }
        public string dsrRem05 { get; set; }
        public string dsrRem06 { get; set; }
        public string dsrRem07 { get; set; }
        public string dsrRem08 { get; set; }
        public string areaCode { get; set; }
        public string cuRtType { get; set; }
        public DateTime? ordExDat { get; set; }
    }
}


{
  "openapi": "3.0.1",
  "info": {
    "title": "MyFirstApi",
    "version": "v1",
    "description": "Swagger JSON for Token and DSR endpoints"
  },
  "servers": [
    {
      "url": "https://localhost:5001",
      "description": "Local server"
    }
  ],
  "paths": {
    "/api/token/generate": {
      "post": {
        "summary": "Generate a JWT for a Partner",
        "operationId": "GenerateToken",
        "tags": [
          "Token"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "JWT generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (missing PartnerID or SecretKey)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/dsr": {
      "get": {
        "summary": "Retrieve all DSR records",
        "operationId": "GetAllDsr",
        "tags": [
          "DSR"
        ],
        "security": [
          {
            "bearerAuth": [],
            "PartnerIDAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of DSR records",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DsrRecord"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new DSR record",
        "operationId": "CreateDsr",
        "tags": [
          "DSR"
        ],
        "security": [
          {
            "bearerAuth": [],
            "PartnerIDAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DsrRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "DSR created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DsrRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/dsr/{docuNumb}": {
      "parameters": [
        {
          "name": "docuNumb",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Document number of the DSR record"
        }
      ],
      "get": {
        "summary": "Retrieve a single DSR record",
        "operationId": "GetDsrByDocuNumb",
        "tags": [
          "DSR"
        ],
        "security": [
          {
            "bearerAuth": [],
            "PartnerIDAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "DSR record found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DsrRecord"
                }
              }
            }
          },
          "404": {
            "description": "DSR not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update an existing DSR record",
        "operationId": "UpdateDsr",
        "tags": [
          "DSR"
        ],
        "security": [
          {
            "bearerAuth": [],
            "PartnerIDAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DsrRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "DSR updated"
          },
          "404": {
            "description": "DSR not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a DSR record",
        "operationId": "DeleteDsr",
        "tags": [
          "DSR"
        ],
        "security": [
          {
            "bearerAuth": [],
            "PartnerIDAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "DSR deleted"
          },
          "404": {
            "description": "DSR not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "PartnerIDAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "PartnerID"
      }
    },
    "schemas": {
      "TokenRequest": {
        "type": "object",
        "required": [
          "PartnerID",
          "SecretKey"
        ],
        "properties": {
          "PartnerID": {
            "type": "string"
          },
          "SecretKey": {
            "type": "string"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "DsrRequest": {
        "type": "object",
        "required": [
          "docuNumb",
          "docuDate",
          "dsrParam",
          "cusRtlFl",
          "cusRtlCd",
          "areaCode"
        ],
        "properties": {
          "docuNumb": {
            "type": "string"
          },
          "docuDate": {
            "type": "string",
            "format": "date"
          },
          "dsrParam": {
            "type": "string"
          },
          "cusRtlFl": {
            "type": "string"
          },
          "cusRtlCd": {
            "type": "string"
          },
          "dsrRem01": {
            "type": "string"
          },
          "dsrRem02": {
            "type": "string"
          },
          "dsrRem03": {
            "type": "string"
          },
          "dsrRem04": {
            "type": "string"
          },
          "dsrRem05": {
            "type": "string"
          },
          "dsrRem06": {
            "type": "string"
          },
          "dsrRem07": {
            "type": "string"
          },
          "dsrRem08": {
            "type": "string"
          },
          "areaCode": {
            "type": "string"
          },
          "cuRtType": {
            "type": "string"
          },
          "ordExDat": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "DsrRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DsrRequest"
          },
          {
            "type": "object",
            "properties": {
              "createId": {
                "type": "string"
              },
              "createDt": {
                "type": "string",
                "format": "date-time"
              },
              "modId": {
                "type": "string"
              },
              "modDt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    }
  }
}
