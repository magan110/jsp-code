using System;
using System.Collections.Generic;
using System.Data.SqlClient; // Ensure this namespace is available
using System.Linq;

namespace sparshWebService.DataAccess
{
    public class DatabaseHelper
    {
        private readonly string _bwliveConnectionString;
        private readonly string _itKhariaConnectionString;
        private readonly string _imageDataConnectionString;

        public DatabaseHelper(string bwliveConnectionString, string itKhariaConnectionString, string imageDataConnectionString)
        {
            _bwliveConnectionString = bwliveConnectionString;
            _itKhariaConnectionString = itKhariaConnectionString;
            _imageDataConnectionString = imageDataConnectionString;
        }

        // Public getters for connection strings
        public string BwliveConnectionString => _bwliveConnectionString;
        public string ItKhariaConnectionString => _itKhariaConnectionString;
        public string ImageDataConnectionString => _imageDataConnectionString;

        // Utility: ExecuteCommand by dbKey
        public int ExecuteCommandForDb(string dbKey, string query, Dictionary<string, object> parameters)
        {
            string connStr = dbKey.ToLower() switch
            {
                "bwlive" => _bwliveConnectionString,
                "itkharia" => _itKhariaConnectionString,
                "imagedata" => _imageDataConnectionString,
                _ => throw new ArgumentException("Unknown DB key provided.", nameof(dbKey))
            };
            return ExecuteCommand(connStr, query, parameters);
        }

        // General method to execute SELECT queries for any connection string
        // Made this public if DsrActivityController needs a generic select for complex/dynamic queries not fitting WebSessBean
        public List<Dictionary<string, object>> ExecuteSelectQuery(string connectionString, string query, Dictionary<string, object> parameters)
        {
            var resultList = new List<Dictionary<string, object>>();
            using (var conn = new SqlConnection(connectionString))
            using (var cmd = new SqlCommand(query, conn))
            {
                if (parameters != null)
                {
                    foreach (var param in parameters)
                    {
                        cmd.Parameters.AddWithValue(param.Key, param.Value ?? DBNull.Value);
                    }
                }

                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var row = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase); // Case-insensitive keys
                        for (int i = 0; i < reader.FieldCount; i++)
                        {
                            row[reader.GetName(i)] = reader.IsDBNull(i) ? DBNull.Value : reader[i];
                        }
                        resultList.Add(row);
                    }
                }
            }
            return resultList;
        }

        // General method to execute INSERT, UPDATE, or DELETE queries for any connection string
        public int ExecuteCommand(string connectionString, string query, Dictionary<string, object> parameters)
        {
            using (var conn = new SqlConnection(connectionString))
            using (var cmd = new SqlCommand(query, conn))
            {
                if (parameters != null)
                {
                    foreach (var param in parameters)
                    {
                        cmd.Parameters.AddWithValue(param.Key, param.Value ?? DBNull.Value);
                    }
                }
                conn.Open();
                return cmd.ExecuteNonQuery(); // Returns the number of rows affected
            }
        }

        // SELECT helpers specific to connection strings
        public List<Dictionary<string, object>> WebSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_bwliveConnectionString, query, parameters);

        public List<Dictionary<string, object>> KkrSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_itKhariaConnectionString, query, parameters);

        public List<Dictionary<string, object>> ImgSessBean(string query, Dictionary<string, object> parameters)
            => ExecuteSelectQuery(_imageDataConnectionString, query, parameters);

        public string GetSecretKey(string partnerId)
        {
            var query = "SELECT secrtKey FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            var result = KkrSessBean(query, parameters); // Uses ItKharia DB
            if (result.Count > 0 && result[0]["secrtKey"] != DBNull.Value)
                return result[0]["secrtKey"]?.ToString() ?? throw new Exception("SecretKey is null in database.");
            throw new Exception("SecretKey not found for the given PartnerID.");
        }

        public List<string> GetAllowedAPIs(string partnerId)
        {
            var query = @"SELECT allwdAPI FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            var result = KkrSessBean(query, parameters); // Uses ItKharia DB
            if (result.Count > 0 && result[0]["allwdAPI"] != DBNull.Value)
            {
                var allowedApis = result[0]["allwdAPI"]?.ToString();
                return allowedApis?.Split(',').Select(api => api.Trim().ToLower()).ToList() ?? new List<string>();
            }
            // Return empty list instead of throwing exception if no APIs are configured,
            // or throw if configuration is mandatory. For safety, let's assume it's not an error if empty.
            return new List<string>();
        }

        public void InsertIntoLog(string partnerId, string endpoint, string responseStatus, int statCode, object? requestBody)
        {
            // Check if partnerId exists (optional, but good practice)
            // var checkQuery = "SELECT COUNT(*) AS Count FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            // var checkParams = new Dictionary<string, object> { { "@PartnerID", partnerId } };
            // var existsResult = KkrSessBean(checkQuery, checkParams);
            // if (existsResult.Count == 0 || Convert.ToInt32(existsResult[0]["Count"]) == 0)
            // {
            //     Console.WriteLine($"Warning: PartnerID '{partnerId}' does not exist. Log insertion skipped for endpoint {endpoint}.");
            //     return; 
            // }

            // Simplified logging of request body properties
            var bodyParts = new string[8];
            for (int i = 0; i < 8; i++) bodyParts[i] = string.Empty; // Initialize

            if (requestBody != null)
            {
                var properties = requestBody.GetType().GetProperties();
                int index = 0;
                foreach (var prop in properties.Take(8)) // Take first 8 properties
                {
                    if (index < 8)
                    {
                        try
                        {
                            var propValue = prop.GetValue(requestBody);
                            bodyParts[index] = $"{prop.Name}={(propValue?.ToString() ?? "null")}";
                            if (bodyParts[index].Length > 250) bodyParts[index] = bodyParts[index].Substring(0, 250); // Truncate
                        }
                        catch
                        {
                            bodyParts[index] = $"{prop.Name}=<ErrorReadingValue>";
                        }
                        index++;
                    }
                    else
                    {
                        break;
                    }
                }
            }

            var insertQuery = @"
                INSERT INTO comApiLogs (PartnerID, Endpoint, ResponseStatus, statCode, ReqsBod1, ReqsBod2, ReqsBod3, ReqsBod4, ReqsBod5, ReqsBod6, ReqsBod7, ReqsBod8, logDate)
                VALUES (@PartnerID, @Endpoint, @ResponseStatus, @StatCode, @ReqsBod1, @ReqsBod2, @ReqsBod3, @ReqsBod4, @ReqsBod5, @ReqsBod6, @ReqsBod7, @ReqsBod8, GETDATE())";

            var insertParams = new Dictionary<string, object>
            {
                { "@PartnerID", partnerId }, { "@Endpoint", endpoint }, { "@ResponseStatus", responseStatus }, { "@StatCode", statCode },
                { "@ReqsBod1", bodyParts[0] }, { "@ReqsBod2", bodyParts[1] }, { "@ReqsBod3", bodyParts[2] }, { "@ReqsBod4", bodyParts[3] },
                { "@ReqsBod5", bodyParts[4] }, { "@ReqsBod6", bodyParts[5] }, { "@ReqsBod7", bodyParts[6] }, { "@ReqsBod8", bodyParts[7] }
            };

            try
            {
                ExecuteCommand(_itKhariaConnectionString, insertQuery, insertParams);
            }
            catch (Exception ex)
            {
                // Log this error to a local file or console, as DB logging itself failed.
                Console.WriteLine($"CRITICAL: Failed to insert API log: {ex.Message}");
            }
        }
    }
}



using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations; // For [Required]

namespace sparshWebService.DTOs
{
    // Generic API Response DTO
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public T? Data { get; set; } // Nullable if T can be a reference type
        public List<string>? Errors { get; set; }

        public ApiResponse(bool success, string message, T? data = default, List<string>? errors = null)
        {
            Success = success;
            Message = message;
            Data = data;
            Errors = errors ?? new List<string>();
        }
    }

    // Main DTO for submitting or retrieving a full DSR
    public class DsrActivityFullDto
    {
        [Required]
        public string LoginIdM { get; set; }
        public string? DocuNumb { get; set; }
        [Required]
        public string Proctype { get; set; } // "Add", "Update", "Delete"

        [Required]
        public string DocuDate { get; set; } // Expected "yyyy-MM-dd"
        public string? DsrParam { get; set; }
        public string? CusRtlFl { get; set; }
        public string? CusRtlCd { get; set; }
        public string? AreaCode { get; set; }
        public string? CusRtlNm { get; set; }
        public string? CuRtType { get; set; }

        public string? KycStatus { get; set; }
        public string? MarketName { get; set; }
        public string? DisplayContestParticipation { get; set; }
        public string? PendingIssueStatus { get; set; }
        public string? PendingIssueDetailType { get; set; }
        public string? PendingIssueSpecifyText { get; set; }

        public decimal? EnrolWCSlab { get; set; }
        public decimal? EnrolWCPSlab { get; set; }
        public decimal? EnrolVAPSlab { get; set; }

        public decimal? BwStockWC { get; set; }
        public decimal? BwStockWCP { get; set; }
        public decimal? BwStockVAP { get; set; }

        public List<string>? BrandsSellingWC { get; set; }
        public decimal? WcIndustryVolume { get; set; }
        public List<string>? BrandsSellingWCP { get; set; }
        public decimal? WcpIndustryVolume { get; set; }

        public decimal? Last3MonthsBwWC { get; set; }
        public decimal? Last3MonthsBwWCP { get; set; }
        public decimal? Last3MonthsBwVAP { get; set; }

        public decimal? CurrentMonthBwWC { get; set; }
        public decimal? CurrentMonthBwWCP { get; set; }
        public decimal? CurrentMonthBwVAP { get; set; }

        public List<DsrCompetitorAvgSaleDto>? CompetitorAvgSales { get; set; }
        public List<DsrLastBillingDto>? LastBillings { get; set; }
        public List<DsrOrderItemDto>? OrderItems { get; set; }
        public List<DsrMarketWcpSkuDto>? MarketWcpSkus { get; set; }

        public string? OrderExecDate { get; set; } // yyyy-MM-dd
        public string? OtherRemarks { get; set; }

        public List<DsrGiftItemDto>? GiftItems { get; set; }

        public string? IsTileAdhesiveSeller { get; set; }
        public decimal? TileAdhesiveStock { get; set; }

        public string? GeoLatit { get; set; }
        public string? GeoLongt { get; set; }
        public string? PurchaserLatit { get; set; }
        public string? PurchaserLongt { get; set; }
        public string? LocationCapturedAddress { get; set; }
        public string? DistanceExceptionReason { get; set; }

        // These will be populated by the controller before saving to dptDSRActvt's generic DsrRemXX columns
        // Or, the controller directly uses the specific fields above to update DsrRemXX columns.
        // These are not expected directly from client for the FullDto submission, but are part of the DB mapping logic.
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem01 { get; set; }
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem02 { get; set; }
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem03 { get; set; }
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem04 { get; set; }
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem05 { get; set; }
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem06 { get; set; }
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem07 { get; set; }
        [Newtonsoft.Json.JsonIgnore][System.Text.Json.Serialization.JsonIgnore] public string? DsrRem08 { get; set; }
    }

    public class DsrCompetitorAvgSaleDto
    {
        public string? BrandName { get; set; }
        public decimal? WcQty { get; set; }
        public decimal? WcpQty { get; set; }
    }

    public class DsrLastBillingDto
    {
        public string? ProductName { get; set; }
        public string? Date { get; set; }
        public decimal Quantity { get; set; }
    }

    public class DsrOrderItemDto
    {
        public string? RepoCatg { get; set; }
        public string? ProdCode { get; set; }
        public decimal? QuantityInBags { get; set; }
        public decimal? QuantityInMT { get; set; }
    }

    public class DsrMarketWcpSkuDto
    {
        public string? BrandName { get; set; }
        public string? PrdCodMk { get; set; }
        public decimal? BPriceVl { get; set; }
        public decimal? CPriceVl { get; set; }
    }

    public class DsrGiftItemDto
    {
        public string? GiftTypeCode { get; set; }
        public int? Quantity { get; set; }
    }

    public class AreaCodeDto
    {
        public string AreaCode { get; set; } = string.Empty;
        public string AreaDesc { get; set; } = string.Empty;
    }

    public class RetailerInfoDto
    {
        public string? Code { get; set; }
        public string? Name { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public double? Latitude { get; set; }
        public double? Longitude { get; set; }
        public string? KycStatus { get; set; }
        public string? MobileNo { get; set; }
        public string? MarketName { get; set; }
    }

    public class DsrHeaderSubmitDto
    {
        [Required] public string LoginIdM { get; set; } = string.Empty;
        public string? DocuNumb { get; set; }
        [Required] public string DocuDate { get; set; } = string.Empty;
        [Required] public string DsrParam { get; set; } = string.Empty;
        [Required] public string CusRtlFl { get; set; } = string.Empty;
        [Required] public string CusRtlCd { get; set; } = string.Empty;
        [Required] public string AreaCode { get; set; } = string.Empty;

        public string? CuRtType { get; set; }
        public string? OrdExDat { get; set; }
        public string? DsrRem01 { get; set; }
        public string? DsrRem02 { get; set; } // Ensured this is present

        public string? GeoLatit { get; set; }
        public string? GeoLongt { get; set; }
        public double? Distance { get; set; }
        public string? DistanceExceptionReason { get; set; }
    }
}


using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using sparshWebService.DataAccess;
using sparshWebService.DTOs; // CRITICAL: Ensures our ApiResponse and other DTOs are found
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace sparshWebService.Controllers
{
    [Route("api/dsractivity")]
    [ApiController]
    public class DsrActivityController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;
        private readonly ILogger<DsrActivityController> _logger;

        public DsrActivityController(DatabaseHelper dbHelper, ILogger<DsrActivityController> logger)
        {
            _dbHelper = dbHelper;
            _logger = logger;
        }

        [HttpPost("submitheader")]
        public async Task<IActionResult> SubmitDsrHeader([FromBody] DsrHeaderSubmitDto request)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(new ApiResponse<object>(false, "Invalid request data.", data: null, errors: ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage)).ToList()));
            }

            string docuNumbToUse = request.DocuNumb;
            bool isNewRecord = string.IsNullOrWhiteSpace(docuNumbToUse);
            DateTime docuDateParsed;

            if (!DateTime.TryParseExact(request.DocuDate, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out docuDateParsed))
            {
                return BadRequest(new ApiResponse<object>(false, "Invalid DocuDate format. Expected yyyy-MM-dd.", data: null));
            }
            DateTime? ordExDatParsed = null;
            if (!string.IsNullOrWhiteSpace(request.OrdExDat))
            {
                if (!DateTime.TryParseExact(request.OrdExDat, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime tempOrdExDate))
                {
                    return BadRequest(new ApiResponse<object>(false, "Invalid OrdExDat format. Expected yyyy-MM-dd.", data: null));
                }
                ordExDatParsed = tempOrdExDate;
            }

            if (isNewRecord)
            {
                string areaCodePart = string.IsNullOrEmpty(request.AreaCode) ? "XXX" : (request.AreaCode.Length >= 3 ? request.AreaCode.Substring(0, 3) : request.AreaCode.PadRight(3, 'X'));
                string prefix = (request.DsrParam == "05" ? "D" : "T") + areaCodePart; // Ensure AreaCode is not null
                string datePart = docuDateParsed.ToString("yyMM");
                string seqQuery = $"SELECT ISNULL(MAX(CAST(SUBSTRING(docuNumb, {prefix.Length + datePart.Length + 1}, 4) AS INT)), 0) + 1 FROM dptDSRActvt WHERE docuNumb LIKE '{prefix}{datePart}%' AND compCode = '01' AND locaCode = '01'";
                try
                {
                    var seqResult = await Task.Run(() => _dbHelper.WebSessBean(seqQuery, new Dictionary<string, object>()));
                    int nextSeq = (seqResult.Any() && seqResult[0].Values.FirstOrDefault() != null && seqResult[0].Values.First() != DBNull.Value) ? Convert.ToInt32(seqResult[0].Values.First()) : 1;
                    docuNumbToUse = $"{prefix}{datePart}{nextSeq:D4}";
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error generating sequence for DocuNumb prefix {Prefix}{DatePart}", prefix, datePart);
                    return StatusCode(500, new ApiResponse<object>(false, "Error generating document number.", data: null));
                }
            }

            string sql;
            if (isNewRecord)
            {
                sql = @"INSERT INTO dptDSRActvt (compCode, locaCode, finYear, docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd, areaCode, createId, createDt, statFlag, rtInTim, cuRtType, ordExDat, dsrRem01, dsrRem02, geoLatit, geoLongt, dsrExcpRsn) 
                        VALUES (@CompCode, @LocaCode, dbo.wcfFinYrGet(@DocuDate), @DocuNumb, @DocuDate, @DsrParam, @CusRtlFl, @CusRtlCd, @AreaCode, @CreateId, GETDATE(), 'N', @RtInTim, @CuRtType, @OrdExDat, @DsrRem01, @DsrRem02, @GeoLatit, @GeoLongt, @DistanceExceptionReason);";
            }
            else
            {
                sql = @"UPDATE dptDSRActvt SET docuDate = @DocuDate, dsrParam = @DsrParam, cusRtlFl = @CusRtlFl, cusRtlCd = @CusRtlCd, areaCode = @AreaCode, lastUpBy = @CreateId, lastUpDt = GETDATE(), rtInTim = @RtInTim, cuRtType = @CuRtType, ordExDat = @OrdExDat, dsrRem01 = @DsrRem01, dsrRem02 = @DsrRem02, geoLatit = @GeoLatit, geoLongt = @GeoLongt, dsrExcpRsn = @DistanceExceptionReason
                        WHERE docuNumb = @DocuNumb AND createId = @CreateId AND statFlag = 'N';";
            }

            var parameters = new Dictionary<string, object> {
                { "@CompCode", "01" }, { "@LocaCode", "01" }, { "@DocuNumb", docuNumbToUse! }, { "@DocuDate", docuDateParsed }, // docuNumbToUse will be assigned
                { "@DsrParam", request.DsrParam }, { "@CusRtlFl", request.CusRtlFl }, { "@CusRtlCd", request.CusRtlCd },
                { "@AreaCode", request.AreaCode }, { "@CreateId", request.LoginIdM },
                { "@RtInTim", (request.DsrParam == "05") ? DateTime.Now.ToString("HH:mm") : (object)DBNull.Value },
                { "@CuRtType", (object)request.CuRtType ?? DBNull.Value }, { "@OrdExDat", ordExDatParsed.HasValue ? (object)ordExDatParsed.Value : DBNull.Value },
                { "@DsrRem01", (object)request.DsrRem01 ?? DBNull.Value }, { "@DsrRem02", (object)request.DsrRem02 ?? DBNull.Value },
                { "@GeoLatit", (object)request.GeoLatit ?? DBNull.Value }, { "@GeoLongt", (object)request.GeoLongt ?? DBNull.Value },
                { "@DistanceExceptionReason", (object)request.DistanceExceptionReason ?? DBNull.Value }
            };

            try
            {
                _logger.LogInformation("Executing DSR Header Submit for DocuNumb: {DocuNumb}, User: {LoginIdM}", docuNumbToUse, request.LoginIdM);
                int rowsAffected = await Task.Run(() => _dbHelper.ExecuteCommand(_dbHelper.BwliveConnectionString, sql, parameters));

                if (rowsAffected > 0)
                {
                    _dbHelper.InsertIntoLog(request.LoginIdM, "api/dsractivity/submitheader", "Success", 200, request);
                    return Ok(new ApiResponse<object>(true, "DSR Header submitted successfully.", data: new { generatedDocuNumb = docuNumbToUse }));
                }
                _logger.LogWarning("DSR Header Submit for DocuNumb: {DocuNumb} affected 0 rows.", docuNumbToUse);
                _dbHelper.InsertIntoLog(request.LoginIdM, "api/dsractivity/submitheader", "Failed to save", 500, request);
                return StatusCode(500, new ApiResponse<object>(false, "Failed to submit DSR Header. Record not found or no changes made.", data: null));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error submitting DSR Header for User: {LoginIdM}, DocuNumb: {DocuNumb}", request.LoginIdM, docuNumbToUse);
                _dbHelper.InsertIntoLog(request.LoginIdM, "api/dsractivity/submitheader", $"Error: {ex.Message}", 500, request);
                return StatusCode(500, new ApiResponse<object>(false, $"An error occurred: {ex.Message}", data: null));
            }
        }

        [HttpPost("submitfull")]
        public async Task<IActionResult> SubmitFullDsr([FromBody] DsrActivityFullDto request)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(new ApiResponse<object>(false, "Invalid request data.", data: null, errors: ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage)).ToList()));
            }
            if (string.IsNullOrWhiteSpace(request.DocuNumb))
            { // DocuNumb must exist for full submit
                return BadRequest(new ApiResponse<object>(false, "DocuNumb is required for submitting full DSR details.", data: null));
            }

            DateTime docuDateParsedFull;
            if (!DateTime.TryParseExact(request.DocuDate, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out docuDateParsedFull))
            {
                return BadRequest(new ApiResponse<object>(false, "Invalid DocuDate format. Expected yyyy-MM-dd.", data: null));
            }
            DateTime? ordExDatParsedFull = null;
            if (!string.IsNullOrWhiteSpace(request.OrderExecDate))
            {
                if (!DateTime.TryParseExact(request.OrderExecDate, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime tempOrdExDate))
                {
                    return BadRequest(new ApiResponse<object>(false, "Invalid OrderExecDate format. Expected yyyy-MM-dd.", data: null));
                }
                ordExDatParsedFull = tempOrdExDate;
            }

            try
            {
                string dsrRem01_val = request.MarketName; string dsrRem02_val = request.PendingIssueStatus;
                string dsrRem03_val = request.PendingIssueDetailType; string dsrRem04_val = request.PendingIssueSpecifyText;
                string dsrRem05_val = request.OtherRemarks;
                string dsrRem06_val = request.BrandsSellingWC != null && request.BrandsSellingWC.Any() ? string.Join(",", request.BrandsSellingWC) : null;
                string dsrRem07_val = request.BrandsSellingWCP != null && request.BrandsSellingWCP.Any() ? string.Join(",", request.BrandsSellingWCP) : null;
                string dsrRem08_val = request.DisplayContestParticipation;

                string updateHeaderSql = @"UPDATE dptDSRActvt SET docuDate = @DocuDate, dsrParam = @DsrParam, cusRtlFl = @CusRtlFl, cusRtlCd = @CusRtlCd, areaCode = @AreaCode, dsrRem01 = @DsrRem01, dsrRem02 = @DsrRem02, dsrRem03 = @DsrRem03, dsrRem04 = @DsrRem04, dsrRem05 = @DsrRem05, dsrRem06 = @DsrRem06, dsrRem07 = @DsrRem07, dsrRem08 = @DsrRem08, cuRtType = @CuRtType, ordExDat = @OrdExDat, lastUpBy = @LoginIdM, lastUpDt = GETDATE(), geoLatit = @GeoLatit, geoLongt = @GeoLongt, purchLatit = @PurchaserLatit, purchLongt = @PurchaserLongt, locaCapr = @LocationCapturedAddress, isTileAdhSlr = @IsTileAdhesiveSeller, tileAdhStk = @TileAdhesiveStock
                                         WHERE docuNumb = @DocuNumb AND createId = @LoginIdM AND statFlag = 'N';";

                var headerParams = new Dictionary<string, object> {
                    { "@DocuNumb", request.DocuNumb }, { "@LoginIdM", request.LoginIdM }, { "@DocuDate", docuDateParsedFull },
                    { "@DsrParam", (object)request.DsrParam ?? DBNull.Value }, { "@CusRtlFl", (object)request.CusRtlFl ?? DBNull.Value },
                    { "@CusRtlCd", (object)request.CusRtlCd ?? DBNull.Value }, { "@AreaCode", (object)request.AreaCode ?? DBNull.Value },
                    { "@DsrRem01", (object)dsrRem01_val ?? DBNull.Value }, { "@DsrRem02", (object)dsrRem02_val ?? DBNull.Value },
                    { "@DsrRem03", (object)dsrRem03_val ?? DBNull.Value }, { "@DsrRem04", (object)dsrRem04_val ?? DBNull.Value },
                    { "@DsrRem05", (object)dsrRem05_val ?? DBNull.Value }, { "@DsrRem06", (object)dsrRem06_val ?? DBNull.Value },
                    { "@DsrRem07", (object)dsrRem07_val ?? DBNull.Value }, { "@DsrRem08", (object)dsrRem08_val ?? DBNull.Value },
                    { "@CuRtType", (object)request.CuRtType ?? DBNull.Value },
                    { "@OrdExDat", ordExDatParsedFull.HasValue ? (object)ordExDatParsedFull.Value : DBNull.Value },
                    { "@GeoLatit", (object)request.GeoLatit ?? DBNull.Value }, { "@GeoLongt", (object)request.GeoLongt ?? DBNull.Value },
                    { "@PurchaserLatit", (object)request.PurchaserLatit ?? DBNull.Value }, { "@PurchaserLongt", (object)request.PurchaserLongt ?? DBNull.Value },
                    { "@LocationCapturedAddress", (object)request.LocationCapturedAddress ?? DBNull.Value },
                    { "@IsTileAdhesiveSeller", (object)request.IsTileAdhesiveSeller ?? DBNull.Value },
                    { "@TileAdhesiveStock", request.TileAdhesiveStock.HasValue ? (object)request.TileAdhesiveStock.Value : DBNull.Value }
                };
                _logger.LogInformation("Updating DSR Header for DocuNumb: {DocuNumb}", request.DocuNumb);
                await Task.Run(() => _dbHelper.ExecuteCommand(_dbHelper.BwliveConnectionString, updateHeaderSql, headerParams));

                string deleteDetailsSql = "DELETE FROM dptDSRActvtDtl WHERE docuNumb = @DocuNumb AND compCode = '01' AND locaCode = '01'";
                await Task.Run(() => _dbHelper.ExecuteCommand(_dbHelper.BwliveConnectionString, deleteDetailsSql, new Dictionary<string, object> { { "@DocuNumb", request.DocuNumb } }));

                string insertDetailSql = @"INSERT INTO dptDSRActvtDtl (compCode, locaCode, finYear, docuNumb, docuSrNo, createId, createDt, mrktData, repoCatg, catgPack, prodQnty, projQnty, actnRemk, prodQtyV)
                                           VALUES (@CompCode, @LocaCode, dbo.wcfFinYrGet(@DocuDateForDetail), @DocuNumb, @DocuSrNo, @CreateId, GETDATE(), @MrktData, @RepoCatg, @CatgPack, @ProdQnty, @ProjQnty, @ActnRemk, @ProdQtyV);";

                int detailSrNo = 1;
                Func<Dictionary<string, object>, Task> insertDtl = async (dtlParams) => {
                    dtlParams.Add("@CompCode", "01"); dtlParams.Add("@LocaCode", "01");
                    dtlParams.Add("@DocuNumb", request.DocuNumb); dtlParams.Add("@CreateId", request.LoginIdM);
                    dtlParams.Add("@DocuSrNo", detailSrNo++);
                    dtlParams.Add("@DocuDateForDetail", docuDateParsedFull);
                    await Task.Run(() => _dbHelper.ExecuteCommand(_dbHelper.BwliveConnectionString, insertDetailSql, dtlParams));
                };

                // Enrollment Slab (mrktData '01')
                if (request.EnrolWCSlab.HasValue || request.EnrolWCPSlab.HasValue || request.EnrolVAPSlab.HasValue)
                    await insertDtl(new Dictionary<string, object> { { "@MrktData", "01" }, { "@RepoCatg", DBNull.Value }, { "@CatgPack", DBNull.Value }, { "@ProdQnty", request.EnrolWCSlab.HasValue ? (object)request.EnrolWCSlab.Value : DBNull.Value }, { "@ProjQnty", request.EnrolWCPSlab.HasValue ? (object)request.EnrolWCPSlab.Value : DBNull.Value }, { "@ProdQtyV", request.EnrolVAPSlab.HasValue ? (object)request.EnrolVAPSlab.Value : DBNull.Value }, { "@ActnRemk", DBNull.Value } });
                // BW Stocks (mrktData '02')
                if (request.BwStockWC.HasValue || request.BwStockWCP.HasValue || request.BwStockVAP.HasValue)
                    await insertDtl(new Dictionary<string, object> { { "@MrktData", "02" }, { "@RepoCatg", DBNull.Value }, { "@CatgPack", DBNull.Value }, { "@ProdQnty", request.BwStockWC.HasValue ? (object)request.BwStockWC.Value : DBNull.Value }, { "@ProjQnty", request.BwStockWCP.HasValue ? (object)request.BwStockWCP.Value : DBNull.Value }, { "@ProdQtyV", request.BwStockVAP.HasValue ? (object)request.BwStockVAP.Value : DBNull.Value }, { "@ActnRemk", DBNull.Value } });
                // Competitor Avg Sales (mrktData '04')
                if (request.CompetitorAvgSales != null) foreach (var compSale in request.CompetitorAvgSales)
                        await insertDtl(new Dictionary<string, object> { { "@MrktData", "04" }, { "@RepoCatg", DBNull.Value }, { "@CatgPack", DBNull.Value }, { "@ProdQnty", compSale.WcQty.HasValue ? (object)compSale.WcQty.Value : DBNull.Value }, { "@ProjQnty", compSale.WcpQty.HasValue ? (object)compSale.WcpQty.Value : DBNull.Value }, { "@ProdQtyV", DBNull.Value }, { "@ActnRemk", compSale.BrandName ?? (object)DBNull.Value } });
                // Order Items (mrktData '05')
                if (request.OrderItems != null) foreach (var item in request.OrderItems)
                        await insertDtl(new Dictionary<string, object> { { "@MrktData", "05" }, { "@RepoCatg", (object)item.RepoCatg ?? DBNull.Value }, { "@CatgPack", (object)item.ProdCode ?? DBNull.Value }, { "@ProdQnty", item.QuantityInBags.HasValue ? (object)item.QuantityInBags.Value : DBNull.Value }, { "@ProjQnty", item.QuantityInMT.HasValue ? (object)item.QuantityInMT.Value : DBNull.Value }, { "@ProdQtyV", DBNull.Value }, { "@ActnRemk", DBNull.Value } });
                // Market WCP SKUs (mrktData '06')
                if (request.MarketWcpSkus != null) foreach (var sku in request.MarketWcpSkus)
                        await insertDtl(new Dictionary<string, object> { { "@MrktData", "06" }, { "@RepoCatg", sku.BrandName ?? (object)DBNull.Value }, { "@CatgPack", sku.PrdCodMk ?? (object)DBNull.Value }, { "@ProdQnty", sku.BPriceVl.HasValue ? (object)sku.BPriceVl.Value : DBNull.Value }, { "@ProjQnty", sku.CPriceVl.HasValue ? (object)sku.CPriceVl.Value : DBNull.Value }, { "@ProdQtyV", DBNull.Value }, { "@ActnRemk", DBNull.Value } });
                // Gift Items (mrktData '07')
                if (request.GiftItems != null) foreach (var gift in request.GiftItems)
                        await insertDtl(new Dictionary<string, object> { { "@MrktData", "07" }, { "@RepoCatg", gift.GiftTypeCode ?? (object)DBNull.Value }, { "@CatgPack", DBNull.Value }, { "@ProdQnty", gift.Quantity.HasValue ? (object)gift.Quantity.Value : DBNull.Value }, { "@ProjQnty", DBNull.Value }, { "@ProdQtyV", DBNull.Value }, { "@ActnRemk", DBNull.Value } });

                _logger.LogInformation("Successfully submitted full DSR for DocuNumb: {DocuNumb}", request.DocuNumb);
                _dbHelper.InsertIntoLog(request.LoginIdM, "api/dsractivity/submitfull", "Success", 200, new { request.DocuNumb, request.Proctype });
                return Ok(new ApiResponse<object>(true, "DSR submitted successfully.", data: null));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error submitting full DSR for DocuNumb: {DocuNumb}, User: {LoginIdM}", request.DocuNumb, request.LoginIdM);
                _dbHelper.InsertIntoLog(request.LoginIdM, "api/dsractivity/submitfull", $"Error: {ex.Message}", 500, new { request.DocuNumb, request.Proctype });
                return StatusCode(500, new ApiResponse<object>(false, $"An error occurred: {ex.Message}", data: null));
            }
        }

        [HttpGet("details/{docuNumb}")]
        public async Task<IActionResult> GetDsrDetails(string docuNumb, [FromQuery] string loginIdM)
        {
            if (string.IsNullOrWhiteSpace(docuNumb) || string.IsNullOrWhiteSpace(loginIdM))
            {
                return BadRequest(new ApiResponse<object>(false, "Document number and Login ID are required.", data: null));
            }
            var responseDto = new DsrActivityFullDto { LoginIdM = loginIdM, DocuNumb = docuNumb };
            DateTime docuDateFromDb = DateTime.MinValue;

            try
            {
                string headerSql = "SELECT *, convert(char(10), docuDate, 23) as docuDateStr, convert(char(10), ordExDat, 23) as ordExDatStr FROM dptDSRActvt WHERE docuNumb = @DocuNumb AND createId = @LoginIdM";
                var headerParams = new Dictionary<string, object> { { "@DocuNumb", docuNumb }, { "@LoginIdM", loginIdM } };
                var headerResult = await Task.Run(() => _dbHelper.WebSessBean(headerSql, headerParams));

                if (!headerResult.Any())
                {
                    return NotFound(new ApiResponse<object>(false, "DSR not found or access denied.", data: null));
                }
                var hr = headerResult.First();
                responseDto.DocuDate = hr["docuDateStr"]?.ToString();
                if (!string.IsNullOrWhiteSpace(responseDto.DocuDate))
                    DateTime.TryParseExact(responseDto.DocuDate, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out docuDateFromDb);

                responseDto.DsrParam = hr["dsrParam"]?.ToString(); responseDto.CusRtlFl = hr["cusRtlFl"]?.ToString();
                responseDto.CusRtlCd = hr["cusRtlCd"]?.ToString(); responseDto.AreaCode = hr["areaCode"]?.ToString();
                responseDto.CuRtType = hr["cuRtType"]?.ToString(); responseDto.MarketName = hr["dsrRem01"]?.ToString();
                responseDto.PendingIssueStatus = hr["dsrRem02"]?.ToString(); responseDto.PendingIssueDetailType = hr["dsrRem03"]?.ToString();
                responseDto.PendingIssueSpecifyText = hr["dsrRem04"]?.ToString(); responseDto.OtherRemarks = hr["dsrRem05"]?.ToString();
                if (hr["dsrRem06"] != DBNull.Value && hr["dsrRem06"] != null) responseDto.BrandsSellingWC = hr["dsrRem06"].ToString()!.Split(',').ToList();
                if (hr["dsrRem07"] != DBNull.Value && hr["dsrRem07"] != null) responseDto.BrandsSellingWCP = hr["dsrRem07"].ToString()!.Split(',').ToList();
                responseDto.DisplayContestParticipation = hr["dsrRem08"]?.ToString(); responseDto.OrderExecDate = hr["ordExDatStr"]?.ToString();
                responseDto.IsTileAdhesiveSeller = hr["isTileAdhSlr"]?.ToString();
                responseDto.TileAdhesiveStock = GetDecimal(hr["tileAdhStk"]);
                responseDto.GeoLatit = hr["geoLatit"]?.ToString(); responseDto.GeoLongt = hr["geoLongt"]?.ToString();
                responseDto.PurchaserLatit = hr["purchLatit"]?.ToString(); responseDto.PurchaserLongt = hr["purchLongt"]?.ToString();
                responseDto.LocationCapturedAddress = hr["locaCapr"]?.ToString(); responseDto.DistanceExceptionReason = hr["dsrExcpRsn"]?.ToString();

                if (!string.IsNullOrWhiteSpace(responseDto.CusRtlCd) && !string.IsNullOrWhiteSpace(responseDto.CusRtlFl))
                {
                    string custMasterSql;
                    var custParams = new Dictionary<string, object> { { "@CusRtlCd", responseDto.CusRtlCd } };
                    string mappedCusRtlFl = MapFlutterCusRtlFlToDbCode(responseDto.CusRtlFl); // Map to DB Code

                    if (mappedCusRtlFl == "R" || mappedCusRtlFl == "RR")
                    {
                        custMasterSql = "SELECT retlName, ISNULL(kycVerFl,'N') as kycVerFl FROM rtmRetailer WHERE retlCode = @CusRtlCd";
                    }
                    else
                    {
                        custMasterSql = "SELECT custName, 'Y' as kycVerFl FROM dpmCustomer WHERE custCode = @CusRtlCd";
                    }
                    var custResult = await Task.Run(() => _dbHelper.WebSessBean(custMasterSql, custParams));
                    if (custResult.Any())
                    {
                        responseDto.CusRtlNm = custResult.First()[(mappedCusRtlFl == "R" || mappedCusRtlFl == "RR") ? "retlName" : "custName"]?.ToString();
                        responseDto.KycStatus = custResult.First()["kycVerFl"]?.ToString();
                    }
                }

                string detailSql = "SELECT * FROM dptDSRActvtDtl WHERE docuNumb = @DocuNumb AND createId = @LoginIdM ORDER BY mrktData, docuSrNo";
                var detailResults = await Task.Run(() => _dbHelper.WebSessBean(detailSql, headerParams));
                responseDto.OrderItems = new List<DsrOrderItemDto>(); responseDto.MarketWcpSkus = new List<DsrMarketWcpSkuDto>();
                responseDto.GiftItems = new List<DsrGiftItemDto>(); responseDto.CompetitorAvgSales = new List<DsrCompetitorAvgSaleDto>();
                foreach (var dr in detailResults)
                {
                    string mrktData = dr["mrktData"]?.ToString() ?? "";
                    switch (mrktData)
                    {
                        case "01": responseDto.EnrolWCSlab = GetDecimal(dr["prodQnty"]); responseDto.EnrolWCPSlab = GetDecimal(dr["projQnty"]); responseDto.EnrolVAPSlab = GetDecimal(dr["prodQtyV"]); break;
                        case "02": responseDto.BwStockWC = GetDecimal(dr["prodQnty"]); responseDto.BwStockWCP = GetDecimal(dr["projQnty"]); responseDto.BwStockVAP = GetDecimal(dr["prodQtyV"]); break;
                        case "04": responseDto.CompetitorAvgSales.Add(new DsrCompetitorAvgSaleDto { BrandName = dr["actnRemk"]?.ToString(), WcQty = GetDecimal(dr["prodQnty"]), WcpQty = GetDecimal(dr["projQnty"]) }); break;
                        case "05": responseDto.OrderItems.Add(new DsrOrderItemDto { RepoCatg = dr["repoCatg"]?.ToString(), ProdCode = dr["catgPack"]?.ToString(), QuantityInBags = GetDecimal(dr["prodQnty"]), QuantityInMT = GetDecimal(dr["projQnty"]) }); break;
                        case "06": responseDto.MarketWcpSkus.Add(new DsrMarketWcpSkuDto { BrandName = dr["repoCatg"]?.ToString(), PrdCodMk = dr["catgPack"]?.ToString(), BPriceVl = GetDecimal(dr["prodQnty"]), CPriceVl = GetDecimal(dr["projQnty"]) }); break;
                        case "07": responseDto.GiftItems.Add(new DsrGiftItemDto { GiftTypeCode = dr["repoCatg"]?.ToString(), Quantity = GetInt(dr["prodQnty"]) }); break;
                    }
                }

                if (!string.IsNullOrWhiteSpace(responseDto.CusRtlCd) && !string.IsNullOrWhiteSpace(responseDto.CusRtlFl) && docuDateFromDb != DateTime.MinValue)
                {
                    // Placeholder values for averages; replace with actual SQL calls
                    responseDto.Last3MonthsBwWC = 10m; responseDto.Last3MonthsBwWCP = 5m; responseDto.Last3MonthsBwVAP = 2m;
                    responseDto.CurrentMonthBwWC = 3m; responseDto.CurrentMonthBwWCP = 1m; responseDto.CurrentMonthBwVAP = 0.5m;
                    responseDto.LastBillings = await GetLastBillingsAsync(responseDto.CusRtlCd, responseDto.CusRtlFl); // Call the actual method
                }

                _logger.LogInformation("Fetched DSR Details for DocuNumb: {DocuNumb}", docuNumb);
                _dbHelper.InsertIntoLog(loginIdM, $"api/dsractivity/details/{docuNumb}", "Success", 200, null);
                return Ok(new ApiResponse<DsrActivityFullDto>(true, "DSR details fetched successfully.", data: responseDto));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching DSR details for DocuNumb: {DocuNumb}", docuNumb);
                _dbHelper.InsertIntoLog(loginIdM, $"api/dsractivity/details/{docuNumb}", $"Error: {ex.Message}", 500, null);
                return StatusCode(500, new ApiResponse<object>(false, $"An error occurred while fetching DSR details: {ex.Message}", data: null));
            }
        }

        private decimal? GetDecimal(object? dbValue) => (dbValue != DBNull.Value && dbValue != null) ? Convert.ToDecimal(dbValue) : null;
        private int? GetInt(object? dbValue) => (dbValue != DBNull.Value && dbValue != null) ? Convert.ToInt32(dbValue) : null;
        private double? GetDouble(object? dbValue) => (dbValue != DBNull.Value && dbValue != null) ? Convert.ToDouble(dbValue) : null;

        // TODO: Implement the actual SQL logic from JSP for these methods
        private async Task<decimal?> GetSalesAverageAsync(string cusRtlCd, string cusRtlFl, string mrgRepCt, int monthOffset, DateTime currentDsrDate)
        {
            _logger.LogWarning("GetSalesAverageAsync is using placeholder data for {CusRtlCd}, {MrgRepCt}", cusRtlCd, mrgRepCt);
            await Task.Delay(10); // Simulate async
            return (new Random().Next(50, 200) / 10.0m);
        }
        private async Task<List<DsrLastBillingDto>> GetLastBillingsAsync(string cusRtlCd, string cusRtlFl)
        {
            _logger.LogWarning("GetLastBillingsAsync is using placeholder data for {CusRtlCd}", cusRtlCd);
            await Task.Delay(10);
            return new List<DsrLastBillingDto>();
        }

        [HttpGet("areas")]
        public async Task<IActionResult> GetAreaCodes([FromQuery] string? search)
        {
            string sql = "SELECT areaCode, areaDesc FROM bkmAreaMast WHERE isActive = 'Y'";
            if (!string.IsNullOrWhiteSpace(search)) sql += " AND (areaCode LIKE @SearchPattern OR areaDesc LIKE @SearchPattern)";
            sql += " ORDER BY areaDesc";
            var parameters = new Dictionary<string, object>();
            if (!string.IsNullOrWhiteSpace(search)) parameters.Add("@SearchPattern", $"%{search}%");
            try
            {
                var results = await Task.Run(() => _dbHelper.WebSessBean(sql, parameters));
                var responseData = results.Select(r => new AreaCodeDto { AreaCode = r["areaCode"]?.ToString() ?? "", AreaDesc = r["areaDesc"]?.ToString() ?? "" }).ToList();
                return Ok(responseData);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching area codes.");
                return StatusCode(500, new ApiResponse<object>(false, "Failed to fetch area codes.", data: null));
            }
        }

        [HttpGet("retailers")]
        public async Task<IActionResult> GetRetailers([FromQuery] string areaCode, [FromQuery] string cusRtlFl, [FromQuery] string? search, [FromQuery] string loginIdM)
        {
            if (string.IsNullOrWhiteSpace(areaCode) || string.IsNullOrWhiteSpace(cusRtlFl))
            {
                return BadRequest(new ApiResponse<object>(false, "Area code and Customer Type (cusRtlFl) are required.", data: null));
            }
            string sql; var parameters = new Dictionary<string, object> { { "@AreaCode", areaCode } };
            string customerTypeDbCode = MapFlutterCusRtlFlToDbCode(cusRtlFl);

            string commonRetailerFields = "ISNULL(addrLine, '') as address, ISNULL(cityName, '') as city, ISNULL(latitute, '0.0') as latitude, ISNULL(lgtitute, '0.0') as longitude, ISNULL(kycVerFl, 'N') as kycStatus, ISNULL(mobileNo, '') as mobileNo, ISNULL(mrktName, '') as marketName";
            string commonCustomerFields = "ISNULL(addrLine1, '') as address, ISNULL(cityName, '') as city, ISNULL(latitute, '0.0') as latitude, ISNULL(lgtitute, '0.0') as longitude, 'Y' as kycStatus, ISNULL(mobileNo, '') as mobileNo, ISNULL(mrktName, '') as marketName";


            if (customerTypeDbCode == "R" || customerTypeDbCode == "RR")
            {
                sql = $@"SELECT TOP 50 retlCode as code, retlName as name, {commonRetailerFields}
                        FROM rtmRetailer 
                        WHERE areaCode = @AreaCode AND isActive = 'Y' AND cusRtlFl = @CustomerTypeDbCode"; // This assumes rtmRetailer HAS a cusRtlFl column
                parameters.Add("@CustomerTypeDbCode", customerTypeDbCode);
            }
            else
            { // For 'C', 'D', 'RD', 'AD', 'UR' which map to dpmCustomer types
                sql = $@"SELECT TOP 50 custCode as code, custName as name, {commonCustomerFields} 
                        FROM dpmCustomer 
                        WHERE areaCode = @AreaCode AND isActive = 'Y' AND cusTypCd = @CustomerTypeDbCode";
                parameters.Add("@CustomerTypeDbCode", customerTypeDbCode);
            }

            if (!string.IsNullOrWhiteSpace(search))
            {
                sql += " AND (code LIKE @SearchPattern OR name LIKE @SearchPattern)";
                parameters.Add("@SearchPattern", $"%{search}%");
            }
            sql += " ORDER BY name;";

            try
            {
                var results = await Task.Run(() => _dbHelper.WebSessBean(sql, parameters));
                var responseData = results.Select(r => new RetailerInfoDto
                {
                    Code = r["code"]?.ToString(),
                    Name = r["name"]?.ToString(),
                    Address = r["address"]?.ToString(),
                    City = r["city"]?.ToString(),
                    Latitude = GetDouble(r["latitude"]),
                    Longitude = GetDouble(r["longitude"]),
                    KycStatus = r["kycStatus"]?.ToString(),
                    MobileNo = r["mobileNo"]?.ToString(),
                    MarketName = r["marketName"]?.ToString()
                }).ToList();
                return Ok(responseData);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error fetching retailers for Area: {AreaCode}, Type: {CusRtlFl}", areaCode, cusRtlFl);
                return StatusCode(500, new ApiResponse<object>(false, "Failed to fetch retailers.", data: null));
            }
        }

        private string MapFlutterCusRtlFlToDbCode(string flutterCusRtlFlText)
        {
            // IMPORTANT: This mapping needs to be accurate for your database schema.
            // dpmCustomer uses cusTypCd, rtmRetailer uses cusRtlFl (or retlType).
            // Ensure the returned codes match what's in those respective table columns.
            switch (flutterCusRtlFlText?.Trim().ToLower())
            {
                case "retailer": return "R";
                case "rural retailer": return "RR";
                case "stokiest/urban stokiest": return "ST"; // Example: if 'ST' is a cusTypCd in dpmCustomer
                case "direct dealer": return "DD";       // Example: if 'DD' is a cusTypCd in dpmCustomer
                case "rural stokiest": return "RD";      // Example: if 'RD' is a cusTypCd in dpmCustomer
                case "ad": return "AD";                  // Example: if 'AD' is a cusTypCd in dpmCustomer
                case "ubs": return "UR";                 // Example: if 'UR' is a cusTypCd in dpmCustomer
                default:
                    _logger.LogWarning("Unmapped CusRtlFl text from Flutter: {FlutterCusRtlFlText}", flutterCusRtlFlText);
                    return flutterCusRtlFlText; // Fallback - this might cause SQL errors if not a valid DB code
            }
        }
    }
}
