using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DsrActivityController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public DsrActivityController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpGet("GetDsrActivity")] // Example endpoint for fetching DSR activity
        public IActionResult GetDsrActivity(string docuNumb)
        {
            if (string.IsNullOrWhiteSpace(docuNumb))
                return BadRequest("Document number is required.");

            try
            {
                const string query = @"SELECT docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05
                                      FROM dptDSRActvt
                                      WHERE docuNumb = @DocuNumb";

                var parameters = new Dictionary<string, object>
                {
                    ["@DocuNumb"] = docuNumb
                };

                var result = _dbHelper.WebSessBean(query, parameters) as List<Dictionary<string, object>>;

                if (result == null || result.Count == 0)
                    return NotFound("DSR activity not found.");

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost("SaveDsrActivity")] // Example endpoint for saving DSR activity
        public IActionResult SaveDsrActivity([FromBody] DsrActivityRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.DocuNumb))
                return BadRequest("Invalid request data.");

            try
            {
                const string query = @"INSERT INTO dptDSRActvt (docuNumb, docuDate, dsrParam, cusRtlFl, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05)
                                      VALUES (@DocuNumb, @DocuDate, @DsrParam, @CusRtlFl, @CusRtlCd, @DsrRem01, @DsrRem02, @DsrRem03, @DsrRem04, @DsrRem05)";

                var parameters = new Dictionary<string, object>
                {
                    ["@DocuNumb"] = request.DocuNumb,
                    ["@DocuDate"] = request.DocuDate,
                    ["@DsrParam"] = request.DsrParam,
                    ["@CusRtlFl"] = request.CusRtlFl,
                    ["@CusRtlCd"] = request.CusRtlCd,
                    ["@DsrRem01"] = request.DsrRem01,
                    ["@DsrRem02"] = request.DsrRem02,
                    ["@DsrRem03"] = request.DsrRem03,
                    ["@DsrRem04"] = request.DsrRem04,
                    ["@DsrRem05"] = request.DsrRem05
                };

                _dbHelper.WebSessBean(query, parameters);

                return Ok(new { success = true, message = "DSR activity saved successfully." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost("AddOrUpdateDsrActivity")] // Endpoint for Add or Update DSR activity
        public IActionResult AddOrUpdateDsrActivity([FromBody] DsrActivityRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.ProcType))
                return BadRequest("Invalid request data.");

            try
            {
                if (request.ProcType == "A")
                {
                    // Add operation
                    string docuNumb = GenerateDocumentNumber(request.DocuType, request.AreaCode);

                    const string insertQuery = @"INSERT INTO dptDSRActvt (docuNumb, docuDate, dsrParTy, dsrParam, cusRtlFl, areaCode, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, dsrRem09, district, deptCode, statFlag, createId, createDt, locaCapr, latitute, lgtitute, pinCodeN, cityName, cstBisTy, cuRtType)
                                              VALUES (@DocuNumb, @DocuDate, @DsrParTy, @DsrParam, @CusRtlFl, @AreaCode, @CusRtlCd, @DsrRem01, @DsrRem02, @DsrRem03, @DsrRem04, @DsrRem05, @DsrRem06, @DsrRem07, @DsrRem08, @DsrRem09, @District, @DeptCode, @StatFlag, @CreateId, GETDATE(), @LocaCapr, @Latitute, @Lgtitute, @PinCodeN, @CityName, @CstBisTy, @CuRtType)";

                    var parameters = new Dictionary<string, object>
                    {
                        ["@DocuNumb"] = docuNumb,
                        ["@DocuDate"] = request.DocuDate,
                        ["@DsrParTy"] = "83",
                        ["@DsrParam"] = request.DsrParam,
                        ["@CusRtlFl"] = request.CusRtlFl,
                        ["@AreaCode"] = request.AreaCode,
                        ["@CusRtlCd"] = request.CusRtlCd,
                        ["@DsrRem01"] = request.DsrRem01,
                        ["@DsrRem02"] = request.DsrRem02,
                        ["@DsrRem03"] = request.DsrRem03,
                        ["@DsrRem04"] = request.DsrRem04,
                        ["@DsrRem05"] = request.DsrRem05,
                        ["@DsrRem06"] = request.DsrRem06,
                        ["@DsrRem07"] = request.DsrRem07,
                        ["@DsrRem08"] = request.DsrRem08,
                        ["@DsrRem09"] = request.DsrRem09,
                        ["@District"] = request.District,
                        ["@DeptCode"] = request.DeptCode,
                        ["@StatFlag"] = "N",
                        ["@CreateId"] = request.CreateId,
                        ["@LocaCapr"] = request.LocaCapr,
                        ["@Latitute"] = request.Latitute,
                        ["@Lgtitute"] = request.Lgtitute,
                        ["@PinCodeN"] = request.PinCodeN,
                        ["@CityName"] = request.CityName,
                        ["@CstBisTy"] = request.CstBisTy,
                        ["@CuRtType"] = request.CuRtType
                    };

                    _dbHelper.WebSessBean(insertQuery, parameters);

                    // Insert dynamic lists
                    InsertDynamicDetails(docuNumb, request);

                    return Ok(new { success = true, message = $"Document saved with {docuNumb}" });
                }
                else if (request.ProcType == "U")
                {
                    // Update operation
                    const string updateQuery = @"UPDATE dptDSRActvt
                                              SET dsrParTy = @DsrParTy, dsrParam = @DsrParam, docuDate = @DocuDate, cusRtlFl = @CusRtlFl, cusRtlCd = @CusRtlCd,
                                                  dsrRem01 = @DsrRem01, dsrRem02 = @DsrRem02, dsrRem03 = @DsrRem03, dsrRem04 = @DsrRem04, dsrRem05 = @DsrRem05,
                                                  dsrRem06 = @DsrRem06, dsrRem07 = @DsrRem07, dsrRem08 = @DsrRem08, dsrRem09 = @DsrRem09, district = @District,
                                                  pinCodeN = @PinCodeN, cityName = @CityName, areaCode = @AreaCode, cuRtType = @CuRtType, updateDt = GETDATE(),
                                                  updateId = @UpdateId
                                              WHERE docuNumb = @DocuNumb";

                    var parameters = new Dictionary<string, object>
                    {
                        ["@DocuNumb"] = request.DocuNumb,
                        ["@DsrParTy"] = "83",
                        ["@DsrParam"] = request.DsrParam,
                        ["@DocuDate"] = request.DocuDate,
                        ["@CusRtlFl"] = request.CusRtlFl,
                        ["@CusRtlCd"] = request.CusRtlCd,
                        ["@DsrRem01"] = request.DsrRem01,
                        ["@DsrRem02"] = request.DsrRem02,
                        ["@DsrRem03"] = request.DsrRem03,
                        ["@DsrRem04"] = request.DsrRem04,
                        ["@DsrRem05"] = request.DsrRem05,
                        ["@DsrRem06"] = request.DsrRem06,
                        ["@DsrRem07"] = request.DsrRem07,
                        ["@DsrRem08"] = request.DsrRem08,
                        ["@DsrRem09"] = request.DsrRem09,
                        ["@District"] = request.District,
                        ["@PinCodeN"] = request.PinCodeN,
                        ["@CityName"] = request.CityName,
                        ["@AreaCode"] = request.AreaCode,
                        ["@CuRtType"] = request.CuRtType,
                        ["@UpdateId"] = request.UpdateId
                    };

                    _dbHelper.WebSessBean(updateQuery, parameters);

                    // Delete old details and re-insert
                    const string deleteDetailsQuery = "DELETE FROM dptDSRActvtDtl WHERE docuNumb = @DocuNumb";
                    _dbHelper.WebSessBean(deleteDetailsQuery, new Dictionary<string, object> { ["@DocuNumb"] = request.DocuNumb });

                    InsertDynamicDetails(request.DocuNumb, request);

                    return Ok(new { success = true, message = $"Data successfully updated for Document No: {request.DocuNumb}" });
                }

                return BadRequest("Invalid procType.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost("AddOrUpdateDsrActivityDynamic")] // Endpoint for Add or Update DSR activity dynamically
        public IActionResult AddOrUpdateDsrActivityDynamic([FromBody] Dictionary<string, object> payload)
        {
            if (payload == null || !payload.ContainsKey("ProcType"))
                return BadRequest("Invalid request data.");

            try
            {
                string procType = payload["ProcType"].ToString();
                string docuNumb = procType == "A" ? GenerateDocumentNumber("DSR", payload["AreaCode"].ToString()) : payload["DocuNumb"].ToString();

                if (procType == "A")
                {
                    // Add operation
                    const string insertQuery = @"INSERT INTO dptDSRActvt (docuNumb, docuDate, dsrParTy, dsrParam, cusRtlFl, areaCode, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, dsrRem09, district, deptCode, statFlag, createId, createDt, locaCapr, latitute, lgtitute, pinCodeN, cityName, cstBisTy, cuRtType)
                                              VALUES (@DocuNumb, @DocuDate, @DsrParTy, @DsrParam, @CusRtlFl, @AreaCode, @CusRtlCd, @DsrRem01, @DsrRem02, @DsrRem03, @DsrRem04, @DsrRem05, @DsrRem06, @DsrRem07, @DsrRem08, @DsrRem09, @District, @DeptCode, @StatFlag, @CreateId, GETDATE(), @LocaCapr, @Latitute, @Lgtitute, @PinCodeN, @CityName, @CstBisTy, @CuRtType)";

                    var parameters = payload.ToDictionary(k => "@" + k.Key, v => v.Value);
                    parameters["@DocuNumb"] = docuNumb;
                    parameters["@DsrParTy"] = "83";
                    parameters["@StatFlag"] = "N";

                    _dbHelper.WebSessBean(insertQuery, parameters);

                    // Insert dynamic lists if present
                    if (payload.ContainsKey("productList"))
                    {
                        var productList = payload["productList"] as List<Dictionary<string, object>>;
                        InsertDynamicDetails(docuNumb, productList, "dptDSRActvtDtl", "Product");
                    }

                    if (payload.ContainsKey("giftList"))
                    {
                        var giftList = payload["giftList"] as List<Dictionary<string, object>>;
                        InsertDynamicDetails(docuNumb, giftList, "dptDSRActvtDtl", "Gift");
                    }

                    if (payload.ContainsKey("marketSkuList"))
                    {
                        var marketSkuList = payload["marketSkuList"] as List<Dictionary<string, object>>;
                        InsertDynamicDetails(docuNumb, marketSkuList, "dptDSRActvtDtl", "MarketSku");
                    }

                    return Ok(new { success = true, message = $"Document saved with {docuNumb}" });
                }
                else if (procType == "U")
                {
                    // Update operation
                    const string updateQuery = @"UPDATE dptDSRActvt
                                              SET dsrParTy = @DsrParTy, dsrParam = @DsrParam, docuDate = @DocuDate, cusRtlFl = @CusRtlFl, cusRtlCd = @CusRtlCd,
                                                  dsrRem01 = @DsrRem01, dsrRem02 = @DsrRem02, dsrRem03 = @DsrRem03, dsrRem04 = @DsrRem04, dsrRem05 = @DsrRem05,
                                                  dsrRem06 = @DsrRem06, dsrRem07 = @DsrRem07, dsrRem08 = @DsrRem08, dsrRem09 = @DsrRem09, district = @District,
                                                  pinCodeN = @PinCodeN, cityName = @CityName, areaCode = @AreaCode, cuRtType = @CuRtType, updateDt = GETDATE(),
                                                  updateId = @UpdateId
                                              WHERE docuNumb = @DocuNumb";

                    var parameters = payload.ToDictionary(k => "@" + k.Key, v => v.Value);
                    _dbHelper.WebSessBean(updateQuery, parameters);

                    // Delete old details and re-insert
                    const string deleteDetailsQuery = "DELETE FROM dptDSRActvtDtl WHERE docuNumb = @DocuNumb";
                    _dbHelper.WebSessBean(deleteDetailsQuery, new Dictionary<string, object> { ["@DocuNumb"] = docuNumb });

                    if (payload.ContainsKey("productList"))
                    {
                        var productList = payload["productList"] as List<Dictionary<string, object>>;
                        InsertDynamicDetails(docuNumb, productList, "dptDSRActvtDtl", "Product");
                    }

                    if (payload.ContainsKey("giftList"))
                    {
                        var giftList = payload["giftList"] as List<Dictionary<string, object>>;
                        InsertDynamicDetails(docuNumb, giftList, "dptDSRActvtDtl", "Gift");
                    }

                    if (payload.ContainsKey("marketSkuList"))
                    {
                        var marketSkuList = payload["marketSkuList"] as List<Dictionary<string, object>>;
                        InsertDynamicDetails(docuNumb, marketSkuList, "dptDSRActvtDtl", "MarketSku");
                    }

                    return Ok(new { success = true, message = $"Data successfully updated for Document No: {docuNumb}" });
                }

                return BadRequest("Invalid procType.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        private void InsertDynamicDetails(string docuNumb, DsrActivityRequest request)
        {
            const string insertDetailQuery = @"INSERT INTO dptDSRActvtDtl (docuNumb, docuSrNo, repoCatg, catgPack, prodQnty, projQnty, actnRemk, targetDt, statFlag, createId, createDt)
                                              VALUES (@DocuNumb, @DocuSrNo, @RepoCatg, @CatgPack, @ProdQnty, @ProjQnty, @ActnRemk, @TargetDt, @StatFlag, @CreateId, GETDATE())";

            int srNo = 1;
            foreach (var detail in request.ActivityDetails)
            {
                var parameters = new Dictionary<string, object>
                {
                    ["@DocuNumb"] = docuNumb,
                    ["@DocuSrNo"] = srNo++,
                    ["@RepoCatg"] = detail.RepoCatg,
                    ["@CatgPack"] = detail.CatgPack,
                    ["@ProdQnty"] = detail.ProdQnty,
                    ["@ProjQnty"] = detail.ProjQnty,
                    ["@ActnRemk"] = detail.ActnRemk,
                    ["@TargetDt"] = detail.TargetDt,
                    ["@StatFlag"] = "N",
                    ["@CreateId"] = request.CreateId
                };

                _dbHelper.WebSessBean(insertDetailQuery, parameters);
            }
        }

        private void InsertDynamicDetails(string docuNumb, List<Dictionary<string, object>> details, string tableName, string detailType)
        {
            const string insertDetailQuery = @"INSERT INTO {0} (docuNumb, docuSrNo, detailType, key1, key2, key3, key4, statFlag, createId, createDt)
                                              VALUES (@DocuNumb, @DocuSrNo, @DetailType, @Key1, @Key2, @Key3, @Key4, @StatFlag, @CreateId, GETDATE())";

            int srNo = 1;
            foreach (var detail in details)
            {
                var parameters = detail.ToDictionary(k => "@" + k.Key, v => v.Value);
                parameters["@DocuNumb"] = docuNumb;
                parameters["@DocuSrNo"] = srNo++;
                parameters["@DetailType"] = detailType;
                parameters["@StatFlag"] = "N";

                _dbHelper.WebSessBean(string.Format(insertDetailQuery, tableName), parameters);
            }
        }

        private string GenerateDocumentNumber(string docuType, string areaCode)
        {
            // Logic to generate document number (placeholder)
            return Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
        }

        // Additional endpoints for update, delete, and other functionalities can be added here.
    }

    public class DsrActivityRequest
    {
        public string ProcType { get; set; } // "A" for Add, "U" for Update
        public string DocuType { get; set; } = "DSR";
        public string DocuNumb { get; set; }
        public DateTime DocuDate { get; set; }
        public string DsrParam { get; set; }
        public string CusRtlFl { get; set; }
        public string AreaCode { get; set; }
        public string CusRtlCd { get; set; }
        public string DsrRem01 { get; set; }
        public string DsrRem02 { get; set; }
        public string DsrRem03 { get; set; }
        public string DsrRem04 { get; set; }
        public string DsrRem05 { get; set; }
        public string DsrRem06 { get; set; }
        public string DsrRem07 { get; set; }
        public string DsrRem08 { get; set; }
        public string DsrRem09 { get; set; }
        public string District { get; set; }
        public string DeptCode { get; set; }
        public string LocaCapr { get; set; }
        public string Latitute { get; set; }
        public string Lgtitute { get; set; }
        public string PinCodeN { get; set; }
        public string CityName { get; set; }
        public string CstBisTy { get; set; }
        public string CuRtType { get; set; }
        public string CreateId { get; set; }
        public string UpdateId { get; set; }
        public List<ActivityDetail> ActivityDetails { get; set; } // Added to handle dynamic lists
    }

    public class ActivityDetail
    {
        public string RepoCatg { get; set; }
        public string CatgPack { get; set; }
        public int ProdQnty { get; set; }
        public int ProjQnty { get; set; }
        public string ActnRemk { get; set; }
        public DateTime TargetDt { get; set; }
    }
}
