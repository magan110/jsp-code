using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using sparshWebService.DataAccess;
using System.IdentityModel.Tokens.Jwt;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// ─── Add Services ─────────────────────────────────────────────────────────────

builder.Services.AddControllers();

// Register DatabaseHelper
var cs = builder.Configuration.GetSection("ConnectionStrings")
                               .Get<Dictionary<string,string>>();
builder.Services.AddSingleton(new DatabaseHelper(
    cs["bwlive"], cs["itkHaria"], cs["imageData"]));

// Add IHttpContextAccessor (needed by the middleware)
builder.Services.AddHttpContextAccessor();

// Add JWT authentication
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = false,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = "Birla White IT",
            IssuerSigningKeyResolver = (token, _, kid, _) =>
            {
                var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
                var partnerId = jwt.Claims.FirstOrDefault(c => c.Type=="PartnerID")?.Value;
                if (partnerId != null)
                {
                    var helper = builder.Services.BuildServiceProvider()
                                      .GetRequiredService<DatabaseHelper>();
                    var secret = helper.GetSecretKey(partnerId);
                    if (!string.IsNullOrEmpty(secret))
                        return new[] { new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret)) };
                }
                throw new SecurityTokenInvalidSigningKeyException("Invalid PartnerID or SecretKey.");
            }
        };

        options.Events = new JwtBearerEvents
        {
            OnMessageReceived = ctx =>
            {
                var auth = ctx.Request.Headers["Authorization"].FirstOrDefault();
                if (!string.IsNullOrEmpty(auth) && auth.StartsWith("Bearer "))
                    ctx.Token = auth["Bearer ".Length..].Trim();
                return Task.CompletedTask;
            }
        };
    });

// Add Swagger (optional)
builder.Services.AddSwaggerGen();

var app = builder.Build();

// ─── Middleware Pipeline ──────────────────────────────────────────────────────

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// 1) Our custom PartnerID + allowed-API-list middleware
app.UseMiddleware<AuthenticationMiddleware>();

// 2) Standard ASP.NET Core auth
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

// A simple home page
app.MapGet("/", () => Results.Content(
    "<h1>Welcome</h1><p>DSR Retailer IN OUT API</p>", "text/html"));

app.Run();



using Microsoft.AspNetCore.Http;
using sparshWebService.DataAccess;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Threading.Tasks;

public class AuthenticationMiddleware
{
    private readonly RequestDelegate _next;
    private readonly DatabaseHelper _db;

    public AuthenticationMiddleware(RequestDelegate next, DatabaseHelper dbHelper)
    {
        _next = next;
        _db = dbHelper;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // If the endpoint is decorated [AllowAnonymous], skip our checks entirely
        var endpoint = context.GetEndpoint();
        if (endpoint?.Metadata?.GetMetadata<Microsoft.AspNetCore.Authorization.AllowAnonymousAttribute>() != null)
        {
            await _next(context);
            return;
        }

        // Extract PartnerID & Bearer token
        var partnerId = context.Request.Headers["PartnerID"].FirstOrDefault();
        var authHdr   = context.Request.Headers["Authorization"].FirstOrDefault();

        if (string.IsNullOrEmpty(partnerId)
            || string.IsNullOrEmpty(authHdr)
            || !authHdr.StartsWith("Bearer "))
        {
            context.Response.StatusCode = 400;
            await context.Response.WriteAsync("PartnerID header and Authorization Bearer token are required.");
            return;
        }

        var tokenStr = authHdr["Bearer ".Length..].Trim();
        var handler  = new JwtSecurityTokenHandler();
        JwtSecurityToken jwt;
        try
        {
            jwt = handler.ReadJwtToken(tokenStr);
        }
        catch
        {
            context.Response.StatusCode = 401;
            await context.Response.WriteAsync("Invalid JWT token.");
            return;
        }

        var tokenPartner = jwt.Claims.FirstOrDefault(c => c.Type == "PartnerID")?.Value;
        if (!string.Equals(tokenPartner, partnerId, System.StringComparison.OrdinalIgnoreCase))
        {
            context.Response.StatusCode = 401;
            await context.Response.WriteAsync("Mismatched PartnerID in token.");
            return;
        }

        // Check if this path is allowed for that PartnerID
        var path = context.Request.Path.Value ?? "";
        var allowed = _db.GetAllowedAPIs(partnerId);
        if (!allowed.Contains(path, System.StringComparer.OrdinalIgnoreCase))
        {
            context.Response.StatusCode = 403;
            await context.Response.WriteAsync("Access to this API is forbidden for your PartnerID.");
            return;
        }

        // All good, continue
        await _next(context);
    }
}




using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class DsrRetailerInOutController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public DsrRetailerInOutController(DatabaseHelper dbHelper)
        {
            _db = dbHelper;
        }

        /// <summary>
        /// No auth required here:
        /// GET /api/DsrRetailerInOut/areaCodes
        /// </summary>
        [AllowAnonymous]
        [HttpGet("areaCodes")]
        [ProducesResponseType(typeof(IEnumerable<AreaCodeDto>), 200)]
        [ProducesResponseType(500)]
        public IActionResult GetAreaCodes()
        {
            try
            {
                const string sql = @"
                    SELECT areaCode, areaDesc, isActive
                      FROM bwlive.dbo.bkmAreaMast WITH(NOLOCK)
                     ORDER BY areaDesc";
                var rows = _db.WebSessBean(sql, new Dictionary<string,object>());
                var list = rows.Select(r => new AreaCodeDto
                {
                    Code        = r["areaCode"]?.ToString() ?? "",
                    Description = r["areaDesc"]?.ToString() ?? "",
                    IsActive    = (r["isActive"]?.ToString() ?? "N") == "Y"
                }).ToList();

                return Ok(list);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error fetching area codes: {ex.Message}");
            }
        }

        /// <summary>
        /// No auth required here:
        /// GET /api/DsrRetailerInOut/codeSearch?areaCode=XXX&code=YYY
        /// </summary>
        [AllowAnonymous]
        [HttpGet("codeSearch")]
        [ProducesResponseType(typeof(CodeSearchDto), 200)]
        [ProducesResponseType(404)]
        [ProducesResponseType(500)]
        public IActionResult SearchByCode([FromQuery] string areaCode, [FromQuery] string code)
        {
            try
            {
                const string sql = @"
                    WITH Combined AS (
                        SELECT r.retlCode AS Code, r.retlName AS Name, r.latitute AS Latitude, r.lgtitute AS Longitude, 1 AS Ord
                          FROM bwlive.dbo.rtmRetailer r WITH(NOLOCK)
                         WHERE r.retlCode  = @Code
                           AND r.areaCode  = @AreaCode
                        UNION ALL
                        SELECT c.custCode AS Code, c.custName AS Name, c.latitute AS Latitude, c.lgtitute AS Longitude, 2 AS Ord
                          FROM bwlive.dbo.dpmCustomer c WITH(NOLOCK)
                         WHERE c.custCode = @Code
                    )
                    SELECT TOP 1 Code, Name, Latitude, Longitude
                      FROM Combined
                     ORDER BY Ord";

                var p = new Dictionary<string, object> {
                    ["@Code"]     = code,
                    ["@AreaCode"] = areaCode
                };
                var rows = _db.WebSessBean(sql, p);
                if (!rows.Any())
                    return NotFound($"No record for code='{code}' in area='{areaCode}'.");

                var r = rows.First();
                return Ok(new CodeSearchDto {
                    Code      = r["Code"]?.ToString() ?? "",
                    Name      = r["Name"]?.ToString() ?? "",
                    Latitude  = r["Latitude"]  != null ? Convert.ToDouble(r["Latitude"])  : (double?)null,
                    Longitude = r["Longitude"] != null ? Convert.ToDouble(r["Longitude"]) : (double?)null
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Error searching code: {ex.Message}");
            }
        }
    }

    public class AreaCodeDto
    {
        public string Code        { get; set; } = "";
        public string Description { get; set; } = "";
        public bool   IsActive    { get; set; }
    }

    public class CodeSearchDto
    {
        public string   Code      { get; set; } = "";
        public string   Name      { get; set; } = "";
        public double?  Latitude  { get; set; }
        public double?  Longitude { get; set; }
    }
}
