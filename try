using Microsoft.AspNetCore.Mvc;

using sparshWebService.DataAccess;

using System;

using System.Collections.Generic;

using System.Threading.Tasks;

namespace sparshWebService.Controllers

{

    [Route("api/[controller]")]

    [ApiController]

    public class PersonalVisitController : ControllerBase

    {

        private readonly DatabaseHelper _dbHelper;

        public PersonalVisitController(DatabaseHelper dbHelper)

        {

            _dbHelper = dbHelper;

        }

        [HttpPost("captureLocation")]

        public async Task<IActionResult> CaptureLocation([FromBody] LocationRequest request)

        {

            if (request == null || string.IsNullOrWhiteSpace(request.CustomerCode))

            {

                return BadRequest("Customer Code is required.");

            }

            try

            {

                string sqlQuery = @"SELECT latitute, lgtitute FROM bwlive.dbo.rtmRetailer WHERE retlCode = @CustomerCode";

                var parameters = new Dictionary<string, object>

                {

                    { "@CustomerCode", request.CustomerCode }

                };

                var result = _dbHelper.ExecuteSelectQueryPublic(_dbHelper.BwliveConnectionString, sqlQuery, parameters);

                if (result is List<Dictionary<string, object>> resultList && resultList.Count > 0)

                {

                    var latitude = resultList[0]["latitute"].ToString();

                    var longitude = resultList[0]["lgtitute"].ToString();

                    return Ok(new { Latitude = latitude, Longitude = longitude });

                }

                return NotFound("Customer location not found.");

            }

            catch (Exception ex)

            {

                return StatusCode(500, $"Internal server error: {ex.Message}");

            }

        }

        [HttpPost("validateDistance")]

        public IActionResult ValidateDistance([FromBody] DistanceValidationRequest request)

        {

            if (request == null || request.CustomerLatitude == 0 || request.CustomerLongitude == 0 || request.UserLatitude == 0 || request.UserLongitude == 0)

            {

                return BadRequest("All latitude and longitude values are required.");

            }

            try

            {

                double distance = CalculateDistance(request.CustomerLatitude, request.CustomerLongitude, request.UserLatitude, request.UserLongitude);

                if (distance <= 500)

                {

                    return Ok(new { Message = "You are within the allowed distance.", Distance = distance });

                }

                return BadRequest(new { Message = "You are not at the customer's location.", Distance = distance });

            }

            catch (Exception ex)

            {

                return StatusCode(500, $"Internal server error: {ex.Message}");

            }

        }

        [HttpGet("fetchRetailerDetails")]
        public IActionResult FetchRetailerDetails([FromQuery] string cusRtlCd)
        {
            if (string.IsNullOrWhiteSpace(cusRtlCd))
            {
                return BadRequest("Customer/Retailer Code is required.");
            }

            try
            {
                string query = "SELECT retlCode, retlName, latitute, lgtitute FROM bwlive.dbo.rtmRetailer WHERE isActive = 'Y' AND retlCode = @CustomerCode UNION ALL SELECT custCode, custName, latitute, lgtitute FROM dpmCustomer a WITH (NOLOCK) WHERE custCode = @CustomerCode AND isActive = 'Y'";
                var parameters = new Dictionary<string, object>
                {
                    { "@CustomerCode", cusRtlCd }
                };

                var result = _dbHelper.ExecuteSelectQueryPublic(_dbHelper.BwliveConnectionString, query, parameters);

                if (result is List<Dictionary<string, object>> resultList && resultList.Count > 0)
                {
                    return Ok(resultList);
                }

                return NotFound("Retailer details not found.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        private double CalculateDistance(double lat1, double lon1, double lat2, double lon2)

        {

            var radlat1 = Math.PI * lat1 / 180;

            var radlat2 = Math.PI * lat2 / 180;

            var theta = lon1 - lon2;

            var radtheta = Math.PI * theta / 180;

            var dist = Math.Sin(radlat1) * Math.Sin(radlat2) + Math.Cos(radlat1) * Math.Cos(radlat2) * Math.Cos(radtheta);

            if (dist > 1)

            {

                dist = 1;

            }

            dist = Math.Acos(dist);

            dist = dist * 180 / Math.PI;

            dist = dist * 60 * 1.1515;

            dist = dist * 1.609344 * 1000; // Convert to meters

            return dist;

        }

    }

    public class LocationRequest

    {

        public string CustomerCode { get; set; }

    }

    public class DistanceValidationRequest

    {

        public double CustomerLatitude { get; set; }

        public double CustomerLongitude { get; set; }

        public double UserLatitude { get; set; }

        public double UserLongitude { get; set; }

    }

    public class UserLocationRequest
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

}
