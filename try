using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ContractorController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public ContractorController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        // ---------------------------
        // POST: api/Contractor/register
        // ---------------------------
        [HttpPost("register")]
        public IActionResult RegisterContractor([FromBody] ContractorRegistrationRequest request = null)
        {
            try
            {
                request ??= new ContractorRegistrationRequest();

                // Parse dates (nullable)
                object dob                = ToDbDate(request.DateOfBirth);
                object eidIssue           = ToDbDate(request.EmiratesIdIssueDate);
                object eidExpiry          = ToDbDate(request.EmiratesIdExpiryDate);
                object vatDate            = ToDbDate(request.VatEffectiveDate);
                object estDate            = ToDbDate(request.EstablishmentDate);
                object licExpiry          = ToDbDate(request.LicenseExpiryDate);
                object effDate            = ToDbDate(request.EffectiveDate);

                var insertQuery = @"
                    INSERT INTO CONTRACTORS
                    (contrtyp, firstnme, middlnme, lastnmee, mobileno, addresss, areaname, emirates, referenc,
                     profphot, emirfrnt, emirback, emiratid, idholder, datebrth, national, issuedte, exprydte, occupatn, employer,
                     acchldrn, ibannmbr, bankname, branchnm, bankaddr,
                     vatcert, firmname, vataddrs, trnnumbr, vatdatee,
                     licdoc, licnumbr, issauthr, lictypee, estdatee, licexpdt, tradname, respprsn, licaddrs, effdatee,
                     createdt, isactive)
                    OUTPUT INSERTED.contrcid
                    VALUES
                    (@contrtyp, @firstnme, @middlnme, @lastnmee, @mobileno, @addresss, @areaname, @emirates, @referenc,
                     @profphot, @emirfrnt, @emirback, @emiratid, @idholder, @datebrth, @national, @issuedte, @exprydte, @occupatn, @employer,
                     @acchldrn, @ibannmbr, @bankname, @branchnm, @bankaddr,
                     @vatcert, @firmname, @vataddrs, @trnnumbr, @vatdatee,
                     @licdoc, @licnumbr, @issauthr, @lictypee, @estdatee, @licexpdt, @tradname, @respprsn, @licaddrs, @effdatee,
                     GETDATE(), 'Y');";

                var parameters = new Dictionary<string, object>
                {
                    // Personal
                    { "@contrtyp", ToDb(request.ContractorType) },
                    { "@firstnme", ToDb(request.FirstName) },
                    { "@middlnme", ToDb(request.MiddleName) },
                    { "@lastnmee", ToDb(request.LastName) },
                    { "@mobileno", ToDbDigits(request.MobileNumber) },
                    { "@addresss", ToDb(request.Address) },
                    { "@areaname", ToDb(request.Area) },
                    { "@emirates", ToDb(request.Emirates) },
                    { "@referenc", ToDb(request.Reference) },
                    { "@profphot", ToDb(request.ProfilePhoto) },

                    // EID
                    { "@emirfrnt", ToDb(request.EmiratesIdFront) },
                    { "@emirback", ToDb(request.EmiratesIdBack) },
                    { "@emiratid", ToDbDigits(request.EmiratesIdNumber) },
                    { "@idholder", ToDb(request.IdHolderName) },
                    { "@datebrth", dob },
                    { "@national", ToDb(request.Nationality) },
                    { "@issuedte", eidIssue },
                    { "@exprydte", eidExpiry },
                    { "@occupatn", ToDb(request.Occupation) },
                    { "@employer", ToDb(request.Employer) },

                    // Bank
                    { "@acchldrn", ToDb(request.AccountHolderName) },
                    { "@ibannmbr", ToDbIban(request.IbanNumber) },
                    { "@bankname", ToDb(request.BankName) },
                    { "@branchnm", ToDb(request.BranchName) },
                    { "@bankaddr", ToDb(request.BankAddress) },

                    // VAT
                    { "@vatcert", ToDb(request.VatCertificate) },
                    { "@firmname", ToDb(request.FirmName) },
                    { "@vataddrs", ToDb(request.VatAddress) },
                    { "@trnnumbr", ToDb(request.TaxRegistrationNumber) },
                    { "@vatdatee", vatDate },

                    // License
                    { "@licdoc",   ToDb(request.LicenseDocument) },
                    { "@licnumbr", ToDb(request.LicenseNumber) },
                    { "@issauthr", ToDb(request.IssuingAuthority) },
                    { "@lictypee", ToDb(request.LicenseType) },
                    { "@estdatee", estDate },
                    { "@licexpdt", licExpiry },
                    { "@tradname", ToDb(request.TradeName) },
                    { "@respprsn", ToDb(request.ResponsiblePerson) },
                    { "@licaddrs", ToDb(request.LicenseAddress) },
                    { "@effdatee", effDate }
                };

                var rows = _dbHelper.WebSessBean(insertQuery, parameters);
                var contractorId = rows?.FirstOrDefault()?["contrcid"]?.ToString() ?? "0";

                return Ok(new
                {
                    success = true,
                    message = "Contractor registered successfully",
                    contractorId,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        // ---------------------------
        // GET: api/Contractor/list
        // ---------------------------
        [HttpGet("list")]
        public IActionResult GetContractors([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize));

                var searchCondition = string.IsNullOrEmpty(search) ? "" :
                    "AND (firstnme LIKE @Search OR lastnmee LIKE @Search OR mobileno LIKE @Search OR emiratid LIKE @Search OR contrtyp LIKE @Search)";

                var query = $@"
                    SELECT contrcid, contrtyp, firstnme, middlnme, lastnmee, mobileno, areaname, emirates,
                           referenc, emiratid, national, createdt, isactive
                    FROM CONTRACTORS
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };
                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var contractors = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount
                    FROM CONTRACTORS
                    WHERE isactive = 'Y' {searchCondition}";
                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCountStr = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCountStr, out int total);

                return Ok(new
                {
                    success = true,
                    data = contractors,
                    pagination = new
                    {
                        page,
                        pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve contractors",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        // ---------------------------
        // GET: api/Contractor/{contractorId}
        // ---------------------------
        [HttpGet("{contractorId}")]
        public IActionResult GetContractor(int contractorId = 0)
        {
            try
            {
                if (contractorId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid contractor ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM CONTRACTORS
                    WHERE contrcid = @contrcid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object> { { "@contrcid", contractorId } };
                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Contractor not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve contractor",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        // ---------------------------
        // PUT: api/Contractor/{contractorId}
        // ---------------------------
        [HttpPut("{contractorId}")]
        public IActionResult UpdateContractor(int contractorId = 0, [FromBody] ContractorUpdateRequest request = null)
        {
            try
            {
                if (contractorId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid contractor ID",
                        timestamp = DateTime.Now
                    });
                }

                request ??= new ContractorUpdateRequest();

                // Existence check
                var check = _dbHelper.WebSessBean("SELECT COUNT(*) Cnt FROM CONTRACTORS WHERE contrcid=@id AND isactive='Y'",
                    new Dictionary<string, object> { { "@id", contractorId } });
                if ((check?.FirstOrDefault()?["Cnt"]?.ToString() ?? "0") == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Contractor not found",
                        timestamp = DateTime.Now
                    });
                }

                var updateQuery = @"
                    UPDATE CONTRACTORS
                    SET contrtyp=@contrtyp, firstnme=@firstnme, middlnme=@middlnme, lastnmee=@lastnmee,
                        mobileno=@mobileno, addresss=@addresss, areaname=@areaname, emirates=@emirates,
                        referenc=@referenc, national=@national, occupatn=@occupatn, employer=@employer,
                        acchldrn=@acchldrn, ibannmbr=@ibannmbr, bankname=@bankname, branchnm=@branchnm, bankaddr=@bankaddr,
                        firmname=@firmname, vataddrs=@vataddrs, trnnumbr=@trnnumbr,
                        licnumbr=@licnumbr, issauthr=@issauthr, lictypee=@lictypee, tradname=@tradname, respprsn=@respprsn, licaddrs=@licaddrs,
                        updatedt=GETDATE()
                    WHERE contrcid=@id;";

                var parameters = new Dictionary<string, object>
                {
                    { "@id", contractorId },

                    { "@contrtyp", ToDb(request.ContractorType) },
                    { "@firstnme", ToDb(request.FirstName) },
                    { "@middlnme", ToDb(request.MiddleName) },
                    { "@lastnmee", ToDb(request.LastName) },

                    { "@mobileno", ToDbDigits(request.MobileNumber) },
                    { "@addresss", ToDb(request.Address) },
                    { "@areaname", ToDb(request.Area) },
                    { "@emirates", ToDb(request.Emirates) },
                    { "@referenc", ToDb(request.Reference) },

                    { "@national", ToDb(request.Nationality) },
                    { "@occupatn", ToDb(request.Occupation) },
                    { "@employer", ToDb(request.Employer) },

                    { "@acchldrn", ToDb(request.AccountHolderName) },
                    { "@ibannmbr", ToDbIban(request.IbanNumber) },
                    { "@bankname", ToDb(request.BankName) },
                    { "@branchnm", ToDb(request.BranchName) },
                    { "@bankaddr", ToDb(request.BankAddress) },

                    { "@firmname", ToDb(request.FirmName) },
                    { "@vataddrs", ToDb(request.VatAddress) },
                    { "@trnnumbr", ToDb(request.TaxRegistrationNumber) },

                    { "@licnumbr", ToDb(request.LicenseNumber) },
                    { "@issauthr", ToDb(request.IssuingAuthority) },
                    { "@lictypee", ToDb(request.LicenseType) },
                    { "@tradname", ToDb(request.TradeName) },
                    { "@respprsn", ToDb(request.ResponsiblePerson) },
                    { "@licaddrs", ToDb(request.LicenseAddress) }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Contractor updated successfully",
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        // ---------------------------
        // DELETE: api/Contractor/{contractorId}
        // ---------------------------
        [HttpDelete("{contractorId}")]
        public IActionResult DeleteContractor(int contractorId = 0)
        {
            try
            {
                if (contractorId <= 0)
                {
                    return Ok(new { success = false, message = "Invalid contractor ID", timestamp = DateTime.Now });
                }

                var rows = _dbHelper.WebExecute(@"
                    UPDATE CONTRACTORS SET isactive='N', updatedt=GETDATE()
                    WHERE contrcid=@id AND isactive='Y';",
                    new Dictionary<string, object> { { "@id", contractorId } });

                return Ok(new
                {
                    success = true,
                    message = rows > 0 ? "Contractor deleted successfully" : "Contractor not found or already deleted",
                    rowsAffected = rows,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        // ---------------------------
        // GET: api/Contractor/contractor-types
        // ---------------------------
        [HttpGet("contractor-types")]
        public IActionResult GetContractorTypes()
        {
            var contractorTypes = new[] { "Maintenance Contractor", "Petty contractors" };
            return Ok(new { success = true, data = contractorTypes, timestamp = DateTime.Now });
        }

        // ---------------------------
        // GET: api/Contractor/emirates-list
        // ---------------------------
        [HttpGet("emirates-list")]
        public IActionResult GetEmiratesList()
        {
            var emirates = new[] { "Dubai", "Abu Dhabi", "Sharjah", "Ajman", "Umm Al Quwain", "Ras Al Khaimah", "Fujairah" };
            return Ok(new { success = true, data = emirates, timestamp = DateTime.Now });
        }

        // ---------------------------
        // Helpers (NULL-first mapping)
        // ---------------------------
        private static object ToDb(string s)
            => string.IsNullOrWhiteSpace(s) ? (object)DBNull.Value : s.Trim();

        private static object ToDbDigits(string s)
            => string.IsNullOrWhiteSpace(s) ? (object)DBNull.Value : new string(s.Where(char.IsDigit).ToArray());

        private static object ToDbIban(string s)
            => string.IsNullOrWhiteSpace(s) ? (object)DBNull.Value : s.Replace(" ", "").ToUpperInvariant();

        private static object ToDbDate(string s)
        {
            if (string.IsNullOrWhiteSpace(s)) return DBNull.Value;
            var formats = new[] { "yyyy-MM-dd", "MM/dd/yyyy", "dd/MM/yyyy", "yyyy/MM/dd", "MM-dd-yyyy", "dd-MM-yyyy" };
            foreach (var f in formats)
                if (DateTime.TryParseExact(s, f, CultureInfo.InvariantCulture, DateTimeStyles.None, out var dt))
                    return dt;
            if (DateTime.TryParse(s, out var any)) return any;
            return DBNull.Value;
        }
    }

    // ---------------------------
    // Request Models (all nullable-friendly)
    // ---------------------------
    public class ContractorRegistrationRequest
    {
        // Personal
        public string ContractorType { get; set; }
        public string FirstName { get; set; }
        public string MiddleName { get; set; }
        public string LastName { get; set; }
        public string MobileNumber { get; set; }
        public string Address { get; set; }
        public string Area { get; set; }
        public string Emirates { get; set; }
        public string Reference { get; set; }
        public string ProfilePhoto { get; set; }

        // Emirates ID
        public string EmiratesIdFront { get; set; }
        public string EmiratesIdBack { get; set; }
        public string EmiratesIdNumber { get; set; }
        public string IdHolderName { get; set; }
        public string DateOfBirth { get; set; }
        public string Nationality { get; set; }
        public string EmiratesIdIssueDate { get; set; }
        public string EmiratesIdExpiryDate { get; set; }
        public string Occupation { get; set; }
        public string Employer { get; set; }

        // Bank
        public string AccountHolderName { get; set; }
        public string IbanNumber { get; set; }
        public string BankName { get; set; }
        public string BranchName { get; set; }
        public string BankAddress { get; set; }

        // VAT
        public string VatCertificate { get; set; }
        public string FirmName { get; set; }
        public string VatAddress { get; set; }
        public string TaxRegistrationNumber { get; set; }
        public string VatEffectiveDate { get; set; }

        // License
        public string LicenseDocument { get; set; }
        public string LicenseNumber { get; set; }
        public string IssuingAuthority { get; set; }
        public string LicenseType { get; set; }
        public string EstablishmentDate { get; set; }
        public string LicenseExpiryDate { get; set; }
        public string TradeName { get; set; }
        public string ResponsiblePerson { get; set; }
        public string LicenseAddress { get; set; }
        public string EffectiveDate { get; set; }
    }

    public class ContractorUpdateRequest
    {
        // Personal
        public string ContractorType { get; set; }
        public string FirstName { get; set; }
        public string MiddleName { get; set; }
        public string LastName { get; set; }
        public string MobileNumber { get; set; }
        public string Address { get; set; }
        public string Area { get; set; }
        public string Emirates { get; set; }
        public string Reference { get; set; }
        public string Nationality { get; set; }
        public string Occupation { get; set; }
        public string Employer { get; set; }

        // Bank
        public string AccountHolderName { get; set; }
        public string IbanNumber { get; set; }
        public string BankName { get; set; }
        public string BranchName { get; set; }
        public string BankAddress { get; set; }

        // VAT
        public string FirmName { get; set; }
        public string VatAddress { get; set; }
        public string TaxRegistrationNumber { get; set; }

        // License
        public string LicenseNumber { get; set; }
        public string IssuingAuthority { get; set; }
        public string LicenseType { get; set; }
        public string TradeName { get; set; }
        public string ResponsiblePerson { get; set; }
        public string LicenseAddress { get; set; }
    }
}
