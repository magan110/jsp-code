using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.Json.Serialization;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Produces("application/json")]
    public class SamplingExecutionEntryController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        public SamplingExecutionEntryController(DatabaseHelper dbHelper) => _db = dbHelper;

        // ---------------- Envelope ----------------
        public sealed class ApiResponse<T>
        {
            [JsonPropertyName("success")] public bool Success { get; set; }
            [JsonPropertyName("data")]    public T Data { get; set; }
            [JsonPropertyName("error")]   public string Error { get; set; }
            public static ApiResponse<T> Ok(T d)   => new() { Success = true, Data = d };
            public static ApiResponse<T> Fail(string m) => new() { Success = false, Error = m };
        }

        // -------------- DTO (UI fields ONLY) --------------
        public class SamplingExecDto
        {
            [JsonPropertyName("docuNumb")] public string DocuNumb { get; set; }
            [JsonPropertyName("retailerName")] public string RetailerName { get; set; }
            [JsonPropertyName("retailerCode")] public string RetailerCode { get; set; }
            [JsonPropertyName("distributorName")] public string DistributorName { get; set; }
            [JsonPropertyName("emirates")] public string Emirates { get; set; }               // maps from areaCode
            [JsonPropertyName("distributionDate")] public DateTime DistributionDate { get; set; }
            [JsonPropertyName("painterName")] public string PainterName { get; set; }
            [JsonPropertyName("painterMobile")] public string PainterMobile { get; set; }
            [JsonPropertyName("qtyDistributedKg")] public double QtyDistributedKg { get; set; }
            [JsonPropertyName("siteAddress")] public string SiteAddress { get; set; }         // not in DB yet
            [JsonPropertyName("sampleDate")] public DateTime? SampleDate { get; set; }        // maps from sampDate (same as distributionDate for now)
            [JsonPropertyName("product")] public string Product { get; set; }                 // maps from prodName
            [JsonPropertyName("photoImage")] public string PhotoImage { get; set; }           // store path/id later
            [JsonPropertyName("reimbursementMode")] public string ReimbursementMode { get; set; }
            [JsonPropertyName("reimbursementAmountAED")] public double ReimbursementAmountAED { get; set; }
        }

        // =================== GET: /top100 ===================
        [HttpGet("top100")]
        public ActionResult<ApiResponse<List<SamplingExecDto>>> Top100()
        {
            try
            {
                const string sql = @"
SELECT TOP 100
       a.docuNumb,
       a.docuDate,
       a.areaCode,               -- emirates
       a.custName,               -- retailerName
       ISNULL(d.cusRtlCd,'') AS retailerCode,
       a.concDist,               -- distributorName
       a.sampDate,               -- distribution/sample date
       a.contName,               -- painterName
       a.mobileNo,               -- painterMobile
       a.prodName,               -- product
       d.pouchCnt                -- qty distributed
FROM dbo.catsamplead a WITH (NOLOCK)
LEFT JOIN dbo.catsampleadDtl d WITH (NOLOCK) ON a.docuNumb = d.docuNumb
ORDER BY a.docuDate DESC, d.serialNo;";

                var rows = _db.QaEWebBean(sql, new Dictionary<string, object>()) as List<Dictionary<string, object>>;
                var list = MapRowsToExecDto(rows);
                return Ok(ApiResponse<List<SamplingExecDto>>.Ok(list));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<List<SamplingExecDto>>.Fail(ex.Message));
            }
        }

        // =================== GET: /search ===================
        // Query: retailerCode / retailerName / painterNameFilter + optional start/end (yyyy-MM-dd) + top
        [HttpGet("search")]
        public ActionResult<ApiResponse<List<SamplingExecDto>>> Search(
            [FromQuery] string retailerCode = null,
            [FromQuery] string retailerName = null,
            [FromQuery] string painterNameFilter = null,
            [FromQuery] string start = null,
            [FromQuery] string end = null,
            [FromQuery] int top = 200)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(retailerCode) &&
                    string.IsNullOrWhiteSpace(retailerName) &&
                    string.IsNullOrWhiteSpace(painterNameFilter) &&
                    string.IsNullOrWhiteSpace(start) &&
                    string.IsNullOrWhiteSpace(end))
                {
                    return BadRequest(ApiResponse<List<SamplingExecDto>>.Fail(
                        "Provide at least one filter (retailerCode/retailerName/painterNameFilter/start/end)."));
                }

                DateTime? startDate = TryParseDate(start);
                DateTime? endDate   = TryParseDate(end);

                var where = new List<string> { "1=1" };
                var p = new Dictionary<string, object> { ["@top"] = top };

                if (!string.IsNullOrWhiteSpace(retailerCode))
                {
                    where.Add("(ISNULL(d.cusRtlCd,'') = @retailerCode OR ISNULL(a.custName,'') LIKE '%' + @retailerCode + '%')");
                    p["@retailerCode"] = retailerCode.Trim();
                }
                if (!string.IsNullOrWhiteSpace(retailerName))
                {
                    where.Add("ISNULL(a.custName,'') LIKE '%' + @retailerName + '%'");
                    p["@retailerName"] = retailerName.Trim();
                }
                if (!string.IsNullOrWhiteSpace(painterNameFilter))
                {
                    where.Add("ISNULL(a.contName,'') LIKE '%' + @painterName + '%'");
                    p["@painterName"] = painterNameFilter.Trim();
                }
                if (startDate.HasValue) { where.Add("a.sampDate >= @start"); p["@start"] = startDate.Value; }
                if (endDate.HasValue)   { where.Add("a.sampDate < DATEADD(DAY,1,@end)"); p["@end"] = endDate.Value; }

                var sql = $@"
SELECT TOP (@top)
       a.docuNumb,
       a.docuDate,
       a.areaCode,               -- emirates
       a.custName,               -- retailerName
       ISNULL(d.cusRtlCd,'') AS retailerCode,
       a.concDist,               -- distributorName
       a.sampDate,               -- distribution/sample date
       a.contName,               -- painterName
       a.mobileNo,               -- painterMobile
       a.prodName,               -- product
       d.pouchCnt                -- qty distributed
FROM dbo.catsamplead a WITH (NOLOCK)
LEFT JOIN dbo.catsampleadDtl d WITH (NOLOCK) ON a.docuNumb = d.docuNumb
WHERE {string.Join(" AND ", where)}
ORDER BY a.docuDate DESC, d.serialNo;";

                var rows = _db.QaEWebBean(sql, p) as List<Dictionary<string, object>>;
                var list = MapRowsToExecDto(rows);
                return Ok(ApiResponse<List<SamplingExecDto>>.Ok(list));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<List<SamplingExecDto>>.Fail(ex.Message));
            }
        }

        // =================== POST: / ===================
        // Saves one entry. Header -> catsamplead, Detail -> catsampleadDtl
        [HttpPost]
        public ActionResult<ApiResponse<string>> Create([FromBody] SamplingExecDto dto)
        {
            try
            {
                if (dto == null) return BadRequest(ApiResponse<string>.Fail("Request body is missing."));

                // Basic validation aligned to UI required fields
                if (string.IsNullOrWhiteSpace(dto.RetailerName)) return BadRequest(ApiResponse<string>.Fail("Retailer Name is required."));
                if (string.IsNullOrWhiteSpace(dto.RetailerCode)) return BadRequest(ApiResponse<string>.Fail("Retailer Code is required."));
                if (string.IsNullOrWhiteSpace(dto.DistributorName)) return BadRequest(ApiResponse<string>.Fail("Concern Distributor is required."));
                if (string.IsNullOrWhiteSpace(dto.Emirates)) return BadRequest(ApiResponse<string>.Fail("Emirates is required."));
                if (dto.DistributionDate == default) return BadRequest(ApiResponse<string>.Fail("Date of Distribution is required."));
                if (string.IsNullOrWhiteSpace(dto.PainterName)) return BadRequest(ApiResponse<string>.Fail("Painter/Contractor Name is required."));
                if (string.IsNullOrWhiteSpace(dto.PainterMobile)) return BadRequest(ApiResponse<string>.Fail("Contact Number is required."));

                // Generate docuNumb if not provided
                if (string.IsNullOrWhiteSpace(dto.DocuNumb))
                    dto.DocuNumb = $"SMP{DateTime.UtcNow:yyyyMMddHHmmssfff}";

                // If client didn't give SampleDate, mirror DistributionDate
                if (dto.SampleDate == null || dto.SampleDate == default)
                    dto.SampleDate = dto.DistributionDate;

                // Note: siteAddress, photoImage, reimbursement* are not stored yet; keep placeholders.
                // Adjust SQL to match your schema.
                // Transaction-like batch: insert header then detail.
                const string sql = @"
INSERT INTO dbo.catsamplead
( docuNumb,  docuDate, areaCode, custName, contName, mobileNo, concDist, sampDate, prodName )
VALUES
( @docuNumb, GETDATE(), @areaCode, @custName, @contName, @mobileNo, @concDist, @sampDate, @prodName );

INSERT INTO dbo.catsampleadDtl
( docuNumb, pouchCnt, cusRtlCd )
VALUES
( @docuNumb, @pouchCnt, @retailerCode );";

                var p = new Dictionary<string, object>
                {
                    ["@docuNumb"]    = dto.DocuNumb,
                    ["@areaCode"]    = dto.Emirates?.Trim() ?? "",
                    ["@custName"]    = dto.RetailerName?.Trim() ?? "",
                    ["@contName"]    = dto.PainterName?.Trim() ?? "",
                    ["@mobileNo"]    = dto.PainterMobile?.Trim() ?? "",
                    ["@concDist"]    = dto.DistributorName?.Trim() ?? "",
                    ["@sampDate"]    = dto.DistributionDate,        // storing DistributionDate
                    ["@prodName"]    = dto.Product?.Trim() ?? "",
                    ["@pouchCnt"]    = dto.QtyDistributedKg,        // numeric
                    ["@retailerCode"]= dto.RetailerCode?.Trim() ?? ""
                };

                _db.ExecuteNonQuery(sql, p);
                return Ok(ApiResponse<string>.Ok(dto.DocuNumb)); // return created docuNumb
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<string>.Fail(ex.Message));
            }
        }

        // ---------------- Mapping (only UI fields) ----------------
        private static List<SamplingExecDto> MapRowsToExecDto(List<Dictionary<string, object>> rows)
        {
            var list = new List<SamplingExecDto>();
            if (rows == null) return list;

            foreach (var r in rows)
            {
                var sampDate = ToDate(GetObj(r, "sampDate")) ?? DateTime.UtcNow;

                list.Add(new SamplingExecDto
                {
                    DocuNumb               = GetStr(r, "docuNumb"),
                    RetailerName           = GetStr(r, "custName"),
                    RetailerCode           = GetStr(r, "retailerCode"),
                    DistributorName        = GetStr(r, "concDist"),
                    Emirates               = GetStr(r, "areaCode"),
                    DistributionDate       = sampDate,
                    PainterName            = GetStr(r, "contName"),
                    PainterMobile          = GetStr(r, "mobileNo"),
                    QtyDistributedKg       = ToDouble(GetObj(r, "pouchCnt")),
                    SiteAddress            = "",                           // placeholder
                    SampleDate             = sampDate,                     // for now
                    Product                = GetStr(r, "prodName"),
                    PhotoImage             = null,                         // placeholder
                    ReimbursementMode      = "",                           // placeholder
                    ReimbursementAmountAED = 0.0                           // placeholder
                });
            }
            return list;
        }

        // ---------------- Util helpers ----------------
        private static object GetObj(Dictionary<string, object> row, string k)
            => row.TryGetValue(k, out var v) ? v : null;

        private static string GetStr(Dictionary<string, object> row, string k)
            => row.TryGetValue(k, out var v) && v != null && v != DBNull.Value ? v.ToString() : "";

        private static DateTime? TryParseDate(string s)
        {
            if (string.IsNullOrWhiteSpace(s)) return null;
            if (DateTime.TryParseExact(s.Trim(), "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var dt)) return dt;
            if (DateTime.TryParse(s, out var any)) return any;
            return null;
        }

        private static DateTime? ToDate(object o)
        {
            if (o == null || o == DBNull.Value) return (DateTime?)null;
            if (o is DateTime dt) return dt;
            return DateTime.TryParse(o.ToString(), out var d) ? d : (DateTime?)null;
        }

        private static double ToDouble(object o)
        {
            if (o == null || o == DBNull.Value) return 0d;
            if (o is double d) return d;
            if (o is decimal m) return (double)m;
            if (o is float f) return f;
            return double.TryParse(o.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out var v) ? v : 0d;
        }
    }
}
