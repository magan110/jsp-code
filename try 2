import 'package:go_router/go_router.dart';
import 'package:flutter/material.dart';
import 'package:rak_web/features/products/screens/incentive_scheme_form.dart';
import 'package:rak_web/features/products/screens/sampling_drive_form_screen.dart';
import 'package:rak_web/features/quality_control/screens/dashboard_screen.dart';

// Import AuthManager for authentication checks
import '../services/auth_service.dart';

// Auth Screens
import '../../features/auth/screens/login_screen_with_otp.dart';
import '../../features/auth/screens/login_with_password_screen.dart';

// Registration Screens
import '../../features/registration/screens/registration_type_screen.dart';
import '../../features/registration/screens/contractor_registration_screen.dart';
import '../../features/registration/screens/painter_registration_screen.dart';
import '../../features/registration/screens/registration_details_screen.dart';
import '../../features/registration/screens/success_screen.dart';

// Retail Screens
import '../../features/retail/screens/retailer_onboarding_screen.dart';

// Product Screens
import '../../features/products/screens/new_product_entry_screen.dart';
import '../../features/products/screens/sample_distribution_entry_screen.dart';

// Quality Control Screens
import '../../features/quality_control/screens/approval_dashboard_screen.dart';
import '../../features/quality_control/screens/expert_meet_claim.dart';

// Activity Screens
import '../../features/activity/screens/activity_entry_screen.dart';

// Common Screens (to be moved later)
import '../../screens/splash_screen.dart';
import '../../screens/home_screen.dart';

import '../../screens/file_manager_screen.dart';

import '../../screens/camera_scanner_screen.dart';
import '../../screens/qr_input_screen.dart';

class AppRouter {
  static const String splash = '/';
  static const String loginPassword = '/login-password';
  static const String loginOtp = '/login-otp';
  static const String home = '/home';

  // Authentication redirect function
  static String? _handleRedirect(BuildContext context, GoRouterState state) {
    final isLoggedIn = AuthManager.isLoggedIn;
    final currentPath = state.uri.path;

    // List of public routes that don't require authentication
    final publicRoutes = [
      splash,
      loginPassword,
      loginOtp,
      registrationType,
      contractorRegistration,
      painterRegistration,
      registrationSuccess,
    ];

    // If user is not logged in and trying to access a protected route
    if (!isLoggedIn && !publicRoutes.contains(currentPath)) {
      return loginPassword;
    }

    // If user is logged in and trying to access login pages (but not splash), redirect to home
    if (isLoggedIn &&
        (currentPath == loginPassword || currentPath == loginOtp)) {
      return home;
    }

    // No redirect needed
    return null;
  }

  // Registration routes
  static const String registrationType = '/registration-type';
  static const String contractorRegistration = '/contractor-registration';
  static const String painterRegistration = '/painter-registration';
  static const String registrationDetails = '/registration-details';
  static const String registrationSuccess = '/success';
  static const String retailerRegistration = '/retailer-registration';

  // Retail routes
  static const String retailerOnboarding = '/retailer-onboarding';
  static const String retailEntry = '/retail-entry';

  // Product routes
  static const String newProductEntry = '/new-product-entry';
  static const String sampleDistribution = '/sample-distribution';
  static const String samplingDriveForm = '/sampling-drive-form';
  static const String incentiveSchemeForm = '/incentive-scheme-form';
  static const String expertMeetClaim = '/expert-meet-claim';

  // Quality Control routes
  static const String approvalDashboard = '/approval-dashboard';
  static const String dashboard = '/dashboard';

  // Utility routes
  static const String fileManager = '/file-manager';
  static const String uploadTest = '/upload-test';
  static const String cameraScanner = '/camera-scanner';
  static const String qrInput = '/qr-input';

  // Activity routes
  static const String activityEntry = '/activity-entry';

  static final GoRouter router = GoRouter(
    initialLocation: splash,
    redirect: _handleRedirect,
    refreshListenable: AuthManager.authChangeNotifier,
    routes: [
      // Splash and Auth
      GoRoute(path: splash, builder: (context, state) => const SplashScreen()),
      GoRoute(
        path: loginPassword,
        builder: (context, state) => const LoginWithPasswordScreen(),
      ),
      GoRoute(
        path: loginOtp,
        builder: (context, state) => const LoginScreenWithOtp(),
      ),

      // Main App
      GoRoute(path: home, builder: (context, state) => const HomeScreen()),

      // Registration Feature
      GoRoute(
        path: registrationType,
        builder: (context, state) => const RegistrationTypeScreen(),
      ),
      GoRoute(
        path: contractorRegistration,
        builder: (context, state) => const ContractorRegistrationScreen(),
      ),
      GoRoute(
        path: painterRegistration,
        builder: (context, state) => const PainterRegistrationScreen(),
      ),
      GoRoute(
        path: '$registrationDetails/:id',
        builder: (context, state) {
          final id = state.pathParameters['id'];
          return RegistrationDetailsScreen(registrationId: id);
        },
      ),
      GoRoute(
        path: registrationSuccess,
        builder: (context, state) => const SuccessScreen(),
      ),

      // Retail Feature
      GoRoute(
        path: retailerOnboarding,
        builder: (context, state) => const RetailerOnboardingApp(),
      ),

      // Product Feature
      GoRoute(
        path: newProductEntry,
        builder: (context, state) => NewProductEntry(),
      ),
      GoRoute(
        path: sampleDistribution,
        builder: (context, state) => SampleDistributEntry(),
      ),
      GoRoute(
        path: samplingDriveForm,
        builder: (context, state) => SamplingDriveFormPage(),
      ),
      GoRoute(
        path: incentiveSchemeForm,
        builder: (context, state) => IncentiveSchemeFormPage(),
      ),
      GoRoute(
        path: expertMeetClaim,
        builder: (context, state) => ExpertMeetClaimPage(),
      ),

      // Quality Control Feature
      GoRoute(
        path: approvalDashboard,
        builder: (context, state) => const ApprovalDashboardScreen(),
      ),
      GoRoute(
        path: dashboard,
        builder: (context, state) => const DashboardScreen(),
      ),

      // Utilities
      GoRoute(
        path: fileManager,
        builder: (context, state) => const FileManagerScreen(),
      ),

      GoRoute(
        path: cameraScanner,
        builder: (context, state) => const CameraScannerScreen(),
      ),
      GoRoute(
        path: qrInput,
        builder: (context, state) => const QRInputScreen(),
      ),

      // Activity Feature
      GoRoute(
        path: activityEntry,
        builder: (context, state) => ActivityEntryScreen(),
      ),
    ],
  );
}














import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:web/web.dart' as web;
import 'dart:js_interop';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/modern_dropdown.dart';

@JS()
@staticInterop
class WindowWithGeoLocation {}

extension WindowGeoLocationExtension on WindowWithGeoLocation {
  external JSPromise<JSAny?> requestGeoPosition();
}

class ActivityEntryScreen extends StatefulWidget {
  @override
  _ActivityEntryScreenState createState() => _ActivityEntryScreenState();
}

class _ActivityEntryScreenState extends State<ActivityEntryScreen>
    with TickerProviderStateMixin {
  // Controllers
  final processTypeController = TextEditingController();
  final activityController = TextEditingController();
  final descriptionController = TextEditingController();
  final objectiveController = TextEditingController();
  final activityDateController = TextEditingController();
  final meetingVenueController = TextEditingController();
  final areaController = TextEditingController();
  final cityNameController = TextEditingController();
  final districtController = TextEditingController();
  final pinCodeController = TextEditingController();
  final productController = TextEditingController();
  final employeesCountController = TextEditingController();
  final channelPartnerCountController = TextEditingController();
  final influencersCountController = TextEditingController();
  final totalParticipantsController = TextEditingController();
  final ruralUrbanController = TextEditingController();
  final latitudeController = TextEditingController();
  final longitudeController = TextEditingController();

  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  // Add to your state class
  List<Map<String, String>> painterList = [];
  void _addPainterRow() {
    setState(() {
      painterList.add({
        'type': '',
        'mobile': '',
        'name': '',
        'pastData': '',
        'kyc': '',
        'appDownloaded': '',
      });
    });
  }

  void _deletePainterRow() {
    if (painterList.isNotEmpty) {
      setState(() {
        painterList.removeLast();
      });
    }
  }

  void _deletePainterAt(int index) {
    setState(() {
      painterList.removeAt(index);
    });
  }

  bool _isSubmitting = false;
  bool _isGettingLocation = false;
  String? _uploadedFileName;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  // Lists for tables
  List<Map<String, String>> employeesList = [];
  List<Map<String, String>> imagesList = [];

  @override
  void initState() {
    super.initState();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();

    // Auto-fill location on load
    _initLocation();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    processTypeController.dispose();
    activityController.dispose();
    descriptionController.dispose();
    objectiveController.dispose();
    activityDateController.dispose();
    meetingVenueController.dispose();
    areaController.dispose();
    cityNameController.dispose();
    districtController.dispose();
    pinCodeController.dispose();
    productController.dispose();
    employeesCountController.dispose();
    channelPartnerCountController.dispose();
    influencersCountController.dispose();
    totalParticipantsController.dispose();
    ruralUrbanController.dispose();
    latitudeController.dispose();
    longitudeController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        // Here you would create and submit the activity entry
        // For now, we'll just show a success message

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text('Activity entry submitted successfully'),
                  ),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 5),
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Unexpected error: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  void _saveAsDraft() {
    // Save form data to SharedPreferences
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.save, color: Colors.white, size: 20),
            SizedBox(width: 8),
            Expanded(child: Text('Draft saved successfully')),
          ],
        ),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
        duration: Duration(seconds: 4),
      ),
    );
  }

  // --- GEOLOCATION (using web JavaScript helper from index.html) ---
  Future<void> _initLocation() async {
    setState(() => _isGettingLocation = true);
    try {
      await _getWebLocation();
    } catch (e) {
      _toast('Could not fetch location: $e');
    } finally {
      if (mounted) setState(() => _isGettingLocation = false);
    }
  }

  Future<void> _getWebLocation() async {
    try {
      // First try to get from localStorage (cached values from index.html)
      final lastLat = web.window.localStorage.getItem('lastLat');
      final lastLng = web.window.localStorage.getItem('lastLng');
      if (lastLat != null && lastLng != null && mounted) {
        latitudeController.text = double.parse(lastLat).toStringAsFixed(6);
        longitudeController.text = double.parse(lastLng).toStringAsFixed(6);
      }

      // Use the JavaScript geolocation helper from index.html
      final jsWindow = web.window as WindowWithGeoLocation;
      final result = await jsWindow.requestGeoPosition().toDart;
      if (result != null) {
        // Convert JSAny to proper Dart object
        final resultDart = result.dartify();
        if (resultDart is Map<String, dynamic>) {
          if (resultDart['ok'] == true) {
            if (mounted) {
              final lat = resultDart['lat'] as num?;
              final lng = resultDart['lng'] as num?;
              if (lat != null && lng != null) {
                latitudeController.text = lat.toStringAsFixed(6);
                longitudeController.text = lng.toStringAsFixed(6);
              }
            }
          } else {
            final error = resultDart['error']?.toString() ?? 'Unknown error';
            _toast('Web geolocation failed: $error');
          }
        }
      }
    } catch (e) {
      _toast('Web geolocation error: $e');
    }
  }

  void _captureLocation() {
    // Location capture logic - now calls the web location
    _initLocation();
  }

  void _toast(String msg) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg), behavior: SnackBarBehavior.floating),
    );
  }

  void _addEmployee() {
    // Add a new empty employee to the list
    setState(() {
      employeesList.add({'employeeCode': '', 'name': ''});
    });
  }

  void _deleteEmployee(int index) {
    // Remove an employee from the list
    setState(() {
      employeesList.removeAt(index);
    });
  }

  void _addImage() {
    // Add a new empty image to the list
    setState(() {
      imagesList.add({'type': 'Select', 'path': ''});
    });
  }

  void _deleteImage(int index) {
    // Remove an image from the list
    setState(() {
      imagesList.removeAt(index);
    });
  }

  Widget _buildPainterMeetSection(BoxConstraints constraints) {
    if (activityController.text != 'Painter Meet') return SizedBox.shrink();
    final isMobile = constraints.maxWidth <= 800;
    return _buildModernSection(
      title: 'List of Painter/Contractor/Tile Applicator',
      icon: Icons.format_paint,
      children: [
        isMobile ? _buildPainterCardsMobile() : _buildPainterMeetTableDesktop(),
        const SizedBox(height: 16),
        Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            ElevatedButton(
              onPressed: _addPainterRow,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.grey.shade200,
                foregroundColor: Colors.black87,
                elevation: 0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text('Add'),
            ),
            const SizedBox(width: 16),
            ElevatedButton(
              onPressed: painterList.isEmpty ? null : _deletePainterRow,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red.shade400,
                foregroundColor: Colors.white,
                elevation: 0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text('Delete'),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildPainterMeetTableDesktop() {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Container(
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey.shade300),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          children: [
            // Table Header
            Container(
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(8),
                  topRight: Radius.circular(8),
                ),
              ),
              child: Row(
                children: [
                  _buildTableHeaderCell('Del', flex: 1),
                  _buildTableHeaderCell('Type', flex: 2),
                  _buildTableHeaderCell('Mobile No', flex: 2),
                  _buildTableHeaderCell('Name', flex: 2),
                  _buildTableHeaderCell('Past Data', flex: 2),
                  _buildTableHeaderCell('KYC Collected', flex: 3),
                  _buildTableHeaderCell('App Downloaded', flex: 2),
                ],
              ),
            ),
            if (painterList.isEmpty)
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Text(
                  'No painters added yet. Click "Add" to add a painter.',
                  style: TextStyle(color: Colors.grey.shade600),
                ),
              )
            else
              ...painterList.asMap().entries.map((entry) {
                final index = entry.key;
                final painter = entry.value;
                return Row(
                  children: [
                    _buildTableCell(
                      Checkbox(
                        value: false,
                        onChanged: (value) {
                          if (value == true) _deletePainterAt(index);
                        },
                      ),
                      flex: 1,
                    ),
                    _buildTableCell(
                      DropdownButtonFormField<String>(
                        value: painter['type']!.isEmpty
                            ? null
                            : painter['type'],
                        items: ['Painter', 'Contractor', 'Tile Applicator']
                            .map(
                              (t) => DropdownMenuItem(value: t, child: Text(t)),
                            )
                            .toList(),
                        onChanged: (val) {
                          setState(
                            () => painterList[index]['type'] = val ?? '',
                          );
                        },
                        decoration: InputDecoration(
                          isDense: true,
                          border: InputBorder.none,
                          hintText: 'Select',
                        ),
                      ),
                      flex: 2,
                    ),
                    _buildTableCell(
                      TextFormField(
                        initialValue: painter['mobile'],
                        decoration: InputDecoration(
                          border: InputBorder.none,
                          hintText: 'Mobile',
                        ),
                        onChanged: (val) => painterList[index]['mobile'] = val,
                      ),
                      flex: 2,
                    ),
                    _buildTableCell(
                      TextFormField(
                        initialValue: painter['name'],
                        decoration: InputDecoration(
                          border: InputBorder.none,
                          hintText: 'Name',
                        ),
                        onChanged: (val) => painterList[index]['name'] = val,
                      ),
                      flex: 2,
                    ),
                    _buildTableCell(
                      TextFormField(
                        initialValue: painter['pastData'],
                        decoration: InputDecoration(
                          border: InputBorder.none,
                          hintText: 'Past Data',
                        ),
                        onChanged: (val) =>
                            painterList[index]['pastData'] = val,
                      ),
                      flex: 2,
                    ),
                    _buildTableCell(
                      Wrap(
                        spacing: 4,
                        children:
                            ['Full KYC', 'Partial KYC', 'No', 'Already KYC']
                                .map(
                                  (kyc) => OutlinedButton(
                                    onPressed: () => setState(
                                      () => painterList[index]['kyc'] = kyc,
                                    ),
                                    style: OutlinedButton.styleFrom(
                                      side: BorderSide(color: Colors.blue),
                                      backgroundColor: painter['kyc'] == kyc
                                          ? Colors.blue.shade100
                                          : null,
                                    ),
                                    child: Text(
                                      kyc,
                                      style: TextStyle(fontSize: 12),
                                    ),
                                  ),
                                )
                                .toList(),
                      ),
                      flex: 3,
                    ),
                    _buildTableCell(
                      Row(
                        children: [
                          OutlinedButton(
                            onPressed: () => setState(
                              () => painterList[index]['appDownloaded'] = 'Yes',
                            ),
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(color: Colors.blue),
                              backgroundColor: painter['appDownloaded'] == 'Yes'
                                  ? Colors.blue.shade100
                                  : null,
                            ),
                            child: Text('Yes', style: TextStyle(fontSize: 12)),
                          ),
                          SizedBox(width: 4),
                          OutlinedButton(
                            onPressed: () => setState(
                              () => painterList[index]['appDownloaded'] = 'No',
                            ),
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(color: Colors.blue),
                              backgroundColor: painter['appDownloaded'] == 'No'
                                  ? Colors.blue.shade100
                                  : null,
                            ),
                            child: Text('No', style: TextStyle(fontSize: 12)),
                          ),
                        ],
                      ),
                      flex: 2,
                    ),
                  ],
                );
              }).toList(),
          ],
        ),
      ),
    );
  }

  Widget _buildPainterCardsMobile() {
    return Column(
      children: painterList.isEmpty
          ? [
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Text(
                  'No painters added yet. Click "Add" to add a painter.',
                  style: TextStyle(color: Colors.grey.shade600),
                ),
              ),
            ]
          : painterList.asMap().entries.map((entry) {
              final index = entry.key;
              final painter = entry.value;
              return Card(
                margin: EdgeInsets.only(bottom: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: DropdownButtonFormField<String>(
                              value: painter['type']!.isEmpty
                                  ? null
                                  : painter['type'],
                              items:
                                  ['Painter', 'Contractor', 'Tile Applicator']
                                      .map(
                                        (t) => DropdownMenuItem(
                                          value: t,
                                          child: Text(t),
                                        ),
                                      )
                                      .toList(),
                              onChanged: (val) {
                                setState(
                                  () => painterList[index]['type'] = val ?? '',
                                );
                              },
                              decoration: InputDecoration(
                                labelText: 'Type',
                                border: OutlineInputBorder(),
                              ),
                            ),
                          ),
                          IconButton(
                            icon: Icon(Icons.delete, color: Colors.red),
                            onPressed: () => _deletePainterAt(index),
                          ),
                        ],
                      ),
                      const SizedBox(height: 10),
                      TextFormField(
                        initialValue: painter['mobile'],
                        decoration: InputDecoration(
                          labelText: 'Mobile No',
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (val) => painterList[index]['mobile'] = val,
                      ),
                      const SizedBox(height: 10),
                      TextFormField(
                        initialValue: painter['name'],
                        decoration: InputDecoration(
                          labelText: 'Name',
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (val) => painterList[index]['name'] = val,
                      ),
                      const SizedBox(height: 10),
                      TextFormField(
                        initialValue: painter['pastData'],
                        decoration: InputDecoration(
                          labelText: 'Past Data',
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (val) =>
                            painterList[index]['pastData'] = val,
                      ),
                      const SizedBox(height: 10),
                      Align(
                        alignment: Alignment.centerLeft,
                        child: Text('KYC Collected:'),
                      ),
                      Wrap(
                        spacing: 4,
                        children:
                            ['Full KYC', 'Partial KYC', 'No', 'Already KYC']
                                .map(
                                  (kyc) => OutlinedButton(
                                    onPressed: () => setState(
                                      () => painterList[index]['kyc'] = kyc,
                                    ),
                                    style: OutlinedButton.styleFrom(
                                      side: BorderSide(color: Colors.blue),
                                      backgroundColor: painter['kyc'] == kyc
                                          ? Colors.blue.shade100
                                          : null,
                                    ),
                                    child: Text(
                                      kyc,
                                      style: TextStyle(fontSize: 12),
                                    ),
                                  ),
                                )
                                .toList(),
                      ),
                      const SizedBox(height: 10),
                      Align(
                        alignment: Alignment.centerLeft,
                        child: Text('App Downloaded:'),
                      ),
                      Row(
                        children: [
                          OutlinedButton(
                            onPressed: () => setState(
                              () => painterList[index]['appDownloaded'] = 'Yes',
                            ),
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(color: Colors.blue),
                              backgroundColor: painter['appDownloaded'] == 'Yes'
                                  ? Colors.blue.shade100
                                  : null,
                            ),
                            child: Text('Yes', style: TextStyle(fontSize: 12)),
                          ),
                          SizedBox(width: 8),
                          OutlinedButton(
                            onPressed: () => setState(
                              () => painterList[index]['appDownloaded'] = 'No',
                            ),
                            style: OutlinedButton.styleFrom(
                              side: BorderSide(color: Colors.blue),
                              backgroundColor: painter['appDownloaded'] == 'No'
                                  ? Colors.blue.shade100
                                  : null,
                            ),
                            child: Text('No', style: TextStyle(fontSize: 12)),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              );
            }).toList(),
    );
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet =
            constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;

        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              // Submit and Save as Draft Buttons
                              if (activityController.text == 'Painter Meet')
                                _buildPainterMeetSection(constraints),
                              const SizedBox(height: 24),
                              _buildActionButtons(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Activity Details',
                icon: Icons.event_note_rounded,
                children: [
                  ModernDropdown(
                    label: 'Process Type',
                    icon: Icons.category_outlined,
                    items: const ['Add', 'Process 2', 'Process 3'],
                    value: processTypeController.text.isEmpty
                        ? null
                        : processTypeController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        processTypeController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Activity',
                    icon: Icons.event_outlined,
                    items: [
                      'Select',
                      'Painter Meet',
                      'Activity 2',
                      'Activity 3',
                    ],
                    value: activityController.text.isEmpty
                        ? null
                        : activityController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        activityController.text = newValue ?? '';
                        if (newValue == 'Painter Meet') {
                          if (painterList.isEmpty) _addPainterRow();
                        } else {
                          painterList.clear();
                        }
                      });
                    },

                    isRequired: true,
                  ),

                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: descriptionController,
                    label: 'Description',
                    icon: Icons.description_outlined,
                    isRequired: true,
                    isMultiline: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Objective',
                    icon: Icons.flag_outlined,
                    items: ['Select', 'Objective 2', 'Objective 3'],
                    value: objectiveController.text.isEmpty
                        ? null
                        : objectiveController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        objectiveController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: activityDateController,
                    label: 'Activity Date',
                    icon: Icons.calendar_today_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: meetingVenueController,
                    label: 'Meeting Venue(Enter Address)',
                    icon: Icons.location_on_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Area',
                    icon: Icons.map_outlined,
                    items: ['Select', 'Area 2', 'Area 3'],
                    value: areaController.text.isEmpty
                        ? null
                        : areaController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        areaController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: cityNameController,
                    label: 'City Name',
                    icon: Icons.location_city_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'District',
                    icon: Icons.location_city_outlined,
                    items: ['Select', 'District 2', 'District 3'],
                    value: districtController.text.isEmpty
                        ? null
                        : districtController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        districtController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Pin Code',
                    icon: Icons.pin_outlined,
                    items: ['Select', 'Pin 2', 'Pin 3'],
                    value: pinCodeController.text.isEmpty
                        ? null
                        : pinCodeController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        pinCodeController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Product',
                    icon: Icons.inventory_2_outlined,
                    items: ['0 options selected', 'Product 2', 'Product 3'],
                    value: productController.text.isEmpty
                        ? null
                        : productController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        productController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: employeesCountController,
                    label: 'No. of Employees',
                    icon: Icons.people_outline,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: channelPartnerCountController,
                    label: 'No. of Channel Partner',
                    icon: Icons.business_outlined,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: influencersCountController,
                    label: 'No. of Influencers',
                    icon: Icons.people_alt_outlined,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: totalParticipantsController,
                    label: 'Total Participants',
                    icon: Icons.groups_outlined,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Rural / Urban',
                    icon: Icons.home_work_outlined,
                    items: ['Select', 'Rural', 'Urban'],
                    value: ruralUrbanController.text.isEmpty
                        ? null
                        : ruralUrbanController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        ruralUrbanController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  Column(
                    children: [
                      _buildModernTextField(
                        controller: latitudeController,
                        label: 'Latitude',
                        icon: Icons.my_location_outlined,
                        isRequired: false,
                        suffix: IconButton(
                          tooltip: 'Refresh location',
                          icon: const Icon(Icons.gps_fixed),
                          onPressed: _isGettingLocation
                              ? null
                              : () async {
                                  HapticFeedback.selectionClick();
                                  await _initLocation();
                                },
                        ),
                      ),
                      const SizedBox(height: 24),
                      _buildModernTextField(
                        controller: longitudeController,
                        label: 'Longitude',
                        icon: Icons.my_location_outlined,
                        isRequired: false,
                        suffix: IconButton(
                          tooltip: 'Refresh location',
                          icon: const Icon(Icons.gps_fixed),
                          onPressed: _isGettingLocation
                              ? null
                              : () async {
                                  HapticFeedback.selectionClick();
                                  await _initLocation();
                                },
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),

                  Row(
                    children: [
                      const Icon(
                        Icons.info_outline,
                        size: 16,
                        color: Colors.grey,
                      ),
                      const SizedBox(width: 6),
                      Expanded(
                        child: Text(
                          _isGettingLocation
                              ? 'Fetching GPS…'
                              : (latitudeController.text.isEmpty ||
                                    longitudeController.text.isEmpty)
                              ? 'Tap the GPS icon if fields are empty.'
                              : 'Coordinates captured from your device GPS.',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey.shade700,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),

            // Right Column
            Expanded(
              child: Column(
                children: [
                  // BW Employees Present Table
                  _buildModernSection(
                    title: 'BW Employees Present',
                    icon: Icons.people_outline,
                    children: [
                      _buildEmployeesTable(),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          ElevatedButton(
                            onPressed: _addEmployee,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.grey.shade200,
                              foregroundColor: Colors.black87,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Add'),
                          ),
                          const SizedBox(width: 16),
                          ElevatedButton(
                            onPressed: employeesList.isEmpty
                                ? null
                                : () {
                                    if (employeesList.isNotEmpty) {
                                      _deleteEmployee(employeesList.length - 1);
                                    }
                                  },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red.shade400,
                              foregroundColor: Colors.white,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),

                  // Image Upload Section
                  _buildModernSection(
                    title: 'Image Upload',
                    icon: Icons.image_outlined,
                    children: [
                      _buildImageUploadTable(),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          ElevatedButton(
                            onPressed: _addImage,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.grey.shade200,
                              foregroundColor: Colors.black87,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Add'),
                          ),
                          const SizedBox(width: 16),
                          ElevatedButton(
                            onPressed: imagesList.isEmpty
                                ? null
                                : () {
                                    if (imagesList.isNotEmpty) {
                                      _deleteImage(imagesList.length - 1);
                                    }
                                  },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red.shade400,
                              foregroundColor: Colors.white,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Activity Details Section
        _buildModernSection(
          title: 'Activity Details',
          icon: Icons.event_note_rounded,
          children: [
            ModernDropdown(
              label: 'Process Type',
              icon: Icons.category_outlined,
              items: const ['Add', 'Process 2', 'Process 3'],
              value: processTypeController.text.isEmpty
                  ? null
                  : processTypeController.text,
              onChanged: (String? newValue) {
                setState(() {
                  processTypeController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Activity',
              icon: Icons.event_outlined,
              items: ['Select', 'Painter Meet', 'Activity 2', 'Activity 3'],
              value: activityController.text.isEmpty
                  ? null
                  : activityController.text,
              onChanged: (String? newValue) {
                setState(() {
                  activityController.text = newValue ?? '';
                  // Show painter row table if selecting "Painter Meet", otherwise clear
                  if (newValue == 'Painter Meet') {
                    if (painterList.isEmpty) _addPainterRow();
                  } else {
                    painterList.clear();
                  }
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: descriptionController,
              label: 'Description',
              icon: Icons.description_outlined,
              isRequired: true,
              isMultiline: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Objective',
              icon: Icons.flag_outlined,
              items: ['Select', 'Objective 2', 'Objective 3'],
              value: objectiveController.text.isEmpty
                  ? null
                  : objectiveController.text,
              onChanged: (String? newValue) {
                setState(() {
                  objectiveController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernDateField(
              controller: activityDateController,
              label: 'Activity Date',
              icon: Icons.calendar_today_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: meetingVenueController,
              label: 'Meeting Venue(Enter Address)',
              icon: Icons.location_on_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Area',
              icon: Icons.map_outlined,
              items: ['Select', 'Area 2', 'Area 3'],
              value: areaController.text.isEmpty ? null : areaController.text,
              onChanged: (String? newValue) {
                setState(() {
                  areaController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: cityNameController,
              label: 'City Name',
              icon: Icons.location_city_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'District',
              icon: Icons.location_city_outlined,
              items: ['Select', 'District 2', 'District 3'],
              value: districtController.text.isEmpty
                  ? null
                  : districtController.text,
              onChanged: (String? newValue) {
                setState(() {
                  districtController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Pin Code',
              icon: Icons.pin_outlined,
              items: ['Select', 'Pin 2', 'Pin 3'],
              value: pinCodeController.text.isEmpty
                  ? null
                  : pinCodeController.text,
              onChanged: (String? newValue) {
                setState(() {
                  pinCodeController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Product',
              icon: Icons.inventory_2_outlined,
              items: ['0 options selected', 'Product 2', 'Product 3'],
              value: productController.text.isEmpty
                  ? null
                  : productController.text,
              onChanged: (String? newValue) {
                setState(() {
                  productController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: employeesCountController,
              label: 'No. of Employees',
              icon: Icons.people_outline,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: channelPartnerCountController,
              label: 'No. of Channel Partner',
              icon: Icons.business_outlined,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: influencersCountController,
              label: 'No. of Influencers',
              icon: Icons.people_alt_outlined,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: totalParticipantsController,
              label: 'Total Participants',
              icon: Icons.groups_outlined,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Rural / Urban',
              icon: Icons.home_work_outlined,
              items: ['Select', 'Rural', 'Urban'],
              value: ruralUrbanController.text.isEmpty
                  ? null
                  : ruralUrbanController.text,
              onChanged: (String? newValue) {
                setState(() {
                  ruralUrbanController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            Column(
              children: [
                _buildModernTextField(
                  controller: latitudeController,
                  label: 'Latitude',
                  icon: Icons.my_location_outlined,
                  isRequired: false,
                  suffix: IconButton(
                    tooltip: 'Refresh location',
                    icon: const Icon(Icons.gps_fixed),
                    onPressed: _isGettingLocation
                        ? null
                        : () async {
                            HapticFeedback.selectionClick();
                            await _initLocation();
                          },
                  ),
                ),
                const SizedBox(height: 24),
                _buildModernTextField(
                  controller: longitudeController,
                  label: 'Longitude',
                  icon: Icons.my_location_outlined,
                  isRequired: false,
                  suffix: IconButton(
                    tooltip: 'Refresh location',
                    icon: const Icon(Icons.gps_fixed),
                    onPressed: _isGettingLocation
                        ? null
                        : () async {
                            HapticFeedback.selectionClick();
                            await _initLocation();
                          },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                const Icon(Icons.info_outline, size: 16, color: Colors.grey),
                const SizedBox(width: 6),
                Expanded(
                  child: Text(
                    _isGettingLocation
                        ? 'Fetching GPS…'
                        : (latitudeController.text.isEmpty ||
                              longitudeController.text.isEmpty)
                        ? 'Tap the GPS icon if fields are empty.'
                        : 'Coordinates captured from your device GPS.',
                    style: TextStyle(fontSize: 12, color: Colors.grey.shade700),
                  ),
                ),
              ],
            ),
          ],
        ),
        const SizedBox(height: 24),
        // BW Employees Present Table
        _buildModernSection(
          title: 'BW Employees Present',
          icon: Icons.people_outline,
          children: [
            _buildEmployeesTable(),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                ElevatedButton(
                  onPressed: _addEmployee,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey.shade200,
                    foregroundColor: Colors.black87,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Add'),
                ),
                const SizedBox(width: 16),
                ElevatedButton(
                  onPressed: employeesList.isEmpty
                      ? null
                      : () {
                          if (employeesList.isNotEmpty) {
                            _deleteEmployee(employeesList.length - 1);
                          }
                        },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red.shade400,
                    foregroundColor: Colors.white,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Delete'),
                ),
              ],
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Image Upload Section
        _buildModernSection(
          title: 'Image Upload',
          icon: Icons.image_outlined,
          children: [
            _buildImageUploadTable(),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                ElevatedButton(
                  onPressed: _addImage,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey.shade200,
                    foregroundColor: Colors.black87,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Add'),
                ),
                const SizedBox(width: 16),
                ElevatedButton(
                  onPressed: imagesList.isEmpty
                      ? null
                      : () {
                          if (imagesList.isNotEmpty) {
                            _deleteImage(imagesList.length - 1);
                          }
                        },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red.shade400,
                    foregroundColor: Colors.white,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Delete'),
                ),
              ],
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildEmployeesTable() {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          // Table Header
          Container(
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
            ),
            child: Row(
              children: [
                _buildTableHeaderCell('Del', flex: 1),
                _buildTableHeaderCell('BW Employees Present', flex: 3),
                _buildTableHeaderCell('Employee Code', flex: 3),
                _buildTableHeaderCell('Name', flex: 5),
              ],
            ),
          ),
          // Table Rows
          if (employeesList.isEmpty)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'No employees added yet. Click "Add" to add an employee.',
                style: TextStyle(color: Colors.grey.shade600),
              ),
            )
          else
            ...employeesList.asMap().entries.map((entry) {
              final index = entry.key;
              final employee = entry.value;
              return Row(
                children: [
                  _buildTableCell(
                    Checkbox(
                      value: false,
                      onChanged: (value) {
                        if (value == true) {
                          _deleteEmployee(index);
                        }
                      },
                    ),
                    flex: 1,
                  ),
                  _buildTableCell(Text('Employee ${index + 1}'), flex: 3),
                  _buildTableCell(
                    TextField(
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Enter code',
                      ),
                      onChanged: (value) {
                        setState(() {
                          employeesList[index]['employeeCode'] = value;
                        });
                      },
                    ),
                    flex: 3,
                  ),
                  _buildTableCell(
                    TextField(
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Enter name',
                      ),
                      onChanged: (value) {
                        setState(() {
                          employeesList[index]['name'] = value;
                        });
                      },
                    ),
                    flex: 5,
                  ),
                ],
              );
            }).toList(),
        ],
      ),
    );
  }

  Widget _buildImageUploadTable() {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          // Table Header
          Container(
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
            ),
            child: Row(
              children: [
                _buildTableHeaderCell('Del', flex: 1),
                _buildTableHeaderCell('Upload Supporting', flex: 5),
                _buildTableHeaderCell('View', flex: 5),
              ],
            ),
          ),
          // Table Rows
          if (imagesList.isEmpty)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'No images added yet. Click "Add" to add an image.',
                style: TextStyle(color: Colors.grey.shade600),
              ),
            )
          else
            ...imagesList.asMap().entries.map((entry) {
              final index = entry.key;
              final image = entry.value;
              return Row(
                children: [
                  _buildTableCell(
                    Checkbox(
                      value: false,
                      onChanged: (value) {
                        if (value == true) {
                          _deleteImage(index);
                        }
                      },
                    ),
                    flex: 1,
                  ),
                  _buildTableCell(
                    ModernDropdown(
                      label: '',
                      icon: Icons.category_outlined,
                      items: ['Select', 'Image', 'Document'],
                      value: image['type'],
                      onChanged: (String? newValue) {
                        setState(() {
                          imagesList[index]['type'] = newValue ?? 'Select';
                        });
                      },
                      isRequired: false,
                    ),
                    flex: 5,
                  ),
                  _buildTableCell(
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        ElevatedButton(
                          onPressed: () {
                            // Upload image logic
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            foregroundColor: Colors.white,
                          ),
                          child: Text('Upload Image'),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: image['path']!.isEmpty
                              ? null
                              : () {
                                  // View image logic
                                },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            foregroundColor: Colors.white,
                          ),
                          child: Text('View Image'),
                        ),
                      ],
                    ),
                    flex: 5,
                  ),
                ],
              );
            }).toList(),
        ],
      ),
    );
  }

  Widget _buildTableHeaderCell(String text, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 12, horizontal: 8),
        decoration: BoxDecoration(
          border: Border(
            right: BorderSide(color: Colors.grey.shade300),
            bottom: BorderSide(color: Colors.grey.shade300),
          ),
        ),
        child: Text(text, style: TextStyle(fontWeight: FontWeight.bold)),
      ),
    );
  }

  Widget _buildTableCell(Widget child, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
        decoration: BoxDecoration(
          border: Border(
            right: BorderSide(color: Colors.grey.shade300),
            bottom: BorderSide(color: Colors.grey.shade300),
          ),
        ),
        child: child,
      ),
    );
  }

  Widget _buildActionButtons() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          width: 200,
          height: 56,
          child: ElevatedButton(
            onPressed: _saveAsDraft,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: const Text(
              'Save as Draft',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ),
        const SizedBox(width: 24),
        SizedBox(
          width: 200,
          height: 56,
          child: ElevatedButton(
            onPressed: _isSubmitting ? null : _submitForm,
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF1E3A8A),
              foregroundColor: Colors.white,
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: _isSubmitting
                ? const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(width: 16),
                      Text(
                        'Submitting...',
                        style: TextStyle(color: Colors.white),
                      ),
                    ],
                  )
                : const Text(
                    'Submit',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
          ),
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'Activity Entry',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.home, color: Color(0xFF1E3A8A)),
          onPressed: () {
            // Navigate to home
          },
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Activity Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter activity details and capture location',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumeric = false,
    bool isMultiline = false,
    bool isRequired = true,
    Widget? suffix,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: suffix,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone
          ? TextInputType.phone
          : isNumeric
          ? TextInputType.number
          : isMultiline
          ? TextInputType.multiline
          : TextInputType.text,
      maxLines: isMultiline ? 3 : 1,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[0-9]+$').hasMatch(value)) {
            return 'Please enter valid number';
          }
        }
        if (isNumeric && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[0-9]+$').hasMatch(value)) {
            return 'Please enter valid number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }
}















import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import 'package:rak_web/core/controllers/home_controller.dart';
import 'package:rak_web/core/di/service_locator.dart';
import 'package:rak_web/features/home/widgets/home_tab.dart';
import 'package:rak_web/core/utils/app_logger.dart';
import 'package:rak_web/core/services/auth_service.dart';

/// Refactored HomeScreen with clean architecture
class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  late HomeController _controller;
  late AnimationController _mainController;
  late AnimationController _navController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<double> _navScaleAnimation;
  final AppLogger _logger = AppLogger();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    _controller = homeController;
    _controller.addListener(_onControllerChanged);
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _navController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _navScaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
      CurvedAnimation(parent: _navController, curve: Curves.elasticOut),
    );
    _mainController.forward();
    _navController.forward();
    _logger.info('HomeScreenRefactored initialized');
  }

  @override
  void dispose() {
    _controller.removeListener(_onControllerChanged);
    _mainController.dispose();
    _navController.dispose();
    _logger.info('HomeScreenRefactored disposed');
    super.dispose();
  }

  void _onControllerChanged() {
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
      ),
    );
    return LayoutBuilder(
      builder: (context, constraints) {
        final isWeb = constraints.maxWidth > 800;
        final isTablet =
            constraints.maxWidth > 600 && constraints.maxWidth <= 800;
        final isMobile = constraints.maxWidth <= 600;
        final isDesktop = constraints.maxWidth > 1200;

        return Scaffold(
          key: _scaffoldKey,
          backgroundColor: const Color(0xFFF3F4F6),
          appBar: isWeb ? null : _buildAppBar(),
          drawer: isWeb ? null : _buildDrawerMenu(),
          body: isWeb
              ? _buildDesktopLayout(isDesktop: isDesktop)
              : _buildMobileLayout(isTablet: isTablet, isMobile: isMobile),
        );
      },
    );
  }

  Widget _buildDesktopLayout({bool isDesktop = false}) {
    return Row(
      children: [
        _buildSidebar(isDesktop: isDesktop),
        Expanded(
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(maxWidth: isDesktop ? 1200 : 1000),
              child: _buildMainContent(
                isWeb: true,
                isTablet: false,
                isMobile: false,
                isDesktop: isDesktop,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildMobileLayout({bool isTablet = false, bool isMobile = false}) {
    return Stack(
      children: [
        _buildMainContent(
          isWeb: false,
          isTablet: isTablet,
          isMobile: isMobile,
          isDesktop: false,
        ),
        _buildBottomNavigation(isWeb: false, isTablet: isTablet),
      ],
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      backgroundColor: const Color(0xFFF3F4F6),
      elevation: 0,
      toolbarHeight: 70,
      leading: Builder(
        builder: (context) => IconButton(
          onPressed: () {
            Scaffold.of(context).openDrawer();
          },
          icon: const Icon(
            Icons.menu_rounded,
            color: Color(0xFF1E3A8A),
            size: 24,
          ),
        ),
      ),
      title: Container(
        height: 50,
        margin: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(25),
          border: Border.all(color: Colors.grey.shade200, width: 1),
        ),
        child: Row(
          children: [
            const SizedBox(width: 20),
            Icon(Icons.search_rounded, color: Colors.grey[600], size: 22),
            const SizedBox(width: 12),
            Expanded(
              child: TextField(
                style: TextStyle(
                  color: Colors.grey[800],
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
                decoration: InputDecoration(
                  hintText: 'Search',
                  hintStyle: TextStyle(
                    color: Colors.grey[500],
                    fontSize: 15,
                    fontWeight: FontWeight.w400,
                  ),
                  border: InputBorder.none,
                  contentPadding: const EdgeInsets.symmetric(vertical: 15),
                ),
              ),
            ),
            Container(
              margin: const EdgeInsets.only(right: 8),
              height: 34,
              width: 34,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(17),
                color: const Color(0xFF1E3A8A).withOpacity(0.1),
              ),
              child: IconButton(
                onPressed: () {},
                padding: EdgeInsets.zero,
                icon: const Icon(
                  Icons.tune_rounded,
                  color: Color(0xFF1E3A8A),
                  size: 18,
                ),
              ),
            ),
          ],
        ),
      ),
      actions: [
        Stack(
          children: [
            IconButton(
              onPressed: () {},
              icon: const Icon(
                Icons.notifications_rounded,
                color: Color(0xFF1E3A8A),
                size: 24,
              ),
            ),
            Positioned(
              right: 8,
              top: 8,
              child: Container(
                height: 8,
                width: 8,
                decoration: BoxDecoration(
                  color: const Color(0xFFEF4444),
                  borderRadius: BorderRadius.circular(4),
                  border: Border.all(color: Colors.white, width: 1.5),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(width: 8),
        IconButton(
          onPressed: () async {
            await AuthService.logout();
            if (mounted) {
              context.go('/login-password');
            }
          },
          icon: const Icon(
            Icons.logout_rounded,
            color: Color(0xFF1E3A8A),
            size: 24,
          ),
          tooltip: 'Logout',
        ),
        const SizedBox(width: 12),
      ],
    );
  }

  Widget _buildSidebar({bool isDesktop = false}) {
    return Container(
      width: isDesktop ? 280 : 240,
      decoration: const BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Color(0x0F000000),
            blurRadius: 10,
            offset: Offset(1, 0),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              color: Colors.white,
              border: Border(
                bottom: BorderSide(color: Colors.grey, width: 0.5),
              ),
            ),
            child: Center(
              child: Image.asset(
                'assets/images/rak_logo.jpg',
                height: isDesktop ? 120 : 100,
                width: isDesktop ? 120 : 100,
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) => Icon(
                  Icons.business,
                  color: Colors.grey,
                  size: isDesktop ? 120 : 100,
                ),
              ),
            ),
          ),
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 8),
              children: [
                _buildDrawerItem(
                  icon: Icons.dashboard,
                  title: 'Dashboard',
                  onTap: () {
                    context.push('/dashboard');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.format_paint,
                  title: 'Painter Registration',
                  onTap: () {
                    context.push('/painter-registration');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.construction,
                  title: 'Contractor Registration',
                  onTap: () {
                    context.push('/contractor-registration');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.approval,
                  title: 'Approval Dashboard',
                  onTap: () {
                    context.push('/approval-dashboard');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.storefront,
                  title: 'Retailer Onboarding',
                  onTap: () {
                    context.push('/retailer-onboarding');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.add_box,
                  title: 'New Product Entry',
                  onTap: () {
                    context.push('/new-product-entry');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.inventory,
                  title: 'Material Distribution',
                  onTap: () {
                    context.push('/sample-distribution');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.science,
                  title: 'Sampling Drive Form',
                  onTap: () {
                    context.push('/sampling-drive-form');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.science,
                  title: 'Incentive Scheme Form',
                  onTap: () {
                    context.push('/incentive-scheme-form');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.local_offer,
                  title: 'Expert Meet Claim',
                  onTap: () {
                    context.push('/expert-meet-claim');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.event_note,
                  title: 'Activity Entry',
                  onTap: () {
                    context.push('/activity-entry');
                  },
                ),
                const Divider(height: 32),
                _buildDrawerItem(
                  icon: Icons.settings,
                  title: 'Settings',
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Settings - Coming Soon!')),
                    );
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.help_outline,
                  title: 'Help & Support',
                  onTap: () {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Help & Support - Coming Soon!'),
                      ),
                    );
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.logout,
                  title: 'Logout',
                  onTap: () async {
                    await AuthService.logout();
                    if (context.mounted) {
                      context.go('/login-password');
                    }
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDrawerMenu() {
    return Drawer(
      backgroundColor: Colors.white,
      width: MediaQuery.of(context).size.width * 0.75,
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              color: Colors.white,
              border: Border(
                bottom: BorderSide(color: Colors.grey, width: 0.5),
              ),
            ),
            child: Center(
              child: Image.asset(
                'assets/images/rak_logo.jpg',
                height: 100,
                width: 100,
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) =>
                    const Icon(Icons.business, color: Colors.grey, size: 100),
              ),
            ),
          ),
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 8),
              children: [
                _buildDrawerItem(
                  icon: Icons.dashboard,
                  title: 'Dashboard',
                  onTap: () {
                    context.pop();
                    context.push('/dashboard');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.format_paint,
                  title: 'Painter Registration',
                  onTap: () {
                    context.pop();
                    context.push('/painter-registration');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.construction,
                  title: 'Contractor Registration',
                  onTap: () {
                    context.pop();
                    context.push('/contractor-registration');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.approval,
                  title: 'Approval Dashboard',
                  onTap: () {
                    context.pop();
                    context.push('/approval-dashboard');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.storefront,
                  title: 'Retailer Onboarding',
                  onTap: () {
                    context.pop();
                    context.push('/retailer-onboarding');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.add_box,
                  title: 'New Product Entry',
                  onTap: () {
                    context.pop();
                    context.push('/new-product-entry');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.inventory,
                  title: 'Material Distribution',
                  onTap: () {
                    context.pop();
                    context.push('/sample-distribution');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.science,
                  title: 'Sampling Drive Form',
                  onTap: () {
                    context.pop();
                    context.push('/sampling-drive-form');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.science,
                  title: 'Incentive Scheme Form',
                  onTap: () {
                    context.pop();
                    context.push('/incentive-scheme-form');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.local_offer,
                  title: 'Expert Meet Claim',
                  onTap: () {
                    context.pop();
                    context.push('/expert-meet-claim');
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.event_note,
                  title: 'Activity Entry',
                  onTap: () {
                    context.pop();
                    context.push('/activity-entry');
                  },
                ),
                const Divider(height: 32),
                _buildDrawerItem(
                  icon: Icons.settings,
                  title: 'Settings',
                  onTap: () {
                    context.pop();
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('Settings - Coming Soon!')),
                    );
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.help_outline,
                  title: 'Help & Support',
                  onTap: () {
                    context.pop();
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Help & Support - Coming Soon!'),
                      ),
                    );
                  },
                ),
                _buildDrawerItem(
                  icon: Icons.logout,
                  title: 'Logout',
                  onTap: () async {
                    await AuthService.logout();
                    if (context.mounted) {
                      context.go('/login-password');
                    }
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDrawerItem({
    required IconData icon,
    required String title,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Container(
        height: 40,
        width: 40,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          color: const Color(0xFF1E3A8A).withOpacity(0.1),
        ),
        child: Icon(icon, color: const Color(0xFF1E3A8A), size: 20),
      ),
      title: Text(
        title,
        style: const TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w500,
          color: Colors.black87,
        ),
      ),
      onTap: onTap,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 4),
    );
  }

  Widget _buildMainContent({
    required bool isWeb,
    required bool isTablet,
    required bool isMobile,
    required bool isDesktop,
  }) {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: SlideTransition(
        position: _slideAnimation,
        child: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Color(0xFFF8FAFC), Color(0xFFF1F5F9)],
            ),
          ),
          child: IndexedStack(
            index: _controller.currentIndex,
            children: [
              HomeTab(
                controller: _controller,
                isWeb: isWeb,
                isTablet: isTablet,
                isMobile: isMobile,
                isDesktop: isDesktop,
              ),
              _buildQRScannerTab(
                isWeb: isWeb,
                isTablet: isTablet,
                isDesktop: isDesktop,
              ),
              _buildProfileTab(
                isWeb: isWeb,
                isTablet: isTablet,
                isDesktop: isDesktop,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildQRScannerTab({
    bool isWeb = false,
    bool isTablet = false,
    bool isDesktop = false,
  }) {
    return Container(
      decoration: const BoxDecoration(color: Color(0xFFF3F4F6)),
      child: SafeArea(
        child: Padding(
          padding: EdgeInsets.all(isDesktop ? 40 : 20),
          child: Column(
            children: [
              _buildScannerHeader(isDesktop: isDesktop),
              SizedBox(height: isDesktop ? 40 : 30),
              Expanded(child: _buildScannerOptions(isDesktop: isDesktop)),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildScannerHeader({bool isDesktop = false}) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(isDesktop ? 48 : 32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: const [
          BoxShadow(
            color: Color(0x331E3A8A),
            blurRadius: 20,
            offset: Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            width: isDesktop ? 120 : 100,
            height: isDesktop ? 120 : 100,
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              shape: BoxShape.circle,
              boxShadow: const [
                BoxShadow(
                  color: Color(0x1A000000),
                  blurRadius: 20,
                  offset: Offset(0, 10),
                ),
              ],
            ),
            child: Icon(
              Icons.qr_code_scanner,
              size: isDesktop ? 60 : 50,
              color: Colors.white,
            ),
          ),
          SizedBox(height: isDesktop ? 32 : 24),
          Text(
            'QR Scanner',
            style: TextStyle(
              fontSize: isDesktop ? 40 : 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: isDesktop ? 16 : 12),
          Text(
            'Scan or enter QR codes for quick processing',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: isDesktop ? 20 : 16,
              color: Colors.white70,
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildScannerOptions({bool isDesktop = false}) {
    if (isDesktop) {
      return Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 800),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: _buildScannerCard(
                  'Camera Scan',
                  Icons.camera_alt,
                  const Color(0xFF10B981),
                  () => context.push('/camera-scanner'),
                ),
              ),
              const SizedBox(width: 40),
              Expanded(
                child: _buildScannerCard(
                  'Manual Entry',
                  Icons.keyboard,
                  const Color(0xFF3B82F6),
                  () => context.push('/qr-input'),
                ),
              ),
            ],
          ),
        ),
      );
    }

    return GridView.count(
      crossAxisCount: 2,
      crossAxisSpacing: 20,
      mainAxisSpacing: 20,
      childAspectRatio: 1.1,
      children: [
        _buildScannerCard(
          'Camera Scan',
          Icons.camera_alt,
          const Color(0xFF10B981),
          () => context.push('/camera-scanner'),
        ),
        _buildScannerCard(
          'Manual Entry',
          Icons.keyboard,
          const Color(0xFF3B82F6),
          () => context.push('/qr-input'),
        ),
      ],
    );
  }

  Widget _buildScannerCard(
    String title,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: const [
            BoxShadow(
              color: Color(0x0D000000),
              blurRadius: 20,
              offset: Offset(0, 8),
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 70,
              height: 70,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [color, color.withOpacity(0.8)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                shape: BoxShape.circle,
                boxShadow: [
                  BoxShadow(
                    color: color.withOpacity(0.3),
                    blurRadius: 15,
                    offset: const Offset(0, 8),
                  ),
                ],
              ),
              child: Icon(icon, color: Colors.white, size: 32),
            ),
            const SizedBox(height: 20),
            Text(
              title,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF1F2937),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileTab({
    bool isWeb = false,
    bool isTablet = false,
    bool isDesktop = false,
  }) {
    return SingleChildScrollView(
      padding: EdgeInsets.only(
        left: isDesktop ? 60 : 20,
        right: isDesktop ? 60 : 20,
        top: isDesktop ? 40 : 20,
        bottom: isWeb ? 20 : 120,
      ),
      child: Center(
        child: ConstrainedBox(
          constraints: BoxConstraints(
            maxWidth: isDesktop ? 800 : double.infinity,
          ),
          child: Column(
            children: [
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(isDesktop ? 48 : 32),
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
                  ),
                  borderRadius: BorderRadius.circular(24),
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0x331E3A8A),
                      blurRadius: 20,
                      offset: Offset(0, 10),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    CircleAvatar(
                      radius: isDesktop ? 80 : 60,
                      backgroundColor: Colors.white,
                      child: Icon(
                        Icons.person,
                        size: isDesktop ? 80 : 60,
                        color: const Color(0xFF1E3A8A),
                      ),
                    ),
                    SizedBox(height: isDesktop ? 32 : 24),
                    Text(
                      'Magan',
                      style: TextStyle(
                        fontSize: isDesktop ? 36 : 28,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    SizedBox(height: isDesktop ? 12 : 8),
                    Text(
                      'Gold Member • Partner ID: RAK2024',
                      style: TextStyle(
                        fontSize: isDesktop ? 20 : 16,
                        color: Colors.white70,
                      ),
                    ),
                    SizedBox(height: isDesktop ? 12 : 8),
                    Text(
                      'magan@rakwhitecement.ae',
                      style: TextStyle(
                        fontSize: isDesktop ? 20 : 16,
                        color: Colors.white70,
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: isDesktop ? 48 : 32),
              _buildProfileSection('Account Settings', [
                _buildProfileOption(
                  'Personal Information',
                  Icons.person,
                  const Color(0xFF3B82F6),
                  () {},
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'Security',
                  Icons.security,
                  const Color(0xFF10B981),
                  () {},
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'Notifications',
                  Icons.notifications,
                  const Color(0xFFF59E0B),
                  () {},
                ),
              ]),
              SizedBox(height: isDesktop ? 48 : 32),
              _buildProfileSection('Support', [
                _buildProfileOption(
                  'Help Center',
                  Icons.help,
                  const Color(0xFF60A5FA),
                  () {},
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'Contact Us',
                  Icons.contact_support,
                  const Color(0xFF1E3A8A),
                  () {},
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'About',
                  Icons.info,
                  const Color(0xFF6B7280),
                  () {},
                ),
              ]),
              SizedBox(height: isDesktop ? 48 : 32),
              SizedBox(
                width: double.infinity,
                height: isDesktop ? 64 : 56,
                child: ElevatedButton.icon(
                  onPressed: () async {
                    await AuthService.logout();
                    if (context.mounted) {
                      context.go('/login-password');
                    }
                  },
                  icon: const Icon(Icons.logout),
                  label: const Text('Logout'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFFEF4444),
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    elevation: 0,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileSection(String title, List<Widget> children) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF1F2937),
          ),
        ),
        const SizedBox(height: 16),
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: const [
              BoxShadow(
                color: Color(0x0D000000),
                blurRadius: 10,
                offset: Offset(0, 4),
              ),
            ],
          ),
          child: Column(children: children),
        ),
      ],
    );
  }

  Widget _buildProfileOption(
    String title,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          children: [
            Container(
              width: 48,
              height: 48,
              decoration: BoxDecoration(
                color: color.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(icon, color: color, size: 24),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                title,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                  color: Color(0xFF1F2937),
                ),
              ),
            ),
            const Icon(Icons.chevron_right, color: Color(0xFF6B7280)),
          ],
        ),
      ),
    );
  }

  Widget _buildBottomNavigation({bool isWeb = false, bool isTablet = false}) {
    if (isWeb) {
      return Positioned(
        top: 0,
        left: 0,
        right: 0,
        child: Container(
          height: 70,
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.white.withOpacity(0.95),
                Colors.white.withOpacity(0.85),
              ],
            ),
            boxShadow: const [
              BoxShadow(
                color: Color(0x191E3A8A),
                blurRadius: 30,
                offset: Offset(0, 8),
              ),
            ],
          ),
          child: SafeArea(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 8),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                    child: Row(
                      children: [
                        Container(
                          width: 40,
                          height: 40,
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [
                                const Color(0xFF1E3A8A).withOpacity(0.2),
                                const Color(0xFF1E3A8A).withOpacity(0.1),
                              ],
                            ),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Icon(
                            Icons.business,
                            color: Color(0xFF1E3A8A),
                            size: 24,
                          ),
                        ),
                        const SizedBox(width: 12),
                        const Text(
                          'RAK White Cement',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF1E3A8A),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Spacer(),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.7),
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: Colors.white.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Row(
                      children: [
                        _buildWebNavItem(
                          0,
                          Icons.home_rounded,
                          'Home',
                          const Color(0xFF1E3A8A),
                        ),
                        const SizedBox(width: 8),
                        _buildWebNavItem(
                          1,
                          Icons.qr_code_scanner_rounded,
                          'Scan',
                          const Color(0xFF3B82F6),
                        ),
                        const SizedBox(width: 8),
                        _buildWebNavItem(
                          2,
                          Icons.person_rounded,
                          'Profile',
                          const Color(0xFF6B7280),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }
    return Positioned(
      bottom: 4,
      left: 20,
      right: 20,
      child: Container(
        height: 75,
        margin: EdgeInsets.zero,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Colors.white.withOpacity(0.95),
              Colors.white.withOpacity(0.85),
              Colors.white.withOpacity(0.9),
            ],
          ),
          borderRadius: BorderRadius.circular(25),
          border: Border.all(color: Colors.white.withOpacity(0.3), width: 1.5),
          boxShadow: const [
            BoxShadow(
              color: Color(0x331E3A8A),
              blurRadius: 25,
              offset: Offset(0, 8),
            ),
          ],
        ),
        child: SafeArea(
          top: false,
          child: Padding(
            padding: EdgeInsets.symmetric(
              horizontal: isTablet ? 24.0 : 16.0,
              vertical: isTablet ? 12.0 : 10.0,
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildNavItem(
                  0,
                  Icons.home_rounded,
                  'Home',
                  const Color(0xFF1E3A8A),
                  isTablet: isTablet,
                ),
                _buildNavItem(
                  1,
                  Icons.qr_code_scanner_rounded,
                  'Scan',
                  const Color(0xFF3B82F6),
                  isTablet: isTablet,
                ),
                _buildNavItem(
                  2,
                  Icons.person_rounded,
                  'Profile',
                  const Color(0xFF6B7280),
                  isTablet: isTablet,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildWebNavItem(int index, IconData icon, String label, Color color) {
    final isSelected = _controller.currentIndex == index;
    return GestureDetector(
      onTap: () {
        HapticFeedback.mediumImpact();
        _controller.setCurrentIndex(index);
        _navController.reset();
        _navController.forward();
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 400),
        padding: EdgeInsets.symmetric(
          horizontal: 16 + (4 * (isSelected ? 1 : 0)),
          vertical: 8 + (2 * (isSelected ? 1 : 0)),
        ),
        decoration: BoxDecoration(
          gradient: isSelected
              ? LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [color.withOpacity(0.2), color.withOpacity(0.1)],
                )
              : null,
          borderRadius: BorderRadius.circular(12 + (4 * (isSelected ? 1 : 0))),
          border: Border.all(
            color: isSelected ? color.withOpacity(0.4) : Colors.transparent,
            width: 1 + (isSelected ? 1 : 0),
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 20 + (2 * (isSelected ? 1 : 0)),
              color: Color.lerp(
                const Color(0xFF6B7280),
                color,
                isSelected ? 1 : 0,
              ),
            ),
            const SizedBox(width: 8),
            Text(
              label,
              style: TextStyle(
                fontSize: 16 + (isSelected ? 1 : 0),
                fontWeight: FontWeight.lerp(
                  FontWeight.w500,
                  FontWeight.w600,
                  isSelected ? 1 : 0,
                ),
                color: Color.lerp(
                  const Color(0xFF6B7280),
                  color,
                  isSelected ? 1 : 0,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNavItem(
    int index,
    IconData icon,
    String label,
    Color color, {
    bool isTablet = false,
  }) {
    final isSelected = _controller.currentIndex == index;
    final iconSize = isTablet
        ? (44.0 + (16.0 * (isSelected ? 1 : 0)))
        : (40.0 + (16.0 * (isSelected ? 1 : 0)));
    final iconInnerSize = isTablet
        ? (26.0 + (4.0 * (isSelected ? 1 : 0)))
        : (24.0 + (4.0 * (isSelected ? 1 : 0)));
    final fontSize = isTablet
        ? (12.0 + (2.0 * (isSelected ? 1 : 0)))
        : (10.0 + (2.0 * (isSelected ? 1 : 0)));
    return Expanded(
      child: GestureDetector(
        onTapDown: (_) => HapticFeedback.lightImpact(),
        onTap: () {
          HapticFeedback.heavyImpact();
          _controller.setCurrentIndex(index);
          _navController.reset();
          _navController.forward();
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            AnimatedContainer(
              duration: const Duration(milliseconds: 600),
              width: iconSize,
              height: iconSize,
              decoration: BoxDecoration(
                gradient: isSelected
                    ? LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          color.withOpacity(0.9),
                          color.withOpacity(0.7),
                          color.withOpacity(0.9),
                        ],
                      )
                    : LinearGradient(
                        colors: [
                          Colors.white.withOpacity(0.1),
                          Colors.white.withOpacity(0.05),
                        ],
                      ),
                borderRadius: BorderRadius.circular(iconSize / 2),
                border: Border.all(
                  color: isSelected
                      ? color.withOpacity(0.3)
                      : Colors.white.withOpacity(0.2),
                  width: isSelected ? 2 : 1,
                ),
                boxShadow: isSelected
                    ? [
                        BoxShadow(
                          color: color.withOpacity(0.4),
                          blurRadius: 20,
                          offset: const Offset(0, 8),
                        ),
                      ]
                    : [
                        const BoxShadow(
                          color: Color(0x1A000000),
                          blurRadius: 8,
                          offset: Offset(0, 4),
                        ),
                      ],
              ),
              child: Icon(
                icon,
                size: iconInnerSize,
                color: isSelected
                    ? Colors.white
                    : const Color(0xFF6B7280).withOpacity(0.7),
              ),
            ),
            SizedBox(height: isTablet ? 8 : 6),
            AnimatedDefaultTextStyle(
              duration: const Duration(milliseconds: 400),
              style: TextStyle(
                fontSize: fontSize,
                fontWeight: FontWeight.lerp(
                  FontWeight.w400,
                  FontWeight.w700,
                  isSelected ? 1 : 0,
                ),
                color: Color.lerp(
                  const Color(0xFF6B7280).withOpacity(0.6),
                  color,
                  isSelected ? 1 : 0,
                ),
              ),
              child: Text(label),
            ),
          ],
        ),
      ),
    );
  }
}


