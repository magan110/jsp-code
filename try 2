using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using System.Data.SqlClient;
using System.Data;

namespace YourNamespace.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class DsrActivityController : ControllerBase
    {
        private readonly IConfiguration _configuration;
        private readonly YourDbContext _context;

        public DsrActivityController(IConfiguration configuration, YourDbContext context)
        {
            _configuration = configuration;
            _context = context;
        }

        // Get customer types
        [HttpGet("customerTypes")]
        public async Task<IActionResult> GetCustomerTypes()
        {
            try
            {
                var customerTypes = new List<object>
                {
                    new { value = "C", text = "Stockiest/ Urbon Stockiest" },
                    new { value = "D", text = "Direct Dealer" },
                    new { value = "RD", text = "Rural Stockiest" },
                    new { value = "R", text = "Retailer" },
                    new { value = "RR", text = "Rural Retailer" },
                    new { value = "07", text = "Registered Applicator" },
                    new { value = "08", text = "Painter" }
                };

                return Ok(new { success = true, data = customerTypes });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get all areas
        [HttpGet("areas")]
        public async Task<IActionResult> GetAllAreas()
        {
            try
            {
                var areas = await _context.BkmAreaMasts
                    .Where(a => a.IsActive == "Y" && a.IsOnlyDp != "Y")
                    .Select(a => new { value = a.AreaCode, text = a.AreaDesc })
                    .ToListAsync();

                return Ok(new { success = true, data = areas });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get exception reasons
        [HttpGet("exceptionReasons")]
        public async Task<IActionResult> GetExceptionReasons()
        {
            try
            {
                var reasons = new List<object>
                {
                    new { value = "Network Issue", text = "Network Issue" },
                    new { value = "Battery Low", text = "Battery Low" },
                    new { value = "Mobile Not working", text = "Mobile Not working" },
                    new { value = "Location not capturing", text = "Location not capturing" },
                    new { value = "Wrong Location OF Retailer", text = "Wrong Location OF Retailer" },
                    new { value = "Wrong Location Captured", text = "Wrong Location Captured" }
                };

                return Ok(new { success = true, data = reasons });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get gift types
        [HttpGet("giftTypes")]
        public async Task<IActionResult> GetGiftTypes()
        {
            try
            {
                var giftTypes = await _context.WcmParametrs
                    .Where(p => p.ParamTyp == 82 && p.IsActive == "Y")
                    .Select(p => new { value = p.ParamCod, text = p.ParamDes })
                    .ToListAsync();

                return Ok(new { success = true, data = giftTypes });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get brands
        [HttpGet("brands")]
        public async Task<IActionResult> GetBrands()
        {
            try
            {
                var brands = new List<object>
                {
                    new { value = "BW", text = "Birla White" },
                    new { value = "JK", text = "JK" },
                    new { value = "RK", text = "RK" },
                    new { value = "OT", text = "Others" },
                    new { value = "AP", text = "Asian Paints" },
                    new { value = "BG", text = "Berger" },
                    new { value = "AC", text = "Ace" },
                    new { value = "PM", text = "Pidilite" }
                };

                return Ok(new { success = true, data = brands });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get product categories
        [HttpGet("productCategories")]
        public async Task<IActionResult> GetProductCategories()
        {
            try
            {
                var categories = await _context.BkmRepoCatgs
                    .Where(c => c.IsActive == "Y")
                    .Select(c => new { Code = c.RepoCatg, Description = c.RepoDesc })
                    .ToListAsync();

                return Ok(new { success = true, data = categories });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get products by category
        [HttpGet("products")]
        public async Task<IActionResult> GetProducts([FromQuery] string category)
        {
            try
            {
                if (string.IsNullOrEmpty(category))
                {
                    return BadRequest(new { success = false, message = "Category is required" });
                }

                var products = await _context.BkmRepoCatgs
                    .Where(p => p.IsActive == "Y" && p.RepoCatg == category)
                    .Select(p => new { Code = p.RepoCatg, Description = p.RepoDesc })
                    .ToListAsync();

                return Ok(new { success = true, data = products });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get purchaser codes based on area and purchaser type
        [HttpGet("purchaserCodes")]
        public async Task<IActionResult> GetPurchaserCodes(
            [FromQuery] string areaCode,
            [FromQuery] string purchaserType,
            [FromQuery] string searchText = "")
        {
            try
            {
                if (string.IsNullOrEmpty(areaCode) || string.IsNullOrEmpty(purchaserType))
                {
                    return BadRequest(new { success = false, message = "Area code and purchaser type are required" });
                }

                List<object> purchaserCodes = new List<object>();

                if (purchaserType == "C" || purchaserType == "RD" || purchaserType == "AD")
                {
                    // Get customers
                    var customers = await _context.DpmCustomers
                        .Where(c => c.IsActive == "Y" && c.AreaCode == areaCode)
                        .Where(c => string.IsNullOrEmpty(searchText) || 
                                  c.CustCode.Contains(searchText) || 
                                  c.CustName.Contains(searchText))
                        .Select(c => new { 
                            value = c.CustCode, 
                            text = $"{c.CustCode} - {c.CustName}",
                            name = c.CustName,
                            address = c.Address1,
                            kycStatus = c.KycStatus,
                            marketName = c.MarketName
                        })
                        .ToListAsync();

                    purchaserCodes.AddRange(customers);
                }
                else if (purchaserType == "R" || purchaserType == "RR")
                {
                    // Get retailers
                    var retailers = await _context.RtmRetailers
                        .Where(r => r.IsActive == "Y" && r.AreaCode == areaCode)
                        .Where(r => string.IsNullOrEmpty(searchText) || 
                                  r.RtlCode.Contains(searchText) || 
                                  r.RtlName.Contains(searchText))
                        .Select(r => new { 
                            value = r.RtlCode, 
                            text = $"{r.RtlCode} - {r.RtlName}",
                            name = r.RtlName,
                            address = r.Address1,
                            kycStatus = r.KycStatus,
                            marketName = r.MarketName
                        })
                        .ToListAsync();

                    purchaserCodes.AddRange(retailers);
                }

                return Ok(new { success = true, data = purchaserCodes });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get customer details
        [HttpGet("customerDetails")]
        public async Task<IActionResult> GetCustomerDetails(
            [FromQuery] string purchaserCode,
            [FromQuery] string purchaserType,
            [FromQuery] string areaCode)
        {
            try
            {
                if (string.IsNullOrEmpty(purchaserCode) || 
                    string.IsNullOrEmpty(purchaserType) || 
                    string.IsNullOrEmpty(areaCode))
                {
                    return BadRequest(new { success = false, message = "All parameters are required" });
                }

                object customerDetails = null;

                if (purchaserType == "C" || purchaserType == "RD" || purchaserType == "AD")
                {
                    customerDetails = await _context.DpmCustomers
                        .Where(c => c.CustCode == purchaserCode && c.AreaCode == areaCode)
                        .Select(c => new
                        {
                            name = c.CustName,
                            kycStatus = c.KycStatus,
                            marketName = c.MarketName,
                            address = c.Address1
                        })
                        .FirstOrDefaultAsync();
                }
                else if (purchaserType == "R" || purchaserType == "RR")
                {
                    customerDetails = await _context.RtmRetailers
                        .Where(r => r.RtlCode == purchaserCode && r.AreaCode == areaCode)
                        .Select(r => new
                        {
                            name = r.RtlName,
                            kycStatus = r.KycStatus,
                            marketName = r.MarketName,
                            address = r.Address1
                        })
                        .FirstOrDefaultAsync();
                }

                if (customerDetails == null)
                {
                    return NotFound(new { success = false, message = "Customer not found" });
                }

                return Ok(new { success = true, data = customerDetails });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get customer sales history
        [HttpGet("customerSalesHistory")]
        public async Task<IActionResult> GetCustomerSalesHistory(
            [FromQuery] string purchaserCode,
            [FromQuery] string purchaserType)
        {
            try
            {
                if (string.IsNullOrEmpty(purchaserCode) || string.IsNullOrEmpty(purchaserType))
                {
                    return BadRequest(new { success = false, message = "All parameters are required" });
                }

                // This would typically involve complex queries to calculate sales history
                // For simplicity, we'll return mock data
                var salesHistory = new
                {
                    last3MonthsAverage = new { wc = "10.5", wcp = "8.2", vap = "5.7" },
                    currentMonth = new { wc = "12.3", wcp = "9.1", vap = "6.5" },
                    stock = new { wc = "15.2", wcp = "12.8", vap = "8.3" }
                };

                return Ok(new { success = true, data = salesHistory });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get pending DSR entries for update/delete
        [HttpGet("pendingDSR")]
        public async Task<IActionResult> GetPendingDSR([FromQuery] string loginId)
        {
            try
            {
                if (string.IsNullOrEmpty(loginId))
                {
                    return BadRequest(new { success = false, message = "Login ID is required" });
                }

                var pendingDSR = await _context.DptDSRActvts
                    .Where(d => d.CreateId == loginId && 
                               d.DocuDate >= DateTime.Now.AddDays(-3) && 
                               d.StatFlag != "C" && 
                               d.StatFlag != "R")
                    .OrderByDescending(d => d.DocuNumb)
                    .Select(d => new
                    {
                        value = d.DocuNumb,
                        docuDate = d.DocuDate.HasValue ? d.DocuDate.Value.ToString("yyyy-MM-dd") : "",
                        dsrParam = d.DsrParam
                    })
                    .Take(30)
                    .ToListAsync();

                return Ok(new { success = true, data = pendingDSR });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Get DSR details for edit
        [HttpGet("dsrForEdit")]
        public async Task<IActionResult> GetDSRForEdit([FromQuery] string docuNumb, [FromQuery] string loginId)
        {
            try
            {
                if (string.IsNullOrEmpty(docuNumb) || string.IsNullOrEmpty(loginId))
                {
                    return BadRequest(new { success = false, message = "Document number and login ID are required" });
                }

                var dsrHeader = await _context.DptDSRActvts
                    .Where(d => d.DocuNumb == docuNumb && d.CreateId == loginId)
                    .FirstOrDefaultAsync();

                if (dsrHeader == null)
                {
                    return NotFound(new { success = false, message = "DSR not found" });
                }

                var dsrDetails = await _context.DptDSRActvtDtls
                    .Where(d => d.DocuNumb == docuNumb)
                    .ToListAsync();

                var result = new
                {
                    header = new
                    {
                        docuNumb = dsrHeader.DocuNumb,
                        docuDate = dsrHeader.DocuDate.HasValue ? dsrHeader.DocuDate.Value.ToString("dd/MM/yyyy") : "",
                        ordExDat = dsrHeader.OrdExDat.HasValue ? dsrHeader.OrdExDat.Value.ToString("dd/MM/yyyy") : "",
                        dsrParam = dsrHeader.DsrParam,
                        cusRtlFl = dsrHeader.CusRtlFl,
                        areaCode = dsrHeader.AreaCode,
                        cusRtlCd = dsrHeader.CusRtlCd,
                        mrktName = dsrHeader.MrktName,
                        prtDsCnt = dsrHeader.PrtDsCnt,
                        pendIsue = dsrHeader.PendIsue,
                        pndIsuDt = dsrHeader.PndIsuDt,
                        isuDetal = dsrHeader.IsuDetal,
                        dsrRem05 = dsrHeader.DsrRem05,
                        brndSlWc = dsrHeader.BrndSlWc?.Split(',').ToList(),
                        brndSlWp = dsrHeader.BrndSlWp?.Split(',').ToList(),
                        slWcVlum = dsrHeader.SlWcVlum,
                        slWpVlum = dsrHeader.SlWpVlum,
                        cityName = dsrHeader.CityName,
                        isTilRtl = dsrHeader.IsTilRtl,
                        tileStck = dsrHeader.TileStck
                    },
                    orderBookedInCallMeet = new
                    {
                        orders = dsrDetails
                            .Where(d => d.MrktData == "05")
                            .Select(d => new
                            {
                                repoCatg = d.RepoCatg,
                                catgPkPr = d.CatgPack,
                                prodQnty = d.ProdQnty
                            })
                            .ToList()
                    },
                    giftDistribution = new
                    {
                        gifts = dsrDetails
                            .Where(d => d.MrktData == "06")
                            .Select(d => new
                            {
                                mrtlCode = d.RepoCatg,
                                isueQnty = d.ProdQnty,
                                naration = d.ActnRemk
                            })
                            .ToList()
                    }
                };

                return Ok(new { success = true, data = result });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Generate document number
        [HttpGet("generateDocumentNumber")]
        public async Task<IActionResult> GenerateDocumentNumber([FromQuery] string areaCode)
        {
            try
            {
                if (string.IsNullOrEmpty(areaCode))
                {
                    return BadRequest(new { success = false, message = "Area code is required" });
                }

                // Format: DSR + AreaCode(3) + YYMMDDHHMMSS
                var now = DateTime.Now;
                var year = (now.Year % 100).ToString().PadLeft(2, '0');
                var month = now.Month.ToString().PadLeft(2, '0');
                var day = now.Day.ToString().PadLeft(2, '0');
                var hour = now.Hour.ToString().PadLeft(2, '0');
                var minute = now.Minute.ToString().PadLeft(2, '0');
                var second = now.Second.ToString().PadLeft(2, '0');
                var timestamp = $"{year}{month}{day}{hour}{minute}{second}";
                
                var areaCodePadded = areaCode.Length >= 3 ? areaCode.Substring(0, 3) : areaCode.PadRight(3, '0');
                var documentNumber = $"DSR{areaCodePadded}{timestamp}";

                return Ok(new { success = true, data = documentNumber });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // Save DSR
        [HttpPost("saveDSR")]
        public async Task<IActionResult> SaveDSR([FromBody] DsrModel dsrData)
        {
            try
            {
                if (dsrData == null)
                {
                    return BadRequest(new { success = false, message = "DSR data is required" });
                }

                using var transaction = await _context.Database.BeginTransactionAsync();

                try
                {
                    // Handle header data
                    DptDSRActvt dsrHeader;

                    if (dsrData.ProcType == "A")
                    {
                        // Generate document number for new DSR
                        var now = DateTime.Now;
                        var year = (now.Year % 100).ToString().PadLeft(2, '0');
                        var month = now.Month.ToString().PadLeft(2, '0');
                        var day = now.Day.ToString().PadLeft(2, '0');
                        var hour = now.Hour.ToString().PadLeft(2, '0');
                        var minute = now.Minute.ToString().PadLeft(2, '0');
                        var second = now.Second.ToString().PadLeft(2, '0');
                        var timestamp = $"{year}{month}{day}{hour}{minute}{second}";
                        
                        var areaCodePadded = dsrData.AreaCode.Length >= 3 ? 
                            dsrData.AreaCode.Substring(0, 3) : 
                            dsrData.AreaCode.PadRight(3, '0');
                        var documentNumber = $"DSR{areaCodePadded}{timestamp}";

                        dsrHeader = new DptDSRActvt
                        {
                            DocuNumb = documentNumber,
                            DocuDate = DateTime.ParseExact(dsrData.DocuDate, "dd/MM/yyyy", null),
                            OrdExDat = !string.IsNullOrEmpty(dsrData.OrdExDat) ? 
                                DateTime.ParseExact(dsrData.OrdExDat, "dd/MM/yyyy", null) : (DateTime?)null,
                            DsrParam = dsrData.DsrParam,
                            CusRtlFl = dsrData.CusRtlFl,
                            AreaCode = dsrData.AreaCode,
                            CusRtlCd = dsrData.CusRtlCd,
                            MrktName = dsrData.MrktName,
                            PrtDsCnt = dsrData.PrtDsCnt,
                            PendIsue = dsrData.PendIsue,
                            PndIsuDt = dsrData.PndIsuDt,
                            IsuDetal = dsrData.IsuDetal,
                            DsrRem05 = dsrData.DsrRem05,
                            BrndSlWc = dsrData.BrndSlWc != null ? string.Join(",", dsrData.BrndSlWc) : "",
                            BrndSlWp = dsrData.BrndSlWp != null ? string.Join(",", dsrData.BrndSlWp) : "",
                            SlWcVlum = dsrData.SlWcVlum,
                            SlWpVlum = dsrData.SlWpVlum,
                            DeptCode = dsrData.DeptCode,
                            PendWith = dsrData.PendWith,
                            CreateId = dsrData.CreateId,
                            CreateDt = DateTime.Now,
                            FinlRslt = dsrData.FinlRslt,
                            GeoLatit = dsrData.GeoLatit,
                            GeoLongt = dsrData.GeoLongt,
                            LtLgDist = dsrData.LtLgDist,
                            CityName = dsrData.CityName,
                            CusRtTyp = dsrData.CusRtTyp,
                            IsTilRtl = dsrData.IsTilRtl,
                            TileStck = dsrData.TileStck,
                            WcErlSlb = dsrData.WcErlSlb,
                            WpErlSlb = dsrData.WpErlSlb,
                            VpErlSlb = dsrData.VpErlSlb,
                            BwStkWcc = dsrData.BwStkWcc,
                            BwStkWcp = dsrData.BwStkWcp,
                            BwStkVap = dsrData.BwStkVap,
                            JkAvgWcc = dsrData.JkAvgWcc,
                            JkAvgWcp = dsrData.JkAvgWcp,
                            AsAvgWcc = dsrData.AsAvgWcc,
                            AsAvgWcp = dsrData.AsAvgWcp,
                            OtAvgWcc = dsrData.OtAvgWcc,
                            OtAvgWcp = dsrData.OtAvgWcp,
                            StatFlag = "N"
                        };

                        await _context.DptDSRActvts.AddAsync(dsrHeader);
                        await _context.SaveChangesAsync();
                    }
                    else
                    {
                        // Update existing DSR
                        dsrHeader = await _context.DptDSRActvts
                            .Where(d => d.DocuNumb == dsrData.DocuNumb && d.CreateId == dsrData.CreateId)
                            .FirstOrDefaultAsync();

                        if (dsrHeader == null)
                        {
                            return NotFound(new { success = false, message = "DSR not found" });
                        }

                        // Update header fields
                        dsrHeader.DocuDate = DateTime.ParseExact(dsrData.DocuDate, "dd/MM/yyyy", null);
                        dsrHeader.OrdExDat = !string.IsNullOrEmpty(dsrData.OrdExDat) ? 
                            DateTime.ParseExact(dsrData.OrdExDat, "dd/MM/yyyy", null) : (DateTime?)null;
                        dsrHeader.DsrParam = dsrData.DsrParam;
                        dsrHeader.CusRtlFl = dsrData.CusRtlFl;
                        dsrHeader.AreaCode = dsrData.AreaCode;
                        dsrHeader.CusRtlCd = dsrData.CusRtlCd;
                        dsrHeader.MrktName = dsrData.MrktName;
                        dsrHeader.PrtDsCnt = dsrData.PrtDsCnt;
                        dsrHeader.PendIsue = dsrData.PendIsue;
                        dsrHeader.PndIsuDt = dsrData.PndIsuDt;
                        dsrHeader.IsuDetal = dsrData.IsuDetal;
                        dsrHeader.DsrRem05 = dsrData.DsrRem05;
                        dsrHeader.BrndSlWc = dsrData.BrndSlWc != null ? string.Join(",", dsrData.BrndSlWc) : "";
                        dsrHeader.BrndSlWp = dsrData.BrndSlWp != null ? string.Join(",", dsrData.BrndSlWp) : "";
                        dsrHeader.SlWcVlum = dsrData.SlWcVlum;
                        dsrHeader.SlWpVlum = dsrData.SlWpVlum;
                        dsrHeader.DeptCode = dsrData.DeptCode;
                        dsrHeader.PendWith = dsrData.PendWith;
                        dsrHeader.FinlRslt = dsrData.FinlRslt;
                        dsrHeader.GeoLatit = dsrData.GeoLatit;
                        dsrHeader.GeoLongt = dsrData.GeoLongt;
                        dsrHeader.LtLgDist = dsrData.LtLgDist;
                        dsrHeader.CityName = dsrData.CityName;
                        dsrHeader.CusRtTyp = dsrData.CusRtTyp;
                        dsrHeader.IsTilRtl = dsrData.IsTilRtl;
                        dsrHeader.TileStck = dsrData.TileStck;
                        dsrHeader.WcErlSlb = dsrData.WcErlSlb;
                        dsrHeader.WpErlSlb = dsrData.WpErlSlb;
                        dsrHeader.VpErlSlb = dsrData.VpErlSlb;
                        dsrHeader.BwStkWcc = dsrData.BwStkWcc;
                        dsrHeader.BwStkWcp = dsrData.BwStkWcp;
                        dsrHeader.BwStkVap = dsrData.BwStkVap;
                        dsrHeader.JkAvgWcc = dsrData.JkAvgWcc;
                        dsrHeader.JkAvgWcp = dsrData.JkAvgWcp;
                        dsrHeader.AsAvgWcc = dsrData.AsAvgWcc;
                        dsrHeader.AsAvgWcp = dsrData.AsAvgWcp;
                        dsrHeader.OtAvgWcc = dsrData.OtAvgWcc;
                        dsrHeader.OtAvgWcp = dsrData.OtAvgWcp;
                        dsrHeader.ModfyId = dsrData.CreateId;
                        dsrHeader.ModfyDt = DateTime.Now;

                        if (dsrData.ProcType == "D")
                        {
                            dsrHeader.StatFlag = "R"; // Mark as deleted
                        }

                        await _context.SaveChangesAsync();

                        // Delete existing details for update
                        if (dsrData.ProcType != "D")
                        {
                            var existingDetails = await _context.DptDSRActvtDtls
                                .Where(d => d.DocuNumb == dsrData.DocuNumb)
                                .ToListAsync();

                            _context.DptDSRActvtDtls.RemoveRange(existingDetails);
                            await _context.SaveChangesAsync();
                        }
                    }

                    // Add details if not deleting
                    if (dsrData.ProcType != "D" && dsrData.ActivityDetails != null)
                    {
                        foreach (var detail in dsrData.ActivityDetails)
                        {
                            var dsrDetail = new DptDSRActvtDtl
                            {
                                DocuNumb = dsrHeader.DocuNumb,
                                SeqNumb = detail.SeqNumb,
                                RepoCatg = detail.RepoCatg,
                                CatgPack = detail.CatgPack,
                                ProdQnty = detail.ProdQnty,
                                ProjQnty = detail.ProjQnty,
                                ActnRemk = detail.ActnRemk,
                                MrktData = detail.MrktData,
                                TargetDt = detail.TargetDt,
                                StatFlag = detail.StatFlag,
                                CreateId = dsrData.CreateId,
                                CreateDt = DateTime.Now
                            };

                            await _context.DptDSRActvtDtls.AddAsync(dsrDetail);
                        }

                        await _context.SaveChangesAsync();
                    }

                    // Add market intelligence data
                    if (dsrData.ProcType != "D" && dsrData.MarketIntelligence != null)
                    {
                        foreach (var intel in dsrData.MarketIntelligence)
                        {
                            var marketIntel = new DptMrktIntel
                            {
                                DocuNumb = dsrHeader.DocuNumb,
                                BrandName = intel.BrandName,
                                ProductCode = intel.ProductCode,
                                PriceB = intel.PriceB,
                                PriceC = intel.PriceC,
                                CreateId = dsrData.CreateId,
                                CreateDt = DateTime.Now
                            };

                            await _context.DptMrktIntels.AddAsync(marketIntel);
                        }

                        await _context.SaveChangesAsync();
                    }

                    await transaction.CommitAsync();

                    return Ok(new 
                    { 
                        success = true, 
                        message = dsrData.ProcType == "A" ? "DSR created successfully" : 
                                  dsrData.ProcType == "U" ? "DSR updated successfully" : 
                                  "DSR deleted successfully",
                        data = new { docuNumb = dsrHeader.DocuNumb }
                    });
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    throw;
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }
    }

    // Model classes for DSR data
    public class DsrModel
    {
        public string ProcType { get; set; }
        public string DocuNumb { get; set; }
        public string DocuDate { get; set; }
        public string OrdExDat { get; set; }
        public string DsrParam { get; set; }
        public string CusRtlFl { get; set; }
        public string AreaCode { get; set; }
        public string CusRtlCd { get; set; }
        public string MrktName { get; set; }
        public string PendIsue { get; set; }
        public string PndIsuDt { get; set; }
        public string IsuDetal { get; set; }
        public string DsrRem05 { get; set; }
        public List<string> BrndSlWc { get; set; }
        public List<string> BrndSlWp { get; set; }
        public string PrtDsCnt { get; set; }
        public string SlWcVlum { get; set; }
        public string SlWpVlum { get; set; }
        public string DeptCode { get; set; }
        public string PendWith { get; set; }
        public string CreateId { get; set; }
        public string FinlRslt { get; set; }
        public string GeoLatit { get; set; }
        public string GeoLongt { get; set; }
        public string LtLgDist { get; set; }
        public string CityName { get; set; }
        public string CusRtTyp { get; set; }
        public string IsTilRtl { get; set; }
        public string TileStck { get; set; }
        public string WcErlSlb { get; set; }
        public string WpErlSlb { get; set; }
        public string VpErlSlb { get; set; }
        public string BwStkWcc { get; set; }
        public string BwStkWcp { get; set; }
        public string BwStkVap { get; set; }
        public string JkAvgWcc { get; set; }
        public string JkAvgWcp { get; set; }
        public string AsAvgWcc { get; set; }
        public string AsAvgWcp { get; set; }
        public string OtAvgWcc { get; set; }
        public string OtAvgWcp { get; set; }
        public List<ActivityDetailModel> ActivityDetails { get; set; }
        public List<MarketIntelligenceModel> MarketIntelligence { get; set; }
    }

    public class ActivityDetailModel
    {
        public string SeqNumb { get; set; }
        public string RepoCatg { get; set; }
        public string CatgPack { get; set; }
        public string ProdQnty { get; set; }
        public string ProjQnty { get; set; }
        public string ActnRemk { get; set; }
        public string MrktData { get; set; }
        public DateTime? TargetDt { get; set; }
        public string StatFlag { get; set; }
    }

    public class MarketIntelligenceModel
    {
        public string BrandName { get; set; }
        public string ProductCode { get; set; }
        public string PriceB { get; set; }
        public string PriceC { get; set; }
    }

    // Entity classes (simplified for example)
    public class DptDSRActvt
    {
        public string DocuNumb { get; set; }
        public DateTime DocuDate { get; set; }
        public DateTime? OrdExDat { get; set; }
        public string DsrParam { get; set; }
        public string CusRtlFl { get; set; }
        public string AreaCode { get; set; }
        public string CusRtlCd { get; set; }
        public string MrktName { get; set; }
        public string PrtDsCnt { get; set; }
        public string PendIsue { get; set; }
        public string PndIsuDt { get; set; }
        public string IsuDetal { get; set; }
        public string DsrRem05 { get; set; }
        public string BrndSlWc { get; set; }
        public string BrndSlWp { get; set; }
        public string SlWcVlum { get; set; }
        public string SlWpVlum { get; set; }
        public string DeptCode { get; set; }
        public string PendWith { get; set; }
        public string CreateId { get; set; }
        public DateTime CreateDt { get; set; }
        public string FinlRslt { get; set; }
        public string GeoLatit { get; set; }
        public string GeoLongt { get; set; }
        public string LtLgDist { get; set; }
        public string CityName { get; set; }
        public string CusRtTyp { get; set; }
        public string IsTilRtl { get; set; }
        public string TileStck { get; set; }
        public string WcErlSlb { get; set; }
        public string WpErlSlb { get; set; }
        public string VpErlSlb { get; set; }
        public string BwStkWcc { get; set; }
        public string BwStkWcp { get; set; }
        public string BwStkVap { get; set; }
        public string JkAvgWcc { get; set; }
        public string JkAvgWcp { get; set; }
        public string AsAvgWcc { get; set; }
        public string AsAvgWcp { get; set; }
        public string OtAvgWcc { get; set; }
        public string OtAvgWcp { get; set; }
        public string ModfyId { get; set; }
        public DateTime? ModfyDt { get; set; }
        public string StatFlag { get; set; }
    }

    public class DptDSRActvtDtl
    {
        public string DocuNumb { get; set; }
        public string SeqNumb { get; set; }
        public string RepoCatg { get; set; }
        public string CatgPack { get; set; }
        public string ProdQnty { get; set; }
        public string ProjQnty { get; set; }
        public string ActnRemk { get; set; }
        public string MrktData { get; set; }
        public DateTime? TargetDt { get; set; }
        public string StatFlag { get; set; }
        public string CreateId { get; set; }
        public DateTime CreateDt { get; set; }
    }

    public class DptMrktIntel
    {
        public string DocuNumb { get; set; }
        public string BrandName { get; set; }
        public string ProductCode { get; set; }
        public string PriceB { get; set; }
        public string PriceC { get; set; }
        public string CreateId { get; set; }
        public DateTime CreateDt { get; set; }
    }

    public class BkmAreaMast
    {
        public string AreaCode { get; set; }
        public string AreaDesc { get; set; }
        public string IsActive { get; set; }
        public string IsOnlyDp { get; set; }
    }

    public class WcmParametr
    {
        public string ParamTyp { get; set; }
        public string ParamCod { get; set; }
        public string ParamDes { get; set; }
        public string IsActive { get; set; }
    }

    public class BkmRepoCatg
    {
        public string RepoCatg { get; set; }
        public string RepoDesc { get; set; }
        public string IsActive { get; set; }
    }

    public class DpmCustomer
    {
        public string CustCode { get; set; }
        public string CustName { get; set; }
        public string AreaCode { get; set; }
        public string Address1 { get; set; }
        public string KycStatus { get; set; }
        public string MarketName { get; set; }
        public string IsActive { get; set; }
    }

    public class RtmRetailer
    {
        public string RtlCode { get; set; }
        public string RtlName { get; set; }
        public string AreaCode { get; set; }
        public string Address1 { get; set; }
        public string KycStatus { get; set; }
        public string MarketName { get; set; }
        public string IsActive { get; set; }
    }

    public class YourDbContext : DbContext
    {
        public YourDbContext(DbContextOptions<YourDbContext> options) : base(options) { }

        public DbSet<DptDSRActvt> DptDSRActvts { get; set; }
        public DbSet<DptDSRActvtDtl> DptDSRActvtDtls { get; set; }
        public DbSet<DptMrktIntel> DptMrktIntels { get; set; }
        public DbSet<BkmAreaMast> BkmAreaMasts { get; set; }
        public DbSet<WcmParametr> WcmParametrs { get; set; }
        public DbSet<BkmRepoCatg> BkmRepoCatgs { get; set; }
        public DbSet<DpmCustomer> DpmCustomers { get; set; }
        public DbSet<RtmRetailer> RtmRetailers { get; set; }
    }
}
