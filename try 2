import 'dart:convert';
import '../models/sampling_drive_models.dart';
import '../utils/app_logger.dart';
import 'api_service.dart';

class SamplingExecutionService {
  static final AppLogger _logger = AppLogger();

  static Future<Map<String, dynamic>> searchSamplingDriveEntries({
    String? retailerCode,
    String? retailerName,
    String? painterName,
    String? start,
    String? end,
    int top = 200,
  }) async {
    try {
      _logger.info('Searching sampling drive entries');

      // Build query parameters
      final queryParams = <String, String>{};

      if (retailerCode != null && retailerCode.isNotEmpty) {
        queryParams['retailerCode'] = retailerCode;
      }

      if (retailerName != null && retailerName.isNotEmpty) {
        queryParams['retailerName'] = retailerName;
      }

      if (painterName != null && painterName.isNotEmpty) {
        queryParams['painterName'] = painterName;
      }

      if (start != null && start.isNotEmpty) {
        queryParams['start'] = start;
      }

      if (end != null && end.isNotEmpty) {
        queryParams['end'] = end;
      }

      queryParams['top'] = top.toString();

      // Build endpoint with query parameters
      final queryString = queryParams.entries
          .map((e) => '${Uri.encodeComponent(e.key)}=${Uri.encodeComponent(e.value)}')
          .join('&');

      final endpoint = '/api/SamplingExecutionEntry/search?$queryString';

      _logger.info('Making request to: $endpoint');
      _logger.info('Query params: $queryParams');

      final result = await ApiService.makeRequest(
        method: 'GET',
        endpoint: endpoint,
      );

      _logger.info('API Response: $result');

      if (result['success'] == true) {
        final data = result['data'];
        _logger.info('Raw API data type: ${data.runtimeType}');
        _logger.info('Raw API data: $data');

        // Handle different response structures
        List<dynamic> itemList = [];

        if (data is List) {
          itemList = data;
        } else if (data is Map && data.containsKey('raw')) {
          // Handle case where response is wrapped
          final rawData = data['raw'];
          if (rawData is List) {
            itemList = rawData;
          } else if (rawData is String) {
            try {
              final parsed = jsonDecode(rawData);
              if (parsed is List) {
                itemList = parsed;
              }
            } catch (e) {
              _logger.error('Failed to parse raw string data', e);
            }
          }
        }

        final entries = <SamplingDriveEntry>[];

        for (var item in itemList) {
          try {
            final entry = SamplingDriveEntry.fromJson(item as Map<String, dynamic>);
            entries.add(entry);
            _logger.info('Successfully parsed entry: ${entry.docuNumb} - ${entry.retailerName}');
          } catch (e) {
            _logger.error('Failed to parse entry: $item', e);
          }
        }

        return {
          'success': true,
          'data': entries,
        };
      } else {
        return {
          'success': false,
          'error': result['error'] ?? 'Failed to search sampling drive entries',
        };
      }
    } catch (e) {
      _logger.error('Failed to search sampling drive entries', e);
      return {
        'success': false,
        'error': 'Failed to search sampling drive entries: $e',
      };
    }
  }

  static Future<Map<String, dynamic>> searchByRetailerCode(String retailerCode, {
    String? start,
    String? end,
    int top = 200,
  }) async {
    return searchSamplingDriveEntries(
      retailerCode: retailerCode,
      start: start,
      end: end,
      top: top,
    );
  }

  static Future<Map<String, dynamic>> searchByRetailerName(String retailerName, {
    String? start,
    String? end,
    int top = 200,
  }) async {
    return searchSamplingDriveEntries(
      retailerName: retailerName,
      start: start,
      end: end,
      top: top,
    );
  }

  static Future<Map<String, dynamic>> searchByDateRange({
    required String start,
    required String end,
    String? retailerCode,
    String? retailerName,
    int top = 200,
  }) async {
    return searchSamplingDriveEntries(
      retailerCode: retailerCode,
      retailerName: retailerName,
      start: start,
      end: end,
      top: top,
    );
  }
}



































class SamplingDriveEntry {
  final String? docuNumb;
  final String retailerName;
  final String retailerCode;
  final String distributorName;
  final String area;
  final DateTime distributionDate;
  final String painterName;
  final String painterMobile;
  final String skuSizeLabel;
  final double qtyDistributedKg;
  final double missedQtyKg;
  final double effectiveDistributedKg;
  final double totalReceivedKg;
  final double remainingKg;
  final String reimbursementMode;
  final double reimbursementAmountAED;
  final String? photoImage;
  final String serialNo;
  final double materialQty;
  final String sampleCancelFlag;

  SamplingDriveEntry({
    this.docuNumb,
    required this.retailerName,
    required this.retailerCode,
    required this.distributorName,
    required this.area,
    required this.distributionDate,
    required this.painterName,
    required this.painterMobile,
    required this.skuSizeLabel,
    required this.qtyDistributedKg,
    required this.missedQtyKg,
    required this.effectiveDistributedKg,
    required this.totalReceivedKg,
    required this.remainingKg,
    required this.reimbursementMode,
    required this.reimbursementAmountAED,
    this.photoImage,
    required this.serialNo,
    required this.materialQty,
    required this.sampleCancelFlag,
  });

  factory SamplingDriveEntry.fromJson(Map<String, dynamic> json) {
    return SamplingDriveEntry(
      docuNumb: json['docuNumb']?.toString(),
      retailerName: json['retailerName']?.toString() ?? '',
      retailerCode: json['retailerCode']?.toString() ?? '',
      distributorName: json['distributorName']?.toString() ?? '',
      area: json['area']?.toString() ?? '',
      distributionDate:
          DateTime.tryParse(json['distributionDate']?.toString() ?? '') ??
          DateTime.now(),
      painterName: json['painterName']?.toString() ?? '',
      painterMobile: json['painterMobile']?.toString() ?? '',
      skuSizeLabel: json['skuSizeLabel']?.toString() ?? '',
      qtyDistributedKg: (json['qtyDistributedKg'] ?? 0).toDouble(),
      missedQtyKg: (json['missedQtyKg'] ?? 0).toDouble(),
      effectiveDistributedKg: (json['effectiveDistributedKg'] ?? 0).toDouble(),
      totalReceivedKg: (json['totalReceivedKg'] ?? 0).toDouble(),
      remainingKg: (json['remainingKg'] ?? 0).toDouble(),
      reimbursementMode: json['reimbursementMode']?.toString() ?? '',
      reimbursementAmountAED: (json['reimbursementAmountAED'] ?? 0).toDouble(),
      photoImage: json['photoImage']?.toString(),
      serialNo: json['serialNo']?.toString() ?? '',
      materialQty: (json['materialQty'] ?? 0).toDouble(),
      sampleCancelFlag: json['sampleCancelFlag']?.toString() ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'docuNumb': docuNumb,
      'retailerName': retailerName,
      'retailerCode': retailerCode,
      'distributorName': distributorName,
      'area': area,
      'distributionDate': distributionDate.toIso8601String(),
      'painterName': painterName,
      'painterMobile': painterMobile,
      'skuSizeLabel': skuSizeLabel,
      'qtyDistributedKg': qtyDistributedKg,
      'missedQtyKg': missedQtyKg,
      'effectiveDistributedKg': effectiveDistributedKg,
      'totalReceivedKg': totalReceivedKg,
      'remainingKg': remainingKg,
      'reimbursementMode': reimbursementMode,
      'reimbursementAmountAED': reimbursementAmountAED,
      'photoImage': photoImage,
      'serialNo': serialNo,
      'materialQty': materialQty,
      'sampleCancelFlag': sampleCancelFlag,
    };
  }
}

class SamplingDriveRequest {
  final String? loginId;
  final String retailerName;
  final String retailerCode;
  final String distributorName;
  final String area;
  final String distributionDate;
  final String painterName;
  final String painterMobile;
  final String skuSizeLabel;
  final String qtyDistributedKg;
  final String missedQtyKg;
  final String reimbursementMode;
  final String reimbursementAmountAED;
  final String? photoImage;

  SamplingDriveRequest({
    this.loginId,
    required this.retailerName,
    required this.retailerCode,
    required this.distributorName,
    required this.area,
    required this.distributionDate,
    required this.painterName,
    required this.painterMobile,
    required this.skuSizeLabel,
    required this.qtyDistributedKg,
    required this.missedQtyKg,
    required this.reimbursementMode,
    required this.reimbursementAmountAED,
    this.photoImage,
  });

  Map<String, dynamic> toJson() {
    return {
      'loginId': loginId,
      'retailerName': retailerName,
      'retailerCode': retailerCode,
      'distributorName': distributorName,
      'area': area,
      'distributionDate': distributionDate,
      'painterName': painterName,
      'painterMobile': painterMobile,
      'skuSizeLabel': skuSizeLabel,
      'qtyDistributedKg': qtyDistributedKg,
      'missedQtyKg': missedQtyKg,
      'reimbursementMode': reimbursementMode,
      'reimbursementAmountAED': reimbursementAmountAED,
      'photoImage': photoImage,
    };
  }
}




































import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../SAMPLING/sample_model.dart';
import '../../../core/models/sample_distribution_models.dart';
import '../../../core/services/sample_distribution_service.dart';

class SampleDistributEntry extends StatefulWidget {
  @override
  _SampleDistributEntryState createState() => _SampleDistributEntryState();
}

class _SampleDistributEntryState extends State<SampleDistributEntry>
    with TickerProviderStateMixin {
  // Controllers final missedQtyController = TextEditingController();

  final emirateController = TextEditingController();
  final retailerNameController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final painterNameController = TextEditingController();
  final painterMobileController = TextEditingController();
  final materialQtyController = TextEditingController();
  final distributionDateController = TextEditingController();
  final siteAddressController = TextEditingController();
  final remarksController = TextEditingController();
  final sampleDateController = TextEditingController();
  final productController = TextEditingController();
  List<SupplyChainEntry> currentEntries = [];
  List<AreaItem> _areas = [];
  bool _isLoadingAreas = false;
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  bool _isSubmitting = false;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    _loadAreas();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  Future<void> _loadAreas() async {
    setState(() {
      _isLoadingAreas = true;
    });
    try {
      final areas = await SampleDistributionService.getAreas();
      setState(() {
        _areas = areas;
        _isLoadingAreas = false;
      });
    } catch (e) {
      setState(() {
        _isLoadingAreas = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading areas: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    emirateController.dispose();
    retailerNameController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    painterNameController.dispose();
    painterMobileController.dispose();
    materialQtyController.dispose();
    distributionDateController.dispose();
    siteAddressController.dispose();
    remarksController.dispose();
    sampleDateController.dispose();
    productController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        final prefs = await SharedPreferences.getInstance();

        // Create request object
        final request = SampleDistributionRequest(
          emirate: emirateController.text,
          retailerName: retailerNameController.text,
          retailerCode: retailerCodeController.text.isEmpty ? null : retailerCodeController.text,
          distributor: distributorController.text,
          painterName: painterNameController.text,
          painterMobile: painterMobileController.text.isEmpty ? null : painterMobileController.text,
          materialQty: materialQtyController.text.isEmpty ? null : materialQtyController.text,
          distributionDate: distributionDateController.text,
          siteAddress: siteAddressController.text.isEmpty ? null : siteAddressController.text,
          remarks: remarksController.text.isEmpty ? null : remarksController.text,
          sampleDate: sampleDateController.text.isEmpty ? null : sampleDateController.text,
          product: productController.text.isEmpty ? null : productController.text,
        );

        // Submit to API (loginId is automatically taken from AuthManager)
        final response = await SampleDistributionService.submitSampleDistribution(
          request,
        );

        if (response.success) {
          // Save to local storage on success
          await prefs.setString('Emirate', emirateController.text);
          await prefs.setString('retailerName', retailerNameController.text);
          await prefs.setString('retailerCode', retailerCodeController.text);
          await prefs.setString('distributor', distributorController.text);
          await prefs.setString('painterName', painterNameController.text);
          await prefs.setString('painterMobile', painterMobileController.text);
          await prefs.setString('materialQty', materialQtyController.text);
          await prefs.setString('distributionDate', distributionDateController.text);
          await prefs.setString('siteAddress', siteAddressController.text);
          await prefs.setString('remarks', remarksController.text);
          await prefs.setString('sampleDate', sampleDateController.text);
          await prefs.setString('product', productController.text);

          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    const Icon(Icons.check_circle, color: Colors.white, size: 20),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text('${response.message}${response.docuNumb != null ? ' (Doc: ${response.docuNumb})' : ''}'),
                    ),
                  ],
                ),
                backgroundColor: Colors.green,
                behavior: SnackBarBehavior.floating,
                duration: const Duration(seconds: 4),
              ),
            );
          }
        } else {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    const Icon(Icons.error, color: Colors.white, size: 20),
                    const SizedBox(width: 8),
                    Expanded(child: Text(response.message)),
                  ],
                ),
                backgroundColor: Colors.red,
                behavior: SnackBarBehavior.floating,
                duration: const Duration(seconds: 4),
              ),
            );
          }
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Error saving data: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  final demoSupplyChain = SupplyChainData(
    totalReceived: 500,
    billedToDistributor: 400,
    billedToRetailer: 350,
    distributedToPainter: 280,
  );

  Widget buildSupplyChainTable(List<SupplyChainEntry> entries) {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        headingRowColor: MaterialStateProperty.all(const Color(0xFF1E3A8A)),
        headingTextStyle: const TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.bold,
        ),
        columns: const [
          DataColumn(label: Text("Retailer")),
          DataColumn(label: Text("Code")),
          DataColumn(label: Text("Distributor")),
          DataColumn(label: Text("Painter")),
          DataColumn(label: Text("Mobile")),
          DataColumn(label: Text("SKU")),
          DataColumn(label: Text("Distributed (Kg)")),
          DataColumn(label: Text("Total Received (Kg)")),
          DataColumn(label: Text("Remaining (Kg)")),
        ],
        rows: entries.map((entry) {
          return DataRow(
            cells: [
              DataCell(Text(entry.retailerName)),
              DataCell(Text(entry.retailerCode)),
              DataCell(Text(entry.distributorName)),
              DataCell(Text(entry.painterName)),
              DataCell(Text(entry.painterMobile)),
              DataCell(Text(entry.skuSize)),
              DataCell(Text(entry.qtyDistributed.toString())),
              DataCell(Text(entry.totalReceived.toString())),
              DataCell(Text(entry.remaining.toString())),
            ],
          );
        }).toList(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet =
            constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;

        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 32),

                              // Submit Button
                              // In your build method (below Submit button)
                              if (currentEntries.isNotEmpty)
                                buildSupplyChainTable(currentEntries),

                              const SizedBox(height: 20),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Retailer Details',
                icon: Icons.store_rounded,
                children: [
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Emirates',
                    icon: Icons.location_on_outlined,
                    items: _areas.map((area) => area.desc).toList(),
                    value: emirateController.text.isEmpty
                        ? null
                        : _areas.firstWhere(
                            (area) => area.code == emirateController.text,
                            orElse: () => AreaItem(code: '', desc: ''),
                          ).desc,
                    onChanged: (value) {
                      setState(() {
                        final selectedArea = _areas.firstWhere(
                          (area) => area.desc == value,
                          orElse: () => AreaItem(code: '', desc: ''),
                        );
                        emirateController.text = selectedArea.code;
                      });
                    },
                    isLoading: _isLoadingAreas,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerNameController,
                    label: 'Retailer Name',
                    icon: Icons.store_outlined,
                  ),

                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerCodeController,
                    label: 'Retailer Code',
                    icon: Icons.qr_code_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: distributorController,
                    label: 'Concern Distributor',
                    icon: Icons.business_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: siteAddressController,
                    label: 'Site Address',
                    icon: Icons.location_on_outlined,
                    isRequired: false,
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: _buildModernSection(
                title: 'Distribution Details',
                icon: Icons.local_shipping_outlined,
                children: [
                  _buildModernTextField(
                    controller: painterNameController,
                    label: 'Name of Painter / Contractor',
                    icon: Icons.person_outline_rounded,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: painterMobileController,
                    label: 'Mobile no Painter / Contractor',
                    icon: Icons.phone_outlined,
                    isPhone: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: materialQtyController,
                    label: 'Total Distribution Amount in Kg',
                    icon: Icons.scale_outlined,
                    keyboardType: TextInputType.numberWithOptions(
                      decimal: true,
                    ),
                    inputFormatters: [
                      FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                    ],
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: distributionDateController,
                    label: 'Date of distribution',
                    icon: Icons.event_available_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: remarksController,
                    label: 'Remarks',
                    icon: Icons.notes_outlined,
                    isRequired: false,
                  ),
                ],
              ),
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Sample Proof Section
        _buildModernSection(
          title: 'Sample Proof',
          icon: Icons.photo_camera_outlined,
          children: [
            Row(
              children: [
                Expanded(
                  child: _buildModernDateField(
                    controller: sampleDateController,
                    label: 'Sample Date',
                    icon: Icons.calendar_today_outlined,
                    isRequired: false,
                  ),
                ),
                const SizedBox(width: 20),
                Expanded(
                  child: ModernDropdown(
                    label: 'Product',
                    icon: Icons.palette_outlined,
                    items: const ['Wallcare Putty'],
                    value: productController.text.isEmpty
                        ? null
                        : productController.text,
                    onChanged: (value) {
                      setState(() {
                        productController.text = value ?? '';
                      });
                    },
                  ),
                ),
              ],
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Retailer Details Section
        _buildModernSection(
          title: 'Retailer Details',
          icon: Icons.store_rounded,
          children: [
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Emirate',
              icon: Icons.location_on_outlined,
              items: _areas.map((area) => area.desc).toList(),
              value: emirateController.text.isEmpty
                  ? null
                  : _areas.firstWhere(
                      (area) => area.code == emirateController.text,
                      orElse: () => AreaItem(code: '', desc: ''),
                    ).desc,
              onChanged: (value) {
                setState(() {
                  final selectedArea = _areas.firstWhere(
                    (area) => area.desc == value,
                    orElse: () => AreaItem(code: '', desc: ''),
                  );
                  emirateController.text = selectedArea.code;
                });
              },
              isLoading: _isLoadingAreas,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerNameController,
              label: 'Retailer Name',
              icon: Icons.store_outlined,
            ),

            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: siteAddressController,
              label: 'Site Address',
              icon: Icons.location_on_outlined,
              isRequired: false,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Distribution Details Section
        _buildModernSection(
          title: 'Distribution Details',
          icon: Icons.local_shipping_outlined,
          children: [
            _buildModernTextField(
              controller: painterNameController,
              label: 'Name of Painter / Contractor',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: painterMobileController,
              label: 'Mobile no Painter / Contractor',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: materialQtyController,
              label: 'Total Distribution Amount in Kg',
              icon: Icons.scale_outlined,
              keyboardType: TextInputType.numberWithOptions(decimal: true),
              inputFormatters: [
                FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
              ],
            ),

            const SizedBox(height: 16),
            _buildModernDateField(
              controller: distributionDateController,
              label: 'Date of distribution',
              icon: Icons.event_available_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: remarksController,
              label: 'Remarks',
              icon: Icons.notes_outlined,
              isRequired: false,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Sample Proof Section
        _buildModernSection(
          title: 'Sample Proof',
          icon: Icons.photo_camera_outlined,
          children: [
            _buildModernDateField(
              controller: sampleDateController,
              label: 'Sample Date',
              icon: Icons.calendar_today_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Product',
              icon: Icons.palette_outlined,
              items: const ['Wallcare Putty'],
              value: productController.text.isEmpty
                  ? null
                  : productController.text,
              onChanged: (value) {
                setState(() {
                  productController.text = value ?? '';
                });
              },
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'Sample Distribution Entry',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(
            Icons.help_outline_rounded,
            color: Color(0xFF1E3A8A),
          ),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Sample Distribution Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter sample distribution details',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
    TextInputType? keyboardType,
    List<TextInputFormatter>? inputFormatters,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType:
          keyboardType ?? (isPhone ? TextInputType.phone : TextInputType.text),
      inputFormatters: inputFormatters,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Distribution',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Distribution Help',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF1F2937),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Ensure all distribution details are accurate before submission.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text(
                    'Got it',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

