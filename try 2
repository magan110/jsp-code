import '../../../core/models/sampling_drive_models.dart';
import '../../../core/services/sampling_execution_service.dart';
import '../../../core/services/contractor_service.dart';
import '../../../core/models/contractor_models.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:rak_web/features/auth/screens/login_screen_with_otp.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/modern_dropdown.dart';

class SamplingDriveFormPage extends StatefulWidget {
  @override
  _SamplingDriveFormPageState createState() => _SamplingDriveFormPageState();
}

class _SamplingDriveFormPageState extends State<SamplingDriveFormPage>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  String? _photoImage;

  // Controllers for all fields
  final retailerController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final areaController = TextEditingController();
  final dateController = TextEditingController();
  final painterController = TextEditingController();
  final phoneController = TextEditingController();
  final skuController = TextEditingController();
  final missedQtyController = TextEditingController();
  final siteAdController = TextEditingController();
  final qtyController = TextEditingController();
  final remarksController = TextEditingController();
  final reimbursementModeController = TextEditingController();
  final reimbursementAmtController = TextEditingController();
  final searchRetailerCodeController = TextEditingController();
  final startDateController = TextEditingController();
  final endDateController = TextEditingController();
  final emiratesController = TextEditingController();
  final samplDateController = TextEditingController();
  final prodController = TextEditingController();

  List<SamplingDriveEntry> allRetailerEntries = [];
  List<SamplingDriveEntry> filteredRetailerEntries = [];
  bool _isSubmitting = false;
  bool _isSearching = false;
  bool _isLoadingInitialData = false;
  String? _searchError;

  // Emirates dropdown data
  List<EmirateItem> _emirates = [];
  List<String> _emirateDescriptions = [];
  EmirateItem? _selectedEmirate;
  bool _isLoadingEmirates = true;

  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  final ScrollController _scrollController = ScrollController();

  final ScrollController _horizontalScrollController = ScrollController();
  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _mainController.forward();
      _fabController.forward();
    });

    // Load initial data and emirates
    _loadEmirates();
    _loadInitialData();
  }

  Future<void> _loadEmirates() async {
    setState(() {
      _isLoadingEmirates = true;
    });
    try {
      final emirates = await ContractorService.getEmiratesList();
      setState(() {
        _emirates = emirates;
        _emirateDescriptions = emirates.map((e) => e.desc).toList();
        _isLoadingEmirates = false;
      });
    } catch (e) {
      setState(() {
        _emirates = [
          EmirateItem(code: 'DUB', desc: 'Dubai'),
          EmirateItem(code: 'ABD', desc: 'Abu Dhabi'),
          EmirateItem(code: 'SHJ', desc: 'Sharjah'),
          EmirateItem(code: 'AJM', desc: 'Ajman'),
          EmirateItem(code: 'UAQ', desc: 'Umm Al Quwain'),
          EmirateItem(code: 'RAK', desc: 'Ras Al Khaimah'),
          EmirateItem(code: 'FUJ', desc: 'Fujairah'),
        ];
        _emirateDescriptions = _emirates.map((e) => e.desc).toList();
        _isLoadingEmirates = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading emirates: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> _loadInitialData() async {
    setState(() {
      _isLoadingInitialData = true;
      _searchError = null;
    });

    try {
      // Load top 100 entries by searching with just a top limit
      final result = await SamplingExecutionService.searchSamplingDriveEntries(
        top: 100,
      );

      if (result['success'] == true) {
        final entries = result['data'] as List<SamplingDriveEntry>;
        setState(() {
          allRetailerEntries = entries;
          filteredRetailerEntries = entries;
          _isLoadingInitialData = false;
        });
      } else {
        setState(() {
          _searchError = result['error'] ?? 'Failed to load initial data';
          _isLoadingInitialData = false;
        });
      }
    } catch (e) {
      setState(() {
        _searchError = 'Failed to load initial data: $e';
        _isLoadingInitialData = false;
      });
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    retailerController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    areaController.dispose();
    dateController.dispose();
    painterController.dispose();
    phoneController.dispose();
    skuController.dispose();
    qtyController.dispose();
    missedQtyController.dispose();
    reimbursementModeController.dispose();
    reimbursementAmtController.dispose();
    _scrollController.dispose();
    _horizontalScrollController.dispose();
    super.dispose();
  }

  String reimbursementModeToText(String mode) {
    return mode;
  }

  void populateControllers(SamplingDriveEntry entry) {
    retailerController.text = entry.retailerName;
    retailerCodeController.text = entry.retailerCode;
    distributorController.text = entry.distributorName;
    areaController.text = entry.area;
    dateController.text =
        "${entry.distributionDate.year}-${entry.distributionDate.month.toString().padLeft(2, '0')}-${entry.distributionDate.day.toString().padLeft(2, '0')}";
    painterController.text = entry.painterName;
    phoneController.text = entry.painterMobile;
    skuController.text = entry.skuSizeLabel;
    qtyController.text = entry.qtyDistributedKg.toStringAsFixed(1);
    missedQtyController.text = entry.missedQtyKg.toStringAsFixed(1);
    reimbursementModeController.text = reimbursementModeToText(
      entry.reimbursementMode,
    );
    reimbursementAmtController.text = entry.reimbursementAmountAED
        .toStringAsFixed(1);
  }

  Widget _buildSearchSection() {
    return _buildModernSection(
      title: 'Search Sampling Entries',
      icon: Icons.search,
      children: [
        _buildModernTextField(
          controller: searchRetailerCodeController,
          label: 'Retailer Code / Retailer Name / Painter Name',
          icon: Icons.search,
          isRequired: false,
        ),
        const SizedBox(height: 16),
        _buildModernDateField(
          controller: startDateController,
          label: 'Start Date',
          icon: Icons.calendar_today,
          isRequired: false,
        ),
        const SizedBox(height: 16),
        _buildModernDateField(
          controller: endDateController,
          label: 'End Date',
          icon: Icons.calendar_today,
          isRequired: false,
        ),
        const SizedBox(height: 8),

        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            TextButton.icon(
              onPressed: () {
                searchRetailerCodeController.clear();
                startDateController.clear();
                endDateController.clear();
                setState(() {
                  filteredRetailerEntries = allRetailerEntries;
                });
              },
              icon: const Icon(Icons.clear_all),
              label: const Text('Clear All'),
            ),
            TextButton.icon(
              onPressed: () {
                startDateController.clear();
                endDateController.clear();
              },
              icon: const Icon(Icons.clear),
              label: const Text('Clear Dates'),
            ),
          ],
        ),
        const SizedBox(height: 16),
        SizedBox(
          width: double.infinity,
          child: ElevatedButton.icon(
            onPressed: _isSearching ? null : _performSearch,
            icon: _isSearching
                ? const SizedBox(
                    width: 16,
                    height: 16,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  )
                : const Icon(Icons.search),
            label: Text(_isSearching ? 'Searching...' : 'Search'),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF1E3A8A),
              foregroundColor: Colors.white,
            ),
          ),
        ),
      ],
    );
  }

  void _performSearch() async {
    final searchText = searchRetailerCodeController.text.trim();
    final startDate = startDateController.text.trim();
    final endDate = endDateController.text.trim();

    // If no search criteria provided, show all loaded entries
    if (searchText.isEmpty && startDate.isEmpty && endDate.isEmpty) {
      setState(() {
        filteredRetailerEntries = allRetailerEntries;
      });
      return;
    }

    setState(() {
      _isSearching = true;
      _searchError = null;
    });

    try {
      // Filter from loaded entries instead of making API calls
      List<SamplingDriveEntry> filtered = allRetailerEntries.where((entry) {
        bool matchesText = true;
        bool matchesDate = true;

        // Check text search (retailer code, retailer name, or painter name)
        if (searchText.isNotEmpty) {
          final searchLower = searchText.toLowerCase();
          matchesText = entry.retailerCode.toLowerCase().contains(searchLower) ||
                       entry.retailerName.toLowerCase().contains(searchLower) ||
                       entry.painterName.toLowerCase().contains(searchLower);
        }

        // Check date range
        if (startDate.isNotEmpty || endDate.isNotEmpty) {
          final entryDate = entry.distributionDate;

          if (startDate.isNotEmpty) {
            final start = DateTime.tryParse(startDate);
            if (start != null && entryDate.isBefore(start)) {
              matchesDate = false;
            }
          }

          if (endDate.isNotEmpty) {
            final end = DateTime.tryParse(endDate);
            if (end != null && entryDate.isAfter(end.add(const Duration(days: 1)))) {
              matchesDate = false;
            }
          }
        }

        return matchesText && matchesDate;
      }).toList();

      setState(() {
        filteredRetailerEntries = filtered;
        _isSearching = false;
      });

      if (filtered.isEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('No entries found for the given criteria'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } catch (e) {
      setState(() {
        _searchError = 'Filter error: $e';
        _isSearching = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Filter error: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Widget buildSupplyChainTableExtended(
    List<SamplingDriveEntry> retailerData,
    ScrollController scrollController,
  ) {
    Widget numCell(double v) => Align(
      alignment: Alignment.centerRight,
      child: Text(v.toStringAsFixed(1)),
    );

    String dateText(DateTime d) =>
        "${d.year.toString().padLeft(4, '0')}-${d.month.toString().padLeft(2, '0')}-${d.day.toString().padLeft(2, '0')}";

    return Scrollbar(
      controller: scrollController,
      thumbVisibility: true,
      child: SingleChildScrollView(
        controller: scrollController,
        scrollDirection: Axis.horizontal,
        child: DataTable(
          showCheckboxColumn: false,
          columns: const [
            DataColumn(label: Text("DocuNumb")),
            DataColumn(label: Text("Retailer")),
            DataColumn(label: Text("Code")),
            DataColumn(label: Text("Distributor")),
            DataColumn(label: Text("Area")),
            DataColumn(label: Text("Date")),
            DataColumn(label: Text("Painter")),
            DataColumn(label: Text("Mobile")),
            DataColumn(label: Text("Distributed (Kg)")),
          ],
          rows: retailerData.map((entry) {
            return DataRow(
              cells: [
                DataCell(Text(entry.docuNumb ?? '')),
                DataCell(Text(entry.retailerName)),
                DataCell(Text(entry.retailerCode)),
                DataCell(Text(entry.distributorName)),
                DataCell(Text(entry.area)),
                DataCell(Text(dateText(entry.distributionDate))),
                DataCell(Text(entry.painterName)),
                DataCell(Text(entry.painterMobile)),
                DataCell(numCell(entry.qtyDistributedKg)),
              ],
              onSelectChanged: (_) {
                populateControllers(entry);
              },
            );
          }).toList(),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final isDesktop = MediaQuery.of(context).size.width >= 1200;

    return Scaffold(
      appBar: _buildModernAppBar(),
      body: SafeArea(
        child: LayoutBuilder(
          builder: (ctx, constraints) {
            return SingleChildScrollView(
              // only ONE vertical scroller
              child: Center(
                child: ConstrainedBox(
                  constraints: BoxConstraints(
                    maxWidth: isDesktop ? 1800 : double.infinity,
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(6),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // 1) Header - Always show
                        _buildAnimatedHeader(),
                        const SizedBox(height: 32),

                        // 2) Search - Always show
                        _buildSearchSection(),
                        const SizedBox(height: 32),

                        // 3) Table/List section - Show loading, data, or error states
                        if (_isLoadingInitialData) ...[
                          // Show loading indicator for initial data
                          Container(
                            padding: const EdgeInsets.all(48),
                            decoration: BoxDecoration(
                              color: Colors.blue.shade50,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.blue.shade200),
                            ),
                            child: const Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                SizedBox(
                                  width: 24,
                                  height: 24,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                  ),
                                ),
                                SizedBox(width: 16),
                                Text(
                                  'Loading top 100 entries...',
                                  style: TextStyle(fontSize: 16),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 24),
                        ] else if (filteredRetailerEntries.isNotEmpty) ...[
                          // Show count of displayed entries
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.green.shade50,
                              borderRadius: BorderRadius.circular(8),
                              border: Border.all(color: Colors.green.shade200),
                            ),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.info_outline,
                                  color: Colors.green.shade600,
                                  size: 20,
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  'Showing ${filteredRetailerEntries.length} of ${allRetailerEntries.length} entries',
                                  style: TextStyle(
                                    color: Colors.green.shade700,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 16),
                          buildSupplyChainTableExtended(
                            filteredRetailerEntries,
                            _horizontalScrollController,
                          ),
                          const SizedBox(height: 20),
                        ] else if (_searchError != null) ...[
                          // Show error message if search failed
                          Container(
                            padding: const EdgeInsets.all(24),
                            decoration: BoxDecoration(
                              color: Colors.red.shade50,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.red.shade200),
                            ),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.error_outline,
                                  color: Colors.red.shade600,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    'Error: $_searchError',
                                    style: TextStyle(
                                      color: Colors.red.shade700,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 24),
                        ] else if (allRetailerEntries.isNotEmpty) ...[
                          // Show message when filter returns no results
                          Container(
                            padding: const EdgeInsets.all(24),
                            decoration: BoxDecoration(
                              color: Colors.orange.shade50,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.orange.shade200),
                            ),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.search_off,
                                  color: Colors.orange.shade600,
                                ),
                                const SizedBox(width: 12),
                                const Expanded(
                                  child: Text(
                                    'No entries match your search criteria. Try different search terms or clear the search to see all entries.',
                                    style: TextStyle(fontSize: 16),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 24),
                        ] else ...[
                          // Show empty state (shouldn't normally happen)
                          Container(
                            padding: const EdgeInsets.all(24),
                            decoration: BoxDecoration(
                              color: Colors.grey.shade50,
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(color: Colors.grey.shade200),
                            ),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.inbox_outlined,
                                  color: Colors.grey.shade600,
                                ),
                                const SizedBox(width: 12),
                                const Expanded(
                                  child: Text(
                                    'No sampling entries available.',
                                    style: TextStyle(fontSize: 16),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(height: 24),
                        ],

                        // 4) Form fields - Always show
                        const SizedBox(height: 48),
                        if (isDesktop)
                          buildDesktopLayout()
                        else
                          buildMobileLayout(),

                        const SizedBox(height: 48),
                        _buildAnimatedSubmitButton(),
                        const SizedBox(height: 48),
                      ],
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }

  Widget buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: Column(
                children: [
                  _buildModernSection(
                    title: 'Sample Material Distribution',
                    icon: Icons.inventory_2_outlined,
                    children: [
                      _buildModernTextField(
                        controller: retailerController,
                        label: 'Retailer Name',
                        icon: Icons.storefront,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: retailerCodeController,
                        label: 'Retailer Code',
                        icon: Icons.qr_code_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: distributorController,
                        label: 'Concern Distributor',
                        icon: Icons.business_outlined,
                      ),
                      const SizedBox(height: 20),
                      ModernDropdown(
                        label: 'Emirates',
                        icon: Icons.location_on_outlined,
                        items: _emirateDescriptions,
                        value: _selectedEmirate?.desc,
                        onChanged: (value) {
                          if (value != null) {
                            setState(() {
                              _selectedEmirate = _emirates.firstWhere(
                                (e) => e.desc == value,
                                orElse: () => _emirates.first,
                              );
                              emiratesController.text = _selectedEmirate!.desc;
                            });
                          }
                        },
                        isLoading: _isLoadingEmirates,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: dateController,
                        label: 'Date of Distribution',
                        icon: Icons.calendar_today_outlined,
                      ),
                      const SizedBox(height: 24),
                      _buildModernSection(
                        title: 'Sample Proof',
                        icon: Icons.photo_camera_outlined,
                        children: [
                          _buildModernDateField(
                            controller: samplDateController,
                            label: 'Sample Date',
                            icon: Icons.calendar_today_outlined,
                            isRequired: false,
                          ),
                          const SizedBox(height: 20),
                          ModernDropdown(
                            label: 'Product',
                            icon: Icons.palette_outlined,
                            items: const ['Wallcare Putty'],
                            value: prodController.text.isEmpty
                                ? null
                                : prodController.text,
                            onChanged: (value) {
                              setState(() {
                                prodController.text = value ?? '';
                              });
                            },
                          ),
                          const SizedBox(height: 20),
                          FileUploadWidget(
                            label: 'Sample Photograph',
                            icon: Icons.camera_alt_outlined,
                            onFileSelected: (value) {
                              setState(() => _photoImage = value);
                            },
                            allowedExtensions: const ['jpg', 'jpeg', 'png'],
                            maxSizeInMB: 10.0,
                            currentFilePath: _photoImage,
                            formType: 'sampling',
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: Column(
                children: [
                  _buildModernSection(
                    title: 'Execution Details',
                    icon: Icons.engineering_outlined,
                    children: [
                      _buildModernTextField(
                        controller: painterController,
                        label: 'Painter/Contractor Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: phoneController,
                        label: 'Contact Number',
                        icon: Icons.phone_outlined,
                        isPhone: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: qtyController,
                        label: 'Material Qty Distributed (Kg)',
                        icon: Icons.inventory_outlined,
                        isNumeric: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: siteAdController,
                        label: 'Site Address',
                        icon: Icons.location_on_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                  const SizedBox(height: 24),
                  _buildModernSection(
                    title: 'Reimbursement',
                    icon: Icons.payments_outlined,
                    children: [
                      ModernDropdown(
                        label: 'Reimbursement Mode',
                        icon: Icons.monetization_on_outlined,
                        items: ['0 AED (No Reimbursement)', 'Max 150 AED '],
                        value: reimbursementModeController.text.isEmpty
                            ? null
                            : reimbursementModeController.text,
                        onChanged: (String? value) {
                          setState(() {
                            reimbursementModeController.text = value ?? '';
                            if (value != null) {
                              if (value.contains('Max 150 AED')) {
                                reimbursementAmtController.text = '150';
                              } else if (value.contains('0')) {
                                reimbursementAmtController.text = '0';
                              }
                            }
                          });
                        },
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: reimbursementAmtController,
                        label: 'Amount Reimbursed',
                        icon: Icons.attach_money_outlined,
                        isNumeric: true,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget buildMobileLayout() {
    return Column(
      children: [
        // Sample Material Distribution
        _buildModernSection(
          title: 'Sample Material Distribution',
          icon: Icons.inventory_2_outlined,
          children: [
            _buildModernTextField(
              controller: retailerController,
              label: 'Retailer Name',
              icon: Icons.storefront,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Emirates',
              icon: Icons.location_on_outlined,
              items: _emirateDescriptions,
              value: _selectedEmirate?.desc,
              onChanged: (value) {
                if (value != null) {
                  setState(() {
                    _selectedEmirate = _emirates.firstWhere(
                      (e) => e.desc == value,
                      orElse: () => _emirates.first,
                    );
                    emiratesController.text = _selectedEmirate!.desc;
                  });
                }
              },
              isLoading: _isLoadingEmirates,
            ),
            const SizedBox(height: 16),
            _buildModernDateField(
              controller: dateController,
              label: 'Date of Distribution',
              icon: Icons.calendar_today_outlined,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Execution Details
        _buildModernSection(
          title: 'Execution Details',
          icon: Icons.engineering_outlined,
          children: [
            _buildModernTextField(
              controller: painterController,
              label: 'Painter/Contractor Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: phoneController,
              label: 'Contact Number',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: qtyController,
              label: 'Material Qty Distributed (Kg)',
              icon: Icons.inventory_outlined,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: siteAdController,
              label: 'Site Address',
              icon: Icons.location_on_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 16),
          ],
        ),
        const SizedBox(height: 24),
        // Sample Proof
        _buildModernSection(
          title: 'Sample Proof',
          icon: Icons.photo_camera_outlined,
          children: [
            _buildModernDateField(
              controller: samplDateController,
              label: 'Sample Date',
              icon: Icons.calendar_today_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Product',
              icon: Icons.palette_outlined,
              items: const ['Wallcare Putty'],
              value: prodController.text.isEmpty ? null : prodController.text,
              onChanged: (value) {
                setState(() {
                  prodController.text = value ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            FileUploadWidget(
              label: 'Sample Photograph',
              icon: Icons.camera_alt_outlined,
              onFileSelected: (value) {
                setState(() => _photoImage = value);
              },
              allowedExtensions: const ['jpg', 'jpeg', 'png'],
              maxSizeInMB: 10.0,
              currentFilePath: _photoImage,
              formType: 'sampling',
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Reimbursement
        _buildModernSection(
          title: 'Reimbursement',
          icon: Icons.payments_outlined,
          children: [
            ModernDropdown(
              label: 'Reimbursement Mode',
              icon: Icons.monetization_on_outlined,
              items: ['0 AED (No Reimbursement)', 'Max 150 AED '],
              value: reimbursementModeController.text.isEmpty
                  ? null
                  : reimbursementModeController.text,
              onChanged: (String? value) {
                setState(() {
                  reimbursementModeController.text = value ?? '';
                  // Auto-fill amount based on selection
                  if (value != null) {
                    if (value.contains('Max 150 AED')) {
                      reimbursementAmtController.text = '150';
                    } else if (value.contains('0')) {
                      reimbursementAmtController.text = '0';
                    }
                  }
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: reimbursementAmtController,
              label: 'Amount Reimbursed',
              icon: Icons.attach_money_outlined,
              isNumeric: true,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      title: Text(
        'Sample Execution Entry',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(
            Icons.help_outline_rounded,
            color: Color(0xFF1E3A8A),
          ),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Sample Execution Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Sample Execution Entry',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumeric = false,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone
          ? TextInputType.phone
          : isNumeric
          ? TextInputType.number
          : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.save, size: 20),
                  const SizedBox(width: 12),
                  const Text(
                    'Submit',
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                ],
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Sampling Drive Help',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF1F2937),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Reimbursement amount will be auto-filled based on the selected mode.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text(
                    'Got it',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      // Simulate API call
      await Future.delayed(const Duration(seconds: 2));
      setState(() {
        _isSubmitting = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(child: Text('Sampling Entry Saved Successfully!')),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }
}
