using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UniversalOutletsRegistrationController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public UniversalOutletsRegistrationController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("createRetailer")]
        public IActionResult CreateRetailer([FromBody] RetailerRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.MobileNo) || string.IsNullOrWhiteSpace(request.ItxPanNo) || string.IsNullOrWhiteSpace(request.GstNumb))
            {
                return BadRequest("Mobile number, PAN number, and GST number are required.");
            }

            try
            {
                string sql = @"INSERT INTO rtmUniVsRtl (mobileNo, itxPanNo, gstnNumb, areaCode, retlName, contName, mrktName, itrsBwPd, itrsPrDt, itrsBwRg, itrsRgDt, pntNptTy, typeOfBs, retlAdd1, retlAdd2, retlAdd3, cityName, location, concEmpl, district, retlPinC, wcPotnsl, wcpPtnsl, rtDocCnt, isActive, createId, createDt, mobilNo1, locaCapr, latitute, lgtitute)
                              VALUES (@MobileNo, @ItxPanNo, @GstNumb, @AreaCode, @RetailerName, @ContactName, @MarketName, @ItrsBwPd, @ItrsPrDt, @ItrsBwRg, @ItrsRgDt, @PntNptTy, @TypeOfBs, @Address1, @Address2, @Address3, @CityName, @Location, @ConcernEmployee, @District, @PinCode, @WcPotential, @WcpPotential, @RtDocCnt, @IsActive, @CreatedBy, GETDATE(), @AlternateMobile, @LocationCapture, @Latitude, @Longitude);";

                var parameters = new Dictionary<string, object>
                {
                    { "@MobileNo", request.MobileNo },
                    { "@ItxPanNo", request.ItxPanNo },
                    { "@GstNumb", request.GstNumb },
                    { "@AreaCode", request.AreaCode },
                    { "@RetailerName", request.RetailerName },
                    { "@ContactName", request.ContactName },
                    { "@MarketName", request.MarketName },
                    { "@ItrsBwPd", request.ItrsBwPd },
                    { "@ItrsPrDt", request.ItrsPrDt },
                    { "@ItrsBwRg", request.ItrsBwRg },
                    { "@ItrsRgDt", request.ItrsRgDt },
                    { "@PntNptTy", request.PntNptTy },
                    { "@TypeOfBs", request.TypeOfBs },
                    { "@Address1", request.Address1 ?? string.Empty },
                    { "@Address2", request.Address2 },
                    { "@Address3", request.Address3 ?? string.Empty },
                    { "@CityName", request.CityName },
                    { "@Location", request.Location },
                    { "@ConcernEmployee", request.ConcernEmployee },
                    { "@District", request.District },
                    { "@PinCode", request.PinCode },
                    { "@WcPotential", request.WcPotential ?? string.Empty },
                    { "@WcpPotential", request.WcpPotential ?? string.Empty },
                    { "@RtDocCnt", request.RtDocCnt ?? (object)DBNull.Value },
                    { "@IsActive", request.IsActive },
                    { "@CreatedBy", User.Identity?.Name ?? "UNKNOWN" },
                    { "@AlternateMobile", request.AlternateMobile ?? string.Empty },
                    { "@LocationCapture", request.LocationCapture },
                    { "@Latitude", request.Latitude },
                    { "@Longitude", request.Longitude }
                };

                _dbHelper.WebSessBean(sql, parameters);

                return Ok("Retailer created successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost("uploadImage")]
        public IActionResult UploadImage([FromBody] ImageUploadRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.DocumentNumber) || string.IsNullOrWhiteSpace(request.ImageData))
            {
                return BadRequest("Document number and image data are required.");
            }

            try
            {
                string sql = @"INSERT INTO imagedata.dbo.cotGenAttch (attFilKy, statFlag, createId, createDt) 
                              VALUES (@DocumentNumber, 'A', @CreatedBy, GETDATE());";

                var parameters = new Dictionary<string, object>
                {
                    { "@DocumentNumber", request.DocumentNumber },
                    { "@CreatedBy", User.Identity?.Name ?? "UNKNOWN" }
                };

                _dbHelper.WebSessBean(sql, parameters);

                return Ok("Image uploaded successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("validatePan")]
        public IActionResult ValidatePan([FromQuery] string panNo)
        {
            if (string.IsNullOrWhiteSpace(panNo))
            {
                return BadRequest("PAN number is required.");
            }

            try
            {
                string sql = "SELECT COUNT(*) FROM rtmUniVsRtl WHERE itxPanNo = @PanNo";
                var parameters = new Dictionary<string, object>
                {
                    { "@PanNo", panNo }
                };

                var result = _dbHelper.WebSessBean(sql, parameters);

                if (result is List<Dictionary<string, object>> rows && rows.Count > 0 && Convert.ToInt32(rows[0].Values.First()) > 0)
                {
                    return BadRequest("PAN number already exists.");
                }

                return Ok("PAN number is valid.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }

    public class RetailerRequest
    {
        public string MobileNo { get; set; }
        public string ItxPanNo { get; set; }
        public string GstNumb { get; set; }
        public string AreaCode { get; set; }
        public string RetailerName { get; set; }
        public string ContactName { get; set; }
        public string MarketName { get; set; }
        public string ItrsBwPd { get; set; }
        public string ItrsPrDt { get; set; }
        public string ItrsBwRg { get; set; }
        public string ItrsRgDt { get; set; }
        public string PntNptTy { get; set; }
        public string TypeOfBs { get; set; }
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string Address3 { get; set; }
        public string CityName { get; set; }
        public string Location { get; set; }
        public string ConcernEmployee { get; set; }
        public string District { get; set; }
        public string PinCode { get; set; }
        public string WcPotential { get; set; }
        public string WcpPotential { get; set; }
        public int? RtDocCnt { get; set; }
        public string IsActive { get; set; }
        public string AlternateMobile { get; set; }
        public string LocationCapture { get; set; }
        public string Latitude { get; set; }
        public string Longitude { get; set; }
    }

    public class ImageUploadRequest
    {
        public string DocumentNumber { get; set; }
        public string ImageData { get; set; }
    }
}
