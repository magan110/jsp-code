<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Flutter will replace this with the value from --base-href -->
  <base href="$FLUTTER_BASE_HREF" />

  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
  <meta name="description" content="RAK Web App" />

  <!-- PWA / theme -->
  <meta name="mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
  <meta name="apple-mobile-web-app-title" content="rak_web" />
  <meta name="theme-color" content="#ffffff" />
  <link rel="apple-touch-icon" href="icons/Icon-192.png" />
  <link rel="icon" href="icons/Icon-192.png" />

  <!-- Viewport -->
  <meta name="viewport"
        content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes, viewport-fit=cover" />

  <!-- Meta CSP (header CSP in IIS/web.config will override this if set) -->
  <meta http-equiv="Content-Security-Policy" content="
    default-src 'self' https:;
    script-src 'self' https: 'unsafe-inline' 'unsafe-eval';
    img-src 'self' blob: data: https:;
    style-src 'self' 'unsafe-inline' https:;
    connect-src 'self' https: http: wss: ws: blob: https://qa.birlawhite.com:55232 https://rak.birlawhite.com;
    font-src 'self' https: data:;
    media-src 'self' blob: data: https:;
    worker-src 'self' blob: https:;
    child-src 'self' blob:;
    frame-src 'self';
  " />

  <title>rak_web</title>
  <link rel="manifest" href="manifest.json" />
  <link rel="stylesheet" href="assets/css/roboto.css" />

  <style>
    html, body { margin: 0; height: 100%; overscroll-behavior: none; background: #fff; }
  </style>
</head>
<body>
  <!-- PDF.js - Local -->
  <script src="assets/js/pdf.min.js"></script>
  <script>
    // Enhanced PDF.js worker configuration with better fallbacks
    if (typeof pdfjsLib !== 'undefined') {
      console.log('PDF.js version:', pdfjsLib.version || 'unknown');

      // Create a robust worker configuration
      const configurePDFWorker = () => {
        try {
          // Dynamic version detection or fallback to known version
          const pdfVersion = pdfjsLib.version || '3.11.174';
          const cdnWorkerUrl = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfVersion}/pdf.worker.min.js`;

          pdfjsLib.GlobalWorkerOptions.workerSrc = cdnWorkerUrl;

          console.log('PDF.js worker configured successfully with URL:', cdnWorkerUrl);

          // Test worker loading
          const testWorker = () => {
            try {
              if (pdfjsLib.getDocument) {
                console.log('PDF.js worker test successful');
              }
            } catch (error) {
              console.error('PDF.js worker test failed:', error);
            }
          };

          setTimeout(testWorker, 100);

        } catch (error) {
          console.error('Failed to configure PDF.js worker:', error);
        }
      };

      // Configure immediately
      configurePDFWorker();

      // Also configure on document ready as fallback
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', configurePDFWorker);
      }
    } else {
      console.warn('PDF.js library not found');
    }
  </script>

  <!-- Firebase Web SDK -->
  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>

  <!-- Third-party libs - Local -->
  <script defer src="assets/js/tesseract.min.js"></script>
  <script defer src="assets/js/jsQR.js"></script>

  <!-- Firebase Configuration -->
  <script>
    // Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyA7DZnKbvRlBvq23Zakcu-_nYJqeSaOKa8",
      authDomain: "rak-circle.firebaseapp.com",
      projectId: "rak-circle",
      storageBucket: "rak-circle.firebasestorage.app",
      messagingSenderId: "346258797033",
      appId: "1:346258797033:web:e48a94e9560234e0c2db78",
      measurementId: "G-707FN3TQPD"
    };

    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);

    // Set auth persistence to LOCAL (stores in IndexedDB/localStorage)
    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)
      .then(() => {
        console.log('Firebase auth persistence set to LOCAL');
      })
      .catch((error) => {
        console.error('Failed to set Firebase auth persistence:', error);
      });

    // Global Firebase Auth instance
    window.firebaseAuth = firebase.auth();

    // Firebase Auth State Management
    window.FirebaseAuthManager = {
      currentUser: null,
      authStateListeners: [],
      isInitialized: false,

      // Initialize auth state listener
      init() {
        if (this.isInitialized) return;

        console.log('üî• Initializing Firebase Auth state listener');

        firebase.auth().onAuthStateChanged((user) => {
          console.log('üîÑ Firebase auth state changed:', user ? 'SIGNED IN' : 'SIGNED OUT');
          if (user) {
            console.log('üë§ User details:', {
              uid: user.uid,
              email: user.email,
              emailVerified: user.emailVerified
            });
          }
          this.currentUser = user;

          // Notify all listeners
          this.authStateListeners.forEach(callback => {
            try {
              callback(user);
            } catch (error) {
              console.error('‚ùå Auth state listener error:', error);
            }
          });
        });

        this.isInitialized = true;
        console.log('‚úÖ Firebase Auth Manager initialized');
      },

      // Add auth state change listener
      onAuthStateChanged(callback) {
        this.authStateListeners.push(callback);

        // If already initialized, call immediately with current state
        if (this.isInitialized && this.currentUser !== null) {
          callback(this.currentUser);
        }
      },

      // Get current Firebase user
      getCurrentUser() {
        return firebase.auth().currentUser;
      },

      // Get Firebase ID token
      async getIdToken() {
        const user = this.getCurrentUser();
        if (!user) {
          console.log('üé´ No Firebase user for token');
          return null;
        }

        try {
          const token = await user.getIdToken();
          console.log('üé´ Firebase ID token obtained:', token ? 'SUCCESS' : 'NULL');
          return token;
        } catch (error) {
          console.error('‚ùå Failed to get Firebase ID token:', error);
          return null;
        }
      },

      // Sign in with email and password
      async signInWithEmailAndPassword(email, password) {
        try {
          console.log('üîê Attempting Firebase sign in for:', email);
          const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
          console.log('‚úÖ Firebase sign in successful for:', email);
          return { success: true, user: userCredential.user };
        } catch (error) {
          console.error('‚ùå Firebase sign in error:', error);
          return { success: false, error: error.message };
        }
      },

      // Sign in with phone number
      async signInWithPhoneNumber(phoneNumber, recaptchaVerifier) {
        try {
          const confirmationResult = await firebase.auth().signInWithPhoneNumber(phoneNumber, recaptchaVerifier);
          return { success: true, confirmationResult };
        } catch (error) {
          console.error('Firebase phone sign in error:', error);
          return { success: false, error: error.message };
        }
      },

      // Create user with email and password
      async createUserWithEmailAndPassword(email, password) {
        try {
          const userCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);
          return { success: true, user: userCredential.user };
        } catch (error) {
          console.error('Firebase create user error:', error);
          return { success: false, error: error.message };
        }
      },

      // Sign out
      async signOut() {
        try {
          await firebase.auth().signOut();
          return { success: true };
        } catch (error) {
          console.error('Firebase sign out error:', error);
          return { success: false, error: error.message };
        }
      },

      // Send password reset email
      async sendPasswordResetEmail(email) {
        try {
          await firebase.auth().sendPasswordResetEmail(email);
          return { success: true };
        } catch (error) {
          console.error('Firebase password reset error:', error);
          return { success: false, error: error.message };
        }
      }
    };

    // Firebase Custom Auth Helper for email and userID inputs
    window.FirebaseCustomAuth = {
      // Check if input is a valid email format
      isValidEmail(input) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input);
      },

      // Create a temporary email format for non-email userIDs (fallback only)
      createFirebaseEmail(userID) {
        return `${userID}@temp.rakauth.com`;
      },

      // Force recreate account for userID (admin function)
      async forceRecreateUserIDAccount(userID, newPassword) {
        try {
          const firebaseEmail = this.createFirebaseEmail(userID);
          console.log(`üîÑ Force recreating account for userID: ${userID}`);

          // Try to create with new password
          try {
            const createResult = await window.FirebaseAuthManager.createUserWithEmailAndPassword(firebaseEmail, newPassword);
            console.log('‚úÖ Account recreated successfully');
            return { success: true, user: createResult.user };
          } catch (createError) {
            if (createError.code === 'auth/email-already-in-use') {
              console.log('‚ùå Account still exists, cannot recreate automatically');
              return {
                success: false,
                error: 'Account exists. Manual admin intervention required to reset password.'
              };
            }
            return { success: false, error: `Recreation failed: ${createError.message}` };
          }
        } catch (error) {
          return { success: false, error: `Force recreate error: ${error.message}` };
        }
      },

      // Sign in with exact input as provided
      async signInWithUserID(input, password) {
        try {
          // Validate input
          if (!input || input.trim() === '') {
            throw new Error('Username/Email cannot be empty');
          }

          const trimmedInput = input.trim();
          console.log(`üîê Using exact input for Firebase auth: ${trimmedInput}`);

          // Try to sign in with exact input as provided
          try {
            const result = await window.FirebaseAuthManager.signInWithEmailAndPassword(trimmedInput, password);
            console.log('‚úÖ Firebase sign in successful');
            return { success: true, user: result.user };
          } catch (signInError) {
            console.log('üîç Sign in failed, checking error:', signInError.code, signInError.message);

            // Handle different error scenarios
            if (signInError.code === 'auth/user-not-found') {
              console.log('üìù Creating new Firebase account for input:', trimmedInput);
              try {
                const createResult = await window.FirebaseAuthManager.createUserWithEmailAndPassword(trimmedInput, password);
                console.log('‚úÖ Firebase account created and signed in');
                return { success: true, user: createResult.user };
              } catch (createError) {
                console.error('‚ùå Failed to create Firebase account:', createError.code, createError.message);
                return { success: false, error: `Account creation failed: ${createError.message}` };
              }
            } else if (signInError.code === 'auth/wrong-password' || signInError.code === 'auth/invalid-credential') {
              console.log('üîÑ Password mismatch for account:', trimmedInput);
              return { success: false, error: `Incorrect password for ${trimmedInput}. Please check your password and try again.` };
            } else if (signInError.code === 'auth/invalid-email') {
              return { success: false, error: `Invalid email format: ${trimmedInput}. Please provide a valid email address.` };
            } else {
              console.error('‚ùå Firebase sign in failed:', signInError);
              return { success: false, error: `Authentication failed: ${signInError.message}` };
            }
          }
        } catch (error) {
          console.error('‚ùå Firebase custom auth error:', error);
          return { success: false, error: `Firebase authentication error: ${error.message}` };
        }
      }
    };

    // Debug helper - call from console: window.debugAuth()
    window.debugAuth = function() {
      console.log('üîç AUTH DEBUG INFO:');
      console.log('Firebase ready:', !!window.FirebaseAuthManager);
      console.log('SessionManager ready:', !!window.SessionManager);

      if (window.FirebaseAuthManager) {
        const user = window.FirebaseAuthManager.getCurrentUser();
        console.log('Firebase user:', user ? {
          uid: user.uid,
          email: user.email,
          emailVerified: user.emailVerified
        } : 'NO USER');
      }

      if (window.SessionManager) {
        const session = window.SessionManager.restoreUserSession();
        console.log('Stored session:', session);
      }

      // Check localStorage directly
      const rawSession = localStorage.getItem('flutter_user_session');
      console.log('Raw localStorage:', rawSession);
    };

    // Clear any old localStorage session data (migration to Firebase-only)
    try {
      if (localStorage.getItem('flutter_user_session')) {
        console.log('üóëÔ∏è Removing old localStorage session data - migrating to Firebase-only auth');
        localStorage.removeItem('flutter_user_session');
      }
    } catch (e) {
      console.log('üóëÔ∏è Cleanup localStorage');
    }

    // Initialize Firebase Auth Manager when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        window.FirebaseAuthManager.init();
      });
    } else {
      window.FirebaseAuthManager.init();
    }
  </script>

  <!-- Your local scripts -->
  <script defer src="mlkit-ocr.js"></script>
  <script defer src="ocr.js"></script>

  <!-- QR Code + Geolocation helpers -->
  <script>
    window.detectQRCode = function(imageData, width, height) {
      try {
        if (typeof jsQR !== 'undefined') {
          const code = jsQR(imageData, width, height);
          return code ? code.data : null;
        }
      } catch (e) { console.error('QR detection error:', e); }
      return null;
    };

    window.requestGeoPosition = async function () {
      if (!('geolocation' in navigator)) return { ok: false, error: 'Geolocation not supported' };
      return new Promise((resolve) => {
        navigator.geolocation.getCurrentPosition(
          (pos) => {
            const lat = +pos.coords.latitude.toFixed(6);
            const lng = +pos.coords.longitude.toFixed(6);
            try { localStorage.setItem('lastLat', String(lat)); localStorage.setItem('lastLng', String(lng)); } catch {}
            resolve({ ok: true, lat, lng });
          },
          (err) => resolve({ ok: false, error: err.message }),
          { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
        );
      });
    };
  </script>

  <!-- Native Permissions Bridge -->
  <script>
    (function () {
      const w = window;
      const hasBridge = !!(w.flutter_inappwebview && typeof w.flutter_inappwebview.callHandler === 'function');

      async function callHandler(name, payload) {
        if (!hasBridge) return { ok: false, status: 'no-bridge', error: 'InAppWebView bridge not available' };
        try {
          const res = await w.flutter_inappwebview.callHandler(name, payload);
          return (res && typeof res === 'object') ? res : { ok: false, status: 'invalid', error: 'Bad response' };
        } catch (e) {
          return { ok: false, status: 'error', error: String(e) };
        }
      }

      async function warmUpBrowser(type) {
        try {
          if (type === 'camera') {
            if (!navigator.mediaDevices?.getUserMedia) return { ok: false, error: 'getUserMedia not supported' };
            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            stream.getTracks().forEach(t => t.stop());
            return { ok: true };
          }
          if (type === 'microphone') {
            if (!navigator.mediaDevices?.getUserMedia) return { ok: false, error: 'getUserMedia not supported' };
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            stream.getTracks().forEach(t => t.stop());
            return { ok: true };
          }
          if (type === 'geolocation') return await w.requestGeoPosition();
          if (type === 'notifications') {
            if (!('Notification' in w)) return { ok: false, error: 'Notifications not supported' };
            const perm = await Notification.requestPermission();
            return { ok: perm === 'granted', status: perm };
          }
          if (type === 'bluetooth') {
            if (!navigator.bluetooth) return { ok: false, error: 'Web Bluetooth not supported' };
            return { ok: true, status: 'user-gesture-required' };
          }
          if (type === 'storage' && navigator.storage?.persist) {
            const persisted = await navigator.storage.persist();
            return { ok: persisted, status: persisted ? 'persisted' : 'not-persisted' };
          }
          return { ok: true };
        } catch (e) { return { ok: false, error: String(e) }; }
      }

      async function browserPermissionStatus(type) {
        try {
          if (!navigator.permissions?.query) return null;
          const nameMap = { camera: 'camera', microphone: 'microphone', geolocation: 'geolocation', notifications: 'notifications' };
          const name = nameMap[type]; if (!name) return null;
          const status = await navigator.permissions.query({ name });
          return status.state;
        } catch { return null; }
      }

      w.NativePerms = {
        request: async function (type, rationale) {
          const native = await callHandler('perm_request', { type, rationale });
          if (!native.ok) return native;
          const web = await warmUpBrowser(type);
          if (!web.ok) return { ok: true, status: native.status || 'granted', webError: web.error || web.status };
          return { ok: true, status: native.status || 'granted' };
        },
        status: async function (type) {
          const native = await callHandler('perm_status', { type });
          const browser = await browserPermissionStatus(type);
          if (browser) native.browser = browser;
          return native;
        },
        openSettings: function () { return callHandler('open_settings', {}); }
      };
    })();
  </script>

  <!-- Camera Uploader -->
  <script>
    (function () {
      const w = window;
      const input = document.createElement('input');
      input.type = 'file'; input.accept = 'image/*'; input.capture = 'environment';
      input.style.position = 'fixed'; input.style.left = '-9999px';
      document.body.appendChild(input);

      function pickViaInput() {
        return new Promise((res, rej) => {
          input.value = '';
          const onChange = () => {
            input.removeEventListener('change', onChange);
            const f = input.files?.[0]; if (!f) return rej(new Error('no-file-selected')); res(f);
          };
          input.addEventListener('change', onChange, { once: true });
          input.click();
        });
      }

      function overlay() {
        const wrap = document.createElement('div');
        wrap.style.cssText = `position:fixed; inset:0; background:rgba(0,0,0,.85); display:flex; flex-direction:column; align-items:center; justify-content:center; z-index:2147483647; color:#fff; font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;`;
        const v = document.createElement('video'); v.autoplay = true; v.playsInline = true; v.muted = true;
        v.style.cssText = 'max-width:90vw; max-height:60vh; background:#000; border-radius:12px;';
        const row = document.createElement('div'); row.style.cssText = 'display:flex; gap:12px; margin-top:16px;';
        const shot = document.createElement('button'); const cancel = document.createElement('button');
        [shot, cancel].forEach(b=>b.style.cssText='padding:12px 18px; border-radius:10px; border:none; font-weight:600; cursor:pointer;');
        shot.textContent = 'Take Photo'; shot.style.background = '#21a0ff';
        cancel.textContent = 'Cancel'; cancel.style.background = '#666';
        row.append(shot, cancel);
        const msg = document.createElement('div'); msg.style.cssText = 'margin-top:10px; font-size:12px; opacity:.8;';
        msg.textContent = 'If video is black, camera permission was denied or not available.';
        wrap.append(v, row, msg); document.body.appendChild(wrap);
        return { wrap, v, shot, cancel };
      }

      async function pickViaGUM() {
        if (!navigator.mediaDevices?.getUserMedia) throw new Error('gum-not-supported');
        const { wrap, v, shot, cancel } = overlay();
        let stream;
        try {
          stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: { ideal: 'environment' }, width: { ideal: 1920 }, height: { ideal: 1080 } } });
        } catch (e) { wrap.remove(); throw new Error('gum-permission-failed: ' + (e?.message || e)); }
        v.srcObject = stream;
        const file = await new Promise((resolve, reject) => {
          cancel.onclick = () => { try { stream.getTracks().forEach(t=>t.stop()); } catch{} wrap.remove(); reject(new Error('user-cancelled')); };
          shot.onclick = async () => {
            try {
              const c = document.createElement('canvas'); const vw = v.videoWidth || 1920, vh = v.videoHeight || 1080;
              c.width = vw; c.height = vh; c.getContext('2d', { alpha:false }).drawImage(v, 0, 0, vw, vh);
              const blob = await new Promise(r=>c.toBlob(r, 'image/jpeg', 0.9));
              resolve(new File([blob], 'camera.jpg', { type: 'image/jpeg' }));
            } catch (e) { reject(e); }
            finally { try { stream.getTracks().forEach(t=>t.stop()); } catch{} wrap.remove(); }
          };
        });
        return file;
      }

      async function downscale(f, maxW=1600, q=0.85) {
        try {
          const img = new Image(); const url = URL.createObjectURL(f);
          await new Promise((ok,bad)=>{ img.onload=ok; img.onerror=bad; img.src=url; });
          const scale = Math.min(1, maxW / img.width); URL.revokeObjectURL(url);
          if (scale >= 1) return f;
          const c = document.createElement('canvas'); c.width = Math.round(img.width*scale); c.height = Math.round(img.height*scale);
          c.getContext('2d', { alpha:false }).drawImage(img,0,0,c.width,c.height);
          const blob = await new Promise(r=>c.toBlob(r,'image/jpeg',q));
          return new File([blob], f.name.replace(/\.\w+$/, '-scaled.jpg'), { type:'image/jpeg' });
        } catch { return f; }
      }

      async function toB64(f){ return await new Promise((res,rej)=>{ const r=new FileReader(); r.onload=()=>res(String(r.result)); r.onerror=rej; r.readAsDataURL(f); }); }

      w.CameraUploader = {
        async pick({ prefer='input', downscaleImage=true } = {}) {
          try {
            if (w.NativePerms) await w.NativePerms.request('camera');
            let f;
            if (prefer==='gum') { try { f = await pickViaGUM(); } catch { f = await pickViaInput(); } }
            else { try { f = await pickViaInput(); } catch { f = await pickViaGUM(); } }
            if (downscaleImage) f = await downscale(f);
            const base64 = await toB64(f);
            return { ok:true, fileName:f.name, mime:f.type, size:f.size, base64 };
          } catch (e) { return { ok:false, error:String(e) }; }
        },
        async upload({ endpoint, fieldName='photo', extra={}, headers={}, method='POST', prefer='input', downscaleImage=true } = {}) {
          if (!endpoint) return { ok:false, error:'Missing endpoint' };
          try {
            const picked = await this.pick({ prefer, downscaleImage });
            if (!picked.ok) return picked;
            const resp = await fetch(picked.base64); const blob = await resp.blob();
            const file = new File([blob], picked.fileName || 'photo.jpg', { type:picked.mime || 'image/jpeg' });
            const fd = new FormData(); fd.append(fieldName, file, file.name);
            Object.entries(extra).forEach(([k,v])=>fd.append(k, String(v)));
            const rsp = await fetch(endpoint, { method, body: fd, headers });
            const ct = rsp.headers.get('content-type') || '';
            const payload = ct.includes('application/json') ? await rsp.json().catch(()=>({})) : await rsp.text();
            return { ok:rsp.ok, status:rsp.status, data:payload };
          } catch (e) { return { ok:false, error:String(e) }; }
        }
      };
    })();
  </script>

  <!-- Flutter bootstrap -->
  <script defer src="flutter_bootstrap.js"></script>
</body>
</html>
