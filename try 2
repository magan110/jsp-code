using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class GrcLeadEntryController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public GrcLeadEntryController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        public class GrcLeadEntryRequest
        {
            public string DocuNumb   { get; set; }
            public string ProcType   { get; set; }
            public string SiteType   { get; set; }
            public string LeadDate   { get; set; }
            public decimal LeadQnty  { get; set; }
            public string LeadMsrs   { get; set; }
            public string SiteName   { get; set; }
            public string MobileNo   { get; set; }
            public string SiteAddr   { get; set; }
            public string SiteRmrk   { get; set; }
            public string AdhrNumb   { get; set; }
            public string ArchtNam   { get; set; }
            public string ItxPanNo   { get; set; }
            public string GstnNumb   { get; set; }
            public string EmailAdd   { get; set; }
            public string District   { get; set; }
            public string AreaCode   { get; set; }
            public string SitePinC   { get; set; }
            public string RetlPinC   { get; set; }
            public string StateNam   { get; set; }
            public string CityName   { get; set; }
            public string SaleArea   { get; set; }
            public string PrjctKnd   { get; set; }
            public string DelvrPrd   { get; set; }
            public string CntPrsnt   { get; set; }
            public string StMobNum   { get; set; }

            public List<GrcLeadItem> Items { get; set; }
        }

        public class GrcLeadItem
        {
            public string ProdCode  { get; set; }
            public decimal SalesBag { get; set; }
            public decimal SalesQty { get; set; }
        }

        [HttpPost("submitLead")]
        public IActionResult SubmitLead([FromBody] GrcLeadEntryRequest request)
        {
            if (request == null
                || string.IsNullOrWhiteSpace(request.MobileNo)
                || string.IsNullOrWhiteSpace(request.SiteName))
            {
                return BadRequest("Mobile Number and Site Name are required.");
            }

            try
            {
                const string masterSql = @"
INSERT INTO bwlive.dbo.dptGrcLeadGn (
    docuNumb, procType, siteType, leadDate, leadQnty, leadMsrs,
    siteName, mobileNo, siteAddr, siteRmrk, adhrNumb, archtNam,
    itxPanNo, gstnNumb, emailAdd, district, areaCode, sitePinC,
    retlPinC, stateNam, cityName, saleArea, prjctKnd, delvrPrd,
    cntPrsnt, stMobNum
) VALUES (
    @DocuNumb, @ProcType, @SiteType, @LeadDate, @LeadQnty, @LeadMsrs,
    @SiteName, @MobileNo, @SiteAddr, @SiteRmrk, @AdhrNumb, @ArchtNam,
    @ItxPanNo, @GstnNumb, @EmailAdd, @District, @AreaCode, @SitePinC,
    @RetlPinC, @StateNam, @CityName, @SaleArea, @PrjctKnd, @DelvrPrd,
    @CntPrsnt, @StMobNum
);";

                var masterParams = new Dictionary<string, object>
                {
                    ["@DocuNumb"]  = request.DocuNumb,
                    ["@ProcType"]  = request.ProcType,
                    ["@SiteType"]  = request.SiteType,
                    ["@LeadDate"]  = request.LeadDate,
                    ["@LeadQnty"]  = request.LeadQnty,
                    ["@LeadMsrs"]  = request.LeadMsrs,
                    ["@SiteName"]  = request.SiteName,
                    ["@MobileNo"]  = request.MobileNo,
                    ["@SiteAddr"]  = request.SiteAddr,
                    ["@SiteRmrk"]  = request.SiteRmrk,
                    ["@AdhrNumb"]  = request.AdhrNumb,
                    ["@ArchtNam"]  = request.ArchtNam,
                    ["@ItxPanNo"]  = request.ItxPanNo,
                    ["@GstnNumb"]  = request.GstnNumb,
                    ["@EmailAdd"]  = request.EmailAdd,
                    ["@District"]  = request.District,
                    ["@AreaCode"]  = request.AreaCode,
                    ["@SitePinC"]  = request.SitePinC,
                    ["@RetlPinC"]  = request.RetlPinC,
                    ["@StateNam"]  = request.StateNam,
                    ["@CityName"]  = request.CityName,
                    ["@SaleArea"]  = request.SaleArea,
                    ["@PrjctKnd"]  = request.PrjctKnd,
                    ["@DelvrPrd"]  = request.DelvrPrd,
                    ["@CntPrsnt"]  = request.CntPrsnt,
                    ["@StMobNum"]  = request.StMobNum
                };

                _dbHelper.ExecuteCommandPublic(_dbHelper.BwliveConnectionString, masterSql, masterParams);

                // Insert each dynamic row into a detail table
                if (request.Items != null && request.Items.Any())
                {
                    const string detailSql = @"
INSERT INTO bwlive.dbo.dptGrcLeadGnDtl (
    docuNumb, prodCode, salesBag, salesQty
) VALUES (
    @DocuNumb, @ProdCode, @SalesBag, @SalesQty
);";

                    foreach (var item in request.Items)
                    {
                        var detailParams = new Dictionary<string, object>
                        {
                            ["@DocuNumb"] = request.DocuNumb,
                            ["@ProdCode"] = item.ProdCode,
                            ["@SalesBag"] = item.SalesBag,
                            ["@SalesQty"] = item.SalesQty
                        };
                        _dbHelper.ExecuteCommandPublic(_dbHelper.BwliveConnectionString, detailSql, detailParams);
                    }
                }

                return Ok("Lead submitted successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("getLeadDetails")]
        public IActionResult GetLeadDetails([FromQuery] string docuNumb)
        {
            if (string.IsNullOrWhiteSpace(docuNumb))
                return BadRequest("Document Number is required.");

            try
            {
                const string masterSql = @"
SELECT
    docuNumb, procType, siteType, leadDate, leadQnty, leadMsrs,
    siteName, mobileNo, siteAddr, siteRmrk, adhrNumb, archtNam,
    itxPanNo, gstnNumb, emailAdd, district, areaCode, sitePinC,
    retlPinC, stateNam, cityName, saleArea, prjctKnd, delvrPrd,
    cntPrsnt, stMobNum
FROM bwlive.dbo.dptGrcLeadGn
WHERE docuNumb = @DocuNumb;";

                var masterParams = new Dictionary<string, object>
                {
                    ["@DocuNumb"] = docuNumb
                };

                var master = _dbHelper
                    .ExecuteSelectQueryPublic(_dbHelper.BwliveConnectionString, masterSql, masterParams)
                    .Cast<Dictionary<string, object>>()
                    .FirstOrDefault();

                const string detailSql = @"
SELECT
    prodCode, salesBag, salesQty
FROM bwlive.dbo.dptGrcLeadGnDtl
WHERE docuNumb = @DocuNumb;";

                var detail = _dbHelper
                    .ExecuteSelectQueryPublic(_dbHelper.BwliveConnectionString, detailSql, masterParams);

                if (master == null)
                    return NotFound("Lead details not found.");

                return Ok(new {
                    Master = master,
                    Items  = detail
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}
