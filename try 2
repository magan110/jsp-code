class AreaItem {
  final String code;
  final String desc;

  AreaItem({
    required this.code,
    required this.desc,
  });

  factory AreaItem.fromJson(Map<String, dynamic> json) {
    return AreaItem(
      code: json['code']?.toString() ?? '',
      desc: json['desc']?.toString() ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'code': code,
      'desc': desc,
    };
  }
}

class SampleDistributionRequest {
  final String? loginId;
  final String emirate;
  final String retailerName;
  final String? retailerCode;
  final String distributor;
  final String painterName;
  final String? painterMobile;
  final String skuSize;
  final String? materialQty;
  final String distributionDate;

  SampleDistributionRequest({
    this.loginId,
    required this.emirate,
    required this.retailerName,
    this.retailerCode,
    required this.distributor,
    required this.painterName,
    this.painterMobile,
    required this.skuSize,
    this.materialQty,
    required this.distributionDate,
  });

  Map<String, dynamic> toJson() {
    return {
      'loginId': loginId,
      'emirate': emirate,
      'retailerName': retailerName,
      'retailerCode': retailerCode,
      'distributor': distributor,
      'painterName': painterName,
      'painterMobile': painterMobile,
      'skuSize': skuSize,
      'materialQty': materialQty,
      'distributionDate': distributionDate,
    };
  }
}

class SubmitResponse {
  final bool success;
  final String message;
  final String? docuNumb;

  SubmitResponse({
    required this.success,
    required this.message,
    this.docuNumb,
  });

  factory SubmitResponse.fromJson(Map<String, dynamic> json) {
    return SubmitResponse(
      success: json['success'] ?? false,
      message: json['message']?.toString() ?? '',
      docuNumb: json['docuNumb']?.toString(),
    );
  }
}



































import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/sample_distribution_models.dart';
import 'auth_service.dart';

class SampleDistributionService {
  static const String baseUrl = 'http://10.4.64.23:8521';
  static const String apiPath = '/api/sampledistribution';

  static Future<List<AreaItem>> getAreas({bool onlyActive = true}) async {
    try {
      final uri = Uri.parse('$baseUrl$apiPath/areas')
          .replace(queryParameters: {'onlyActive': onlyActive.toString()});

      final response = await http.get(
        uri,
        headers: {
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        return data.map((item) => AreaItem.fromJson(item)).toList();
      } else {
        throw Exception('Failed to load areas: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching areas: $e');
    }
  }

  static Future<SubmitResponse> submitSampleDistribution(
    SampleDistributionRequest request,
  ) async {
    try {
      final uri = Uri.parse('$baseUrl$apiPath/submit');

      final headers = <String, String>{
        'Content-Type': 'application/json',
      };

      // Get loginId from current authenticated user
      final currentUser = AuthManager.currentUser;
      if (currentUser != null && currentUser.userID != null) {
        // Use userID from the login (max 6 characters as per API requirement)
        final loginId = currentUser.userID!.length > 6
            ? currentUser.userID!.substring(0, 6)
            : currentUser.userID!;
        headers['LoginID'] = loginId;
      }

      final response = await http.post(
        uri,
        headers: headers,
        body: json.encode(request.toJson()),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return SubmitResponse.fromJson(data);
      } else {
        final errorData = json.decode(response.body);
        return SubmitResponse(
          success: false,
          message: errorData['message'] ?? 'Unknown error occurred',
        );
      }
    } catch (e) {
      return SubmitResponse(
        success: false,
        message: 'Error submitting sample distribution: $e',
      );
    }
  }
}



































import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../SAMPLING/sample_model.dart';
import '../../../core/models/sample_distribution_models.dart';
import '../../../core/services/sample_distribution_service.dart';

class SampleDistributEntry extends StatefulWidget {
  @override
  _SampleDistributEntryState createState() => _SampleDistributEntryState();
}

class _SampleDistributEntryState extends State<SampleDistributEntry>
    with TickerProviderStateMixin {
  // Controllers final missedQtyController = TextEditingController();

  final emirateController = TextEditingController();
  final retailerNameController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final painterNameController = TextEditingController();
  final painterMobileController = TextEditingController();
  final skuSizeController = TextEditingController();
  final materialQtyController = TextEditingController();
  final distributionDateController = TextEditingController();
  List<SupplyChainEntry> currentEntries = [];
  List<AreaItem> _areas = [];
  bool _isLoadingAreas = false;
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  bool _isSubmitting = false;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    _loadAreas();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  Future<void> _loadAreas() async {
    setState(() {
      _isLoadingAreas = true;
    });
    try {
      final areas = await SampleDistributionService.getAreas();
      setState(() {
        _areas = areas;
        _isLoadingAreas = false;
      });
    } catch (e) {
      setState(() {
        _isLoadingAreas = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading areas: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    emirateController.dispose();
    retailerNameController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    painterNameController.dispose();
    painterMobileController.dispose();
    skuSizeController.dispose();
    materialQtyController.dispose();
    distributionDateController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        final prefs = await SharedPreferences.getInstance();

        // Create request object
        final request = SampleDistributionRequest(
          emirate: emirateController.text,
          retailerName: retailerNameController.text,
          retailerCode: retailerCodeController.text.isEmpty ? null : retailerCodeController.text,
          distributor: distributorController.text,
          painterName: painterNameController.text,
          painterMobile: painterMobileController.text.isEmpty ? null : painterMobileController.text,
          skuSize: skuSizeController.text,
          materialQty: materialQtyController.text.isEmpty ? null : materialQtyController.text,
          distributionDate: distributionDateController.text,
        );

        // Submit to API (loginId is automatically taken from AuthManager)
        final response = await SampleDistributionService.submitSampleDistribution(
          request,
        );

        if (response.success) {
          // Save to local storage on success
          await prefs.setString('Emirate', emirateController.text);
          await prefs.setString('retailerName', retailerNameController.text);
          await prefs.setString('retailerCode', retailerCodeController.text);
          await prefs.setString('distributor', distributorController.text);
          await prefs.setString('painterName', painterNameController.text);
          await prefs.setString('painterMobile', painterMobileController.text);
          await prefs.setString('skuSize', skuSizeController.text);
          await prefs.setString('materialQty', materialQtyController.text);
          await prefs.setString('distributionDate', distributionDateController.text);

          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    const Icon(Icons.check_circle, color: Colors.white, size: 20),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text('${response.message}${response.docuNumb != null ? ' (Doc: ${response.docuNumb})' : ''}'),
                    ),
                  ],
                ),
                backgroundColor: Colors.green,
                behavior: SnackBarBehavior.floating,
                duration: const Duration(seconds: 4),
              ),
            );
          }
        } else {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    const Icon(Icons.error, color: Colors.white, size: 20),
                    const SizedBox(width: 8),
                    Expanded(child: Text(response.message)),
                  ],
                ),
                backgroundColor: Colors.red,
                behavior: SnackBarBehavior.floating,
                duration: const Duration(seconds: 4),
              ),
            );
          }
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Error saving data: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  final demoSupplyChain = SupplyChainData(
    totalReceived: 500,
    billedToDistributor: 400,
    billedToRetailer: 350,
    distributedToPainter: 280,
  );

  Widget buildSupplyChainTable(List<SupplyChainEntry> entries) {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        headingRowColor: MaterialStateProperty.all(const Color(0xFF1E3A8A)),
        headingTextStyle: const TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.bold,
        ),
        columns: const [
          DataColumn(label: Text("Retailer")),
          DataColumn(label: Text("Code")),
          DataColumn(label: Text("Distributor")),
          DataColumn(label: Text("Painter")),
          DataColumn(label: Text("Mobile")),
          DataColumn(label: Text("SKU")),
          DataColumn(label: Text("Distributed (Kg)")),
          DataColumn(label: Text("Total Received (Kg)")),
          DataColumn(label: Text("Remaining (Kg)")),
        ],
        rows: entries.map((entry) {
          return DataRow(
            cells: [
              DataCell(Text(entry.retailerName)),
              DataCell(Text(entry.retailerCode)),
              DataCell(Text(entry.distributorName)),
              DataCell(Text(entry.painterName)),
              DataCell(Text(entry.painterMobile)),
              DataCell(Text(entry.skuSize)),
              DataCell(Text(entry.qtyDistributed.toString())),
              DataCell(Text(entry.totalReceived.toString())),
              DataCell(Text(entry.remaining.toString())),
            ],
          );
        }).toList(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet =
            constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;

        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 32),

                              // Submit Button
                              // In your build method (below Submit button)
                              if (currentEntries.isNotEmpty)
                                buildSupplyChainTable(currentEntries),

                              const SizedBox(height: 20),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Retailer Details',
                icon: Icons.store_rounded,
                children: [
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Emirates',
                    icon: Icons.location_on_outlined,
                    items: _areas.map((area) => area.desc).toList(),
                    value: emirateController.text.isEmpty
                        ? null
                        : emirateController.text,
                    onChanged: (value) {
                      setState(() {
                        final selectedArea = _areas.firstWhere(
                          (area) => area.desc == value,
                          orElse: () => AreaItem(code: '', desc: ''),
                        );
                        emirateController.text = selectedArea.code;
                      });
                    },
                    isLoading: _isLoadingAreas,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerNameController,
                    label: 'Retailer Name',
                    icon: Icons.store_outlined,
                  ),

                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerCodeController,
                    label: 'Retailer Code',
                    icon: Icons.qr_code_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: distributorController,
                    label: 'Concern Distributor',
                    icon: Icons.business_outlined,
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: _buildModernSection(
                title: 'Distribution Details',
                icon: Icons.local_shipping_outlined,
                children: [
                  _buildModernTextField(
                    controller: painterNameController,
                    label: 'Name of Painter / Contractor',
                    icon: Icons.person_outline_rounded,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: painterMobileController,
                    label: 'Mobile no Painter / Contractor',
                    icon: Icons.phone_outlined,
                    isPhone: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: materialQtyController,
                    label: 'Total Distribution Amount in Kg',
                    icon: Icons.scale_outlined,
                    keyboardType: TextInputType.numberWithOptions(
                      decimal: true,
                    ),
                    inputFormatters: [
                      FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                    ],
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: distributionDateController,
                    label: 'Date of distribution',
                    icon: Icons.event_available_outlined,
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Retailer Details Section
        _buildModernSection(
          title: 'Retailer Details',
          icon: Icons.store_rounded,
          children: [
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Emirate',
              icon: Icons.location_on_outlined,
              items: _areas.map((area) => area.desc).toList(),
              value: emirateController.text.isEmpty
                  ? null
                  : _areas.firstWhere(
                      (area) => area.code == emirateController.text,
                      orElse: () => AreaItem(code: '', desc: ''),
                    ).desc,
              onChanged: (value) {
                setState(() {
                  final selectedArea = _areas.firstWhere(
                    (area) => area.desc == value,
                    orElse: () => AreaItem(code: '', desc: ''),
                  );
                  emirateController.text = selectedArea.code;
                });
              },
              isLoading: _isLoadingAreas,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerNameController,
              label: 'Retailer Name',
              icon: Icons.store_outlined,
            ),

            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Distribution Details Section
        _buildModernSection(
          title: 'Distribution Details',
          icon: Icons.local_shipping_outlined,
          children: [
            _buildModernTextField(
              controller: painterNameController,
              label: 'Name of Painter / Contractor',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: painterMobileController,
              label: 'Mobile no Painter / Contractor',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: materialQtyController,
              label: 'Total Distribution Amount in Kg',
              icon: Icons.scale_outlined,
              keyboardType: TextInputType.numberWithOptions(decimal: true),
              inputFormatters: [
                FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
              ],
            ),

            const SizedBox(height: 16),
            _buildModernDateField(
              controller: distributionDateController,
              label: 'Date of distribution',
              icon: Icons.event_available_outlined,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'Sample Distribution Entry',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(
            Icons.help_outline_rounded,
            color: Color(0xFF1E3A8A),
          ),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Sample Distribution Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter sample distribution details',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
    TextInputType? keyboardType,
    List<TextInputFormatter>? inputFormatters,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType:
          keyboardType ?? (isPhone ? TextInputType.phone : TextInputType.text),
      inputFormatters: inputFormatters,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Distribution',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Distribution Help',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF1F2937),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Ensure all distribution details are accurate before submission.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text(
                    'Got it',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}





























using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RAKControllers.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SampleDistributionController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public SampleDistributionController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        // ----------------------------
        // 1) Emirates dropdown (Areas)
        // ----------------------------
        [HttpGet("areas")]
        public ActionResult<IEnumerable<AreaItem>> GetAreas([FromQuery] bool onlyActive = true)
        {
            try
            {
                const string sql = @"
SELECT areaCode, areaDesc
FROM dbo.bkmAreaMast WITH (NOLOCK)
WHERE (@onlyActive = 0 OR isActive = 'Y')
ORDER BY areaDesc;";

                var parameters = new Dictionary<string, object>
                {
                    { "@onlyActive", onlyActive ? 1 : 0 }
                };

                var result = _dbHelper.WebSessBean(sql, parameters);
                var list = new List<AreaItem>();

                if (result != null)
                {
                    foreach (var row in result)
                    {
                        list.Add(new AreaItem
                        {
                            code = row["areaCode"]?.ToString()?.Trim() ?? "",
                            desc = row["areaDesc"]?.ToString()?.Trim() ?? ""
                        });
                    }
                }

                return Ok(list);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // -----------------------------------------
        // 2) Submit the Sample Distribution payload
        // -----------------------------------------
        [HttpPost("submit")]
        public ActionResult<SubmitResponse> Submit([FromBody] SampleDistributionRequest req)
        {
            try
            {
                // Basic validations
                if (req == null) return BadRequest("Empty request.");
                if (string.IsNullOrWhiteSpace(req.emirate)) return BadRequest("Emirate (areaCode) is required.");
                if (string.IsNullOrWhiteSpace(req.retailerName)) return BadRequest("Retailer Name is required.");
                if (string.IsNullOrWhiteSpace(req.distributor)) return BadRequest("Concern Distributor is required.");
                if (string.IsNullOrWhiteSpace(req.painterName)) return BadRequest("Painter/Contractor Name is required.");
                if (string.IsNullOrWhiteSpace(req.distributionDate)) return BadRequest("Date of distribution is required.");

                if (!DateTime.TryParse(req.distributionDate, out var sampDate))
                    return BadRequest("Invalid distribution date.");

                // Set default packSize & prodName
                string packSize = null;
                string prodName = null;

                // CreateId from header or request (max 6 chars)
                var loginId = Request.Headers.ContainsKey("LoginID")
                    ? (Request.Headers["LoginID"].ToString() ?? "SYSTEM")
                    : (string.IsNullOrWhiteSpace(req.loginId) ? "SYSTEM" : req.loginId);
                loginId = (loginId ?? "SYSTEM").Trim();
                if (loginId.Length > 6) loginId = loginId.Substring(0, 6);

                var areaCode = req.emirate.Trim();

                // --- Generate the document number ---
                const string genSql = "EXEC dbo.wcpDocNoGen @DocType, @AreaCode";
                var genParams = new Dictionary<string, object>
                {
                    ["@DocType"] = "SDE",
                    ["@AreaCode"] = areaCode
                };

                var genRows = _dbHelper.WebSessBean(genSql, genParams) as List<Dictionary<string, object>>;
                string docuNumb = null;
                if (genRows != null && genRows.Count > 0)
                {
                    var row = genRows.First();
                    var candidates = new[] { "docuNumb", "DocuNumb", "DOCUNUMB", "DocNo", "DocumentNo" };
                    foreach (var key in candidates)
                    {
                        if (row.TryGetValue(key, out var val) && val != null)
                        {
                            docuNumb = val.ToString();
                            break;
                        }
                    }
                    if (string.IsNullOrWhiteSpace(docuNumb) && row.Count > 0)
                        docuNumb = row.First().Value?.ToString();
                }

                if (string.IsNullOrWhiteSpace(docuNumb))
                {
                    return StatusCode(500, new SubmitResponse
                    {
                        success = false,
                        message = $"Failed to generate document number for area '{areaCode}'.",
                        docuNumb = null
                    });
                }

                // --- Immediately advance the sequence ---
                const string updSql = "EXEC dbo.wcpDocNoUpd @DocType, @AreaCode";
                _dbHelper.WebSessBean(updSql, genParams);

                // ================= HEADER: dbo.catsamplead =================
                var insertHeaderSql = @"
INSERT INTO dbo.catsamplead
(
  docuNumb, docuDate, areaCode, custName, contName, mobileNo,
  concDist, sampDate, misdQnty, packSize, prodName, sampType,
  statFlag, createId, createDt
)
VALUES
(
  @docuNumb, GETDATE(), @areaCode, @custName, @contName, @mobileNo,
  @concDist, @sampDate, @misdQnty, @packSize, @prodName, @sampType,
  'N', @createId, GETDATE()
);";

                var headerParams = new Dictionary<string, object>
                {
                    ["@docuNumb"] = docuNumb,                         // varchar(16)
                    ["@areaCode"] = areaCode,                         // varchar(20)
                    ["@custName"] = req.retailerName?.Trim() ?? (object)DBNull.Value,  // varchar(50) null
                    ["@contName"] = req.painterName?.Trim() ?? (object)DBNull.Value,   // varchar(50) null
                    ["@mobileNo"] = req.painterMobile?.Trim() ?? (object)DBNull.Value, // varchar(13) null
                    ["@concDist"] = req.distributor?.Trim() ?? (object)DBNull.Value,   // varchar(50) null
                    ["@sampDate"] = sampDate,                         // smalldatetime null
                    ["@misdQnty"] = (object)DBNull.Value,     // char(10) null
                    ["@packSize"] = (object?)packSize ?? DBNull.Value,                  // char(3) null
                    ["@prodName"] = (object?)prodName ?? DBNull.Value,                  // varchar(100) null
                    ["@sampType"] = "SampleDistribution",             // varchar(20) null
                    ["@createId"] = loginId                           // varchar(6) null
                };

                _dbHelper.WebExecute(insertHeaderSql, headerParams);

                // ================ DETAIL: dbo.catsampleadDtl ================
                // Required: serialNo (NOT NULL), docuNumb (NOT NULL), sampCnCl (NOT NULL, 1 char)
                // We'll set serialNo = next value within this docuNumb, sampCnCl = 'S' (sample).
                var nextSerialSql = @"
SELECT ISNULL(MAX(serialNo), 0) + 1 AS nextSerial
FROM dbo.catsampleadDtl WITH (NOLOCK)
WHERE docuNumb = @docuNumb;";

                var nextSerialRows = _dbHelper.WebSessBean(nextSerialSql, new Dictionary<string, object>
                {
                    ["@docuNumb"] = docuNumb
                }) as List<Dictionary<string, object>>;

                int nextSerial = 1;
                if (nextSerialRows != null && nextSerialRows.Count > 0)
                {
                    var v = nextSerialRows[0].Values?.FirstOrDefault()?.ToString();
                    if (int.TryParse(v, out var parsed)) nextSerial = parsed;
                }

                var insertDetailSql = @"
INSERT INTO dbo.catsampleadDtl
(
  docuNumb, sampDate, pouchCnt, sampCnCl, cusRtlCd,
  statFlag, createId, createDt
)
VALUES
(
  @docuNumb, @sampDate, @pouchCnt, @sampCnCl, @cusRtlCd,
  'N', @createId, GETDATE()
);
";

                var detailParams = new Dictionary<string, object>
                {
                    ["@serialNo"] = nextSerial,                                     // int NOT NULL
                    ["@docuNumb"] = docuNumb,                                       // varchar(16) NOT NULL
                    ["@sampDate"] = sampDate,                                       // smalldatetime
                    ["@pouchCnt"] = (object?)(req.materialQty?.Trim()) ?? DBNull.Value, // varchar(10) null
                    ["@sampCnCl"] = "S",                                            // varchar(1) NOT NULL (set as Sample)
                    ["@cusRtlCd"] = req.retailerCode?.Trim() ?? (object)DBNull.Value, // retailer code
                    ["@createId"] = loginId
                };

                _dbHelper.WebExecute(insertDetailSql, detailParams);

                return Ok(new SubmitResponse
                {
                    success = true,
                    message = "Saved successfully.",
                    docuNumb = docuNumb
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new SubmitResponse
                {
                    success = false,
                    message = ex.Message,
                    docuNumb = null
                });
            }
        }

    }

    // DTOs
    public class AreaItem
    {
        public string code { get; set; }  // areaCode (char/varchar)
        public string desc { get; set; }  // areaDesc
    }

    public class SampleDistributionRequest
    {
        public string? loginId { get; set; }          // optional; or via header: LoginID
        public string emirate { get; set; }           // areaCode
        public string retailerName { get; set; }      // custName
        public string? retailerCode { get; set; }     // not used here
        public string distributor { get; set; }       // concDist
        public string painterName { get; set; }       // contName
        public string? painterMobile { get; set; }    // mobileNo
        public string? materialQty { get; set; }      // -> pouchCnt (Dtl)
        public string distributionDate { get; set; }  // -> sampDate (yyyy-MM-dd)
    }

    public class SubmitResponse
    {
        public bool success { get; set; }
        public string message { get; set; }
        public string? docuNumb { get; set; }
    }
}

