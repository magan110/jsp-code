using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;

namespace RAKControllers.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SampleDistributionController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public SampleDistributionController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        // ----------------------------
        // 1) Emirates dropdown (Areas)
        // ----------------------------
        [HttpGet("areas")]
        public ActionResult<IEnumerable<AreaItem>> GetAreas([FromQuery] bool onlyActive = true)
        {
            try
            {
                const string sql = @"
SELECT areaCode, areaDesc
FROM dbo.bkmAreaMast WITH (NOLOCK)
WHERE (@onlyActive = 0 OR isActive = 'Y')
ORDER BY areaDesc;";

                var parameters = new Dictionary<string, object>
                {
                    { "@onlyActive", onlyActive ? 1 : 0 }
                };

                var rows = _dbHelper.WebSessBean(sql, parameters);
                var list = new List<AreaItem>();

                if (rows != null)
                {
                    foreach (var row in rows)
                    {
                        list.Add(new AreaItem
                        {
                            code = row["areaCode"]?.ToString()?.Trim() ?? "",
                            desc = row["areaDesc"]?.ToString()?.Trim() ?? ""
                        });
                    }
                }

                return Ok(list);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        // -----------------------------------------
        // 2) Submit the Sample Distribution payload
        //    Atomic: applock -> wcpDocNoGen -> inserts -> wcpDocNoUpd
        // -----------------------------------------
        [HttpPost("submit")]
        public ActionResult<SubmitResponse> Submit([FromBody] SampleDistributionRequest req)
        {
            try
            {
                // Basic validations
                if (req == null) return BadRequest("Empty request.");
                if (string.IsNullOrWhiteSpace(req.emirate)) return BadRequest("Emirate (areaCode) is required.");
                if (string.IsNullOrWhiteSpace(req.retailerName)) return BadRequest("Retailer Name is required.");
                if (string.IsNullOrWhiteSpace(req.distributor)) return BadRequest("Concern Distributor is required.");
                if (string.IsNullOrWhiteSpace(req.painterName)) return BadRequest("Painter/Contractor Name is required.");
                if (string.IsNullOrWhiteSpace(req.skuSize)) return BadRequest("Material SKU is required.");
                if (string.IsNullOrWhiteSpace(req.distributionDate)) return BadRequest("Date of distribution is required.");

                if (!DateTime.TryParse(req.distributionDate, out var sampDate))
                    return BadRequest("Invalid distribution date.");

                // Map SKU text -> DB packSize & product name
                var (packSize, prodName) = MapSku(req.skuSize);

                // CreateId from header or request
                var loginId = Request.Headers.ContainsKey("LoginID")
                    ? (Request.Headers["LoginID"].ToString() ?? "SYSTEM")
                    : (string.IsNullOrWhiteSpace(req.loginId) ? "SYSTEM" : req.loginId);
                loginId = (loginId ?? "SYSTEM").Trim();
                if (loginId.Length > 6) loginId = loginId.Substring(0, 6);

                // Atomic T-SQL batch with application lock to avoid duplicate doc numbers
                var sql = @"
SET XACT_ABORT ON;
DECLARE @rc INT, @doc NVARCHAR(64);

BEGIN TRY
    BEGIN TRAN;

    -- Serialize per (DocType, Area)
    EXEC @rc = sys.sp_getapplock 
         @Resource = CONCAT('DOCNO:','SDE',':', @AreaCode),
         @LockMode = 'Exclusive',
         @LockOwner = 'Transaction',
         @Timeout  = 15000;

    IF (@rc < 0)
        RAISERROR('Failed to acquire doc number lock.', 16, 1);

    -- Generate doc number
    DECLARE @t TABLE (docuNumb NVARCHAR(128));
    INSERT INTO @t EXEC dbo.wcpDocNoGen @DocType = 'SDE', @AreaCode = @AreaCode;
    SELECT TOP 1 @doc = docuNumb FROM @t;

    IF (@doc IS NULL OR LTRIM(RTRIM(@doc)) = '')
        RAISERROR('wcpDocNoGen did not return a document number.', 16, 1);

    -- Insert HEADER
    INSERT INTO dbo.catsamplead
    (
      docuNumb, docuDate, areaCode, custName, contName, mobileNo,
      concDist, sampDate, misdQnty, packSize, prodName,
      statFlag, createId, createDt
    )
    VALUES
    (
      @doc, GETDATE(), @AreaCode, @CustName, @ContName, @MobileNo,
      @ConcDist, @SampDate, @MisdQnty, @PackSize, @ProdName,
      'N', @CreateId, GETDATE()
    );

    -- Optional: retailer code on header if column exists
    IF COL_LENGTH('dbo.catsamplead','cusRtlCode') IS NOT NULL
    BEGIN
        UPDATE dbo.catsamplead 
        SET cusRtlCode = @CusRtlCode
        WHERE docuNumb = @doc;
    END

    -- Insert DETAIL
    INSERT INTO dbo.catsampleadDtl
    (
      docuNumb, docuDate, areaCode,
      custName, contName, mobileNo, concDist,
      sampDate, misdQnty, packSize, prodName, sampType,
      createId, createDt
    )
    VALUES
    (
      @doc, GETDATE(), @AreaCode,
      @CustName, @ContName, @MobileNo, @ConcDist,
      @SampDate, @MisdQnty, @PackSize, @ProdName, 'SampleDistribution',
      @CreateId, GETDATE()
    );

    -- Optional: retailer code on detail if column exists
    IF COL_LENGTH('dbo.catsampleadDtl','cusRtlCode') IS NOT NULL
    BEGIN
        UPDATE dbo.catsampleadDtl 
        SET cusRtlCode = @CusRtlCode
        WHERE docuNumb = @doc;
    END

    -- Optional: pouchCnt (number of bags) on detail if column exists
    IF COL_LENGTH('dbo.catsampleadDtl','pouchCnt') IS NOT NULL
    BEGIN
        UPDATE dbo.catsampleadDtl 
        SET pouchCnt = @PouchCnt
        WHERE docuNumb = @doc;
    END

    -- Reserve/confirm the number
    EXEC dbo.wcpDocNoUpd @DocType = 'SDE', @AreaCode = @AreaCode;

    COMMIT;

    SELECT 1 AS success, 'Saved successfully.' AS message, @doc AS docuNumb;
END TRY
BEGIN CATCH
    IF XACT_STATE() <> 0 ROLLBACK;
    SELECT 0 AS success, ERROR_MESSAGE() AS message, NULL AS docuNumb;
END CATCH
";

                var parameters = new Dictionary<string, object>
                {
                    ["@AreaCode"]   = req.emirate.Trim(),
                    ["@CustName"]   = (object?)req.retailerName?.Trim() ?? DBNull.Value,
                    ["@CusRtlCode"] = (object?)req.retailerCode?.Trim() ?? DBNull.Value,
                    ["@ConcDist"]   = (object?)req.distributor?.Trim() ?? DBNull.Value,
                    ["@ContName"]   = (object?)req.painterName?.Trim() ?? DBNull.Value,
                    ["@MobileNo"]   = (object?)req.painterMobile?.Trim() ?? DBNull.Value,
                    ["@SampDate"]   = sampDate,
                    ["@MisdQnty"]   = (object?)req.missedQty?.Trim() ?? DBNull.Value,
                    ["@PackSize"]   = (object?)packSize ?? DBNull.Value,
                    ["@ProdName"]   = (object?)prodName ?? DBNull.Value,
                    ["@CreateId"]   = loginId,
                    ["@PouchCnt"]   = int.TryParse(req.materialQty, out var bags) ? (object)bags : DBNull.Value
                };

                var rows = _dbHelper.WebSessBean(sql, parameters);
                var row  = rows?.FirstOrDefault();
                var ok   = row != null && (row.TryGetValue("success", out var s) && Convert.ToInt32(s) == 1);

                return Ok(new SubmitResponse
                {
                    success = ok,
                    message = row?["message"]?.ToString() ?? (ok ? "Saved successfully." : "Unknown result."),
                    docuNumb = ok ? row?["docuNumb"]?.ToString() : null
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new SubmitResponse
                {
                    success = false,
                    message = ex.Message,
                    docuNumb = null
                });
            }
        }

        // -----------------------
        // Helpers / Utilities
        // -----------------------
        private static (string packSize, string prodName) MapSku(string sku)
        {
            // "1 Kg" -> ("01K", "BW Putty 1 Kg"); "5 Kg" -> ("05K", "BW Putty 5 Kg"); else: digits + 'K'
            if (string.IsNullOrWhiteSpace(sku)) return (null, null);
            var s = sku.Trim().ToLower();
            if (s.StartsWith("1")) return ("01K", "BW Putty 1 Kg");
            if (s.StartsWith("5")) return ("05K", "BW Putty 5 Kg");

            var digits = new string(s.Where(char.IsDigit).ToArray());
            var pack = string.IsNullOrEmpty(digits) ? null : (digits.Length == 1 ? $"0{digits}K" : $"{digits}K");
            var name = string.IsNullOrEmpty(digits) ? null : $"BW Putty {digits} Kg";
            return (pack, name);
        }
    }

    // DTOs
    public class AreaItem
    {
        public string code { get; set; }  // areaCode (char(3))
        public string desc { get; set; }  // areaDesc
    }

    public class SampleDistributionRequest
    {
        public string? loginId { get; set; }          // optional; or via header: LoginID
        public string emirate { get; set; }           // areaCode (char(3))
        public string retailerName { get; set; }      // custName
        public string? retailerCode { get; set; }     // cusRtlCode (if column exists)
        public string distributor { get; set; }       // concDist
        public string painterName { get; set; }       // contName
        public string? painterMobile { get; set; }    // mobileNo
        public string skuSize { get; set; }           // -> packSize + prodName mapping
        public string? materialQty { get; set; }      // -> pouchCnt (if column exists)
        public string? missedQty { get; set; }        // -> misdQnty
        public string distributionDate { get; set; }  // -> sampDate (yyyy-MM-dd)
        public string? salesLead { get; set; }        // reserved
    }

    public class SubmitResponse
    {
        public bool success { get; set; }
        public string message { get; set; }
        public string? docuNumb { get; set; }
    }
}
