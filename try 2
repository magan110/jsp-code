using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace sparshWebService.DataAccess
{
    public class DatabaseHelper
    {
        private readonly string _bwliveConnectionString;
        private readonly string _itKhariaConnectionString;
        private readonly string _imageDataConnectionString;

        public DatabaseHelper(string bwliveConnectionString, string itKhariaConnectionString, string imageDataConnectionString)
        {
            _bwliveConnectionString = bwliveConnectionString;
            _itKhariaConnectionString = itKhariaConnectionString;
            _imageDataConnectionString = imageDataConnectionString;
        }

        // General method to execute SELECT queries for any connection string
        private List<Dictionary<string, object>> ExecuteSelectQuery(string connectionString, string query, Dictionary<string, object> parameters)
        {
            var resultList = new List<Dictionary<string, object>>();

            using (var conn = new SqlConnection(connectionString))
            using (var cmd = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value);
                }

                conn.Open();
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var row = new Dictionary<string, object>();
                        for (int i = 0; i < reader.FieldCount; i++)
                        {
                            row[reader.GetName(i)] = reader[i];
                        }
                        resultList.Add(row);
                    }
                }
            }

            return resultList;
        }

        // General method to execute INSERT, UPDATE, or DELETE queries for any connection string
        private int ExecuteCommand(string connectionString, string query, Dictionary<string, object> parameters)
        {
            using (var conn = new SqlConnection(connectionString))
            using (var cmd = new SqlCommand(query, conn))
            {
                foreach (var param in parameters)
                {
                    cmd.Parameters.AddWithValue(param.Key, param.Value);
                }

                conn.Open();
                return cmd.ExecuteNonQuery(); // Returns the number of rows affected
            }
        }

        // Function to handle queries for bwlive database (WebSessBean)
        public List<Dictionary<string, object>> WebSessBean(string query, Dictionary<string, object> parameters)
        {
            return ExecuteSelectQuery(_bwliveConnectionString, query, parameters);
        }

        // Function to handle queries for itKharia database (KkrSessBean)
        public List<Dictionary<string, object>> KkrSessBean(string query, Dictionary<string, object> parameters)
        {
            return ExecuteSelectQuery(_itKhariaConnectionString, query, parameters);
        }

        // Function to handle queries for imageData database (ImgSessBean)
        public List<Dictionary<string, object>> ImgSessBean(string query, Dictionary<string, object> parameters)
        {
            return ExecuteSelectQuery(_imageDataConnectionString, query, parameters);
        }

        // Retrieve SecretKey for a given PartnerID from the RegisteredUsers table (itKharia)
        public string GetSecretKey(string partnerId)
        {
            var query = "SELECT secrtKey FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object>
            {
                { "@PartnerID", partnerId }
            };

            var result = KkrSessBean(query, parameters);
            if (result.Count > 0)
            {
                return result[0]["secrtKey"]?.ToString();
            }

            throw new Exception("SecretKey not found for the given PartnerID.");
        }
        public List<string> GetAllowedAPIs(string partnerId)
        {
            var query = @"SELECT allwdAPI 
                  FROM prmApiPrtnr 
                  WHERE partnrId = @PartnerID";
            var parameters = new Dictionary<string, object>
    {
        { "@PartnerID", partnerId }
    };

            var result = KkrSessBean(query, parameters);
            if (result.Count > 0)
            {
                var allowedApis = result[0]["allwdAPI"]?.ToString();
                return allowedApis?.Split(',').Select(api => api.Trim().ToLower()).ToList();
            }

            throw new Exception("No APIs found for the given PartnerID.");
        }

        // Log API requests into the comApiLogs table (itKharia)
        public void InsertIntoLog(string partnerId, string endpoint, string responseStatus, int statCode, object requestBody)
        {
            var checkQuery = "SELECT COUNT(*) AS Count FROM prmApiPrtnr WHERE partnrId = @PartnerID";
            var checkParams = new Dictionary<string, object>
    {
        { "@PartnerID", partnerId }
    };

            var exists = KkrSessBean(checkQuery, checkParams);
            if (exists.Count == 0 || Convert.ToInt32(exists[0]["Count"]) == 0)
            {
                Console.WriteLine($"Warning: PartnerID '{partnerId}' does not exist. Log insertion skipped.");
                return;
            }
            // Extract up to 8 properties from the request body
            var bodyDict = requestBody?.GetType().GetProperties()
                .Where(p => p.GetValue(requestBody) != null)
                .Select(p => $"{p.Name}={p.GetValue(requestBody)}")
                .Take(8)
                .ToList() ?? new List<string>();

            // Fill missing fields with empty strings
            while (bodyDict.Count < 8)
                bodyDict.Add("");

            var insertQuery = @"
        INSERT INTO comApiLogs (PartnerID, Endpoint, ResponseStatus, statCode, ReqsBod1, ReqsBod2, ReqsBod3, ReqsBod4, ReqsBod5, ReqsBod6, ReqsBod7, ReqsBod8)
        VALUES (@PartnerID, @Endpoint, @ResponseStatus, @StatCode, @ReqsBod1, @ReqsBod2, @ReqsBod3, @ReqsBod4, @ReqsBod5, @ReqsBod6, @ReqsBod7, @ReqsBod8)";

            var insertParams = new Dictionary<string, object>
    {
        { "@PartnerID", partnerId },
        { "@Endpoint", endpoint },
        { "@ResponseStatus", responseStatus },
        { "@StatCode", statCode },
        { "@ReqsBod1", bodyDict[0] },
        { "@ReqsBod2", bodyDict[1] },
        { "@ReqsBod3", bodyDict[2] },
        { "@ReqsBod4", bodyDict[3] },
        { "@ReqsBod5", bodyDict[4] },
        { "@ReqsBod6", bodyDict[5] },
        { "@ReqsBod7", bodyDict[6] },
        { "@ReqsBod8", bodyDict[7] }
    };
            ExecuteCommand(_itKhariaConnectionString, insertQuery, insertParams);
        }
    }
}
