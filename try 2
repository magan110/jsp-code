using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
 
namespace RAKControllers.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class SampleDistributionController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;
 
        public SampleDistributionController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }
 
        // ----------------------------
        // 1) Emirates dropdown (Areas)
        // ----------------------------
        [HttpGet("areas")]
        public ActionResult<IEnumerable<AreaItem>> GetAreas([FromQuery] bool onlyActive = true)
        {
            try
            {
                const string sql = @"
SELECT areaCode, areaDesc
FROM dbo.bkmAreaMast WITH (NOLOCK)
WHERE (@onlyActive = 0 OR isActive = 'Y')
ORDER BY areaDesc;";
 
                var parameters = new Dictionary<string, object>
                {
                    { "@onlyActive", onlyActive ? 1 : 0 }
                };
 
                var result = _dbHelper.WebSessBean(sql, parameters);
                var list = new List<AreaItem>();
 
                if (result != null)
                {
                    foreach (var row in result)
                    {
                        list.Add(new AreaItem
                        {
                            code = row["areaCode"]?.ToString()?.Trim() ?? "",
                            desc = row["areaDesc"]?.ToString()?.Trim() ?? ""
                        });
                    }
                }
 
                return Ok(list);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }
 
        // -----------------------------------------
        // 2) Submit the Sample Distribution payload
        // -----------------------------------------
        [HttpPost("submit")]
        public async Task<ActionResult<SubmitResponse>> Submit([FromBody] SampleDistributionRequest req)
        {
            try
            {
                // Basic validations
                if (req == null) return BadRequest("Empty request.");
                if (string.IsNullOrWhiteSpace(req.emirate)) return BadRequest("Emirate (areaCode) is required.");
                if (string.IsNullOrWhiteSpace(req.retailerName)) return BadRequest("Retailer Name is required.");
                if (string.IsNullOrWhiteSpace(req.distributor)) return BadRequest("Concern Distributor is required.");
                if (string.IsNullOrWhiteSpace(req.painterName)) return BadRequest("Painter/Contractor Name is required.");
                if (string.IsNullOrWhiteSpace(req.skuSize)) return BadRequest("Material SKU is required.");
                if (string.IsNullOrWhiteSpace(req.distributionDate)) return BadRequest("Date of distribution is required.");
 
                if (!DateTime.TryParse(req.distributionDate, out var sampDate))
                    return BadRequest("Invalid distribution date.");
 
                // Map SKU text -> DB packSize & product name
                var (packSize, prodName) = MapSku(req.skuSize);
 
                // CreateId from header or request
                var loginId = Request.Headers.ContainsKey("LoginID")
                    ? (Request.Headers["LoginID"].ToString() ?? "SYSTEM")
                    : (string.IsNullOrWhiteSpace(req.loginId) ? "SYSTEM" : req.loginId);
                loginId = (loginId ?? "SYSTEM").Trim();
                if (loginId.Length > 6) loginId = loginId.Substring(0, 6);
 
                // 3️⃣ Generate document number with retry mechanism
                string docuNumb = null;
                int maxRetries = 3;
                for (int attempt = 1; attempt <= maxRetries; attempt++)
                {
                    const string genSql = "EXEC [dbo].[wcpDocNoGen] @DocType, @AreaCode";
                    var genParams = new Dictionary<string, object>
                    {
                        ["@DocType"] = "SDE",
                        ["@AreaCode"] = req.emirate.Trim()
                    };
                    var genResult = _dbHelper.WebSessBean(genSql, genParams) as List<Dictionary<string, object>>;
                    docuNumb = genResult?.FirstOrDefault()?["docuNumb"]?.ToString();

                    if (string.IsNullOrWhiteSpace(docuNumb))
                    {
                        if (attempt == maxRetries)
                            return StatusCode(500, new SubmitResponse { success = false, message = "Failed to generate document number after multiple attempts.", docuNumb = null });
                        continue;
                    }

                    // Check if document number already exists in any related table
                    const string checkSql = @"
                        SELECT COUNT(*) as cnt FROM (
                            SELECT docuNumb FROM catsamplead WHERE docuNumb = @docuNumb
                            UNION ALL
                            SELECT docuNumb FROM catsampleadDtl WHERE docuNumb = @docuNumb
                        ) combined";

                    var checkParams = new Dictionary<string, object> { ["@docuNumb"] = docuNumb };
                    var checkResult = _dbHelper.WebSessBean(checkSql, checkParams) as List<Dictionary<string, object>>;
                    var existingCount = Convert.ToInt32(checkResult?.FirstOrDefault()?["cnt"] ?? 0);

                    if (existingCount == 0)
                        break; // Document number is unique, proceed

                    if (attempt == maxRetries)
                        return StatusCode(500, new SubmitResponse { success = false, message = $"Duplicate document number detected: {docuNumb}. Please try again.", docuNumb = null });

                    // Wait before retry
                    await Task.Delay(100);
                }
 
                // Insert HEADER (catsamplead)
                var insertHeaderSql = @"
INSERT INTO catsamplead
(
  docuNumb, docuDate, areaCode, custName, contName, mobileNo,
  concDist, sampDate, misdQnty, packSize, prodName,
  statFlag, createId, createDt
)
VALUES
(
  @docuNumb, GETDATE(), @areaCode, @custName, @contName, @mobileNo,
  @concDist, @sampDate, @misdQnty, @packSize, @prodName,
  'N', @createId, GETDATE()
);";
 
                var headerParams = new Dictionary<string, object>
                {
                    ["@docuNumb"] = docuNumb,
                    ["@areaCode"] = req.emirate.Trim(),
                    ["@custName"] = req.retailerName?.Trim() ?? (object)DBNull.Value,
                    ["@contName"] = req.painterName?.Trim() ?? (object)DBNull.Value,
                    ["@mobileNo"] = req.painterMobile?.Trim() ?? (object)DBNull.Value,
                    ["@concDist"] = req.distributor?.Trim() ?? (object)DBNull.Value,
                    ["@sampDate"] = sampDate,
                    ["@misdQnty"] = req.missedQty?.Trim() ?? (object)DBNull.Value,
                    ["@packSize"] = packSize ?? (object)DBNull.Value,
                    ["@prodName"] = prodName ?? (object)DBNull.Value,
                    ["@createId"] = loginId
                };
 
                try
                {
                    _dbHelper.WebExecute(insertHeaderSql, headerParams);
                }
                catch (Exception ex) when (ex.Message.Contains("PRIMARY KEY constraint") || ex.Message.Contains("duplicate key"))
                {
                    return StatusCode(500, new SubmitResponse
                    {
                        success = false,
                        message = $"Duplicate record detected for document {docuNumb}. This document may already exist in the system.",
                        docuNumb = docuNumb
                    });
                }
 
                // Insert DETAIL (catsampleadDtl)
                var insertDetailSql = @"
INSERT INTO catsampleadDtl
(
  docuNumb, docuDate, areaCode,
  custName, contName, mobileNo, concDist,
  sampDate, misdQnty, packSize, prodName, sampType,
  createId, createDt
)
VALUES
(
  @docuNumb, GETDATE(), @areaCode,
  @custName, @contName, @mobileNo, @concDist,
  @sampDate, @misdQnty, @packSize, @prodName, 'SampleDistribution',
  @createId, GETDATE()
);";
 
                try
                {
                    _dbHelper.WebExecute(insertDetailSql, headerParams);
                }
                catch (Exception ex) when (ex.Message.Contains("PRIMARY KEY constraint") || ex.Message.Contains("duplicate key"))
                {
                    return StatusCode(500, new SubmitResponse
                    {
                        success = false,
                        message = $"Failed to insert detail record for document {docuNumb}. This may be a duplicate entry.",
                        docuNumb = docuNumb
                    });
                }
 
                // 4️⃣ Update the sequence
                const string updSql = "EXEC [dbo].[wcpDocNoUpd] @DocType, @AreaCode";
                var updParams = new Dictionary<string, object>
                {
                    ["@DocType"] = "SDE",
                    ["@AreaCode"] = req.emirate.Trim()
                };
                _dbHelper.WebSessBean(updSql, updParams);
 
                return Ok(new SubmitResponse
                {
                    success = true,
                    message = "Saved successfully.",
                    docuNumb = docuNumb
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new SubmitResponse
                {
                    success = false,
                    message = ex.Message,
                    docuNumb = null
                });
            }
        }
 
        // -----------------------
        // Helpers / Utilities
        // -----------------------
 
        private static (string packSize, string prodName) MapSku(string sku)
        {
            // SKU mapping: "1 Kg" -> packSize = "01K"; "5 Kg" -> "05K"; default: digits + 'K'
            if (string.IsNullOrWhiteSpace(sku)) return (null, null);
            var s = sku.Trim().ToLower();
            if (s.StartsWith("1")) return ("01K", "BW Putty 1 Kg");
            if (s.StartsWith("5")) return ("05K", "BW Putty 5 Kg");
 
            // fallback: extract first number (kg)
            var digits = new string(s.Where(char.IsDigit).ToArray());
            var pack = string.IsNullOrEmpty(digits) ? null : (digits.Length == 1 ? $"0{digits}K" : $"{digits}K");
            var name  = string.IsNullOrEmpty(digits) ? null : $"BW Putty {digits} Kg";
            return (pack, name);
        }
    }
 
    // DTOs
    public class AreaItem
    {
        public string code { get; set; }  // areaCode (char(3))
        public string desc { get; set; }  // areaDesc
    }
 
    public class SampleDistributionRequest
    {
        public string? loginId { get; set; }          // optional; or via header: LoginID
        public string emirate { get; set; }           // areaCode (char(3))
        public string retailerName { get; set; }      // custName
        public string? retailerCode { get; set; }     // cusRtlCode (if column exists)
        public string distributor { get; set; }       // concDist
        public string painterName { get; set; }       // contName
        public string? painterMobile { get; set; }    // mobileNo
        public string skuSize { get; set; }           // -> packSize + prodName mapping
        public string? materialQty { get; set; }      // -> pouchCnt (if column exists)
        public string? missedQty { get; set; }        // -> misdQnty (char(10))
        public string distributionDate { get; set; }  // -> sampDate (yyyy-MM-dd)
        public string? salesLead { get; set; }        // (reserved, not mapped now)
    }
 
    public class SubmitResponse
    {
        public bool success { get; set; }
        public string message { get; set; }
        public string? docuNumb { get; set; }
    }
}
 
