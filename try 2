import 'package:flutter/material.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';

class SuccessScreen extends StatelessWidget {
  const SuccessScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8FAFC),
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        foregroundColor: const Color(0xFF1E3A8A),
        systemOverlayStyle: const SystemUiOverlayStyle(
          statusBarColor: Colors.transparent,
          statusBarIconBrightness: Brightness.dark,
        ),
        leading: Navigator.of(context).canPop()
            ? Padding(
                padding: const EdgeInsets.all(8.0),
                child: CustomBackButton(animated: false, size: 36),
              )
            : null,
      ),
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: ConstrainedBox(
            constraints: const BoxConstraints(maxWidth: 600),
            child: Card(
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.all(32),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.04),
                      blurRadius: 16,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Icon(
                      Icons.check_circle,
                      size: 80,
                      color: Colors.green,
                    ),
                    const SizedBox(height: 24),
                    Text(
                      'Registration Successful!',
                      style: AppTheme.headline,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'Your registration has been submitted successfully.',
                      textAlign: TextAlign.center,
                      style: AppTheme.body,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Registration ID: REG001',
                      style: AppTheme.title,
                    ),
                    const SizedBox(height: 24),
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue.shade50,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: const Row(
                        children: [
                          Icon(Icons.star, color: Colors.amber),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              '100 bonus points have been awarded to your account!',
                              style: AppTheme.success,
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 32),
                    SizedBox(
                      width: double.infinity,
                      height: 56,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.pushNamedAndRemoveUntil(
                            context,
                            '/dashboard',
                            (route) => false,
                          );
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF1E3A8A),
                          foregroundColor: Colors.white,
                          elevation: 0,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Text(
                          'Go to Dashboard',
                          style: AppTheme.body.copyWith(color: Colors.white),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    SizedBox(
                      width: double.infinity,
                      height: 56,
                      child: OutlinedButton(
                        onPressed: () {
                          // Implement download functionality
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text(
                                'Registration details downloaded successfully',
                              ),
                            ),
                          );
                        },
                        style: OutlinedButton.styleFrom(
                          foregroundColor: const Color(0xFF1E3A8A),
                          side: const BorderSide(color: Color(0xFF1E3A8A)),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                        ),
                        child: Text(
                          'Download Registration Details',
                          style: AppTheme.body,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}




















import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:web/web.dart' as web;
import 'dart:async';
import 'dart:ui_web' as ui_web;
import 'dart:js_util' as jsu;

class CameraScannerScreen extends StatefulWidget {
  const CameraScannerScreen({super.key});

  @override
  State<CameraScannerScreen> createState() => _CameraScannerScreenState();
}

class _CameraScannerScreenState extends State<CameraScannerScreen>
    with TickerProviderStateMixin {
  late AnimationController _animationController;
  late AnimationController _scanLineController;
  late AnimationController _cornerPulseController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;
  late Animation<double> _scanLineAnimation;
  late Animation<double> _cornerPulseAnimation;
  
  bool isScanning = false;
  bool _isProcessingQR = false;
  web.HTMLVideoElement? _videoElement;
  web.HTMLCanvasElement? _canvasElement;
  Timer? _scanTimer;
  Timer? _initTimer;
  String _videoElementId = 'camera-video-element';
  bool _cameraInitialized = false;
  web.MediaStream? _currentStream;
  bool _viewFactoryRegistered = false;
  final List<Map<String, dynamic>> _scannedQRCodes = [];

  @override
  void initState() {
    super.initState();
    _videoElementId =
        'camera-video-element-${DateTime.now().millisecondsSinceEpoch}';
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    )..forward();
    _scanLineController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    )..repeat();
    _cornerPulseController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    )..repeat();
    _scaleAnimation = Tween<double>(begin: 0.9, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.elasticOut),
    );
    _opacityAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.0, 0.6),
      ),
    );
    _scanLineAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _scanLineController, curve: Curves.easeInOut),
    );
    _cornerPulseAnimation = Tween<double>(begin: 0.5, end: 1.0).animate(
      CurvedAnimation(parent: _cornerPulseController, curve: Curves.easeInOut),
    );
    _initializeCamera();
  }

  @override
  void dispose() {
    _animationController.dispose();
    _scanLineController.dispose();
    _cornerPulseController.dispose();
    _stopCamera();
    _initTimer?.cancel();
    super.dispose();
  }

  // ---------------- JS bridge helpers ----------------
  bool get _hasNativePerms =>
      jsu.hasProperty(web.window, 'NativePerms') &&
      jsu.hasProperty(
        jsu.getProperty(web.window, 'NativePerms') as Object,
        'request',
      );

  Future<Map<String, dynamic>?> _requestCameraPermissionViaBridge() async {
    try {
      if (!_hasNativePerms) return null;
      final nativePerms = jsu.getProperty(web.window, 'NativePerms');
      final promise = jsu.callMethod(nativePerms, 'request', [
        'camera',
        'This app needs camera access to scan QR codes.',
      ]);
      final result = await jsu.promiseToFuture<Object?>(promise);
      final map = jsu.dartify(result) as Map?;
      return map?.map((k, v) => MapEntry(k.toString(), v));
    } catch (e) {
      // fallback to direct getUserMedia
      return null;
    }
  }

  String? _detectQrViaJs(web.ImageData imageData, int w, int h) {
    try {
      if (jsu.hasProperty(web.window, 'detectQRCode')) {
        final res = jsu.callMethod(web.window, 'detectQRCode', [
          imageData.data, // Uint8ClampedArray
          w,
          h,
        ]);
        if (res == null) return null;
        final s = res.toString();
        return (s.isNotEmpty && s != 'null') ? s : null;
      }
    } catch (_) {}
    return null;
  }

  // ---------------- Camera lifecycle ----------------
  void _initializeCamera() {
    _initTimer?.cancel();
    if (!_viewFactoryRegistered) {
      ui_web.platformViewRegistry.registerViewFactory(_videoElementId, (int _) {
        _videoElement = web.HTMLVideoElement()
          ..id = _videoElementId
          ..autoplay = true
          ..muted = true
          ..setAttribute('playsinline', 'true')
          ..style.width = '100%'
          ..style.height = '100%'
          ..style.objectFit = 'cover'
          ..style.border = 'none'
          ..style.backgroundColor = '#000';
        // Ensure element is attached before starting camera
        Future.delayed(const Duration(milliseconds: 100), _startCamera);
        return _videoElement!;
      });
      _viewFactoryRegistered = true;
    }
    setState(() => _cameraInitialized = true);
    _initTimer = Timer(const Duration(seconds: 10), () {
      if (mounted && !isScanning && _cameraInitialized) _restartCamera();
    });
  }

  Future<void> _startCamera() async {
    try {
      setState(() => _isProcessingQR = false);
      if (web.window.isSecureContext != true) {
        _showError('Camera access requires a secure context (HTTPS).');
        return;
      }
      // 1) Ask native (via index.html bridge). Non-blocking if missing.
      final bridgeResult = await _requestCameraPermissionViaBridge();
      if (bridgeResult != null && bridgeResult['ok'] == false) {
        _showError(
          'Camera permission denied: ${bridgeResult['error'] ?? 'Permission not granted'}',
        );
        return;
      }
      if (bridgeResult != null && bridgeResult.containsKey('webError')) {
        // Native granted but browser warm-up had an issue – log & continue.
        // ignore: avoid_print
        print('Browser warm-up error: ${bridgeResult['webError']}');
      }
      // 3) Try multiple constraints; convert to JS objects with jsify
      final strategies = <Map<String, Object>>[
        {
          'video': {
            'facingMode': 'environment',
            'width': {'ideal': 1280, 'max': 1920},
            'height': {'ideal': 720, 'max': 1080},
            'frameRate': {'ideal': 30, 'max': 60},
          },
          'audio': false,
        },
        {
          'video': {'facingMode': 'environment'},
          'audio': false,
        },
        {'video': true},
      ];
      web.MediaStream? stream;
      Object? lastErr;
      for (var i = 0; i < strategies.length; i++) {
        try {
          final jsConstraints = jsu.jsify(strategies[i]);
          final promise = web.window.navigator.mediaDevices.getUserMedia(
            jsConstraints,
          );
          stream = await jsu.promiseToFuture<web.MediaStream>(promise);
          break;
        } catch (e) {
          lastErr = e;
          if (i == strategies.length - 1) {
            // ignore: only_throw_errors
            throw lastErr;
          }
        }
      }
      if (stream == null) {
        // ignore: only_throw_errors
        throw lastErr ?? Exception('Failed to obtain camera stream');
      }
      if (_videoElement != null) {
        _currentStream = stream;
        _videoElement!.srcObject = stream;
        _videoElement!.onLoadedMetadata.listen((_) {
          _initTimer?.cancel();
          if (!mounted) return;
          setState(() => isScanning = true);
          _startQRDetection();
        });
        _videoElement!.onCanPlay.listen((_) {
          if (!mounted || isScanning) return;
          setState(() => isScanning = true);
          _startQRDetection();
        });
        _videoElement!.onError.listen((_) {
          _showError('Video playback error occurred.');
        });
      }
    } catch (e) {
      _handleCameraError(e);
    }
  }

  void _handleCameraError(Object e) {
    final s = e.toString().toLowerCase();
    if (s.contains('notallowederror') || s.contains('permission')) {
      _showError('Camera permission is required to scan QR codes.');
    } else if (s.contains('notfounderror')) {
      _showError('No camera found on this device.');
    } else if (s.contains('notreadableerror')) {
      _showError('Camera is already in use by another application.');
    } else if (s.contains('overconstrainederror')) {
      _showError(
        'Requested camera constraints are not supported on this device.',
      );
    } else {
      _showError('Unable to access camera: ${e.toString()}');
    }
  }

  void _startQRDetection() {
    _scanTimer?.cancel();
    _scanTimer = Timer.periodic(const Duration(milliseconds: 300), (_) {
      if (!_isProcessingQR && _videoElement != null && isScanning) {
        _processVideoFrame();
      }
    });
  }

  void _processVideoFrame() {
    if (_videoElement == null || _isProcessingQR) return;
    try {
      _canvasElement ??= web.HTMLCanvasElement()
        ..width = 640
        ..height = 480;
      final ctx = _canvasElement!.context2D;
      ctx.drawImageScaled(_videoElement!, 0, 0, 640, 480);
      final imageData = ctx.getImageData(0, 0, 640, 480);
      final code = _detectQrViaJs(imageData, 640, 480);
      if (code != null) {
        _isProcessingQR = true;
        _handleQRCode(code);
      }
    } catch (e) {
      // ignore frame errors, continue scanning
    }
  }

  void _stopCamera() {
    _scanTimer?.cancel();
    _scanTimer = null;
    if (_currentStream != null) {
      final tracks = _currentStream!.getTracks(); // JSArray
      for (var i = 0; i < tracks.length; i++) {
        tracks[i].stop();
      }
      _currentStream = null;
    }
    if (_videoElement != null) {
      _videoElement!.srcObject = null;
      _videoElement = null;
    }
    setState(() {
      isScanning = false;
      _isProcessingQR = false;
      _cameraInitialized = false;
    });
  }

  void _resumeScanning() {
    if (!mounted || _videoElement == null || _currentStream == null) return;
    _scanTimer?.cancel();
    setState(() {
      _isProcessingQR = false;
      isScanning = true;
    });
    _startQRDetection();
  }

  void _restartCamera() {
    if (!mounted) return;
    setState(() {
      _cameraInitialized = false;
      _isProcessingQR = false;
      isScanning = false;
    });
    Future.delayed(const Duration(milliseconds: 200), () {
      if (mounted) _initializeCamera();
    });
  }

  void _handleQRCode(String code) {
    HapticFeedback.heavyImpact();
    final type = _detectQRType(code);
    setState(() {
      _scannedQRCodes.insert(0, {
        'data': code,
        'type': type,
        'timestamp': DateTime.now(),
      });
      _isProcessingQR = false;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Row(
          children: [
            Icon(Icons.check_circle, color: Colors.white),
            SizedBox(width: 8),
            Text('QR Code scanned'),
          ],
        ),
        backgroundColor: Colors.blue.shade600,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        duration: const Duration(seconds: 2),
      ),
    );
    Future.delayed(const Duration(milliseconds: 800), _resumeScanning);
  }

  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red.shade600,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        duration: const Duration(seconds: 3),
      ),
    );
  }

  String _detectQRType(String code) {
    if (code.startsWith('http://') || code.startsWith('https://')) return 'URL';
    if (code.startsWith('mailto:')) return 'Email';
    if (code.startsWith('tel:')) return 'Phone';
    if (code.startsWith('WIFI:')) return 'WiFi';
    if (code.startsWith('BEGIN:VCARD')) return 'Contact';
    if (code.contains('\n') &&
        (code.contains('Name:') || code.contains('ID:'))) {
      return 'Product Info';
    }
    return 'Text';
  }

  IconData _getQRIcon(String type) {
    switch (type) {
      case 'URL':
        return Icons.link;
      case 'Email':
        return Icons.email;
      case 'Phone':
        return Icons.phone;
      case 'WiFi':
        return Icons.wifi;
      case 'Contact':
        return Icons.contact_page;
      case 'Product Info':
        return Icons.inventory;
      default:
        return Icons.text_fields;
    }
  }

  void _processQRData(String code, String type) {
    try {
      switch (type) {
        case 'URL':
        case 'Email':
        case 'Phone':
          web.window.open(code, '_blank');
          break;
        default:
          _showError('QR code processed successfully');
      }
    } catch (_) {
      _showError('Unable to process QR code');
    }
  }

  void _clearScannedList() => setState(() => _scannedQRCodes.clear());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8FAFC),
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        foregroundColor: const Color(0xFF1E3A8A),
        systemOverlayStyle: const SystemUiOverlayStyle(
          statusBarColor: Colors.transparent,
          statusBarIconBrightness: Brightness.dark,
        ),
        title: const Text(
          'QR Code Scanner',
          style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: Color(0xFF1E3A8A)),
        ),
        centerTitle: true,
      ),
      body: Column(
        children: [
          // Scanner section
          Expanded(
            flex: 1,
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    Colors.blue.shade800,
                    Colors.blue.shade600,
                    Colors.blue.shade400,
                  ],
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 10,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Stack(
                children: [
                  Positioned.fill(
                    child: _cameraInitialized
                        ? HtmlElementView(viewType: _videoElementId)
                        : _buildInitializing(),
                  ),
                  FadeTransition(
                    opacity: _opacityAnimation,
                    child: ScaleTransition(
                      scale: _scaleAnimation,
                      child: _buildOverlay(),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Scanned list section
          Expanded(flex: 1, child: _buildScannedList()),
        ],
      ),
    );
  }

  Widget _buildInitializing() {
    return Container(
      color: Colors.black.withOpacity(0.3),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                shape: BoxShape.circle,
              ),
              child: const CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              'Initializing camera...',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _restartCamera,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white.withOpacity(0.2),
                foregroundColor: Colors.white,
                elevation: 0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
              ),
              child: const Text('Restart Camera'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOverlay() {
    return Container(
      decoration: BoxDecoration(
        gradient: RadialGradient(
          center: Alignment.center,
          radius: 0.8,
          colors: [
            Colors.transparent,
            Colors.black.withOpacity(0.3),
            Colors.black.withOpacity(0.6),
          ],
        ),
      ),
      child: Column(
        children: [
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Row(
                children: [
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      shape: BoxShape.circle,
                    ),
                    child: IconButton(
                      onPressed: () {
                        _stopCamera();
                        Navigator.pop(context);
                      },
                      icon: const Icon(
                        Icons.arrow_back_rounded,
                        color: Colors.white,
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  const Expanded(
                    child: Text(
                      'QR Code Scanner',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          Expanded(
            child: Center(
              child: Container(
                width: 280,
                height: 280,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(20),
                  border: Border.all(
                    color: Colors.white.withOpacity(0.3),
                    width: 2,
                  ),
                ),
                child: Stack(
                  children: [
                    // Corners
                    ...List.generate(4, (index) {
                      final alignments = [
                        Alignment.topLeft,
                        Alignment.topRight,
                        Alignment.bottomLeft,
                        Alignment.bottomRight,
                      ];
                      return Align(
                        alignment: alignments[index],
                        child: AnimatedBuilder(
                          animation: _cornerPulseAnimation,
                          builder: (_, __) {
                            return Transform.scale(
                              scale: _cornerPulseAnimation.value,
                              child: Container(
                                width: 40,
                                height: 40,
                                decoration: BoxDecoration(
                                  border: Border(
                                    top: index < 2
                                        ? const BorderSide(
                                            color: Colors.white,
                                            width: 4,
                                          )
                                        : BorderSide.none,
                                    bottom: index >= 2
                                        ? const BorderSide(
                                            color: Colors.white,
                                            width: 4,
                                          )
                                        : BorderSide.none,
                                    left: index % 2 == 0
                                        ? const BorderSide(
                                            color: Colors.white,
                                            width: 4,
                                          )
                                        : BorderSide.none,
                                    right: index % 2 == 1
                                        ? const BorderSide(
                                            color: Colors.white,
                                            width: 4,
                                          )
                                        : BorderSide.none,
                                  ),
                                ),
                              ),
                            );
                          },
                        ),
                      );
                    }),
                    // Scan line
                    if (isScanning)
                      AnimatedBuilder(
                        animation: _scanLineAnimation,
                        builder: (_, __) {
                          return Positioned(
                            top: 280 * _scanLineAnimation.value - 1,
                            left: 0,
                            right: 0,
                            child: Container(
                              height: 2,
                              decoration: const BoxDecoration(
                                gradient: LinearGradient(
                                  colors: [
                                    Colors.transparent,
                                    Colors.white,
                                    Colors.transparent,
                                  ],
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                    // Center icon
                    if (isScanning)
                      Center(
                        child: Container(
                          width: 70,
                          height: 70,
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.1),
                            shape: BoxShape.circle,
                          ),
                          child: const Icon(
                            Icons.qr_code_scanner_rounded,
                            color: Colors.white,
                            size: 35,
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 24,
                  vertical: 16,
                ),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(30),
                ),
                child: Text(
                  _cameraInitialized && isScanning
                      ? 'Position QR code within the frame'
                      : _cameraInitialized
                      ? 'Camera ready - scan QR code'
                      : 'Starting camera...',
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildScannedList() {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(30)),
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 20),
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(30)),
            ),
            child: Row(
              children: [
                const Expanded(
                  child: Text(
                    'Scanned QR Codes',
                    style: TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF2C3E50),
                    ),
                  ),
                ),
                if (_scannedQRCodes.isNotEmpty)
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.red.shade50,
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: TextButton.icon(
                      onPressed: _clearScannedList,
                      icon: Icon(
                        Icons.delete_outline,
                        color: Colors.red.shade600,
                        size: 20,
                      ),
                      label: Text(
                        'Clear All',
                        style: TextStyle(color: Colors.red.shade600),
                      ),
                      style: TextButton.styleFrom(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 8,
                        ),
                        minimumSize: Size.zero,
                        tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      ),
                    ),
                  ),
              ],
            ),
          ),
          Expanded(
            child: _scannedQRCodes.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Container(
                          padding: const EdgeInsets.all(24),
                          decoration: BoxDecoration(
                            color: Colors.blue.shade50,
                            shape: BoxShape.circle,
                          ),
                          child: Icon(
                            Icons.qr_code_scanner_outlined,
                            color: Colors.blue.shade300,
                            size: 48,
                          ),
                        ),
                        const SizedBox(height: 20),
                        Text(
                          'No QR codes scanned yet',
                          style: TextStyle(
                            fontSize: 18,
                            color: Colors.grey.shade600,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Scan a QR code to see it here',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                    itemCount: _scannedQRCodes.length,
                    itemBuilder: (context, index) {
                      final qr = _scannedQRCodes[index];
                      return Container(
                        margin: const EdgeInsets.only(bottom: 12),
                        child: Card(
                          elevation: 3,
                          shadowColor: Colors.blue.withOpacity(0.2),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                          ),
                          child: InkWell(
                            onTap: () => _processQRData(qr['data'], qr['type']),
                            borderRadius: BorderRadius.circular(16),
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Row(
                                    children: [
                                      Container(
                                        padding: const EdgeInsets.all(8),
                                        decoration: BoxDecoration(
                                          color: Colors.blue.shade100,
                                          borderRadius: BorderRadius.circular(
                                            12,
                                          ),
                                        ),
                                        child: Icon(
                                          _getQRIcon(qr['type']),
                                          color: Colors.blue.shade600,
                                          size: 24,
                                        ),
                                      ),
                                      const SizedBox(width: 12),
                                      Expanded(
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            Text(
                                              qr['type'],
                                              style: TextStyle(
                                                fontSize: 16,
                                                fontWeight: FontWeight.bold,
                                                color: Colors.blue.shade600,
                                              ),
                                            ),
                                            const SizedBox(height: 2),
                                            Text(
                                              _formatTime(qr['timestamp']),
                                              style: TextStyle(
                                                fontSize: 12,
                                                color: Colors.grey.shade500,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                  const SizedBox(height: 12),
                                  Container(
                                    padding: const EdgeInsets.all(12),
                                    decoration: BoxDecoration(
                                      color: Colors.grey.shade50,
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    child: Text(
                                      qr['data'],
                                      style: const TextStyle(
                                        fontSize: 14,
                                        color: Color(0xFF2C3E50),
                                        height: 1.4,
                                      ),
                                      maxLines: 3,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                  const SizedBox(height: 12),
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.end,
                                    children: [
                                      TextButton.icon(
                                        onPressed: () {
                                          Clipboard.setData(
                                            ClipboardData(text: qr['data']),
                                          );
                                          ScaffoldMessenger.of(
                                            context,
                                          ).showSnackBar(
                                            SnackBar(
                                              content: const Row(
                                                children: [
                                                  Icon(
                                                    Icons.check_circle,
                                                    color: Colors.white,
                                                  ),
                                                  SizedBox(width: 8),
                                                  Text('Copied to clipboard'),
                                                ],
                                              ),
                                              backgroundColor:
                                                  Colors.green.shade600,
                                              behavior:
                                                  SnackBarBehavior.floating,
                                              shape: RoundedRectangleBorder(
                                                borderRadius:
                                                    BorderRadius.circular(10),
                                              ),
                                              duration: const Duration(
                                                seconds: 2,
                                              ),
                                            ),
                                          );
                                        },
                                        icon: Icon(
                                          Icons.copy,
                                          size: 18,
                                          color: Colors.blue.shade600,
                                        ),
                                        label: Text(
                                          'Copy',
                                          style: TextStyle(
                                            color: Colors.blue.shade600,
                                          ),
                                        ),
                                        style: TextButton.styleFrom(
                                          padding: const EdgeInsets.symmetric(
                                            horizontal: 12,
                                            vertical: 8,
                                          ),
                                          minimumSize: Size.zero,
                                          tapTargetSize:
                                              MaterialTapTargetSize.shrinkWrap,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(
                                              20,
                                            ),
                                            side: BorderSide(
                                              color: Colors.blue.shade200,
                                            ),
                                          ),
                                        ),
                                      ),
                                      const SizedBox(width: 8),
                                      ElevatedButton.icon(
                                        onPressed: () => _processQRData(
                                          qr['data'],
                                          qr['type'],
                                        ),
                                        icon: const Icon(
                                          Icons.open_in_new,
                                          size: 18,
                                        ),
                                        label: const Text('Open'),
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor: Colors.blue.shade600,
                                          foregroundColor: Colors.white,
                                          elevation: 0,
                                          padding: const EdgeInsets.symmetric(
                                            horizontal: 16,
                                            vertical: 10,
                                          ),
                                          minimumSize: Size.zero,
                                          tapTargetSize:
                                              MaterialTapTargetSize.shrinkWrap,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(
                                              20,
                                            ),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }

  String _formatTime(DateTime timestamp) {
    final now = DateTime.now();
    final difference = now.difference(timestamp);
    if (difference.inSeconds < 60) return '${difference.inSeconds}s ago';
    if (difference.inMinutes < 60) return '${difference.inMinutes}m ago';
    if (difference.inHours < 24) return '${difference.inHours}h ago';
    return '${difference.inDays}d ago';
  }
}





















import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class QRInputScreen extends StatefulWidget {
  const QRInputScreen({super.key});

  @override
  State<QRInputScreen> createState() => _QRInputScreenState();
}

class _QRInputScreenState extends State<QRInputScreen> {
  final _controller = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _processQRCode() {
    if (_formKey.currentState!.validate()) {
      HapticFeedback.lightImpact();
      showDialog(
        context: context,
        builder: (context) => _buildResultDialog(_controller.text),
      );
    }
  }

  Widget _buildResultDialog(String code) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Container(
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.blue.shade700, Colors.blue.shade500],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 80,
              height: 80,
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                shape: BoxShape.circle,
              ),
              child: const Icon(Icons.check_circle_rounded, size: 40, color: Colors.white),
            ),
            const SizedBox(height: 16),
            const Text(
              'QR Code Processed!',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.white),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                code,
                style: const TextStyle(fontSize: 16, color: Colors.white, fontFamily: 'monospace'),
                textAlign: TextAlign.center,
              ),
            ),
            const SizedBox(height: 24),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context);
                      _controller.clear();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white.withOpacity(0.2),
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text('Close'),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context);
                      Navigator.pop(context);
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: Colors.blue.shade700,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text('Done'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8FAFC),
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        foregroundColor: const Color(0xFF1E3A8A),
        systemOverlayStyle: const SystemUiOverlayStyle(
          statusBarColor: Colors.transparent,
          statusBarIconBrightness: Brightness.dark,
        ),
        title: const Text(
          'QR Code Input',
          style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: Color(0xFF1E3A8A)),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildAnimatedHeader(),
            const SizedBox(height: 32),
            _buildModernSection(
              title: 'QR Code Entry',
              icon: Icons.qr_code_rounded,
              children: [
                TextFormField(
                  controller: _controller,
                  maxLines: 4,
                  decoration: InputDecoration(
                    hintText: 'Paste or type QR code content here...',
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
                    ),
                    filled: true,
                    fillColor: const Color(0xFFF8FAFC),
                    contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter QR code data';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  height: 56,
                  child: ElevatedButton.icon(
                    onPressed: _processQRCode,
                    icon: const Icon(Icons.check_rounded),
                    label: const Text('Process QR Code'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF1E3A8A),
                      foregroundColor: Colors.white,
                      elevation: 0,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'QR Code Input',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Manually enter QR code data',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    title,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF1F2937),
                    ),
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }
}






















import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/custom_back_button.dart';

class ExpertMeetClaimPage extends StatefulWidget {
  const ExpertMeetClaimPage({Key? key}) : super(key: key);

  @override
  _ExpertMeetClaimPageState createState() => _ExpertMeetClaimPageState();
}

class _ExpertMeetClaimPageState extends State<ExpertMeetClaimPage>
    with TickerProviderStateMixin {
  // Form controllers
  final _formKey = GlobalKey<FormState>();
  final _activityNoController = TextEditingController();
  final _budgetController = TextEditingController();
  final _retailerNameController = TextEditingController();
  final _sapCodeController = TextEditingController();
  final _retailerMobileController = TextEditingController();
  final _stockistNameController = TextEditingController();
  final _billNoController = TextEditingController();
  final _totalAmountController = TextEditingController(text: '0');
  
  // Date controllers
  final _planDateController = TextEditingController();
  final _actualDateController = TextEditingController();
  
  // State variables
  bool _showPainterDetails = false;
  String? _uploadedImagePath;
  List<Painter> _painters = [];
  bool _isSubmitting = false;
  
  // Dropdown values
  String? _selectedActivity;
  List<String> _activityOptions = ['Activity 1', 'Activity 2', 'Activity 3'];
  List<String> _processTypeOptions = ['ADD', 'UPDATE'];
  
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    _activityNoController.dispose();
    _budgetController.dispose();
    _retailerNameController.dispose();
    _sapCodeController.dispose();
    _retailerMobileController.dispose();
    _stockistNameController.dispose();
    _billNoController.dispose();
    _totalAmountController.dispose();
    _planDateController.dispose();
    _actualDateController.dispose();
    super.dispose();
  }

  // Handle file upload
  void _onFileUploaded(String? filePath) {
    setState(() {
      _uploadedImagePath = filePath;
    });
  }

  // Date picker
  Future<void> _selectDate(TextEditingController controller) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (picked != null) {
      setState(() {
        controller.text = DateFormat('yyyy-MM-dd').format(picked);
      });
    }
  }

  // Add painter to list
  void _addPainter() {
    setState(() {
      _painters.add(Painter(mobileNo: '', type: 'Type A', name: ''));
    });
  }

  // Remove painter from list
  void _removePainter(int index) {
    setState(() {
      _painters.removeAt(index);
    });
  }

  // Submit form
  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      // Simulate API call
      Future.delayed(const Duration(seconds: 2), () {
        setState(() {
          _isSubmitting = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(child: Text('Claim submitted successfully!')),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
            duration: Duration(seconds: 5),
          ),
        );
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: Column(
                children: [
                  // Activity Details
                  _buildActivityDetailsSection(),
                  const SizedBox(height: 24),
                  // Experts Meet Details
                  _buildExpertsMeetDetailsSection(),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: Column(
                children: [
                  // Painter Details
                  _buildPainterDetailsSection(),
                  const SizedBox(height: 24),
                  // Expense Details
                  _buildExpenseDetailsSection(),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Activity Details
        _buildActivityDetailsSection(),
        const SizedBox(height: 24),
        // Experts Meet Details
        _buildExpertsMeetDetailsSection(),
        const SizedBox(height: 24),
        // Painter Details
        _buildPainterDetailsSection(),
        const SizedBox(height: 24),
        // Expense Details
        _buildExpenseDetailsSection(),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: CustomBackButton(
        onPressed: () => Navigator.pushNamedAndRemoveUntil(
          context,
          '/home',
          (route) => false,
        ),
      ),
      title: Text(
        'Expert Meet Claim',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Expert Meet Claim',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Submit your expert meet expenses',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildActivityDetailsSection() {
    return _buildModernSection(
      title: 'Activity Details',
      icon: Icons.event_note_outlined,
      children: [
        _buildModernDropdown(
          value: _selectedActivity,
          label: 'Process Type',
          icon: Icons.edit_outlined,
          items: _processTypeOptions,
          onChanged: (value) {
            setState(() {
              _selectedActivity = value;
              _activityNoController.text = value ?? '';
            });
          },
          isRequired: true,
        ),
        const SizedBox(height: 20),
        _buildModernDropdown(
          value: _selectedActivity,
          label: 'Refer. Activity No',
          icon: Icons.qr_code_outlined,
          items: _activityOptions,
          onChanged: (value) {
            setState(() {
              _selectedActivity = value;
              _activityNoController.text = value ?? '';
            });
          },
          isRequired: true,
        ),
        const SizedBox(height: 20),
        _buildModernTextField(
          controller: _budgetController,
          label: 'Total Max Budget',
          icon: Icons.account_balance_wallet_outlined,
          isRequired: true,
          isNumber: true,
        ),
      ],
    );
  }

  Widget _buildExpertsMeetDetailsSection() {
    return _buildModernSection(
      title: 'Experts Meet Details',
      icon: Icons.groups_outlined,
      children: [
        _buildModernDateField(
          controller: _planDateController,
          label: 'Plan Date',
          icon: Icons.event_outlined,
        ),
        const SizedBox(height: 20),
        _buildModernDateField(
          controller: _actualDateController,
          label: 'Actual Date',
          icon: Icons.event_available_outlined,
          isRequired: true,
        ),
      ],
    );
  }

  Widget _buildPainterDetailsSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          // Header
          InkWell(
            onTap: () {
              setState(() {
                _showPainterDetails = !_showPainterDetails;
              });
            },
            child: Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: const Color(0xFFF8FAFC),
                borderRadius: const BorderRadius.vertical(
                  top: Radius.circular(16),
                ),
              ),
              child: Row(
                children: [
                  Container(
                    width: 48,
                    height: 48,
                    decoration: BoxDecoration(
                      color: const Color(0xFF1E3A8A).withOpacity(0.1),
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      Icons.person_outline,
                      color: const Color(0xFF1E3A8A),
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Text(
                      'Click Here to see Painter Details',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: const Color(0xFF1F2937),
                      ),
                    ),
                  ),
                  Icon(
                    _showPainterDetails ? Icons.expand_less : Icons.expand_more,
                    color: const Color(0xFF1E3A8A),
                  ),
                ],
              ),
            ),
          ),
          // Content
          if (_showPainterDetails)
            Padding(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Retailer Details Section
                  _buildModernSubSection(
                    title: 'Retailer Details',
                    icon: Icons.store_outlined,
                    children: [
                      _buildModernTextField(
                        controller: _retailerNameController,
                        label: 'Name',
                        icon: Icons.person_outline_rounded,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _sapCodeController,
                        label: 'SAP Code',
                        icon: Icons.qr_code_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _retailerMobileController,
                        label: 'Mobile No',
                        icon: Icons.phone_outlined,
                        isRequired: true,
                        isPhone: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _stockistNameController,
                        label: 'Stockist Name',
                        icon: Icons.business_outlined,
                        isRequired: true,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  // Painter List Section
                  _buildModernSubSection(
                    title: 'Painter List',
                    icon: Icons.people_outlined,
                    children: [
                      _painters.isEmpty
                          ? _buildEmptyPainterState()
                          : Column(
                              children: _painters.asMap().entries.map((entry) {
                                int index = entry.key;
                                return _buildPainterCard(index);
                              }).toList(),
                            ),
                      const SizedBox(height: 20),
                      // Add Painter Button
                      SizedBox(
                        width: double.infinity,
                        height: 56,
                        child: ElevatedButton.icon(
                          onPressed: _addPainter,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: const Color(0xFF1E3A8A),
                            foregroundColor: Colors.white,
                            elevation: 0,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          icon: const Icon(Icons.add_circle_outline),
                          label: const Text(
                            'Add Painter',
                            style: TextStyle(fontSize: 16),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildExpenseDetailsSection() {
    return _buildModernSection(
      title: 'Enter Expanse Details (Tea & Snacks)',
      icon: Icons.receipt_long_outlined,
      children: [
        _buildModernTextField(
          controller: _billNoController,
          label: 'Bill No',
          icon: Icons.receipt_outlined,
        ),
        const SizedBox(height: 20),
        _buildModernTextField(
          controller: _totalAmountController,
          label: 'Total Amount',
          icon: Icons.currency_exchange_outlined,
          isNumber: true,
        ),
        const SizedBox(height: 20),
        // Image Upload Section
        FileUploadWidget(
          label: 'Image 1',
          icon: Icons.image,
          onFileSelected: _onFileUploaded,
          allowedExtensions: ['jpg', 'jpeg', 'png'],
          maxSizeInMB: 10.0,
          currentFilePath: _uploadedImagePath,
        ),
      ],
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSubSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            Container(
              width: 36,
              height: 36,
              decoration: BoxDecoration(
                color: const Color(0xFF1E3A8A).withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(icon, color: const Color(0xFF1E3A8A), size: 20),
            ),
            const SizedBox(width: 12),
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Color(0xFF1F2937),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ...children,
      ],
    );
  }

  Widget _buildModernDropdown({
    required String? value,
    required String label,
    required IconData icon,
    required List<String> items,
    required void Function(String?) onChanged,
    bool isRequired = true,
  }) {
    return DropdownButtonFormField<String>(
      value: value,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      items: items.map((String item) {
        return DropdownMenuItem<String>(
          value: item,
          child: Container(color: Colors.white, child: Text(item)),
        );
      }).toList(),
      onChanged: onChanged,
      validator: (selectedValue) {
        if (isRequired && (selectedValue == null || selectedValue.isEmpty)) {
          return 'Please select $label';
        }
        return null;
      },
      dropdownColor: Colors.white,
      style: const TextStyle(color: Colors.black87, fontSize: 16),
      icon: const Icon(Icons.arrow_drop_down, color: Colors.grey),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumber = false,
    bool isRequired = true,
    bool readOnly = false,
  }) {
    return TextFormField(
      controller: controller,
      readOnly: readOnly,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isNumber
          ? TextInputType.number
          : isPhone
          ? TextInputType.phone
          : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = DateFormat('yyyy-MM-dd').format(date);
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.white),
              ),
      ),
    );
  }

  Widget _buildEmptyPainterState() {
    return Container(
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Column(
        children: [
          Icon(Icons.people_outline, size: 64, color: Colors.grey.shade400),
          const SizedBox(height: 16),
          Text(
            'No Painters Added',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Colors.grey.shade600,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            'Add painters to include them in this expert meet claim',
            textAlign: TextAlign.center,
            style: TextStyle(fontSize: 14, color: Colors.grey.shade500),
          ),
        ],
      ),
    );
  }

  Widget _buildPainterCard(int index) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: const Color(0xFF1E3A8A).withOpacity(0.1)),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF1E3A8A).withOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header with painter number and delete button
          Row(
            children: [
              Container(
                width: 40,
                height: 40,
                decoration: BoxDecoration(
                  color: const Color(0xFF1E3A8A).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Center(
                  child: Text(
                    '${index + 1}',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF1E3A8A),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  'Painter ${index + 1}',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: const Color(0xFF1F2937),
                  ),
                ),
              ),
              IconButton(
                onPressed: () => _removePainter(index),
                icon: Icon(Icons.delete_outline, color: Colors.red.shade400),
                style: IconButton.styleFrom(
                  backgroundColor: Colors.red.shade50,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                tooltip: 'Remove Painter',
              ),
            ],
          ),
          const SizedBox(height: 20),
          // Form fields
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Mobile Number *',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.grey.shade700,
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      initialValue: _painters[index].mobileNo,
                      onChanged: (value) {
                        _painters[index].mobileNo = value;
                      },
                      keyboardType: TextInputType.phone,
                      decoration: InputDecoration(
                        hintText: 'Enter mobile number',
                        prefixIcon: Icon(
                          Icons.phone,
                          size: 20,
                          color: Colors.grey.shade600,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(
                            color: const Color(0xFF1E3A8A),
                            width: 2,
                          ),
                        ),
                        filled: true,
                        fillColor: Colors.grey.shade50,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 12,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Painter Type *',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.grey.shade700,
                      ),
                    ),
                    const SizedBox(height: 8),
                    DropdownButtonFormField<String>(
                      value: _painters[index].type,
                      items: ['Type A', 'Type B', 'Type C'].map((type) {
                        return DropdownMenuItem(value: type, child: Text(type));
                      }).toList(),
                      onChanged: (value) {
                        setState(() {
                          _painters[index].type = value!;
                        });
                      },
                      decoration: InputDecoration(
                        hintText: 'Select type',
                        prefixIcon: Icon(
                          Icons.category,
                          size: 20,
                          color: Colors.grey.shade600,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(color: Colors.grey.shade300),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(
                            color: const Color(0xFF1E3A8A),
                            width: 2,
                          ),
                        ),
                        filled: true,
                        fillColor: Colors.grey.shade50,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 12,
                        ),
                      ),
                      dropdownColor: Colors.white,
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          // Name field (full width)
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Painter Name *',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: Colors.grey.shade700,
                ),
              ),
              const SizedBox(height: 8),
              TextFormField(
                initialValue: _painters[index].name,
                onChanged: (value) {
                  _painters[index].name = value;
                },
                decoration: InputDecoration(
                  hintText: 'Enter painter name',
                  prefixIcon: Icon(
                    Icons.person,
                    size: 20,
                    color: Colors.grey.shade600,
                  ),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                    borderSide: BorderSide(
                      color: const Color(0xFF1E3A8A),
                      width: 2,
                    ),
                  ),
                  filled: true,
                  fillColor: Colors.grey.shade50,
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 12,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Expert Meet Claim Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Upload receipts for expense claims.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Painter model
class Painter {
  String mobileNo;
  String type;
  String name;
  Painter({required this.mobileNo, required this.type, required this.name});
}

// Activity Selection Dialog
class ActivitySelectionDialog extends StatelessWidget {
  final List<String> options;
  const ActivitySelectionDialog({Key? key, required this.options})
    : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: const Text(
              'Select Activity',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF1F2937),
              ),
            ),
          ),
          Expanded(
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: options.length,
              itemBuilder: (context, index) {
                return Container(
                  color: Colors.white,
                  child: ListTile(
                    title: Text(options[index]),
                    onTap: () {
                      Navigator.of(context).pop(options[index]);
                    },
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}














import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';

class DashboardScreen extends StatefulWidget {
  const DashboardScreen({super.key});

  @override
  State<DashboardScreen> createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen>
    with TickerProviderStateMixin {
  DateTime _startDate = DateTime.now().subtract(const Duration(days: 30));
  DateTime _endDate = DateTime.now();
  
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  final List<AnimationController> _cardControllers = [];
  final List<Animation<double>> _cardAnimations = [];

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    // Initialize card animations
    for (int i = 0; i < 4; i++) {
      final controller = AnimationController(
        duration: const Duration(milliseconds: 400),
        vsync: this,
      );
      final animation = CurvedAnimation(
        parent: controller,
        curve: Curves.easeOutCubic,
      );
      _cardControllers.add(controller);
      _cardAnimations.add(animation);
      // Stagger the card animations
      Future.delayed(Duration(milliseconds: 200 + (i * 100)), () {
        if (mounted) controller.forward();
      });
    }
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    for (var controller in _cardControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Set system UI overlay style
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
      ),
    );
    
    return Scaffold(
      backgroundColor: const Color(0xFFF8FAFC),
      appBar: _buildModernAppBar(),
      body: FadeTransition(
        opacity: _fadeAnimation,
        child: SlideTransition(
          position: _slideAnimation,
          child: Container(
            decoration: const BoxDecoration(
              color: Color(0xFFF8FAFC),
            ),
            child: LayoutBuilder(
              builder: (context, constraints) {
                final isMobile = constraints.maxWidth < 600;
                final isTablet = constraints.maxWidth >= 600 && constraints.maxWidth < 1200;
                final isDesktop = constraints.maxWidth >= 1200;
                
                return SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: ScaleTransition(
                    scale: _scaleAnimation,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Header with animation
                        _buildAnimatedHeader(),
                        const SizedBox(height: 32),
                        // Stats Cards
                        _buildStatsCards(isMobile, isTablet, isDesktop),
                        const SizedBox(height: 32),
                        // Registration Trends Chart
                        _buildRegistrationTrends(isMobile),
                        const SizedBox(height: 32),
                        // Recent Registrations
                        _buildRecentRegistrations(isMobile),
                        const SizedBox(height: 32),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: CustomBackButton(animated: false, size: 36),
            )
          : null,
      title: Text(
        'Dashboard',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Dashboard',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Welcome to your registration dashboard',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildStatsCards(bool isMobile, bool isTablet, bool isDesktop) {
    final stats = [
      {
        'title': 'Total Registrations',
        'value': '156',
        'icon': Icons.group_rounded,
        'color': Colors.blue,
        'change': '+12%',
        'isPositive': true,
      },
      {
        'title': 'Contractors',
        'value': '89',
        'icon': Icons.business_rounded,
        'color': Colors.blue,
        'change': '+8%',
        'isPositive': true,
      },
      {
        'title': 'Painters',
        'value': '67',
        'icon': Icons.format_paint_rounded,
        'color': Colors.blue,
        'change': '+15%',
        'isPositive': true,
      },
      {
        'title': 'Pending',
        'value': '12',
        'icon': Icons.pending_actions_rounded,
        'color': Colors.red,
        'change': '-3%',
        'isPositive': false,
      },
    ];
    
    if (isMobile) {
      // Mobile layout - single column
      return Column(
        children: List.generate(stats.length, (index) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: _buildStatCard(
              stats[index]['title'] as String,
              stats[index]['value'] as String,
              stats[index]['icon'] as IconData,
              stats[index]['color'] as Color,
              stats[index]['change'] as String,
              stats[index]['isPositive'] as bool,
              _cardAnimations[index],
            ),
          );
        }),
      );
    } else if (isTablet) {
      // Tablet layout - 2x2 grid
      return GridView.builder(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          childAspectRatio: 1.2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
        ),
        itemCount: stats.length,
        itemBuilder: (context, index) {
          return _buildStatCard(
            stats[index]['title'] as String,
            stats[index]['value'] as String,
            stats[index]['icon'] as IconData,
            stats[index]['color'] as Color,
            stats[index]['change'] as String,
            stats[index]['isPositive'] as bool,
            _cardAnimations[index],
          );
        },
      );
    } else {
      // Desktop layout - single row
      return Row(
        children: List.generate(stats.length, (index) {
          return Expanded(
            child: Padding(
              padding: EdgeInsets.only(
                right: index < stats.length - 1 ? 16 : 0,
              ),
              child: _buildStatCard(
                stats[index]['title'] as String,
                stats[index]['value'] as String,
                stats[index]['icon'] as IconData,
                stats[index]['color'] as Color,
                stats[index]['change'] as String,
                stats[index]['isPositive'] as bool,
                _cardAnimations[index],
              ),
            ),
          );
        }),
      );
    }
  }

  Widget _buildStatCard(
    String title,
    String value,
    IconData icon,
    Color color,
    String change,
    bool isPositive,
    Animation<double> animation,
  ) {
    return ScaleTransition(
      scale: animation,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.04),
              blurRadius: 16,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: color, size: 24),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 4,
                  ),
                  decoration: BoxDecoration(
                    color: isPositive
                        ? Colors.green.withOpacity(0.1)
                        : Colors.red.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(
                        isPositive
                            ? Icons.trending_up_rounded
                            : Icons.trending_down_rounded,
                        color: isPositive ? Colors.green : Colors.red,
                        size: 14,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        change,
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                          color: isPositive ? Colors.green : Colors.red,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey.shade600,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              value,
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRegistrationTrends(bool isMobile) {
    return _buildModernSection(
      title: 'Registration Trends',
      icon: Icons.bar_chart_rounded,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Expanded(
              child: OutlinedButton.icon(
                onPressed: _selectDateRange,
                icon: const Icon(Icons.date_range_rounded),
                label: Text(
                  '${_startDate.toString().split(' ')[0]} - ${_endDate.toString().split(' ')[0]}',
                ),
              ),
            ),
            if (!isMobile) const SizedBox(width: 16),
            if (!isMobile)
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _exportReport,
                  icon: const Icon(Icons.download_rounded),
                  label: const Text('Export Report'),
                ),
              ),
          ],
        ),
        const SizedBox(height: 24),
        Container(
          height: isMobile ? 250 : 300,
          decoration: BoxDecoration(
            color: const Color(0xFFF8FAFC),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey.shade200),
          ),
          child: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(
                  Icons.bar_chart_rounded,
                  size: 64,
                  color: Colors.grey,
                ),
                const SizedBox(height: 16),
                const Text(
                  'Registration Chart',
                  style: TextStyle(color: Colors.grey, fontSize: 16),
                ),
                const SizedBox(height: 8),
                Text(
                  'Visual representation of registration trends',
                  style: TextStyle(color: Colors.grey[500], fontSize: 14),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildRecentRegistrations(bool isMobile) {
    final registrations = [
      {
        'name': 'John Doe',
        'type': 'Contractor',
        'status': 'Approved',
        'date': DateTime.now().subtract(const Duration(days: 1)),
        'avatar': 'JD',
      },
      {
        'name': 'Ahmed Ali',
        'type': 'Painter',
        'status': 'Pending',
        'date': DateTime.now().subtract(const Duration(days: 2)),
        'avatar': 'AA',
      },
      {
        'name': 'Mohammed Khan',
        'type': 'Contractor',
        'status': 'Approved',
        'date': DateTime.now().subtract(const Duration(days: 3)),
        'avatar': 'MK',
      },
      {
        'name': 'Sara Johnson',
        'type': 'Painter',
        'status': 'Rejected',
        'date': DateTime.now().subtract(const Duration(days: 4)),
        'avatar': 'SJ',
      },
      {
        'name': 'Ali Hassan',
        'type': 'Contractor',
        'status': 'Approved',
        'date': DateTime.now().subtract(const Duration(days: 5)),
        'avatar': 'AH',
      },
    ];
    
    return _buildModernSection(
      title: 'Recent Registrations',
      icon: Icons.recent_actors_rounded,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Latest registration activities',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
            TextButton(
              onPressed: () => Navigator.pushNamed(context, '/approval-dashboard'),
              child: Text(
                'View All',
                style: TextStyle(
                  color: const Color(0xFF1E3A8A),
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ListView.separated(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: registrations.length,
          separatorBuilder: (context, index) => const Divider(),
          itemBuilder: (context, index) {
            final registration = registrations[index];
            final statusColor = registration['status'] == 'Approved'
                ? Colors.green
                : registration['status'] == 'Pending'
                ? Colors.orange
                : Colors.red;
                
            return ListTile(
              contentPadding: EdgeInsets.zero,
              leading: CircleAvatar(
                backgroundColor: const Color(0xFF1E3A8A).withOpacity(0.1),
                child: Text(
                  registration['avatar'] as String,
                  style: TextStyle(
                    color: const Color(0xFF1E3A8A),
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              title: Text(
                registration['name'] as String,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
              ),
              subtitle: Text(
                '${registration['type']} • ${registration['status']}',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey.shade600,
                ),
              ),
              trailing: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  const SizedBox(height: 4),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 6,
                      vertical: 2,
                    ),
                    decoration: BoxDecoration(
                      color: statusColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Text(
                      registration['status'] as String,
                      style: TextStyle(
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                        color: statusColor,
                      ),
                    ),
                  ),
                ],
              ),
              onTap: () {
                // Navigate to registration details
              },
            );
          },
        ),
      ],
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    title,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF1F2937),
                    ),
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Future<void> _selectDateRange() async {
    final picked = await showDateRangePicker(
      context: context,
      firstDate: DateTime(2020),
      lastDate: DateTime.now(),
      initialDateRange: DateTimeRange(start: _startDate, end: _endDate),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
          ),
          child: child!,
        );
      },
    );
    if (picked != null) {
      setState(() {
        _startDate = picked.start;
        _endDate = picked.end;
      });
    }
  }

  void _exportReport() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          'Report exported successfully',
          style: AppTheme.body.copyWith(color: Colors.white),
        ),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        backgroundColor: const Color(0xFF1E3A8A),
      ),
    );
  }
}




















import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';
import '../../../core/widgets/modern_dropdown.dart';

class ApprovalDashboardScreen extends StatefulWidget {
  const ApprovalDashboardScreen({super.key});

  @override
  State<ApprovalDashboardScreen> createState() =>
      _ApprovalDashboardScreenState();
}

class _ApprovalDashboardScreenState extends State<ApprovalDashboardScreen>
    with TickerProviderStateMixin {
  final List<Map<String, dynamic>> _pendingRegistrations = [
    {
      'id': 'REG001',
      'name': 'John Doe',
      'type': 'Contractor',
      'date': '2024-01-15',
      'status': 'Pending',
      'avatar': 'JD',
    },
    {
      'id': 'REG002',
      'name': 'Ahmed Ali',
      'type': 'Painter',
      'date': '2024-01-14',
      'status': 'Pending',
      'avatar': 'AA',
    },
    {
      'id': 'REG003',
      'name': 'Mohammed Khan',
      'type': 'Contractor',
      'date': '2024-01-13',
      'status': 'Pending',
      'avatar': 'MK',
    },
    {
      'id': 'REG004',
      'name': 'Sara Johnson',
      'type': 'Painter',
      'date': '2024-01-12',
      'status': 'Pending',
      'avatar': 'SJ',
    },
    {
      'id': 'REG005',
      'name': 'Ali Hassan',
      'type': 'Contractor',
      'date': '2024-01-11',
      'status': 'Pending',
      'avatar': 'AH',
    },
  ];

  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  final List<AnimationController> _cardControllers = [];
  final List<Animation<double>> _cardAnimations = [];
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> _filteredRegistrations = [];
  String _selectedFilter = 'All';

  @override
  void initState() {
    super.initState();
    _filteredRegistrations = List.from(_pendingRegistrations);
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    // Initialize card animations
    for (int i = 0; i < 3; i++) {
      final controller = AnimationController(
        duration: const Duration(milliseconds: 400),
        vsync: this,
      );
      final animation = CurvedAnimation(
        parent: controller,
        curve: Curves.easeOutCubic,
      );
      _cardControllers.add(controller);
      _cardAnimations.add(animation);
      // Stagger the card animations
      Future.delayed(Duration(milliseconds: 200 + (i * 100)), () {
        if (mounted) controller.forward();
      });
    }
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    _searchController.dispose();
    for (var controller in _cardControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Set system UI overlay style
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
      ),
    );
    
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (didPop, result) {
        if (!didPop) {
          Navigator.pushReplacementNamed(context, '/home');
        }
      },
      child: Scaffold(
        backgroundColor: const Color(0xFFF8FAFC),
        appBar: _buildModernAppBar(),
        body: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: Container(
              decoration: const BoxDecoration(
                color: Color(0xFFF8FAFC),
              ),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isMobile = constraints.maxWidth < 600;
                  final isTablet = constraints.maxWidth >= 600 && constraints.maxWidth < 1200;
                  final isDesktop = constraints.maxWidth >= 1200;
                  
                  return SingleChildScrollView(
                    padding: EdgeInsets.symmetric(
                      horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                      vertical: 24,
                    ),
                    child: ScaleTransition(
                      scale: _scaleAnimation,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Header with animation
                          _buildAnimatedHeader(),
                          const SizedBox(height: 32),
                          // Stats Cards
                          _buildStatsCards(isMobile, isTablet, isDesktop),
                          const SizedBox(height: 32),
                          // Search and Filter
                          _buildSearchAndFilter(isMobile),
                          const SizedBox(height: 32),
                          // Pending Registrations
                          _buildPendingRegistrations(isMobile),
                          const SizedBox(height: 32),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: CustomBackButton(animated: false, size: 36),
            )
          : null,
      title: Text(
        'Approval Dashboard',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Approval Dashboard',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Review and approve pending registrations',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildStatsCards(bool isMobile, bool isTablet, bool isDesktop) {
    final totalPending = _pendingRegistrations.length;
    final contractorsCount = _pendingRegistrations
        .where((r) => r['type'] == 'Contractor')
        .length;
    final paintersCount = _pendingRegistrations
        .where((r) => r['type'] == 'Painter')
        .length;
        
    final stats = [
      {
        'title': 'Total Pending',
        'value': totalPending.toString(),
        'icon': Icons.hourglass_top_rounded,
        'color': Colors.blue,
        'change': '+5%',
        'isPositive': true,
      },
      {
        'title': 'Contractors',
        'value': contractorsCount.toString(),
        'icon': Icons.business_rounded,
        'color': Colors.blue,
        'change': '+3%',
        'isPositive': true,
      },
      {
        'title': 'Painters',
        'value': paintersCount.toString(),
        'icon': Icons.format_paint_rounded,
        'color': Colors.blue,
        'change': '+8%',
        'isPositive': true,
      },
    ];
    
    if (isMobile) {
      // Mobile layout - single column
      return Column(
        children: List.generate(stats.length, (index) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: _buildStatCard(
              stats[index]['title'] as String,
              stats[index]['value'] as String,
              stats[index]['icon'] as IconData,
              stats[index]['color'] as Color,
              stats[index]['change'] as String,
              stats[index]['isPositive'] as bool,
              _cardAnimations[index],
            ),
          );
        }),
      );
    } else if (isTablet) {
      // Tablet layout - 2x2 grid
      return GridView.builder(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          childAspectRatio: 1.2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
        ),
        itemCount: stats.length,
        itemBuilder: (context, index) {
          return _buildStatCard(
            stats[index]['title'] as String,
            stats[index]['value'] as String,
            stats[index]['icon'] as IconData,
            stats[index]['color'] as Color,
            stats[index]['change'] as String,
            stats[index]['isPositive'] as bool,
            _cardAnimations[index],
          );
        },
      );
    } else {
      // Desktop layout - single row
      return Row(
        children: List.generate(stats.length, (index) {
          return Expanded(
            child: Padding(
              padding: EdgeInsets.only(
                right: index < stats.length - 1 ? 16 : 0,
              ),
              child: _buildStatCard(
                stats[index]['title'] as String,
                stats[index]['value'] as String,
                stats[index]['icon'] as IconData,
                stats[index]['color'] as Color,
                stats[index]['change'] as String,
                stats[index]['isPositive'] as bool,
                _cardAnimations[index],
              ),
            ),
          );
        }),
      );
    }
  }

  Widget _buildStatCard(
    String title,
    String value,
    IconData icon,
    Color color,
    String change,
    bool isPositive,
    Animation<double> animation,
  ) {
    return ScaleTransition(
      scale: animation,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.04),
              blurRadius: 16,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: color, size: 24),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 4,
                  ),
                  decoration: BoxDecoration(
                    color: isPositive
                        ? Colors.green.withOpacity(0.1)
                        : Colors.red.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(
                        isPositive
                            ? Icons.trending_up_rounded
                            : Icons.trending_down_rounded,
                        color: isPositive ? Colors.green : Colors.red,
                        size: 14,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        change,
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                          color: isPositive ? Colors.green : Colors.red,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey.shade600,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              value,
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSearchAndFilter(bool isMobile) {
    return _buildModernSection(
      title: 'Search & Filter',
      icon: Icons.search_rounded,
      children: [
        if (isMobile)
          Column(
            children: [
              TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  labelText: 'Search registrations',
                  prefixIcon: const Icon(Icons.search_rounded),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
                  ),
                  filled: true,
                  fillColor: const Color(0xFFF8FAFC),
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 16,
                  ),
                ),
                onChanged: _filterRegistrations,
              ),
              const SizedBox(height: 16),
              ModernDropdown(
                label: 'Filter by type',
                icon: Icons.filter_list,
                items: ['All', 'Contractor', 'Painter'],
                value: _selectedFilter,
                onChanged: (value) {
                  setState(() {
                    _selectedFilter = value!;
                    _filterRegistrations('');
                  });
                },
              ),
            ],
          )
        else
          Row(
            children: [
              Expanded(
                flex: 3,
                child: TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    labelText: 'Search registrations',
                    prefixIcon: const Icon(Icons.search_rounded),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
                    ),
                    filled: true,
                    fillColor: const Color(0xFFF8FAFC),
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 16,
                    ),
                  ),
                  onChanged: _filterRegistrations,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                flex: 2,
                child: ModernDropdown(
                  label: 'Filter by type',
                  icon: Icons.filter_list,
                  items: ['All', 'Contractor', 'Painter'],
                  value: _selectedFilter,
                  onChanged: (value) {
                    setState(() {
                      _selectedFilter = value!;
                      _filterRegistrations('');
                    });
                  },
                ),
              ),
            ],
          ),
      ],
    );
  }

  Widget _buildPendingRegistrations(bool isMobile) {
    return _buildModernSection(
      title: 'Pending Registrations',
      icon: Icons.pending_actions_rounded,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Registrations awaiting approval',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
            Text(
              '${_filteredRegistrations.length} items',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey.shade600,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        if (_filteredRegistrations.isEmpty)
          Container(
            height: 200,
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.grey.shade200),
            ),
            child: const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.search_off_rounded,
                    size: 64,
                    color: Colors.grey,
                  ),
                  SizedBox(height: 16),
                  Text(
                    'No registrations found',
                    style: TextStyle(color: Colors.grey, fontSize: 16),
                  ),
                ],
              ),
            ),
          )
        else
          ListView.separated(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: _filteredRegistrations.length,
            separatorBuilder: (context, index) => const Divider(),
            itemBuilder: (context, index) {
              final registration = _filteredRegistrations[index];
              return _buildRegistrationTile(registration);
            },
          ),
      ],
    );
  }

  Widget _buildRegistrationTile(Map<String, dynamic> registration) {
    return ListTile(
      contentPadding: EdgeInsets.zero,
      leading: CircleAvatar(
        backgroundColor: const Color(0xFF1E3A8A).withOpacity(0.1),
        child: Text(
          registration['avatar'] as String,
          style: TextStyle(
            color: const Color(0xFF1E3A8A),
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      title: Text(
        registration['name'] as String,
        style: const TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w500,
        ),
      ),
      subtitle: Text(
        '${registration['type']} • ${registration['date']}',
        style: TextStyle(
          fontSize: 14,
          color: Colors.grey.shade600,
        ),
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: Colors.orange.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              registration['status'] as String,
              style: const TextStyle(
                color: Colors.orange,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          const SizedBox(width: 8),
          Icon(Icons.chevron_right_rounded, color: Colors.grey.shade400),
        ],
      ),
      onTap: () {
        Navigator.pushNamed(
          context,
          '/registration-details',
          arguments: registration,
        );
      },
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    title,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF1F2937),
                    ),
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  void _filterRegistrations(String query) {
    setState(() {
      _filteredRegistrations = _pendingRegistrations.where((registration) {
        final name = registration['name'].toString().toLowerCase();
        final id = registration['id'].toString().toLowerCase();
        final type = registration['type'].toString().toLowerCase();
        final searchLower = query.toLowerCase();
        final matchesSearch =
            name.contains(searchLower) ||
            id.contains(searchLower) ||
            type.contains(searchLower);
        final matchesFilter =
            _selectedFilter == 'All' || registration['type'] == _selectedFilter;
        return matchesSearch && matchesFilter;
      }).toList();
    });
  }
}













import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/modern_dropdown.dart';

class SamplingDriveFormPage extends StatefulWidget {
  @override
  _SamplingDriveFormPageState createState() => _SamplingDriveFormPageState();
}

class _SamplingDriveFormPageState extends State<SamplingDriveFormPage>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  String? _photoImage;
  
  // Controllers for all fields
  final retailerController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final areaController = TextEditingController();
  final dateController = TextEditingController();
  final painterController = TextEditingController();
  final phoneController = TextEditingController();
  final skuController = TextEditingController();
  final qtyController = TextEditingController();
  final missedQtyController = TextEditingController();
  final reimbursementModeController = TextEditingController();
  final reimbursementAmtController = TextEditingController();
  
  bool _isSubmitting = false;
  
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    retailerController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    areaController.dispose();
    dateController.dispose();
    painterController.dispose();
    phoneController.dispose();
    skuController.dispose();
    qtyController.dispose();
    missedQtyController.dispose();
    reimbursementModeController.dispose();
    reimbursementAmtController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              // Submit Button
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: Column(
                children: [
                  // Sample Material Distribution
                  _buildModernSection(
                    title: 'Sample Material Distribution',
                    icon: Icons.inventory_2_outlined,
                    children: [
                      _buildModernTextField(
                        controller: retailerController,
                        label: 'Retailer',
                        icon: Icons.store_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: retailerCodeController,
                        label: 'Retailer Code',
                        icon: Icons.qr_code_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: distributorController,
                        label: 'Concern Distributor',
                        icon: Icons.business_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: areaController,
                        label: 'Area',
                        icon: Icons.location_city_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: dateController,
                        label: 'Date of Distribution',
                        icon: Icons.calendar_today_outlined,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  // Sample Proof
                  _buildModernSection(
                    title: 'Sample Proof',
                    icon: Icons.photo_camera_outlined,
                    children: [
                      FileUploadWidget(
                        label: 'Sample Photograph',
                        icon: Icons.camera_alt_outlined,
                        onFileSelected: (value) {
                          setState(() => _photoImage = value);
                        },
                        allowedExtensions: const ['jpg', 'jpeg', 'png'],
                        maxSizeInMB: 10.0,
                        currentFilePath: _photoImage,
                        formType: 'sampling',
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: Column(
                children: [
                  // Execution Details
                  _buildModernSection(
                    title: 'Execution Details',
                    icon: Icons.engineering_outlined,
                    children: [
                      _buildModernTextField(
                        controller: painterController,
                        label: 'Painter/Contractor Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: phoneController,
                        label: 'Contact Number',
                        icon: Icons.phone_outlined,
                        isPhone: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: skuController,
                        label: 'SKU / Size (kg)',
                        icon: Icons.format_list_numbered_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: qtyController,
                        label: 'Material Qty Distributed (Kg)',
                        icon: Icons.inventory_outlined,
                        isNumeric: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: missedQtyController,
                        label: 'Missed Quantity (if any)',
                        icon: Icons.error_outline_outlined,
                        isRequired: false,
                        isNumeric: true,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  // Reimbursement
                  _buildModernSection(
                    title: 'Reimbursement',
                    icon: Icons.payments_outlined,
                    children: [
                      ModernDropdown(
                        label: 'Reimbursement Mode',
                        icon: Icons.monetization_on_outlined,
                        items: [
                          'By Hired Painter: 250 AED',
                          'By Site Painter: 150 AED',
                        ],
                        value: reimbursementModeController.text.isEmpty
                            ? null
                            : reimbursementModeController.text,
                        onChanged: (String? value) {
                          setState(() {
                            reimbursementModeController.text = value ?? '';
                            // Auto-fill amount based on selection
                            if (value != null) {
                              if (value.contains('250')) {
                                reimbursementAmtController.text = '250';
                              } else if (value.contains('150')) {
                                reimbursementAmtController.text = '150';
                              }
                            }
                          });
                        },
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: reimbursementAmtController,
                        label: 'Amount Reimbursed',
                        icon: Icons.attach_money_outlined,
                        isNumeric: true,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Sample Material Distribution
        _buildModernSection(
          title: 'Sample Material Distribution',
          icon: Icons.inventory_2_outlined,
          children: [
            _buildModernTextField(
              controller: retailerController,
              label: 'Retailer',
              icon: Icons.store_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: areaController,
              label: 'Area',
              icon: Icons.location_city_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernDateField(
              controller: dateController,
              label: 'Date of Distribution',
              icon: Icons.calendar_today_outlined,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Execution Details
        _buildModernSection(
          title: 'Execution Details',
          icon: Icons.engineering_outlined,
          children: [
            _buildModernTextField(
              controller: painterController,
              label: 'Painter/Contractor Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: phoneController,
              label: 'Contact Number',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: skuController,
              label: 'SKU / Size (kg)',
              icon: Icons.format_list_numbered_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: qtyController,
              label: 'Material Qty Distributed (Kg)',
              icon: Icons.inventory_outlined,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: missedQtyController,
              label: 'Missed Quantity (if any)',
              icon: Icons.error_outline_outlined,
              isRequired: false,
              isNumeric: true,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Sample Proof
        _buildModernSection(
          title: 'Sample Proof',
          icon: Icons.photo_camera_outlined,
          children: [
            FileUploadWidget(
              label: 'Sample Photograph',
              icon: Icons.camera_alt_outlined,
              onFileSelected: (value) {
                setState(() => _photoImage = value);
              },
              allowedExtensions: const ['jpg', 'jpeg', 'png'],
              maxSizeInMB: 10.0,
              currentFilePath: _photoImage,
              formType: 'sampling',
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Reimbursement
        _buildModernSection(
          title: 'Reimbursement',
          icon: Icons.payments_outlined,
          children: [
            ModernDropdown(
              label: 'Reimbursement Mode',
              icon: Icons.monetization_on_outlined,
              items: [
                'By Hired Painter: 250 AED',
                'By Site Painter: 150 AED',
              ],
              value: reimbursementModeController.text.isEmpty
                  ? null
                  : reimbursementModeController.text,
              onChanged: (String? value) {
                setState(() {
                  reimbursementModeController.text = value ?? '';
                  // Auto-fill amount based on selection
                  if (value != null) {
                    if (value.contains('250')) {
                      reimbursementAmtController.text = '250';
                    } else if (value.contains('150')) {
                      reimbursementAmtController.text = '150';
                    }
                  }
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: reimbursementAmtController,
              label: 'Amount Reimbursed',
              icon: Icons.attach_money_outlined,
              isNumeric: true,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      title: Text(
        'WallCare Putty Sampling Drive',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Sampling Drive Form',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'WallCare Putty Sampling Drive by Employee',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumeric = false,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone
          ? TextInputType.phone
          : isNumeric
          ? TextInputType.number
          : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.save, size: 20),
                  const SizedBox(width: 12),
                  const Text(
                    'Submit',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Sampling Drive Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Reimbursement amount will be auto-filled based on the selected mode.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      // Simulate API call
      await Future.delayed(const Duration(seconds: 2));
      setState(() {
        _isSubmitting = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(child: Text('Sampling Entry Saved Successfully!')),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }
}














import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../core/widgets/modern_dropdown.dart';

class SampleDistributEntry extends StatefulWidget {
  @override
  _SampleDistributEntryState createState() => _SampleDistributEntryState();
}

class _SampleDistributEntryState extends State<SampleDistributEntry>
    with TickerProviderStateMixin {
  // Controllers
  final emiratesController = TextEditingController();
  final areaController = TextEditingController();
  final retailerNameController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final painterNameController = TextEditingController();
  final painterMobileController = TextEditingController();
  final skuSizeController = TextEditingController();
  final materialQtyController = TextEditingController();
  final distributionDateController = TextEditingController();
  
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  
  bool _isSubmitting = false;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    emiratesController.dispose();
    areaController.dispose();
    retailerNameController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    painterNameController.dispose();
    painterMobileController.dispose();
    skuSizeController.dispose();
    materialQtyController.dispose();
    distributionDateController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('emirates', emiratesController.text);
        await prefs.setString('area', areaController.text);
        await prefs.setString('retailerName', retailerNameController.text);
        await prefs.setString('retailerCode', retailerCodeController.text);
        await prefs.setString('distributor', distributorController.text);
        await prefs.setString('painterName', painterNameController.text);
        await prefs.setString('painterMobile', painterMobileController.text);
        await prefs.setString('skuSize', skuSizeController.text);
        await prefs.setString('materialQty', materialQtyController.text);
        await prefs.setString(
          'distributionDate',
          distributionDateController.text,
        );
        
        // Simulate API call
        await Future.delayed(const Duration(seconds: 2));
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text('Sample distribution data saved successfully!'),
                  ),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Error saving data: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              // Submit Button
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Retailer Details',
                icon: Icons.store_rounded,
                children: [
                  _buildModernTextField(
                    controller: emiratesController,
                    label: 'Emirates ID',
                    icon: Icons.badge_outlined,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Area',
                    icon: Icons.location_on_outlined,
                    items: const ['Area 1', 'Area 2', 'Area 3'],
                    value: areaController.text.isEmpty
                        ? null
                        : areaController.text,
                    onChanged: (value) {
                      setState(() {
                        areaController.text = value ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerNameController,
                    label: 'Retailer Name',
                    icon: Icons.store_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerCodeController,
                    label: 'Retailer Code',
                    icon: Icons.qr_code_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: distributorController,
                    label: 'Concern Distributor',
                    icon: Icons.business_outlined,
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: _buildModernSection(
                title: 'Distribution Details',
                icon: Icons.local_shipping_outlined,
                children: [
                  _buildModernTextField(
                    controller: painterNameController,
                    label: 'Name of Painter / Contractor',
                    icon: Icons.person_outline_rounded,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: painterMobileController,
                    label: 'Mobile no Painter / Contractor',
                    icon: Icons.phone_outlined,
                    isPhone: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'SKU Size (1/5 Kg)',
                    icon: Icons.inventory_2_outlined,
                    items: const ['1 Kg', '5 Kg'],
                    value: skuSizeController.text.isEmpty
                        ? null
                        : skuSizeController.text,
                    onChanged: (value) {
                      setState(() {
                        skuSizeController.text = value ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: materialQtyController,
                    label: 'Material distributed in Kg.',
                    icon: Icons.scale_outlined,
                    keyboardType: TextInputType.numberWithOptions(
                      decimal: true,
                    ),
                    inputFormatters: [
                      FilteringTextInputFormatter.allow(
                        RegExp(r'^\d*\.?\d*'),
                      ),
                    ],
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: distributionDateController,
                    label: 'Date of distribution',
                    icon: Icons.event_available_outlined,
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Retailer Details Section
        _buildModernSection(
          title: 'Retailer Details',
          icon: Icons.store_rounded,
          children: [
            _buildModernTextField(
              controller: emiratesController,
              label: 'Emirates ID',
              icon: Icons.badge_outlined,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Area',
              icon: Icons.location_on_outlined,
              items: const ['Area 1', 'Area 2', 'Area 3'],
              value: areaController.text.isEmpty
                  ? null
                  : areaController.text,
              onChanged: (value) {
                setState(() {
                  areaController.text = value ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerNameController,
              label: 'Retailer Name',
              icon: Icons.store_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Distribution Details Section
        _buildModernSection(
          title: 'Distribution Details',
          icon: Icons.local_shipping_outlined,
          children: [
            _buildModernTextField(
              controller: painterNameController,
              label: 'Name of Painter / Contractor',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: painterMobileController,
              label: 'Mobile no Painter / Contractor',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'SKU Size (1/5 Kg)',
              icon: Icons.inventory_2_outlined,
              items: const ['1 Kg', '5 Kg'],
              value: skuSizeController.text.isEmpty
                  ? null
                  : skuSizeController.text,
              onChanged: (value) {
                setState(() {
                  skuSizeController.text = value ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: materialQtyController,
              label: 'Material distributed in Kg.',
              icon: Icons.scale_outlined,
              keyboardType: TextInputType.numberWithOptions(
                decimal: true,
              ),
              inputFormatters: [
                FilteringTextInputFormatter.allow(
                  RegExp(r'^\d*\.?\d*'),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildModernDateField(
              controller: distributionDateController,
              label: 'Date of distribution',
              icon: Icons.event_available_outlined,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'Material Distribution',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Material Distribution',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter sample distribution details',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
    TextInputType? keyboardType,
    List<TextInputFormatter>? inputFormatters,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType:
          keyboardType ??
          (isPhone ? TextInputType.phone : TextInputType.text),
      inputFormatters: inputFormatters,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Distribution',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Distribution Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Ensure all distribution details are accurate before submission.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}














import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:web/web.dart' as web;
import 'dart:js_interop';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../../core/models/sample_lead_request.dart';
import '../../../core/services/sample_lead_service.dart';

@JS()
@staticInterop
class WindowWithGeoLocation {}

extension WindowGeoLocationExtension on WindowWithGeoLocation {
  external JSPromise<JSAny?> requestGeoPosition();
}

class NewProductEntry extends StatefulWidget {
  @override
  _NewProductEntryState createState() => _NewProductEntryState();
}

class _NewProductEntryState extends State<NewProductEntry>
    with TickerProviderStateMixin {
  // Controllers
  final areaController = TextEditingController();
  final cityDistrictController = TextEditingController();
  final pinCodeController = TextEditingController();
  final customerNameController = TextEditingController();
  final contractorNameController = TextEditingController();
  final mobileController = TextEditingController();
  final addressController = TextEditingController();
  final siteTypeController = TextEditingController();
  final sampleReceiverController = TextEditingController();
  final targetDateController = TextEditingController();
  final remarksController = TextEditingController();
  final regionController = TextEditingController();
  final latitudeController = TextEditingController();
  final longitudeController = TextEditingController();
  final samplingDateController = TextEditingController();
  final productController = TextEditingController();
  final expectedOrderController = TextEditingController();
  final sampleTypeController = TextEditingController();
  
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  
  bool _isSubmitting = false;
  bool _isGettingLocation = false;
  String? _uploadedFileName;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
    
    // Auto-fill location on load
    _initLocation();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    areaController.dispose();
    cityDistrictController.dispose();
    pinCodeController.dispose();
    customerNameController.dispose();
    contractorNameController.dispose();
    mobileController.dispose();
    addressController.dispose();
    siteTypeController.dispose();
    sampleReceiverController.dispose();
    targetDateController.dispose();
    remarksController.dispose();
    regionController.dispose();
    latitudeController.dispose();
    longitudeController.dispose();
    samplingDateController.dispose();
    productController.dispose();
    expectedOrderController.dispose();
    sampleTypeController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        // Create the sample lead request
        final request = SampleLeadRequest(
          area: areaController.text.isNotEmpty ? areaController.text : null,
          cityDistrict: cityDistrictController.text.isNotEmpty
              ? cityDistrictController.text
              : null,
          pinCode: pinCodeController.text.isNotEmpty
              ? pinCodeController.text
              : null,
          customerName: customerNameController.text.isNotEmpty
              ? customerNameController.text
              : null,
          contractorName: contractorNameController.text.isNotEmpty
              ? contractorNameController.text
              : null,
          mobileNumber: mobileController.text.isNotEmpty
              ? mobileController.text
              : null,
          address: addressController.text.isNotEmpty
              ? addressController.text
              : null,
          siteType: siteTypeController.text.isNotEmpty
              ? siteTypeController.text
              : null,
          sampleLocalReceivedPerson: sampleReceiverController.text.isNotEmpty
              ? sampleReceiverController.text
              : null,
          targetDateOfConversion: targetDateController.text.isNotEmpty
              ? targetDateController.text
              : null,
          remarks: remarksController.text.isNotEmpty
              ? remarksController.text
              : null,
          regionOfConstruction: regionController.text.isNotEmpty
              ? regionController.text
              : null,
          latitude: latitudeController.text.isNotEmpty
              ? latitudeController.text
              : null,
          longitude: longitudeController.text.isNotEmpty
              ? longitudeController.text
              : null,
          samplingDate: samplingDateController.text.isNotEmpty
              ? samplingDateController.text
              : null,
          product: productController.text.isNotEmpty
              ? productController.text
              : null,
          siteMaterialExpectedOrder: expectedOrderController.text.isNotEmpty
              ? expectedOrderController.text
              : null,
          sampleType: sampleTypeController.text.isNotEmpty
              ? sampleTypeController.text
              : null,
        );
        
        // Submit to API
        final response = await SampleLeadService.registerSampleLead(request);
        if (mounted) {
          if (response.success) {
            // Save to local storage as backup
            final prefs = await SharedPreferences.getInstance();
            await prefs.setString('area', areaController.text);
            await prefs.setString('cityDistrict', cityDistrictController.text);
            await prefs.setString('pinCode', pinCodeController.text);
            await prefs.setString('customerName', customerNameController.text);
            await prefs.setString(
              'contractorName',
              contractorNameController.text,
            );
            await prefs.setString('mobile', mobileController.text);
            await prefs.setString('address', addressController.text);
            await prefs.setString('siteType', siteTypeController.text);
            await prefs.setString(
              'sampleReceiver',
              sampleReceiverController.text,
            );
            await prefs.setString('targetDate', targetDateController.text);
            await prefs.setString('remarks', remarksController.text);
            await prefs.setString('region', regionController.text);
            await prefs.setString('latitude', latitudeController.text);
            await prefs.setString('longitude', longitudeController.text);
            await prefs.setString('samplingDate', samplingDateController.text);
            await prefs.setString('product', productController.text);
            await prefs.setString(
              'expectedOrder',
              expectedOrderController.text,
            );
            await prefs.setString('sampleType', sampleTypeController.text);
            
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    Icon(Icons.check_circle, color: Colors.white, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(response.message),
                          if (response.documentNumber != null)
                            Text(
                              'Document Number: ${response.documentNumber}',
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                        ],
                      ),
                    ),
                  ],
                ),
                backgroundColor: Colors.green,
                behavior: SnackBarBehavior.floating,
                duration: Duration(seconds: 5),
              ),
            );
          } else {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    Icon(Icons.error, color: Colors.white, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(response.message),
                          if (response.error != null)
                            Text(
                              'Error: ${response.error}',
                              style: TextStyle(fontSize: 12),
                            ),
                        ],
                      ),
                    ),
                  ],
                ),
                backgroundColor: Colors.red,
                behavior: SnackBarBehavior.floating,
                duration: Duration(seconds: 5),
              ),
            );
          }
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Unexpected error: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  // --- GEOLOCATION (using web JavaScript helper from index.html) ---
  Future<void> _initLocation() async {
    setState(() => _isGettingLocation = true);
    try {
      await _getWebLocation();
    } catch (e) {
      _toast('Could not fetch location: $e');
    } finally {
      if (mounted) setState(() => _isGettingLocation = false);
    }
  }

  Future<void> _getWebLocation() async {
    try {
      // First try to get from localStorage (cached values from index.html)
      final lastLat = web.window.localStorage.getItem('lastLat');
      final lastLng = web.window.localStorage.getItem('lastLng');
      if (lastLat != null && lastLng != null && mounted) {
        latitudeController.text = double.parse(lastLat).toStringAsFixed(6);
        longitudeController.text = double.parse(lastLng).toStringAsFixed(6);
      }
      
      // Use the JavaScript geolocation helper from index.html
      final jsWindow = web.window as WindowWithGeoLocation;
      final result = await jsWindow.requestGeoPosition().toDart;
      if (result != null) {
        // Convert JSAny to proper Dart object
        final resultDart = result.dartify();
        if (resultDart is Map<String, dynamic>) {
          if (resultDart['ok'] == true) {
            if (mounted) {
              final lat = resultDart['lat'] as num?;
              final lng = resultDart['lng'] as num?;
              if (lat != null && lng != null) {
                latitudeController.text = lat.toStringAsFixed(6);
                longitudeController.text = lng.toStringAsFixed(6);
              }
            }
          } else {
            final error = resultDart['error']?.toString() ?? 'Unknown error';
            _toast('Web geolocation failed: $error');
          }
        }
      }
    } catch (e) {
      _toast('Web geolocation error: $e');
    }
  }

  void _captureLocation() {
    // Location capture logic - now calls the web location
    _initLocation();
  }

  void _toast(String msg) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg), behavior: SnackBarBehavior.floating),
    );
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              // Submit Button
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Site Details',
                icon: Icons.location_city_rounded,
                children: [
                  ModernDropdown(
                    label: 'Area',
                    icon: Icons.location_on_outlined,
                    items: const ['Area 1', 'Area 2', 'Area 3'],
                    value: areaController.text.isEmpty
                        ? null
                        : areaController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        areaController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'City and District',
                    icon: Icons.location_city_outlined,
                    items: ['City 1', 'City 2', 'City 3'],
                    value: cityDistrictController.text.isEmpty
                        ? null
                        : cityDistrictController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        cityDistrictController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: pinCodeController,
                    label: 'Pin Code',
                    icon: Icons.pin_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: customerNameController,
                    label: 'Customer Name',
                    icon: Icons.person_outline_rounded,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: contractorNameController,
                    label: 'Contractor/Purchase Name',
                    icon: Icons.business_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: mobileController,
                    label: 'Mobile',
                    icon: Icons.phone_outlined,
                    isPhone: true,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: addressController,
                    label: 'Address',
                    icon: Icons.home_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Site Type',
                    icon: Icons.domain_outlined,
                    items: ['Type 1', 'Type 2', 'Type 3'],
                    value: siteTypeController.text.isEmpty
                        ? null
                        : siteTypeController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        siteTypeController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Sample Local Received Person',
                    icon: Icons.person_search_outlined,
                    items: ['Person 1', 'Person 2', 'Person 3'],
                    value: sampleReceiverController.text.isEmpty
                        ? null
                        : sampleReceiverController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        sampleReceiverController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: targetDateController,
                    label: 'Target Date of Conversion',
                    icon: Icons.event_available_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: remarksController,
                    label: 'Remarks',
                    icon: Icons.note_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Region of Construction',
                    icon: Icons.map_outlined,
                    items: ['Region 1', 'Region 2', 'Region 3'],
                    value: regionController.text.isEmpty
                        ? null
                        : regionController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        regionController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  Column(
                    children: [
                      _buildModernTextField(
                        controller: latitudeController,
                        label: 'Latitude',
                        icon: Icons.my_location_outlined,
                        isRequired: false,
                        suffix: IconButton(
                          tooltip: 'Refresh location',
                          icon: const Icon(Icons.gps_fixed),
                          onPressed: _isGettingLocation
                              ? null
                              : () async {
                                  HapticFeedback.selectionClick();
                                  await _initLocation();
                                },
                        ),
                      ),
                      const SizedBox(height: 24),
                      _buildModernTextField(
                        controller: longitudeController,
                        label: 'Longitude',
                        icon: Icons.my_location_outlined,
                        isRequired: false,
                        suffix: IconButton(
                          tooltip: 'Refresh location',
                          icon: const Icon(Icons.gps_fixed),
                          onPressed: _isGettingLocation
                              ? null
                              : () async {
                                  HapticFeedback.selectionClick();
                                  await _initLocation();
                                },
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      const Icon(
                        Icons.info_outline,
                        size: 16,
                        color: Colors.grey,
                      ),
                      const SizedBox(width: 6),
                      Expanded(
                        child: Text(
                          _isGettingLocation
                              ? 'Fetching GPS…'
                              : (latitudeController.text.isEmpty ||
                                    longitudeController.text.isEmpty)
                              ? 'Tap the GPS icon if fields are empty.'
                              : 'Coordinates captured from your device GPS.',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey.shade700,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: _buildModernSection(
                title: 'Sampling Details',
                icon: Icons.science_outlined,
                children: [
                  _buildModernDateField(
                    controller: samplingDateController,
                    label: 'Sampling Date',
                    icon: Icons.calendar_today_outlined,
                    isRequired: false,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Product',
                    icon: Icons.inventory_2_outlined,
                    items: ['Product 1', 'Product 2', 'Product 3'],
                    value: productController.text.isEmpty
                        ? null
                        : productController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        productController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: expectedOrderController,
                    label: 'Site Material Expected Order (kg)',
                    icon: Icons.scale_outlined,
                    isRequired: false,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Sample Type',
                    icon: Icons.category_outlined,
                    items: ['Type A', 'Type B', 'Type C'],
                    value: sampleTypeController.text.isEmpty
                        ? null
                        : sampleTypeController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        sampleTypeController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  FileUploadWidget(
                    label: 'Sample Photo',
                    icon: Icons.camera_alt_outlined,
                    onFileSelected: (value) =>
                        setState(() => _uploadedFileName = value),
                    allowedExtensions: const ['jpg', 'jpeg', 'png'],
                    maxSizeInMB: 5.0,
                    currentFilePath: _uploadedFileName,
                    formType: 'product_entry',
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Site Details Section
        _buildModernSection(
          title: 'Site Details',
          icon: Icons.location_city_rounded,
          children: [
            ModernDropdown(
              label: 'Area',
              icon: Icons.location_on_outlined,
              items: const ['Area 1', 'Area 2', 'Area 3'],
              value: areaController.text.isEmpty
                  ? null
                  : areaController.text,
              onChanged: (String? newValue) {
                setState(() {
                  areaController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'City and District',
              icon: Icons.location_city_outlined,
              items: ['City 1', 'City 2', 'City 3'],
              value: cityDistrictController.text.isEmpty
                  ? null
                  : cityDistrictController.text,
              onChanged: (String? newValue) {
                setState(() {
                  cityDistrictController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: pinCodeController,
              label: 'Pin Code',
              icon: Icons.pin_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: customerNameController,
              label: 'Customer Name',
              icon: Icons.person_outline_rounded,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: contractorNameController,
              label: 'Contractor/Purchase Name',
              icon: Icons.business_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: mobileController,
              label: 'Mobile',
              icon: Icons.phone_outlined,
              isPhone: true,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: addressController,
              label: 'Address',
              icon: Icons.home_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Site Type',
              icon: Icons.domain_outlined,
              items: ['Type 1', 'Type 2', 'Type 3'],
              value: siteTypeController.text.isEmpty
                  ? null
                  : siteTypeController.text,
              onChanged: (String? newValue) {
                setState(() {
                  siteTypeController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Sample Local Received Person',
              icon: Icons.person_search_outlined,
              items: ['Person 1', 'Person 2', 'Person 3'],
              value: sampleReceiverController.text.isEmpty
                  ? null
                  : sampleReceiverController.text,
              onChanged: (String? newValue) {
                setState(() {
                  sampleReceiverController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernDateField(
              controller: targetDateController,
              label: 'Target Date of Conversion',
              icon: Icons.event_available_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: remarksController,
              label: 'Remarks',
              icon: Icons.note_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Region of Construction',
              icon: Icons.map_outlined,
              items: ['Region 1', 'Region 2', 'Region 3'],
              value: regionController.text.isEmpty
                  ? null
                  : regionController.text,
              onChanged: (String? newValue) {
                setState(() {
                  regionController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            Column(
              children: [
                _buildModernTextField(
                  controller: latitudeController,
                  label: 'Latitude',
                  icon: Icons.my_location_outlined,
                  isRequired: false,
                  suffix: IconButton(
                    tooltip: 'Refresh location',
                    icon: const Icon(Icons.gps_fixed),
                    onPressed: _isGettingLocation
                        ? null
                        : () async {
                            HapticFeedback.selectionClick();
                            await _initLocation();
                          },
                  ),
                ),
                const SizedBox(height: 24),
                _buildModernTextField(
                  controller: longitudeController,
                  label: 'Longitude',
                  icon: Icons.my_location_outlined,
                  isRequired: false,
                  suffix: IconButton(
                    tooltip: 'Refresh location',
                    icon: const Icon(Icons.gps_fixed),
                    onPressed: _isGettingLocation
                        ? null
                        : () async {
                            HapticFeedback.selectionClick();
                            await _initLocation();
                          },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                const Icon(
                  Icons.info_outline,
                  size: 16,
                  color: Colors.grey,
                ),
                const SizedBox(width: 6),
                Expanded(
                  child: Text(
                    _isGettingLocation
                        ? 'Fetching GPS…'
                        : (latitudeController.text.isEmpty ||
                              longitudeController.text.isEmpty)
                        ? 'Tap the GPS icon if fields are empty.'
                        : 'Coordinates captured from your device GPS.',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade700,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Sampling Details Section
        _buildModernSection(
          title: 'Sampling Details',
          icon: Icons.science_outlined,
          children: [
            _buildModernDateField(
              controller: samplingDateController,
              label: 'Sampling Date',
              icon: Icons.calendar_today_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Product',
              icon: Icons.inventory_2_outlined,
              items: ['Product 1', 'Product 2', 'Product 3'],
              value: productController.text.isEmpty
                  ? null
                  : productController.text,
              onChanged: (String? newValue) {
                setState(() {
                  productController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: expectedOrderController,
              label: 'Site Material Expected Order (kg)',
              icon: Icons.scale_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Sample Type',
              icon: Icons.category_outlined,
              items: ['Type A', 'Type B', 'Type C'],
              value: sampleTypeController.text.isEmpty
                  ? null
                  : sampleTypeController.text,
              onChanged: (String? newValue) {
                setState(() {
                  sampleTypeController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            FileUploadWidget(
              label: 'Sample Photo',
              icon: Icons.camera_alt_outlined,
              onFileSelected: (value) =>
                  setState(() => _uploadedFileName = value),
              allowedExtensions: const ['jpg', 'jpeg', 'png'],
              maxSizeInMB: 5.0,
              currentFilePath: _uploadedFileName,
              formType: 'product_entry',
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'New Sample Product Entry',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'New Sample Product Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter sample product details and capture location',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
    Widget? suffix,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: suffix,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone ? TextInputType.number : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[0-9]+$').hasMatch(value)) {
            return 'Please enter valid number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Entry',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Entry Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'You can capture location automatically and upload sample photos.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}













import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:intl/intl.dart';
import '../../../core/widgets/modern_dropdown.dart';

class IncentiveSchemeFormPage extends StatefulWidget {
  @override
  _IncentiveSchemeFormPageState createState() =>
      _IncentiveSchemeFormPageState();
}

class _IncentiveSchemeFormPageState extends State<IncentiveSchemeFormPage>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  
  // Section selection
  String selectedRole = 'Retailer'; // Default
  final List<String> roleOptions = [
    'Retailer',
    'Purchase Manager',
    'Salesman',
    'Contractor/Painter',
  ];
  
  // Field controllers
  final nameController = TextEditingController();
  final phoneController = TextEditingController();
  final channelPartnerController = TextEditingController();
  final invoiceController = TextEditingController();
  final qtyController = TextEditingController();
  final monthController = TextEditingController();
  final remarksController = TextEditingController();
  
  // Animation controllers
  bool _isSubmitting = false;
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    nameController.dispose();
    phoneController.dispose();
    channelPartnerController.dispose();
    invoiceController.dispose();
    qtyController.dispose();
    monthController.dispose();
    remarksController.dispose();
    super.dispose();
  }

  // Edge case logic
  String? validateQty(String? value) {
    if (value == null || value.isEmpty) return 'Enter bag quantity';
    final int? qty = int.tryParse(value);
    if (qty == null || qty < 1) return 'Enter a valid positive number';
    if (qty > 1000) return 'Exceeded max monthly limit (1000 bags)';
    return null;
  }

  String benefitPerBag(String role) {
    switch (role) {
      case 'Retailer':
        return '1 AED/bag';
      case 'Purchase Manager':
        return '0.5 AED/bag';
      case 'Salesman':
        return '1 AED/bag';
      case 'Contractor/Painter':
        return '1 AED/bag';
      default:
        return '';
    }
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Beneficiary Type Section
                              _buildModernSection(
                                title: 'Beneficiary Type',
                                icon: Icons.group_outlined,
                                children: [
                                  ModernDropdown(
                                    label: 'Select Role',
                                    icon: Icons.person_outline_rounded,
                                    items: roleOptions,
                                    value: selectedRole,
                                    onChanged: (value) => setState(
                                      () => selectedRole = value ?? 'Retailer',
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 24),
                              // Exchange Details Section (conditionally rendered)
                              if (selectedRole.isNotEmpty) ...[
                                _buildModernSection(
                                  title: 'Exchange Details',
                                  icon: Icons.swap_horiz_outlined,
                                  children: [
                                    _buildModernTextField(
                                      controller: nameController,
                                      label: '$selectedRole Name',
                                      icon: Icons.person_outline_rounded,
                                    ),
                                    const SizedBox(height: 20),
                                    _buildModernTextField(
                                      controller: phoneController,
                                      label: 'Contact Number',
                                      icon: Icons.phone_outlined,
                                      isPhone: true,
                                    ),
                                    const SizedBox(height: 20),
                                    _buildModernTextField(
                                      controller: channelPartnerController,
                                      label: 'Channel Partner Name',
                                      icon: Icons.business_outlined,
                                    ),
                                    const SizedBox(height: 20),
                                    _buildModernTextField(
                                      controller: invoiceController,
                                      label: 'Invoice / Supporting Doc No.',
                                      icon: Icons.receipt_long_outlined,
                                    ),
                                    const SizedBox(height: 20),
                                    _buildModernDateField(
                                      controller: monthController,
                                      label: 'Month',
                                      icon: Icons.calendar_today_outlined,
                                    ),
                                    const SizedBox(height: 20),
                                    _buildModernTextField(
                                      controller: qtyController,
                                      label: 'Material Quantity (Bags)',
                                      icon: Icons.inventory_2_outlined,
                                      isNumeric: true,
                                      validator: validateQty,
                                    ),
                                    const SizedBox(height: 20),
                                    _buildModernTextField(
                                      controller: remarksController,
                                      label: 'Remarks',
                                      icon: Icons.notes_outlined,
                                      isRequired: false,
                                    ),
                                    const SizedBox(height: 20),
                                    // Display dynamic benefit per bag info
                                    Container(
                                      padding: const EdgeInsets.all(16),
                                      decoration: BoxDecoration(
                                        color: Colors.green.shade50,
                                        borderRadius: BorderRadius.circular(12),
                                        border: Border.all(
                                          color: Colors.green.shade300,
                                          width: 1,
                                        ),
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            Icons.info_outline_rounded,
                                            color: Colors.green.shade700,
                                            size: 24,
                                          ),
                                          const SizedBox(width: 12),
                                          Expanded(
                                            child: Text(
                                              'Scheme Benefit: ${benefitPerBag(selectedRole)}',
                                              style: TextStyle(
                                                color: Colors.green.shade700,
                                                fontWeight: FontWeight.bold,
                                                fontSize: 16,
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                                const SizedBox(height: 32),
                                // Submit Button
                                _buildAnimatedSubmitButton(),
                                const SizedBox(height: 48),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      title: Text(
        'Incentive Scheme & Reimbursement',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Incentive Scheme',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Register for incentive benefits',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumeric = false,
    bool isRequired = true,
    String? Function(String?)? validator,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone
          ? TextInputType.phone
          : isNumeric
          ? TextInputType.number
          : TextInputType.text,
      validator:
          validator ??
          (value) {
            if (isRequired && (value == null || value.trim().isEmpty)) {
              return 'Please enter $label';
            }
            if (isPhone && value != null && value.isNotEmpty) {
              if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
                return 'Please enter valid UAE mobile number';
              }
            }
            return null;
          },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          // Format as month and year only
          final monthFormatter = DateFormat('MMMM yyyy');
          controller.text = monthFormatter.format(date);
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Incentive Scheme Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'The benefit amount varies based on the selected role. '
                'High quantity entries (>500 bags) will trigger a verification alert.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      final qty = int.tryParse(qtyController.text) ?? 0;
      
      // Edge case: Large quantity alert
      if (qty > 500) {
        showDialog(
          context: context,
          builder: (ctx) => AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            title: Row(
              children: [
                Icon(Icons.warning_amber_rounded, color: Colors.orange),
                const SizedBox(width: 8),
                const Text('High Entry Alert'),
              ],
            ),
            content: Text(
              'You entered a high monthly bag count ($qty). Please verify before proceeding!',
              style: const TextStyle(fontSize: 16),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(ctx),
                child: const Text('Cancel'),
              ),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(ctx);
                  _processSubmission();
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF1E3A8A),
                  foregroundColor: Colors.white,
                ),
                child: const Text('Confirm'),
              ),
            ],
          ),
        );
        return;
      }
      
      _processSubmission();
    }
  }

  void _processSubmission() async {
    setState(() {
      _isSubmitting = true;
    });
    
    // Simulate API call
    await Future.delayed(const Duration(seconds: 2));
    
    setState(() {
      _isSubmitting = false;
    });
    
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: const Row(
            children: [
              Icon(Icons.check_circle, color: Colors.white, size: 20),
              SizedBox(width: 8),
              Expanded(child: Text('Sales Entry Saved Successfully!')),
            ],
          ),
          backgroundColor: Colors.green,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }
}
