using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UniversalOutletsRegistrationController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public UniversalOutletsRegistrationController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("createRetailer")]
        public IActionResult CreateRetailer([FromBody] RetailerRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.MobileNo) || string.IsNullOrWhiteSpace(request.PanNo))
            {
                return BadRequest("Mobile number and PAN number are required.");
            }

            try
            {
                string sql = @"INSERT INTO rtmUniVsRtl (itxPanNo, gstnNumb, mobileNo, areaCode, retlName, contName, mrktName, wcPotnsl, wcpPtnsl, retlAdd1, retlAdd2, retlAdd3, cityName, location, concEmpl, district, retlPinC, latitute, lgtitute, isActive, createId, createDt) 
                              VALUES (@PanNo, @GstNo, @MobileNo, @AreaCode, @RetailerName, @ContactName, @MarketName, @WcPotential, @WcpPotential, @Address1, @Address2, @Address3, @CityName, @Location, @ConcernEmployee, @District, @PinCode, @Latitude, @Longitude, 'Y', @CreatedBy, GETDATE());";

                var parameters = new Dictionary<string, object>
                {
                    { "@PanNo", request.PanNo },
                    { "@GstNo", request.GstNo ?? (object)DBNull.Value },
                    { "@MobileNo", request.MobileNo },
                    { "@AreaCode", request.AreaCode },
                    { "@RetailerName", request.RetailerName },
                    { "@ContactName", request.ContactName },
                    { "@MarketName", request.MarketName },
                    { "@WcPotential", request.WcPotential },
                    { "@WcpPotential", request.WcpPotential },
                    { "@Address1", request.Address1 },
                    { "@Address2", request.Address2 ?? string.Empty },
                    { "@Address3", request.Address3 ?? string.Empty },
                    { "@CityName", request.CityName },
                    { "@Location", request.Location },
                    { "@ConcernEmployee", request.ConcernEmployee },
                    { "@District", request.District },
                    { "@PinCode", request.PinCode },
                    { "@Latitude", request.Latitude },
                    { "@Longitude", request.Longitude },
                    { "@CreatedBy", User.Identity?.Name ?? "UNKNOWN" }
                };

                _dbHelper.ExecuteCommandPublic(_dbHelper.BwliveConnectionString, sql, parameters);

                return Ok("Retailer created successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost("uploadImage")]
        public IActionResult UploadImage([FromBody] ImageUploadRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.DocumentNumber) || string.IsNullOrWhiteSpace(request.ImageData))
            {
                return BadRequest("Document number and image data are required.");
            }

            try
            {
                string sql = @"INSERT INTO imagedata.dbo.cotGenAttch (attFilKy, statFlag, createId, createDt) 
                              VALUES (@DocumentNumber, 'A', @CreatedBy, GETDATE());";

                var parameters = new Dictionary<string, object>
                {
                    { "@DocumentNumber", request.DocumentNumber },
                    { "@CreatedBy", User.Identity?.Name ?? "UNKNOWN" }
                };

                _dbHelper.ExecuteCommandPublic(_dbHelper.BwliveConnectionString, sql, parameters);

                return Ok("Image uploaded successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("validatePan")]
        public IActionResult ValidatePan([FromQuery] string panNo)
        {
            if (string.IsNullOrWhiteSpace(panNo))
            {
                return BadRequest("PAN number is required.");
            }

            try
            {
                string sql = "SELECT COUNT(*) FROM rtmUniVsRtl WHERE itxPanNo = @PanNo";
                var parameters = new Dictionary<string, object>
                {
                    { "@PanNo", panNo }
                };

                var result = _dbHelper.ExecuteSelectQueryPublic(_dbHelper.BwliveConnectionString, sql, parameters);

                if (result is List<Dictionary<string, object>> rows && rows.Count > 0 && Convert.ToInt32(rows[0].Values.First()) > 0)
                {
                    return BadRequest("PAN number already exists.");
                }

                return Ok("PAN number is valid.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }

    public class RetailerRequest
    {
        public string PanNo { get; set; }
        public string GstNo { get; set; }
        public string MobileNo { get; set; }
        public string AreaCode { get; set; }
        public string RetailerName { get; set; }
        public string ContactName { get; set; }
        public string MarketName { get; set; }
        public decimal WcPotential { get; set; }
        public decimal WcpPotential { get; set; }
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string Address3 { get; set; }
        public string CityName { get; set; }
        public string Location { get; set; }
        public string ConcernEmployee { get; set; }
        public string District { get; set; }
        public string PinCode { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    public class ImageUploadRequest
    {
        public string DocumentNumber { get; set; }
        public string ImageData { get; set; }
    }
}
