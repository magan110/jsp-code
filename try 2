// File: DsrModule.cs
// ===========================================
// This single C# file defines:
//  1) JsonDateConverter / JsonNullableDateConverter
//  2) The DsrRequest model (with conditional validation)
//  3) The DsrVisitController (API endpoint, with full SQL logic)
// ===========================================

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;

namespace MyApp
{
    // 1) DATE CONVERTERS
    public class JsonDateConverter : JsonConverter<DateTime>
    {
        private static readonly string[] Formats = { "dd/MM/yyyy", "yyyy-MM-dd" };
        public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var s = reader.GetString()!;
            return DateTime.ParseExact(
                s,
                Formats,
                CultureInfo.InvariantCulture,
                DateTimeStyles.AssumeLocal | DateTimeStyles.AllowWhiteSpaces
            );
        }
        public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(Formats[0], CultureInfo.InvariantCulture));
    }

    public class JsonNullableDateConverter : JsonConverter<DateTime?>
    {
        private static readonly string[] Formats = { "dd/MM/yyyy", "yyyy-MM-dd" };
        public override DateTime? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var s = reader.GetString();
            if (string.IsNullOrWhiteSpace(s)) return null;
            return DateTime.ParseExact(
                s,
                Formats,
                CultureInfo.InvariantCulture,
                DateTimeStyles.AssumeLocal | DateTimeStyles.AllowWhiteSpaces
            );
        }
        public override void Write(Utf8JsonWriter writer, DateTime? value, JsonSerializerOptions options)
            => writer.WriteStringValue(value?.ToString(Formats[0], CultureInfo.InvariantCulture));
    }


    // 2) REQUEST MODEL WITH CONDITIONAL VALIDATION
    public class DsrRequest : IValidatableObject
    {
        // Header
        [Required] public string ProcType   { get; set; }
        [Required] public string DocuNumb   { get; set; }
        [Required] public string DsrParam   { get; set; }
        [Required] public string CusRtlFl   { get; set; }
        [Required] public string AreaCode   { get; set; }
        [Required] public string CusRtlCd   { get; set; }
                 public string KycStatus  { get; set; }

        [Required]
        [JsonConverter(typeof(JsonDateConverter))]
        public DateTime ReportDate { get; set; }

        public string MarketName { get; set; }
        public string PrtDsCnt   { get; set; }
        public string PendIsue   { get; set; }
        public string PndIsuDt   { get; set; }
        public string IsuDetal   { get; set; }

        // Slabs & Stocks
        public decimal WcErlSlb  { get; set; }
        public decimal WpErlSlb  { get; set; }
        public decimal VpErlSlb  { get; set; }
        public decimal BwStkWcc  { get; set; }
        public decimal BwStkWcp  { get; set; }
        public decimal BwStkVap  { get; set; }

        // Industry volumes & averages
        public string SlWcVlum  { get; set; }
        public string SlWpVlum  { get; set; }
        public string JkAvgWcc  { get; set; }
        public string JkAvgWcp  { get; set; }
        public string AsAvgWcc  { get; set; }
        public string AsAvgWcp  { get; set; }
        public string OtAvgWcc  { get; set; }
        public string OtAvgWcp  { get; set; }

        [JsonConverter(typeof(JsonNullableDateConverter))]
        public DateTime? OrdExDat { get; set; }

        public string DsrRem05  { get; set; }
        public string GeoLatit  { get; set; }
        public string GeoLongt  { get; set; }
        public string IsTilRtl  { get; set; }
        public decimal TileStck { get; set; }

        // Detail grids
        public List<OrderDto>     Orders     { get; set; }
        public List<MarketSkuDto> MarketSkus { get; set; }
        public List<GiftDto>      Gifts      { get; set; }

        public class OrderDto
        {
            public string RepoCatg   { get; set; }
            public string ProdCode   { get; set; }
            public decimal ProdQnty  { get; set; }
            public decimal ProjQnty  { get; set; }
            public string ActnRemk   { get; set; }

            [JsonConverter(typeof(JsonNullableDateConverter))]
            public DateTime? TargetDt { get; set; }
        }

        public class MarketSkuDto
        {
            public string BranName { get; set; }
            public string PrdCodMk { get; set; }
            public decimal BPriceVl { get; set; }
            public decimal CPriceVl { get; set; }
        }

        public class GiftDto
        {
            public string MrtlCode { get; set; }
            public decimal IsueQnty { get; set; }
        }

        // Conditional validation for pending-issue fields
        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (PendIsue == "Y")
            {
                if (string.IsNullOrWhiteSpace(PndIsuDt))
                    yield return new ValidationResult(
                        "PndIsuDt is required when PendIsue = Y", new[] { nameof(PndIsuDt) }
                    );
                if (string.IsNullOrWhiteSpace(IsuDetal))
                    yield return new ValidationResult(
                        "IsuDetal is required when PendIsue = Y", new[] { nameof(IsuDetal) }
                    );
            }
        }
    }


    // 3) FULL API CONTROLLER
    [ApiController]
    [Route("api/[controller]")]
    public class DsrVisitController : ControllerBase
    {
        private readonly string _connString;
        public DsrVisitController(IConfiguration cfg)
            => _connString = cfg.GetConnectionString("DefaultConnection");

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] DsrRequest dto)
        {
            string createId = User.Identity?.Name ?? "UNKNOWN";

            await using var conn = new SqlConnection(_connString);
            await conn.OpenAsync();
            await using var tx = conn.BeginTransaction();

            try
            {
                // 1) HEADER INSERT
                const string hdrSql = @"
INSERT INTO dptDSRActvt
 (ProcessType,DocuNumb,DsrParam,CusRtlFl,AreaCode,CusRtlCd,
  KycStatus,ReportDate,MarketName,PrtDsCnt,PendIsue,PndIsuDt,IsuDetal,
  WcErlSlb,WpErlSlb,VpErlSlb,BwStkWcc,BwStkWcp,BwStkVap,
  SlWcVlum,SlWpVlum,JkAvgWcc,JkAvgWcp,AsAvgWcc,AsAvgWcp,OtAvgWcc,OtAvgWcp,
  OrdrExDat,DsrRem05,GeoLatit,GeoLongt,IsTilRtl,TileStck,CreateId )
VALUES
 (@ProcType,@DocuNumb,@DsrParam,@CusRtlFl,@AreaCode,@CusRtlCd,
  @KycStatus,@ReportDate,@MarketName,@PrtDsCnt,@PendIsue,@PndIsuDt,@IsuDetal,
  @WcErlSlb,@WpErlSlb,@VpErlSlb,@BwStkWcc,@BwStkWcp,@BwStkVap,
  @SlWcVlum,@SlWpVlum,@JkAvgWcc,@JkAvgWcp,@AsAvgWcc,@AsAvgWcp,@OtAvgWcc,@OtAvgWcp,
  @OrdrExDat,@DsrRem05,@GeoLatit,@GeoLongt,@IsTilRtl,@TileStck,@CreateId)";

                await using (var hdrCmd = new SqlCommand(hdrSql, conn, tx))
                {
                    hdrCmd.Parameters.AddWithValue("@ProcType", dto.ProcType);
                    hdrCmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                    hdrCmd.Parameters.AddWithValue("@DsrParam", dto.DsrParam);
                    hdrCmd.Parameters.AddWithValue("@CusRtlFl", dto.CusRtlFl);
                    hdrCmd.Parameters.AddWithValue("@AreaCode", dto.AreaCode);
                    hdrCmd.Parameters.AddWithValue("@CusRtlCd", dto.CusRtlCd);
                    hdrCmd.Parameters.AddWithValue("@KycStatus", (object?)dto.KycStatus ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@ReportDate", dto.ReportDate);
                    hdrCmd.Parameters.AddWithValue("@MarketName", (object?)dto.MarketName ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@PrtDsCnt", (object?)dto.PrtDsCnt ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@PendIsue", (object?)dto.PendIsue ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@PndIsuDt", (object?)dto.PndIsuDt ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@IsuDetal", (object?)dto.IsuDetal ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@WcErlSlb", dto.WcErlSlb);
                    hdrCmd.Parameters.AddWithValue("@WpErlSlb", dto.WpErlSlb);
                    hdrCmd.Parameters.AddWithValue("@VpErlSlb", dto.VpErlSlb);
                    hdrCmd.Parameters.AddWithValue("@BwStkWcc", dto.BwStkWcc);
                    hdrCmd.Parameters.AddWithValue("@BwStkWcp", dto.BwStkWcp);
                    hdrCmd.Parameters.AddWithValue("@BwStkVap", dto.BwStkVap);
                    hdrCmd.Parameters.AddWithValue("@SlWcVlum", (object?)dto.SlWcVlum ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@SlWpVlum", (object?)dto.SlWpVlum ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@JkAvgWcc", (object?)dto.JkAvgWcc ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@JkAvgWcp", (object?)dto.JkAvgWcp ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@AsAvgWcc", (object?)dto.AsAvgWcc ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@AsAvgWcp", (object?)dto.AsAvgWcp ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@OtAvgWcc", (object?)dto.OtAvgWcc ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@OtAvgWcp", (object?)dto.OtAvgWcp ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@OrdrExDat", dto.OrdExDat.HasValue ? (object)dto.OrdExDat.Value : DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@DsrRem05", (object?)dto.DsrRem05 ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@GeoLatit", (object?)dto.GeoLatit ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@GeoLongt", (object?)dto.GeoLongt ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@IsTilRtl", (object?)dto.IsTilRtl ?? DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@TileStck", dto.TileStck);
                    hdrCmd.Parameters.AddWithValue("@CreateId", createId);
                    await hdrCmd.ExecuteNonQueryAsync();
                }

                // 2) ORDERS (mrktData = '05')
                const string ordSql = @"
INSERT INTO dptDSRActvtDtl
 (DocuNumb,CreateId,RepoCatg,CatgPack,ProdQnty,ProjQnty,ActnRemk,TargetDt,MrktData)
 VALUES
 (@DocuNumb,@CreateId,@RepoCatg,@CatgPack,@ProdQnty,@ProjQnty,@ActnRemk,@TargetDt,'05')";
                await using (var ordCmd = new SqlCommand(ordSql, conn, tx))
                {
                    ordCmd.Parameters.Add("@DocuNumb", SqlDbType.VarChar);
                    ordCmd.Parameters.Add("@CreateId", SqlDbType.VarChar);
                    ordCmd.Parameters.Add("@RepoCatg", SqlDbType.VarChar);
                    ordCmd.Parameters.Add("@CatgPack", SqlDbType.VarChar);
                    ordCmd.Parameters.Add("@ProdQnty", SqlDbType.Decimal);
                    ordCmd.Parameters.Add("@ProjQnty", SqlDbType.Decimal);
                    ordCmd.Parameters.Add("@ActnRemk", SqlDbType.VarChar);
                    ordCmd.Parameters.Add("@TargetDt", SqlDbType.Date);

                    foreach (var o in dto.Orders ?? new List<DsrRequest.OrderDto>())
                    {
                        ordCmd.Parameters["@DocuNumb"].Value = dto.DocuNumb;
                        ordCmd.Parameters["@CreateId"].Value = createId;
                        ordCmd.Parameters["@RepoCatg"].Value = o.RepoCatg;
                        ordCmd.Parameters["@CatgPack"].Value = o.ProdCode;
                        ordCmd.Parameters["@ProdQnty"].Value = o.ProdQnty;
                        ordCmd.Parameters["@ProjQnty"].Value = o.ProjQnty;
                        ordCmd.Parameters["@ActnRemk"].Value = o.ActnRemk ?? "";
                        ordCmd.Parameters["@TargetDt"].Value =
                            o.TargetDt.HasValue ? (object)o.TargetDt.Value : DBNull.Value;
                        await ordCmd.ExecuteNonQueryAsync();
                    }
                }

                // 3) MARKET‐SKUs (mrktData = '06')
                const string mktSql = @"
INSERT INTO dptDSRActvtDtl
 (DocuNumb,CreateId,RepoCatg,CatgPack,ProdQnty,ProjQnty,MrktData)
 VALUES
 (@DocuNumb,@CreateId,@RepoCatg,@CatgPack,@BPriceVl,@CPriceVl,'06')";
                await using (var mktCmd = new SqlCommand(mktSql, conn, tx))
                {
                    mktCmd.Parameters.Add("@DocuNumb", SqlDbType.VarChar);
                    mktCmd.Parameters.Add("@CreateId", SqlDbType.VarChar);
                    mktCmd.Parameters.Add("@RepoCatg", SqlDbType.VarChar);
                    mktCmd.Parameters.Add("@CatgPack", SqlDbType.VarChar);
                    mktCmd.Parameters.Add("@BPriceVl", SqlDbType.Decimal);
                    mktCmd.Parameters.Add("@CPriceVl", SqlDbType.Decimal);

                    foreach (var m in dto.MarketSkus ?? new List<DsrRequest.MarketSkuDto>())
                    {
                        mktCmd.Parameters["@DocuNumb"].Value = dto.DocuNumb;
                        mktCmd.Parameters["@CreateId"].Value = createId;
                        mktCmd.Parameters["@RepoCatg"].Value = m.BranName;
                        mktCmd.Parameters["@CatgPack"].Value = m.PrdCodMk;
                        mktCmd.Parameters["@BPriceVl"].Value = m.BPriceVl;
                        mktCmd.Parameters["@CPriceVl"].Value = m.CPriceVl;
                        await mktCmd.ExecuteNonQueryAsync();
                    }
                }

                // 4) GIFTS (mrktData = '07')
                const string gifSql = @"
INSERT INTO dptDSRActvtDtl
 (DocuNumb,CreateId,RepoCatg,ProdQnty,MrktData)
 VALUES
 (@DocuNumb,@CreateId,@MrtlCode,@IsueQnty,'07')";
                await using (var gifCmd = new SqlCommand(gifSql, conn, tx))
                {
                    gifCmd.Parameters.Add("@DocuNumb", SqlDbType.VarChar);
                    gifCmd.Parameters.Add("@CreateId", SqlDbType.VarChar);
                    gifCmd.Parameters.Add("@MrtlCode", SqlDbType.VarChar);
                    gifCmd.Parameters.Add("@IsueQnty", SqlDbType.Decimal);

                    foreach (var g in dto.Gifts ?? new List<DsrRequest.GiftDto>())
                    {
                        gifCmd.Parameters["@DocuNumb"].Value = dto.DocuNumb;
                        gifCmd.Parameters["@CreateId"].Value = createId;
                        gifCmd.Parameters["@MrtlCode"].Value = g.MrtlCode;
                        gifCmd.Parameters["@IsueQnty"].Value = g.IsueQnty;
                        await gifCmd.ExecuteNonQueryAsync();
                    }
                }

                await tx.CommitAsync();
                return Ok(new { success = true, docuNumb = dto.DocuNumb });
            }
            catch (Exception ex)
            {
                await tx.RollbackAsync();
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }
    }
}
