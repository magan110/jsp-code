using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;

namespace sparshWebService.Controllers
{
    // DTO to return aggregated purchaser details
    public class Purchaser360Dto
    {
        public string CustClub { get; set; }
        public string CustName { get; set; }
        public string CustType { get; set; }
        public string SapCusCd { get; set; }
        public string GenTrNtr { get; set; }

        public string BirthDate { get; set; }
        public string AnniversaryDate { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string WifeName { get; set; }
        public string ChildNo1 { get; set; }
        public string ChildNo2 { get; set; }
        public string MobileNo { get; set; }

        public string TallyIntegrationDone { get; set; }
        public string TallyIntegrationDate { get; set; }

        public string SalesSyncLastDate { get; set; }

        public decimal CreditLimitLacs { get; set; }
        public decimal SecurityDepositLacs { get; set; }
    }

    // DTO for each sales row
    public class SalesDataDto
    {
        public string  MrgRepDs      { get; set; }
        public decimal InvnQnty      { get; set; }
        public decimal InvnQntyAvg   { get; set; }
        public decimal SalesQty      { get; set; }
        public decimal SalesQtyAvg   { get; set; }
    }

    // DTO for credit‚Äêlimit details
    public class CreditLimitDetailsDto
    {
        public decimal CreditLimitLacs     { get; set; }
        public decimal SecurityDepositLacs { get; set; }
        public decimal PenaltyLacs         { get; set; }
        public decimal OpenOrderLacs       { get; set; }
        public decimal OpenDeliveryLacs    { get; set; }
        public decimal OpenBillingLacs     { get; set; }
        public decimal BalanceLacs         { get; set; }
        public int     AdhocCount          { get; set; }
    }

    // Full payload for the UI
    public class Full360Dto
    {
        public Purchaser360Dto        Purchaser   { get; set; }
        public List<SalesDataDto>     Sales       { get; set; }
        public CreditLimitDetailsDto  CreditLimit { get; set; }
    }

    [Route("api/[controller]")]
    [ApiController]
    public class Purchaser360Controller : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public Purchaser360Controller(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        /// <summary>
        /// Returns Purchaser360Dto for a given custCode + areaCode.
        /// </summary>
        [HttpGet("getPurchaserDetails")]
        public IActionResult GetPurchaserDetails([FromQuery] string custCode, [FromQuery] string areaCode)
        {
            if (string.IsNullOrWhiteSpace(custCode) || string.IsNullOrWhiteSpace(areaCode))
                return BadRequest("Customer Code and Area Code are required.");

            const string sql = @"
WITH CustomerBase AS (
    SELECT a.custClub, a.custName, a.custType, a.sapCusCd, b.genTrNtr
    FROM dpmCustomer a WITH (NOLOCK)
    JOIN bkmCustType b WITH (NOLOCK) 
      ON a.custType = b.custType
    WHERE a.custCode = @CustCode
      AND a.areaCode = @AreaCode
)
SELECT
  cb.custClub           AS custClub,
  cb.custName           AS custName,
  cb.custType           AS custType,
  cb.sapCusCd           AS sapCusCd,
  cb.genTrNtr           AS genTrNtr,

  ISNULL(CONVERT(varchar(10), c.birthDat, 103), '')  AS birthDate,
  ISNULL(CONVERT(varchar(10), c.annivDat, 103), '')  AS anniversaryDate,
  c.firstNam            AS firstName,
  c.lastName            AS lastName,
  c.wifeName            AS wifeName,
  c.childNo1            AS childNo1,
  c.childNo2            AS childNo2,
  c.mobileNo            AS mobileNo,

  ISNULL(tc.IntegrationStatus, 'No')    AS tallyIntegrationDone,
  ISNULL(tc.IntegrationDate, 'PENDING') AS tallyIntegrationDate,

  ISNULL(ss.salesSyncLastDate, '')      AS salesSyncLastDate,

  fm.creditLimitLacs       AS creditLimitLacs,
  fm.securityDepositLacs   AS securityDepositLacs
FROM CustomerBase cb

LEFT JOIN dpmCustomer c WITH (NOLOCK)
  ON c.custCode = @CustCode AND c.isActive = 'Y'

LEFT JOIN (
    SELECT sapCusCd,
           CASE WHEN isActive = 'Z' THEN 'Yes' ELSE 'No' END AS IntegrationStatus,
           ISNULL(CONVERT(varchar(11), effectDt, 113), 'PENDING') AS IntegrationDate
    FROM dpmTallyCus WITH (NOLOCK)
    WHERE sapCusCd = (SELECT sapCusCd FROM CustomerBase)
) tc ON 1=1

LEFT JOIN (
    SELECT DISTRIBUTOR_CODE  AS sapCusCd,
           ISNULL(CONVERT(varchar(11), MAX(lstInvDt), 113), '') AS salesSyncLastDate
    FROM (
      SELECT DISTRIBUTOR_CODE, DOC_DATE AS lstInvDt
        FROM sbvCNAprOnw WITH (NOLOCK) GROUP BY DISTRIBUTOR_CODE, DOC_DATE
      UNION ALL
      SELECT DISTRIBUTOR_CODE, DOC_DATE
        FROM Birla_White_DB.dbo.BW_Sales_CN_Tally WITH (NOLOCK) GROUP BY DISTRIBUTOR_CODE, DOC_DATE
    ) x
    GROUP BY DISTRIBUTOR_CODE
) ss ON ss.sapCusCd = cb.sapCusCd

CROSS APPLY (
    SELECT
      MAX(CASE WHEN idx = 0  THEN val/100000.0 END) AS creditLimitLacs,
      MAX(CASE WHEN idx = 15 THEN val/100000.0 END) AS securityDepositLacs
    FROM (
      SELECT 0  AS idx, CAST(credLimt AS decimal(18,2))    AS val FROM dpmCustomer WHERE custCode = @CustCode
      UNION ALL
      SELECT 15 AS idx, CAST(securDep AS decimal(18,2))    AS val FROM dpmCustomer WHERE custCode = @CustCode
    ) t
) fm;
";

            var parameters = new Dictionary<string, object>
            {
                { "@CustCode", custCode },
                { "@AreaCode", areaCode }
            };

            var raw = _dbHelper.ExecuteSelectQueryPublic(
                _dbHelper.BwliveConnectionString,
                sql,
                parameters
            );

            if (raw is List<Dictionary<string, object>> rows && rows.Count > 0)
            {
                var r = rows[0];
                var dto = new Purchaser360Dto
                {
                    CustClub               = r["custClub"]          as string,
                    CustName               = r["custName"]          as string,
                    CustType               = r["custType"]          as string,
                    SapCusCd               = r["sapCusCd"]          as string,
                    GenTrNtr               = r["genTrNtr"]          as string,

                    BirthDate              = r["birthDate"]         as string,
                    AnniversaryDate        = r["anniversaryDate"]   as string,
                    FirstName              = r["firstName"]         as string,
                    LastName               = r["lastName"]          as string,
                    WifeName               = r["wifeName"]          as string,
                    ChildNo1               = r["childNo1"]          as string,
                    ChildNo2               = r["childNo2"]          as string,
                    MobileNo               = r["mobileNo"]          as string,

                    TallyIntegrationDone   = r["tallyIntegrationDone"] as string,
                    TallyIntegrationDate   = r["tallyIntegrationDate"] as string,

                    SalesSyncLastDate      = r["salesSyncLastDate"]   as string,

                    CreditLimitLacs        = Convert.ToDecimal(r["creditLimitLacs"]),
                    SecurityDepositLacs    = Convert.ToDecimal(r["securityDepositLacs"])
                };
                return Ok(dto);
            }

            return NotFound("Purchaser details not found.");
        }

        /// <summary>
        /// Returns month-to-date Primary & Secondary sales
        /// </summary>
        [HttpGet("getSalesData")]
        public IActionResult GetSalesData([FromQuery] string custCode)
        {
            if (string.IsNullOrWhiteSpace(custCode))
                return BadRequest("Customer Code is required.");

            const string salesSql = @"
SELECT
  mrgRepDs,
  SUM(invnQnty)      AS invnQnty,
  SUM(invnQntyAvg)   AS invnQntyAvg,
  SUM(salesQty)      AS salesQty,
  SUM(salesQtyAvg)   AS salesQtyAvg
FROM (
  SELECT
    mrgRepDs,
    SUM(CASE WHEN a.mnthYear = CONVERT(varchar(6), GETDATE(), 112) THEN invnQnty ELSE 0 END) AS invnQnty,
    SUM(CASE
          WHEN a.mnthYear BETWEEN CONVERT(varchar(6), DATEADD(month, -2, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0)), 112)
                              AND CONVERT(varchar(6), GETDATE(), 112)
          THEN invnQnty
          ELSE 0
        END) / 3.0 AS invnQntyAvg,
    0 AS salesQty,
    0 AS salesQtyAvg
  FROM dpvSlMnCrPr a WITH (NOLOCK)
  WHERE a.mnthYear BETWEEN CONVERT(varchar(6), DATEADD(month, -2, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0)), 112)
                         AND CONVERT(varchar(6), GETDATE(), 112)
    AND a.custCode = @CustCode
    AND a.mrgRepCt IN ('01','02','03')
  GROUP BY mrgRepDs

  UNION ALL

  SELECT
    mrgRepDs,
    0 AS invnQnty,
    0 AS invnQntyAvg,
    SUM(CASE WHEN a.mnthYear = CONVERT(varchar(6), GETDATE(), 112) THEN salesQty ELSE 0 END) AS salesQty,
    SUM(CASE
          WHEN a.mnthYear BETWEEN CONVERT(varchar(6), DATEADD(month, -2, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0)), 112)
                              AND CONVERT(varchar(6), GETDATE(), 112)
          THEN salesQty
          ELSE 0
        END) / 3.0 AS salesQtyAvg
  FROM sbsScdInvSl a WITH (NOLOCK)
  JOIN bkmRepoCatg b WITH (NOLOCK) ON a.repoCatg = b.repoCatg
  WHERE a.mnthYear BETWEEN CONVERT(varchar(6), DATEADD(month, -2, DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0)), 112)
                         AND CONVERT(varchar(6), GETDATE(), 112)
    AND a.custCode = @CustCode
    AND b.mrgRepCt IN ('01','02','03')
  GROUP BY mrgRepDs
) x
GROUP BY mrgRepDs
ORDER BY mrgRepDs DESC;";

            var salesParams = new Dictionary<string, object>
            {
                { "@CustCode", custCode }
            };

            var salesRaw = _dbHelper.ExecuteSelectQueryPublic(
                _dbHelper.BwliveConnectionString,
                salesSql,
                salesParams
            );

            if (salesRaw is List<Dictionary<string, object>> salesRows && salesRows.Count > 0)
            {
                // return raw dictionaries for flexibility
                return Ok(salesRows);
            }

            return NotFound("Sales data not found.");
        }

        /// <summary>
        /// Returns just the credit-limit table from SAP (mapped into lacs).
        /// </summary>
        [HttpGet("getCreditLimitDetails")]
        public IActionResult GetCreditLimitDetails([FromQuery] string custCode)
        {
            if (string.IsNullOrWhiteSpace(custCode))
                return BadRequest("Customer Code is required.");

            const string sql = @"
SELECT
  CAST(credLimt AS decimal(18,2)) / 100000 AS creditLimitLacs,
  CAST(securDep AS decimal(18,2)) / 100000 AS securityDepositLacs,
  CAST(penalty AS decimal(18,2)) / 100000 AS penaltyLacs,
  CAST(openOrder AS decimal(18,2)) / 100000 AS openOrderLacs,
  CAST(openDelivery AS decimal(18,2)) / 100000 AS openDeliveryLacs,
  CAST(openBilling AS decimal(18,2)) / 100000 AS openBillingLacs,
  CAST(balance   AS decimal(18,2)) / 100000 AS balanceLacs,
  adhocCount
FROM dpmCustomer WITH (NOLOCK)
WHERE custCode = @CustCode;";

            var parameters = new Dictionary<string, object>
            {
                { "@CustCode", custCode }
            };

            var result = _dbHelper.ExecuteSelectQueryPublic(
                _dbHelper.BwliveConnectionString,
                sql,
                parameters
            );

            if (result is List<Dictionary<string, object>> rows && rows.Count > 0)
                return Ok(rows);

            return NotFound("Credit limit details not found.");
        }

        /// <summary>
        /// Combines the above three calls into one payload.
        /// </summary>
        [HttpGet("getAll360")]
        public IActionResult GetAll360([FromQuery] string custCode, [FromQuery] string areaCode)
        {
            // 1) Purchaser
            var purRes = GetPurchaserDetails(custCode, areaCode) as OkObjectResult;
            if (purRes == null) return purRes ?? NotFound("Purchaser not found.");
            var purchaser = purRes.Value as Purchaser360Dto;

            // 2) Sales
            var salesRes = GetSalesData(custCode) as OkObjectResult;
            if (salesRes == null) return salesRes ?? NotFound("Sales data not found.");
            var salesDicts = salesRes.Value as List<Dictionary<string, object>>;
            var sales = salesDicts
                .Select(r => new SalesDataDto {
                    MrgRepDs    = r["mrgRepDs"].ToString(),
                    InvnQnty    = Convert.ToDecimal(r["invnQnty"]),
                    InvnQntyAvg = Convert.ToDecimal(r["invnQntyAvg"]),
                    SalesQty    = Convert.ToDecimal(r["salesQty"]),
                    SalesQtyAvg = Convert.ToDecimal(r["salesQtyAvg"])
                })
                .ToList();

            // 3) Credit limits
            var credRes = GetCreditLimitDetails(custCode) as OkObjectResult;
            if (credRes == null) return credRes ?? NotFound("Credit details not found.");
            var credRows = credRes.Value as List<Dictionary<string, object>>;
            var c = credRows[0];
            var credit = new CreditLimitDetailsDto {
                CreditLimitLacs     = Convert.ToDecimal(c["creditLimitLacs"]),
                SecurityDepositLacs = Convert.ToDecimal(c["securityDepositLacs"]),
                PenaltyLacs         = Convert.ToDecimal(c["penaltyLacs"]),
                OpenOrderLacs       = Convert.ToDecimal(c["openOrderLacs"]),
                OpenDeliveryLacs    = Convert.ToDecimal(c["openDeliveryLacs"]),
                OpenBillingLacs     = Convert.ToDecimal(c["openBillingLacs"]),
                BalanceLacs         = Convert.ToDecimal(c["balanceLacs"]),
                AdhocCount          = Convert.ToInt32(c["adhocCount"])
            };

            // 4) Bundle and return
            var full = new Full360Dto {
                Purchaser   = purchaser,
                Sales       = sales,
                CreditLimit = credit
            };

            return Ok(full);
        }
    }
}
