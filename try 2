import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/approval_models.dart';

class ApprovalService {
  static const String baseUrl = 'http://10.4.64.23:8521';

  Future<ApprovalResponse> getPendingApprovals({
    String? search,
    String? type,
    int page = 1,
    int pageSize = 20,
    String? sort,
  }) async {
    try {
      final queryParams = <String, String>{
        'page': page.toString(),
        'pageSize': pageSize.toString(),
      };

      if (search != null && search.isNotEmpty) {
        queryParams['search'] = search;
      }
      if (type != null && type.isNotEmpty) {
        queryParams['type'] = type;
      }
      if (sort != null && sort.isNotEmpty) {
        queryParams['sort'] = sort;
      }

      final uri = Uri.parse(
        '$baseUrl/api/Approval/pending',
      ).replace(queryParameters: queryParams);

      final response = await http
          .get(
            uri,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
          )
          .timeout(const Duration(seconds: 30));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return ApprovalResponse.fromJson(data);
      } else {
        throw Exception(
          'Failed to load pending approvals: ${response.statusCode}',
        );
      }
    } catch (e) {
      throw Exception('Error fetching pending approvals: $e');
    }
  }

  Future<ApprovalStats> getApprovalStats() async {
    try {
      final uri = Uri.parse('$baseUrl/api/Approval/stats');

      final response = await http
          .get(
            uri,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
          )
          .timeout(const Duration(seconds: 30));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return ApprovalStats.fromJson(data);
      } else {
        throw Exception(
          'Failed to load approval stats: ${response.statusCode}',
        );
      }
    } catch (e) {
      throw Exception('Error fetching approval stats: $e');
    }
  }

  Future<ApprovalActionResponse> approveItem(
    String inflCode, {
    String? actorId,
  }) async {
    try {
      final request = ApprovalActionRequest(
        inflCode: inflCode,
        actorId: actorId,
      );

      final uri = Uri.parse('$baseUrl/api/Approval/approve');

      final response = await http
          .post(
            uri,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
            body: json.encode(request.toJson()),
          )
          .timeout(const Duration(seconds: 30));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return ApprovalActionResponse.fromJson(data);
      } else {
        throw Exception('Failed to approve item: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error approving item: $e');
    }
  }

  Future<ApprovalActionResponse> rejectItem(
    String inflCode, {
    String? reason,
    String? actorId,
  }) async {
    try {
      final request = RejectionActionRequest(
        inflCode: inflCode,
        reason: reason,
        actorId: actorId,
      );

      final uri = Uri.parse('$baseUrl/api/Approval/reject');

      final response = await http
          .post(
            uri,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
            body: json.encode(request.toJson()),
          )
          .timeout(const Duration(seconds: 30));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return ApprovalActionResponse.fromJson(data);
      } else {
        throw Exception('Failed to reject item: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error rejecting item: $e');
    }
  }

  Future<String> lookupInflCode(String identifier) async {
    try {
      final uri = Uri.parse('$baseUrl/api/Approval/lookup/$identifier');
      print('DEBUG API: Looking up inflCode for identifier: $identifier');
      print('DEBUG API: Lookup URL: $uri');

      final response = await http
          .get(
            uri,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
          )
          .timeout(const Duration(seconds: 30));

      print('DEBUG API: Lookup response status: ${response.statusCode}');
      print('DEBUG API: Lookup response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final inflCode = data['inflCode'] ?? '';
        print('DEBUG API: Found inflCode: $inflCode');
        return inflCode;
      } else if (response.statusCode == 404) {
        throw Exception('Person not found for identifier: $identifier');
      } else {
        throw Exception(
          'Failed to lookup inflCode: ${response.statusCode} - ${response.body}',
        );
      }
    } catch (e) {
      print('DEBUG API: Lookup exception: $e');
      throw Exception('Error looking up inflCode: $e');
    }
  }

  Future<RegistrationDetails> getRegistrationDetails(String inflCode) async {
    try {
      final uri = Uri.parse('$baseUrl/api/Approval/details/$inflCode');
      print('DEBUG API: Requesting URL: $uri');

      final response = await http
          .get(
            uri,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
          )
          .timeout(const Duration(seconds: 30));

      print('DEBUG API: Response status: ${response.statusCode}');
      print('DEBUG API: Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        print('DEBUG API: Parsed data: $data');
        return RegistrationDetails.fromJson(data);
      } else if (response.statusCode == 404) {
        throw Exception('Registration details not found for inflCode: $inflCode');
      } else {
        throw Exception(
          'Failed to load registration details: ${response.statusCode} - ${response.body}',
        );
      }
    } catch (e) {
      print('DEBUG API: Exception occurred: $e');
      throw Exception('Error fetching registration details: $e');
    }
  }

  Future<RegistrationDetails> getRegistrationDetailsByIdentifier(String identifier) async {
    try {
      print('DEBUG: Getting details for identifier: $identifier');

      // First lookup the inflCode
      final inflCode = await lookupInflCode(identifier);

      // Then get the full details
      return await getRegistrationDetails(inflCode);
    } catch (e) {
      print('DEBUG: Error in getRegistrationDetailsByIdentifier: $e');
      rethrow;
    }
  }
}











import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../../core/services/approval_service.dart';
import '../../../core/models/approval_models.dart';

class ApprovalDashboardScreen extends StatefulWidget {
  const ApprovalDashboardScreen({super.key});

  @override
  State<ApprovalDashboardScreen> createState() =>
      _ApprovalDashboardScreenState();
}

class _ApprovalDashboardScreenState extends State<ApprovalDashboardScreen>
    with TickerProviderStateMixin {
  final ApprovalService _approvalService = ApprovalService();
  List<ApprovalItem> _pendingRegistrations = [];
  ApprovalStats? _stats;

  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  final List<AnimationController> _cardControllers = [];
  final List<Animation<double>> _cardAnimations = [];
  final TextEditingController _searchController = TextEditingController();
  List<ApprovalItem> _filteredRegistrations = [];
  String _selectedFilter = 'All';
  bool _isLoading = false;
  String? _errorMessage;
  int _currentPage = 1;
  final int _pageSize = 20;
  bool _hasMore = true;

  @override
  void initState() {
    super.initState();
    _loadData();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    // Initialize card animations
    for (int i = 0; i < 3; i++) {
      final controller = AnimationController(
        duration: const Duration(milliseconds: 400),
        vsync: this,
      );
      final animation = CurvedAnimation(
        parent: controller,
        curve: Curves.easeOutCubic,
      );
      _cardControllers.add(controller);
      _cardAnimations.add(animation);
      // Stagger the card animations
      Future.delayed(Duration(milliseconds: 200 + (i * 100)), () {
        if (mounted) controller.forward();
      });
    }
    _mainController.forward();
    _fabController.forward();
  }

  Future<void> _loadData() async {
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      final statsResult = _approvalService.getApprovalStats();
      final pendingResult = _approvalService.getPendingApprovals(
        page: _currentPage,
        pageSize: _pageSize,
        search: _searchController.text.isEmpty ? null : _searchController.text,
        type: _selectedFilter == 'All' ? null : _selectedFilter,
      );

      final results = await Future.wait([statsResult, pendingResult]);
      _stats = results[0] as ApprovalStats;
      final response = results[1] as ApprovalResponse;

      setState(() {
        _pendingRegistrations = response.items;
        _filteredRegistrations = response.items;
        _hasMore = response.items.length == _pageSize;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
        _isLoading = false;
      });
    }
  }

  Future<void> _refreshData() async {
    _currentPage = 1;
    await _loadData();
  }

  Future<void> _approveItem(ApprovalItem item) async {
    try {
      await _approvalService.approveItem(item.id);
      _refreshData();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${item.name} approved successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Failed to approve: $e')));
    }
  }

  Future<void> _rejectItem(ApprovalItem item, String reason) async {
    try {
      await _approvalService.rejectItem(item.id, reason: reason);
      _refreshData();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('${item.name} rejected successfully')),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Failed to reject: $e')));
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    _searchController.dispose();
    for (var controller in _cardControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Set system UI overlay style
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
      ),
    );

    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (didPop, result) {
        if (!didPop) {
          Navigator.pushReplacementNamed(context, '/home');
        }
      },
      child: Scaffold(
        backgroundColor: const Color(0xFFF8FAFC),
        appBar: _buildModernAppBar(),
        body: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: Container(
              decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
              child: LayoutBuilder(
                builder: (context, constraints) {
                  final isMobile = constraints.maxWidth < 600;
                  final isTablet =
                      constraints.maxWidth >= 600 &&
                      constraints.maxWidth < 1200;
                  final isDesktop = constraints.maxWidth >= 1200;

                  return SingleChildScrollView(
                    padding: EdgeInsets.symmetric(
                      horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                      vertical: 24,
                    ),
                    child: ScaleTransition(
                      scale: _scaleAnimation,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Header with animation
                          _buildAnimatedHeader(),
                          const SizedBox(height: 32),
                          // Stats Cards
                          _buildStatsCards(isMobile, isTablet, isDesktop),
                          const SizedBox(height: 32),
                          // Search and Filter
                          _buildSearchAndFilter(isMobile),
                          const SizedBox(height: 32),
                          // Pending Registrations
                          _buildPendingRegistrations(isMobile),
                          const SizedBox(height: 32),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: CustomBackButton(animated: false, size: 36),
            )
          : null,
      title: Text(
        'Approval Dashboard',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Approval Dashboard',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Review and approve pending registrations',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildStatsCards(bool isMobile, bool isTablet, bool isDesktop) {
    if (_stats == null) {
      return const Center(child: CircularProgressIndicator());
    }

    final stats = [
      {
        'title': 'Total Pending',
        'value': _stats!.totalPending.toString(),
        'icon': Icons.hourglass_top_rounded,
        'color': Colors.blue,
        'change': '+5%',
        'isPositive': true,
      },
      {
        'title': 'Contractors',
        'value': _stats!.contractors.toString(),
        'icon': Icons.business_rounded,
        'color': Colors.blue,
        'change': '+3%',
        'isPositive': true,
      },
      {
        'title': 'Painters',
        'value': _stats!.painters.toString(),
        'icon': Icons.format_paint_rounded,
        'color': Colors.blue,
        'change': '+8%',
        'isPositive': true,
      },
    ];

    if (isMobile) {
      // Mobile layout - single column
      return Column(
        children: List.generate(stats.length, (index) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: _buildStatCard(
              stats[index]['title'] as String,
              stats[index]['value'] as String,
              stats[index]['icon'] as IconData,
              stats[index]['color'] as Color,
              stats[index]['change'] as String,
              stats[index]['isPositive'] as bool,
              _cardAnimations[index],
            ),
          );
        }),
      );
    } else if (isTablet) {
      // Tablet layout - 2x2 grid
      return GridView.builder(
        shrinkWrap: true,
        physics: const NeverScrollableScrollPhysics(),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          childAspectRatio: 1.2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
        ),
        itemCount: stats.length,
        itemBuilder: (context, index) {
          return _buildStatCard(
            stats[index]['title'] as String,
            stats[index]['value'] as String,
            stats[index]['icon'] as IconData,
            stats[index]['color'] as Color,
            stats[index]['change'] as String,
            stats[index]['isPositive'] as bool,
            _cardAnimations[index],
          );
        },
      );
    } else {
      // Desktop layout - single row
      return Row(
        children: List.generate(stats.length, (index) {
          return Expanded(
            child: Padding(
              padding: EdgeInsets.only(
                right: index < stats.length - 1 ? 16 : 0,
              ),
              child: _buildStatCard(
                stats[index]['title'] as String,
                stats[index]['value'] as String,
                stats[index]['icon'] as IconData,
                stats[index]['color'] as Color,
                stats[index]['change'] as String,
                stats[index]['isPositive'] as bool,
                _cardAnimations[index],
              ),
            ),
          );
        }),
      );
    }
  }

  Widget _buildStatCard(
    String title,
    String value,
    IconData icon,
    Color color,
    String change,
    bool isPositive,
    Animation<double> animation,
  ) {
    return ScaleTransition(
      scale: animation,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.04),
              blurRadius: 16,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: color.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: color, size: 24),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 8,
                    vertical: 4,
                  ),
                  decoration: BoxDecoration(
                    color: isPositive
                        ? Colors.green.withOpacity(0.1)
                        : Colors.red.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(
                        isPositive
                            ? Icons.trending_up_rounded
                            : Icons.trending_down_rounded,
                        color: isPositive ? Colors.green : Colors.red,
                        size: 14,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        change,
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                          color: isPositive ? Colors.green : Colors.red,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
            ),
            const SizedBox(height: 8),
            Text(
              value,
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSearchAndFilter(bool isMobile) {
    return _buildModernSection(
      title: 'Search & Filter',
      icon: Icons.search_rounded,
      children: [
        if (isMobile)
          Column(
            children: [
              TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  labelText: 'Search registrations',
                  prefixIcon: const Icon(Icons.search_rounded),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey.shade300),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: const BorderSide(
                      color: Color(0xFF1E3A8A),
                      width: 2,
                    ),
                  ),
                  filled: true,
                  fillColor: const Color(0xFFF8FAFC),
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical: 16,
                  ),
                ),
                onChanged: _filterRegistrations,
              ),
              const SizedBox(height: 16),
              ModernDropdown(
                label: 'Filter by type',
                icon: Icons.filter_list,
                items: ['All', 'Contractor', 'Painter'],
                value: _selectedFilter,
                onChanged: (value) {
                  setState(() {
                    _selectedFilter = value!;
                    _performSearch(_searchController.text);
                  });
                },
              ),
            ],
          )
        else
          Row(
            children: [
              Expanded(
                flex: 3,
                child: TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    labelText: 'Search registrations',
                    prefixIcon: const Icon(Icons.search_rounded),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(color: Colors.grey.shade300),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: const BorderSide(
                        color: Color(0xFF1E3A8A),
                        width: 2,
                      ),
                    ),
                    filled: true,
                    fillColor: const Color(0xFFF8FAFC),
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 16,
                    ),
                  ),
                  onChanged: _filterRegistrations,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                flex: 2,
                child: ModernDropdown(
                  label: 'Filter by type',
                  icon: Icons.filter_list,
                  items: ['All', 'Contractor', 'Painter'],
                  value: _selectedFilter,
                  onChanged: (value) {
                    setState(() {
                      _selectedFilter = value!;
                      _performSearch(_searchController.text);
                    });
                  },
                ),
              ),
            ],
          ),
      ],
    );
  }

  Widget _buildPendingRegistrations(bool isMobile) {
    return _buildModernSection(
      title: 'Pending Registrations',
      icon: Icons.pending_actions_rounded,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Registrations awaiting approval',
              style: TextStyle(fontSize: 16, color: Colors.grey),
            ),
            Row(
              children: [
                Text(
                  '${_filteredRegistrations.length} items',
                  style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
                ),
                const SizedBox(width: 8),
                IconButton(
                  icon: const Icon(Icons.refresh),
                  onPressed: _isLoading ? null : _refreshData,
                ),
              ],
            ),
          ],
        ),
        const SizedBox(height: 16),
        if (_isLoading)
          const Center(
            child: Padding(
              padding: EdgeInsets.all(32.0),
              child: CircularProgressIndicator(),
            ),
          )
        else if (_errorMessage != null)
          Container(
            height: 200,
            decoration: BoxDecoration(
              color: const Color(0xFFFEF2F2),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.red.shade200),
            ),
            child: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.error_outline,
                    size: 64,
                    color: Colors.red.shade400,
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'Error loading data',
                    style: TextStyle(
                      color: Colors.red.shade700,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _errorMessage!,
                    style: TextStyle(color: Colors.red.shade600, fontSize: 14),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: _refreshData,
                    child: const Text('Retry'),
                  ),
                ],
              ),
            ),
          )
        else if (_filteredRegistrations.isEmpty)
          Container(
            height: 200,
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.grey.shade200),
            ),
            child: const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.search_off_rounded, size: 64, color: Colors.grey),
                  SizedBox(height: 16),
                  Text(
                    'No registrations found',
                    style: TextStyle(color: Colors.grey, fontSize: 16),
                  ),
                ],
              ),
            ),
          )
        else
          ListView.separated(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: _filteredRegistrations.length,
            separatorBuilder: (context, index) => const Divider(),
            itemBuilder: (context, index) {
              final registration = _filteredRegistrations[index];
              return _buildRegistrationTile(registration);
            },
          ),
      ],
    );
  }

  Widget _buildRegistrationTile(ApprovalItem registration) {
    return ListTile(
      contentPadding: EdgeInsets.zero,
      leading: CircleAvatar(
        backgroundColor: const Color(0xFF1E3A8A).withOpacity(0.1),
        child: Text(
          registration.avatar,
          style: TextStyle(
            color: const Color(0xFF1E3A8A),
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      title: Text(
        registration.name,
        style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
      ),
      subtitle: Text(
        '${registration.type} • ${registration.date}',
        style: TextStyle(fontSize: 14, color: Colors.grey.shade600),
      ),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: Colors.orange.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              registration.status,
              style: const TextStyle(
                color: Colors.orange,
                fontSize: 12,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          const SizedBox(width: 8),
          PopupMenuButton<String>(
            icon: Icon(Icons.more_vert, color: Colors.grey.shade400),
            onSelected: (value) async {
              if (value == 'approve') {
                await _approveItem(registration);
              } else if (value == 'reject') {
                _showRejectDialog(registration);
              }
            },
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'approve',
                child: Row(
                  children: [
                    Icon(Icons.check, color: Colors.green),
                    SizedBox(width: 8),
                    Text('Approve'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'reject',
                child: Row(
                  children: [
                    Icon(Icons.close, color: Colors.red),
                    SizedBox(width: 8),
                    Text('Reject'),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      onTap: () {
        print('DEBUG: Navigating with registration.id: ${registration.id}');
        Navigator.pushNamed(
          context,
          '/registration-details',
          arguments: registration.id,
        );
      },
    );
  }

  void _showRejectDialog(ApprovalItem item) {
    final reasonController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Reject ${item.name}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Please provide a reason for rejection:'),
            const SizedBox(height: 16),
            TextField(
              controller: reasonController,
              maxLines: 3,
              decoration: const InputDecoration(
                hintText: 'Enter rejection reason...',
                border: OutlineInputBorder(),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _rejectItem(item, reasonController.text);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('Reject'),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Text(
                    title,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF1F2937),
                    ),
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  void _filterRegistrations(String query) {
    if (query.isEmpty && _selectedFilter == 'All') {
      _loadData();
      return;
    }

    _performSearch(query);
  }

  void _performSearch(String query) async {
    setState(() {
      _isLoading = true;
    });

    try {
      final response = await _approvalService.getPendingApprovals(
        page: 1,
        pageSize: _pageSize,
        search: query.isEmpty ? null : query,
        type: _selectedFilter == 'All' ? null : _selectedFilter,
      );

      setState(() {
        _filteredRegistrations = response.items;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _errorMessage = e.toString();
        _isLoading = false;
      });
    }
  }
}




















import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';
import '../../../core/services/approval_service.dart';
import '../../../core/models/approval_models.dart';

class RegistrationDetailsScreen extends StatefulWidget {
  const RegistrationDetailsScreen({super.key});

  @override
  State<RegistrationDetailsScreen> createState() =>
      _RegistrationDetailsScreenState();
}

class _RegistrationDetailsScreenState extends State<RegistrationDetailsScreen>
    with TickerProviderStateMixin {
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  final List<AnimationController> _cardControllers = [];
  final List<Animation<double>> _cardAnimations = [];
  final ApprovalService _approvalService = ApprovalService();

  RegistrationDetails? _registrationData;
  bool _isLoading = false;
  String? _errorMessage;
  String? _inflCode;

  @override
  void initState() {
    super.initState();

    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );

    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );

    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );

    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );

    // Initialize card animations
    for (int i = 0; i < 4; i++) {
      final controller = AnimationController(
        duration: const Duration(milliseconds: 400),
        vsync: this,
      );
      final animation = CurvedAnimation(
        parent: controller,
        curve: Curves.easeOutCubic,
      );
      _cardControllers.add(controller);
      _cardAnimations.add(animation);

      // Stagger the card animations
      Future.delayed(Duration(milliseconds: 200 + (i * 100)), () {
        if (mounted) controller.forward();
      });
    }

    _mainController.forward();
    _fabController.forward();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (_registrationData == null && !_isLoading && _errorMessage == null) {
      // Add a small delay to ensure route is fully established
      Future.delayed(const Duration(milliseconds: 100), () {
        if (mounted) {
          _loadRegistrationDetails();
        }
      });
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    for (var controller in _cardControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  void _loadRegistrationDetails() async {
    final args = ModalRoute.of(context)?.settings.arguments;
    print('DEBUG: Route arguments: $args');

    if (args == null) {
      setState(() {
        _errorMessage = 'No registration data provided';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      String identifier;
      if (args is String) {
        identifier = args;
        print('DEBUG: Using String as identifier: $identifier');
      } else if (args is Map<String, dynamic>) {
        identifier = args['id'] ?? '';
        print('DEBUG: Extracted identifier from Map: $identifier');
      } else {
        print('DEBUG: Invalid arguments type: ${args.runtimeType}');
        throw Exception('Invalid arguments format: ${args.runtimeType}');
      }

      if (identifier.isEmpty) {
        throw Exception('No identifier provided');
      }

      print('DEBUG: Looking up registration details for identifier: $identifier');

      // Use the new dynamic lookup method
      final details = await _approvalService.getRegistrationDetailsByIdentifier(identifier);
      _inflCode = details.id; // Store the actual inflCode for approve/reject actions

      print('DEBUG: Successfully received details for: ${details.name} (inflCode: ${details.id})');

      setState(() {
        _registrationData = details;
        _isLoading = false;
      });
    } catch (e) {
      print('DEBUG: Error loading details: $e');
      setState(() {
        _errorMessage = e.toString();
        _isLoading = false;
      });
    }
  }

  void _testApiWithSampleId() async {
    print('DEBUG: Testing API with sample identifier');
    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      // Test with any identifier - could be name, mobile, email, or inflCode
      const testIdentifier = 'John'; // Change this to any name, mobile, email, or inflCode from your DB
      print('DEBUG: Testing with identifier: $testIdentifier');

      final details = await _approvalService.getRegistrationDetailsByIdentifier(testIdentifier);
      _inflCode = details.id;
      print('DEBUG: Test successful! Received details: ${details.name} (inflCode: ${details.id})');

      setState(() {
        _registrationData = details;
        _isLoading = false;
      });
    } catch (e) {
      print('DEBUG: Test failed with error: $e');
      setState(() {
        _errorMessage = 'Test failed: $e';
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // Debug: Check arguments every time build is called
    final currentArgs = ModalRoute.of(context)?.settings.arguments;
    print('DEBUG BUILD: Current arguments: $currentArgs, hasData: ${_registrationData != null}, isLoading: $_isLoading, error: $_errorMessage');

    // Set system UI overlay style
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
      ),
    );

    return Scaffold(
      backgroundColor: Colors.grey.shade50,
      appBar: _buildModernAppBar(),
      body: FadeTransition(
        opacity: _fadeAnimation,
        child: SlideTransition(
          position: _slideAnimation,
          child: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.cyan.shade50,
                  Colors.white,
                  Colors.grey.shade50,
                ],
              ),
            ),
            child: LayoutBuilder(
              builder: (context, constraints) {
                final isMobile = constraints.maxWidth < 600;
                final isTablet =
                    constraints.maxWidth >= 600 && constraints.maxWidth < 1200;
                final isDesktop = constraints.maxWidth >= 1200;

                if (_isLoading) {
                  return const Center(
                    child: CircularProgressIndicator(),
                  );
                }

                if (_errorMessage != null) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.error_outline,
                          size: 64,
                          color: Colors.red.shade400,
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Error loading data',
                          style: TextStyle(
                            color: Colors.red.shade700,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          _errorMessage!,
                          style: TextStyle(color: Colors.red.shade600),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: _loadRegistrationDetails,
                          child: const Text('Retry'),
                        ),
                      ],
                    ),
                  );
                }

                if (_registrationData == null) {
                  return Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Text('No registration data available'),
                        const SizedBox(height: 16),
                        Text('Arguments: ${ModalRoute.of(context)?.settings.arguments}'),
                        const SizedBox(height: 16),
                        ElevatedButton(
                          onPressed: _loadRegistrationDetails,
                          child: const Text('Retry Load'),
                        ),
                        const SizedBox(height: 8),
                        ElevatedButton(
                          onPressed: () => _testApiWithSampleId(),
                          child: const Text('Test API with Sample ID'),
                        ),
                      ],
                    ),
                  );
                }

                return SingleChildScrollView(
                  padding: EdgeInsets.all(isMobile ? 16 : (isTablet ? 24 : 32)),
                  child: ScaleTransition(
                    scale: _scaleAnimation,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Header with animation
                        _buildAnimatedHeader(isMobile, isTablet, isDesktop),

                        SizedBox(height: isMobile ? 24 : 32),

                        // Registration Information Card
                        _buildRegistrationInfoCard(isMobile, 0),

                        SizedBox(height: isMobile ? 16 : 24),

                        // Personal Details Card
                        _buildPersonalDetailsCard(isMobile, 1),

                        SizedBox(height: isMobile ? 16 : 24),

                        // Business Details Card
                        _buildBusinessDetailsCard(isMobile, 2),

                        SizedBox(height: isMobile ? 16 : 24),

                        // Bank Details Card
                        _buildBankDetailsCard(isMobile, 3),

                        SizedBox(height: isMobile ? 24 : 32),

                        // Action Buttons
                        _buildActionButtons(isMobile),

                        SizedBox(height: isMobile ? 24 : 32),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ),
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.transparent,
      foregroundColor: Colors.cyan.shade800,
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: CustomBackButton(animated: false, size: 36),
            )
          : null,
      title: Text(
        'Registration Details',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.refresh),
          onPressed: () {
            print('DEBUG: Manual refresh triggered');
            _loadRegistrationDetails();
          },
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader(bool isMobile, bool isTablet, bool isDesktop) {
    final statusColor = _registrationData!.status == 'Pending'
        ? Colors.orange
        : _registrationData!.status == 'Approved'
        ? Colors.green
        : Colors.red;

    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(isMobile ? 20 : (isTablet ? 25 : 30)),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.cyan.shade700, Colors.cyan.shade500],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(
          isMobile ? 16 : (isTablet ? 18 : 20),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.cyan.withOpacity(0.2),
            blurRadius: isMobile ? 15 : 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    TweenAnimationBuilder<double>(
                      tween: Tween<double>(begin: 0, end: 1),
                      duration: const Duration(milliseconds: 800),
                      curve: Curves.easeOut,
                      builder: (context, value, child) {
                        return Transform.translate(
                          offset: Offset(0, 30 * (1 - value)),
                          child: Opacity(opacity: value, child: child),
                        );
                      },
                      child: Text(
                        'Registration Details',
                        style: TextStyle(
                          fontSize: isMobile ? 24 : (isTablet ? 28 : 32),
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        TweenAnimationBuilder<double>(
                          tween: Tween<double>(begin: 0, end: 1),
                          duration: const Duration(milliseconds: 800),
                          curve: Curves.easeOut,
                          builder: (context, value, child) {
                            return Transform.translate(
                              offset: Offset(0, 30 * (1 - value)),
                              child: Opacity(opacity: value, child: child),
                            );
                          },
                          child: Text(
                            'ID: ${_registrationData!.id}',
                            style: TextStyle(
                              fontSize: isMobile ? 14 : (isTablet ? 15 : 16),
                              color: Colors.white70,
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 8,
                            vertical: 4,
                          ),
                          decoration: BoxDecoration(
                            color: statusColor.withOpacity(0.2),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            _registrationData!.status,
                            style: TextStyle(
                              fontSize: isMobile ? 12 : 14,
                              fontWeight: FontWeight.bold,
                              color: statusColor,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              TweenAnimationBuilder<double>(
                tween: Tween<double>(begin: 0, end: 1),
                duration: const Duration(milliseconds: 800),
                curve: Curves.easeOut,
                builder: (context, value, child) {
                  return Transform.scale(scale: value, child: child);
                },
                child: Container(
                  width: isMobile ? 50 : 60,
                  height: isMobile ? 50 : 60,
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    _registrationData!.type == 'Contractor'
                        ? Icons.business_rounded
                        : Icons.format_paint_rounded,
                    color: Colors.white,
                    size: isMobile ? 24 : 30,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildRegistrationInfoCard(bool isMobile, int cardIndex) {
    return ScaleTransition(
      scale: _cardAnimations[cardIndex],
      child: Container(
        padding: EdgeInsets.all(isMobile ? 16 : 20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(isMobile ? 12 : 16),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  width: isMobile ? 36 : 40,
                  height: isMobile ? 36 : 40,
                  decoration: BoxDecoration(
                    color: Colors.cyan.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.info_rounded,
                    color: Colors.cyan.shade700,
                    size: isMobile ? 18 : 20,
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  'Registration Information',
                  style: TextStyle(
                    fontSize: isMobile ? 16 : 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildInfoRow(
              'Registration ID:',
              _registrationData!.id,
              isMobile,
            ),
            _buildInfoRow(
              'Name:',
              _registrationData!.name,
              isMobile,
            ),
            _buildInfoRow(
              'Type:',
              _registrationData!.type,
              isMobile,
            ),
            _buildInfoRow(
              'Mobile:',
              _registrationData!.mobile,
              isMobile,
            ),
            _buildInfoRow(
              'Email:',
              _registrationData!.email,
              isMobile,
            ),
            _buildInfoRow(
              'Submitted Date:',
              _registrationData!.submittedDate,
              isMobile,
            ),
            _buildInfoRow(
              'Status:',
              _registrationData!.status,
              isMobile,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPersonalDetailsCard(bool isMobile, int cardIndex) {
    return ScaleTransition(
      scale: _cardAnimations[cardIndex],
      child: Container(
        padding: EdgeInsets.all(isMobile ? 16 : 20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(isMobile ? 12 : 16),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  width: isMobile ? 36 : 40,
                  height: isMobile ? 36 : 40,
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.person_rounded,
                    color: Colors.blue.shade700,
                    size: isMobile ? 18 : 20,
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  'Personal Details',
                  style: TextStyle(
                    fontSize: isMobile ? 16 : 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildInfoRow(
              'Full Name:',
              _registrationData!.fullName,
              isMobile,
            ),
            _buildInfoRow(
              'Address:',
              _registrationData!.address,
              isMobile,
            ),
            _buildInfoRow(
              'Reference:',
              _registrationData!.reference,
              isMobile,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBusinessDetailsCard(bool isMobile, int cardIndex) {
    return ScaleTransition(
      scale: _cardAnimations[cardIndex],
      child: Container(
        padding: EdgeInsets.all(isMobile ? 16 : 20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(isMobile ? 12 : 16),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  width: isMobile ? 36 : 40,
                  height: isMobile ? 36 : 40,
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.business_rounded,
                    color: Colors.green.shade700,
                    size: isMobile ? 18 : 20,
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  'Business Details',
                  style: TextStyle(
                    fontSize: isMobile ? 16 : 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildInfoRow(
              'Company Name:',
              _registrationData!.companyName,
              isMobile,
            ),
            _buildInfoRow(
              'License Number:',
              _registrationData!.licenseNumber,
              isMobile,
            ),
            _buildInfoRow(
              'TRN Number:',
              _registrationData!.trnNumber,
              isMobile,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBankDetailsCard(bool isMobile, int cardIndex) {
    return ScaleTransition(
      scale: _cardAnimations[cardIndex],
      child: Container(
        padding: EdgeInsets.all(isMobile ? 16 : 20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(isMobile ? 12 : 16),
          boxShadow: [
            BoxShadow(
              color: Colors.grey.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  width: isMobile ? 36 : 40,
                  height: isMobile ? 36 : 40,
                  decoration: BoxDecoration(
                    color: Colors.purple.withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    Icons.account_balance_rounded,
                    color: Colors.purple.shade700,
                    size: isMobile ? 18 : 20,
                  ),
                ),
                const SizedBox(width: 12),
                Text(
                  'Bank Details',
                  style: TextStyle(
                    fontSize: isMobile ? 16 : 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.black87,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildInfoRow(
              'Account Holder:',
              _registrationData!.accountHolder,
              isMobile,
            ),
            _buildInfoRow(
              'IBAN:',
              _registrationData!.iban,
              isMobile,
            ),
            _buildInfoRow(
              'Bank Name:',
              _registrationData!.bankName,
              isMobile,
            ),
            _buildInfoRow(
              'Branch:',
              _registrationData!.branch,
              isMobile,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value, bool isMobile) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: isMobile ? 120 : 150,
            child: Text(
              label,
              style: TextStyle(
                fontSize: isMobile ? 14 : 16,
                fontWeight: FontWeight.bold,
                color: Colors.grey.shade700,
              ),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                fontSize: isMobile ? 14 : 16,
                color: Colors.black87,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons(bool isMobile) {
    return Row(
      children: [
        Expanded(
          child: ElevatedButton(
            onPressed: () {
              _showApproveDialog(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
              elevation: 4,
              padding: EdgeInsets.symmetric(vertical: isMobile ? 12 : 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(isMobile ? 8 : 12),
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.check_circle_rounded),
                const SizedBox(width: 8),
                Text(
                  'Approve',
                  style: TextStyle(
                    fontSize: isMobile ? 14 : 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: ElevatedButton(
            onPressed: () {
              _showRejectDialog(context);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              elevation: 4,
              padding: EdgeInsets.symmetric(vertical: isMobile ? 12 : 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(isMobile ? 8 : 12),
              ),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(Icons.cancel_rounded),
                const SizedBox(width: 8),
                Text(
                  'Reject',
                  style: TextStyle(
                    fontSize: isMobile ? 14 : 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  void _showApproveDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                width: 60,
                height: 60,
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  Icons.check_circle_rounded,
                  size: 30,
                  color: Colors.green,
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Approve Registration',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              Text(
                'Are you sure you want to approve this registration?',
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 8,
                ),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.star_rounded, color: Colors.amber, size: 16),
                    SizedBox(width: 4),
                    Text(
                      '100 bonus points will be awarded upon \napproval.',
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.w500,
                        color: Color.fromARGB(255, 19, 149, 255),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: () => Navigator.pop(context),
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: Text('Cancel', style: AppTheme.body),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () async {
                        Navigator.pop(context);
                        if (_inflCode != null) {
                          try {
                            await _approvalService.approveItem(_inflCode!);
                            Navigator.pushNamed(context, '/success');
                          } catch (e) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text('Failed to approve: $e')),
                            );
                          }
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: Text(
                        'Approve',
                        style: AppTheme.success.copyWith(color: Colors.white),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showRejectDialog(BuildContext context) {
    final TextEditingController commentController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Container(
                width: 60,
                height: 60,
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  Icons.cancel_rounded,
                  size: 30,
                  color: Colors.red,
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Reject Registration',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              const Text(
                'Please provide a reason for rejection:',
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
              TextField(
                controller: commentController,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                  hintText: 'Enter rejection reason...',
                  contentPadding: const EdgeInsets.all(12),
                ),
                maxLines: 3,
              ),
              const SizedBox(height: 24),
              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: () => Navigator.pop(context),
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text('Cancel'),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () async {
                        Navigator.pop(context);
                        if (_inflCode != null) {
                          try {
                            await _approvalService.rejectItem(
                              _inflCode!,
                              reason: commentController.text,
                            );
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: const Text(
                                  'Registration rejected successfully',
                                ),
                                behavior: SnackBarBehavior.floating,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                backgroundColor: Colors.red.shade700,
                              ),
                            );
                            Navigator.pop(context);
                          } catch (e) {
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(content: Text('Failed to reject: $e')),
                            );
                          }
                        }
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text('Reject'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}





























using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class ApprovalController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public ApprovalController(DatabaseHelper dbHelper)
        {
            _db = dbHelper;
        }

        // ------------------------------------------------------------
        // 1) PENDING LIST (paged + search + filter by type)
        // GET: /api/Approval/pending?search=&type=All&page=1&pageSize=20
        // ------------------------------------------------------------
        [HttpGet("pending")]
        public IActionResult GetPending(
            [FromQuery] string? search = "",
            [FromQuery] string? type = "All",
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 20,
            [FromQuery] string? sort = "createDt_desc")
        {
            page = page <= 0 ? 1 : page;
            pageSize = pageSize <= 0 ? 20 : pageSize;
            var skip = (page - 1) * pageSize;

            // Only PENDING rows now: isActive NOT IN ('Y','R'); also exclude blocked
            var where = @"
WHERE 
    ISNULL(blkStuts,'N') <> 'Y'
    AND ISNULL(isActive,'') NOT IN ('Y','R')
";
            var p = new Dictionary<string, object?>();

            // Filter by type (friendly label or 2-char code)
            if (!string.IsNullOrWhiteSpace(type) && !type.Equals("All", StringComparison.OrdinalIgnoreCase))
            {
                where += "  AND (contrtyp = @type OR inflType = @typeShort)\n";
                p["@type"] = type;
                p["@typeShort"] = (type.Length >= 2 ? type[..2] : type).ToUpperInvariant();
            }

            // Search
            if (!string.IsNullOrWhiteSpace(search))
            {
                where += @"
  AND (
        inflName LIKE @kw 
        OR (LTRIM(RTRIM(ISNULL(frstname,''))) + ' ' + LTRIM(RTRIM(ISNULL(middname,''))) + ' ' + LTRIM(RTRIM(ISNULL(lastname,'')))) LIKE @kw
        OR mobileNo LIKE @kw
        OR areaCode LIKE @kw
        OR inflCode LIKE @kw
        OR contrtyp LIKE @kw
      )
";
                p["@kw"] = $"%{search.Trim()}%";
            }

            // Sorting
            string orderBy = sort?.ToLowerInvariant() switch
            {
                "name_asc" => "ORDER BY name ASC",
                "name_desc" => "ORDER BY name DESC",
                "type_asc" => "ORDER BY type ASC",
                "type_desc" => "ORDER BY type DESC",
                "date_asc" => "ORDER BY dt ASC",
                _ => "ORDER BY dt DESC", // default date_desc
            };

            // Single result set with COUNT() OVER()
            var sql = $@"
;WITH base AS
(
    SELECT
        inflCode,
        LTRIM(RTRIM(
            NULLIF(
                CONCAT(
                    NULLIF(LTRIM(RTRIM(ISNULL(frstname,''))),''), ' ',
                    NULLIF(LTRIM(RTRIM(ISNULL(middname,''))),''), ' ',
                    NULLIF(LTRIM(RTRIM(ISNULL(lastname,''))),'')
                ), '  ')
        )) AS compositeName,
        inflName,
        ISNULL(contrtyp, '') AS contrtyp,
        ISNULL(inflType, '') AS inflType,
        ISNULL(isActive,'') AS isActive,
        COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) AS dt
    FROM dbo.ctmInfluncr WITH (NOLOCK)
    {where}
)
, shaped AS
(
    SELECT
        inflCode AS id,
        CAST(NULLIF(LTRIM(RTRIM(CASE WHEN ISNULL(compositeName,'') <> '' THEN compositeName ELSE inflName END)), '') AS NVARCHAR(256)) AS name,
        CAST(NULLIF(LTRIM(RTRIM(CASE WHEN ISNULL(contrtyp,'') <> '' THEN contrtyp ELSE inflType END)), '') AS NVARCHAR(255)) AS type,
        dt,
        CASE 
            WHEN isActive = 'Y' THEN 'Approved'
            WHEN isActive = 'R' THEN 'Rejected'
            ELSE 'Pending'
        END AS status
    FROM base
)
SELECT
    id,
    ISNULL(name,'') AS name,
    CASE WHEN ISNULL(type,'')='' THEN 'Contractor' ELSE type END AS type,
    CONVERT(VARCHAR(10), dt, 120) AS [date], -- yyyy-MM-dd
    status,
    COUNT(1) OVER() AS total
FROM shaped
{orderBy}
OFFSET @skip ROWS FETCH NEXT @take ROWS ONLY;
";

            p["@skip"] = skip;
            p["@take"] = pageSize;

            var rows = _db.WebSessBean(sql, p ?? new Dictionary<string, object?>())
                       ?? new List<Dictionary<string, object>>();

            int total = 0;
            if (rows.Count > 0)
            {
                var tStr = rows[0].GetValueOrDefault("total")?.ToString();
                _ = int.TryParse(tStr, out total);
            }

            var items = rows.Select(r =>
            {
                var id = r["id"]?.ToString() ?? "";
                var name = r["name"]?.ToString() ?? "";
                var typeOut = r["type"]?.ToString() ?? "Contractor";
                var date = r["date"]?.ToString() ?? "";
                var status = r["status"]?.ToString() ?? "Pending";
                return new
                {
                    id,
                    name,
                    type = typeOut,
                    date,
                    status,
                    avatar = MakeAvatar(name, id)
                };
            });

            return Ok(new
            {
                success = true,
                page,
                pageSize,
                total,
                items
            });
        }

        // ------------------------------------------------------------
        // 2) STATS for the 3 cards (based on isActive)
        // GET: /api/Approval/stats
        // ------------------------------------------------------------
        [HttpGet("stats")]
        public IActionResult GetStats()
        {
            var sql = @"
;WITH base AS
(
    SELECT
        ISNULL(isActive,'') AS ia,
        ISNULL(contrtyp,'') AS contrtyp,
        ISNULL(inflType,'') AS inflType
    FROM dbo.ctmInfluncr WITH (NOLOCK)
    WHERE ISNULL(blkStuts,'N') <> 'Y'
)
SELECT 
    (SELECT COUNT(1) FROM base WHERE ia NOT IN ('Y','R')) AS totalPending,
    (SELECT COUNT(1) FROM base WHERE ia NOT IN ('Y','R') AND (contrtyp LIKE '%Contractor%' OR inflType = 'CO')) AS contractors,
    (SELECT COUNT(1) FROM base WHERE ia NOT IN ('Y','R') AND (contrtyp LIKE '%Painter%' OR inflType = 'PA')) AS painters;
";
            var rows = _db.WebSessBean(sql, new Dictionary<string, object?>())
                       ?? new List<Dictionary<string, object>>();
            var r = rows.FirstOrDefault() ?? new Dictionary<string, object>();

            int Tot(string k) => int.TryParse(r.GetValueOrDefault(k)?.ToString(), out var v) ? v : 0;

            return Ok(new
            {
                success = true,
                totalPending = Tot("totalPending"),
                contractors = Tot("contractors"),
                painters = Tot("painters"),
                timestamp = DateTime.Now
            });
        }

        // ------------------------------------------------------------
        // 3) APPROVE: set isActive = 'Y'
        // POST: /api/Approval/approve  { inflCode, actorId }
        // ------------------------------------------------------------
        [HttpPost("approve")]
        public IActionResult Approve([FromBody] ApprovalActionRequest req)
        {
            if (string.IsNullOrWhiteSpace(req.InflCode))
                return BadRequest(new { success = false, message = "InflCode is required" });

            var p = new Dictionary<string, object?>
            {
                ["@code"] = req.InflCode,
                ["@usr"] = Cut(req.ActorId ?? "API", 10)
            };

            var sql = @"
UPDATE dbo.ctmInfluncr
   SET isActive = 'Y',
       updateId = @usr,
       updateDt = GETDATE()
 WHERE inflCode = @code;
SELECT @@ROWCOUNT AS rc;
";
            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var rc = rows.FirstOrDefault()?["rc"]?.ToString();
            if (rc == "0") return NotFound(new { success = false, message = "Not found" });

            return Ok(new { success = true, message = "Approved", influencerCode = req.InflCode });
        }

        // ------------------------------------------------------------
        // 4) REJECT: set isActive = 'R'
        // POST: /api/Approval/reject  { inflCode, reason, actorId }
        // ------------------------------------------------------------
        [HttpPost("reject")]
        public IActionResult Reject([FromBody] RejectionActionRequest req)
        {
            if (string.IsNullOrWhiteSpace(req.InflCode))
                return BadRequest(new { success = false, message = "InflCode is required" });

            var p = new Dictionary<string, object?>
            {
                ["@code"] = req.InflCode,
                ["@usr"] = Cut(req.ActorId ?? "API", 10),
                ["@rem"] = Cut(req.Reason ?? "", 1000)
            };

            var sql = @"
UPDATE dbo.ctmInfluncr
   SET isActive = 'R',
       rjcRemrk = @rem,
       updateId = @usr,
       updateDt = GETDATE()
 WHERE inflCode = @code;
SELECT @@ROWCOUNT AS rc;
";
            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var rc = rows.FirstOrDefault()?["rc"]?.ToString();
            if (rc == "0") return NotFound(new { success = false, message = "Not found" });

            return Ok(new { success = true, message = "Rejected", influencerCode = req.InflCode });
        }


        // ------------------------------------------------------------

        // 5) DETAILS by inflCode (for Registration Details screen)

        // GET: /api/Approval/{inflCode}

        // ------------------------------------------------------------

        // Add inside ApprovalController

        // ------------------------------------------------------------

        // COMPACT DETAILS for RegistrationDetailsScreen

        // GET: /api/Approval/details/{inflCode}

        // ------------------------------------------------------------

        [HttpGet("details/{inflCode}")]
        public IActionResult GetCompactDetails([FromRoute] string inflCode)
        {
            if (string.IsNullOrWhiteSpace(inflCode))
                return BadRequest(new { success = false, message = "inflCode is required" });

            var p = new Dictionary<string, object?>
            {
                ["@code"] = inflCode.Trim()
            };

            var sql = @"
  SELECT TOP 1
      -- keys / status / typing
      inflCode,
      ISNULL(isActive,'')            AS isActive,
      ISNULL(contrtyp,'')            AS contrtyp,
      ISNULL(inflType,'')            AS inflType,
      CONVERT(VARCHAR(10), COALESCE(createDt, sapInsDt, frstScDt, GETDATE()), 120) AS submittedDate,        

      -- names
      LTRIM(RTRIM(ISNULL(frstname,''))) AS frstname,
      LTRIM(RTRIM(ISNULL(middname,''))) AS middname,
      LTRIM(RTRIM(ISNULL(lastname,''))) AS lastname,
      LTRIM(RTRIM(ISNULL(inflName,''))) AS inflName,

      -- contact
      ISNULL(mobileNo,'')            AS mobileNo,
      ISNULL(emailAdd,'')            AS emailAdd,

      -- reference
      ISNULL(referenc,'')            AS referenc,

      -- address (present)
      ISNULL(inflAdd1,'')            AS inflAdd1,
      ISNULL(inflAdd2,'')            AS inflAdd2,
      ISNULL(inflAdd3,'')            AS inflAdd3,
      ISNULL(inflCity,'')            AS inflCity,
      ISNULL(district,'')            AS district,
      ISNULL(inflPinC,'')            AS inflPinC,

      -- business / VAT / license
      ISNULL(comtrdnm,'')            AS comtrdnm,
      ISNULL(vatfrmnm,'')            AS vatfrmnm,
      ISNULL(comlcnno,'')            AS comlcnno,
      ISNULL(vattxreg,'')            AS vattxreg,

      -- bank
      ISNULL(bankApNm,'')            AS bankApNm,
      ISNULL(ibannumb,'')            AS ibannumb,
      ISNULL(bankBnNm,'')            AS bankBnNm,
      ISNULL(bankBnDs,'')            AS bankBnDs
  FROM dbo.ctmInfluncr WITH (NOLOCK)
  WHERE inflCode = @code;
  ";

            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var r = rows.FirstOrDefault();

            if (r == null)
                return NotFound(new { success = false, message = "Registration not found" });

            string G(string k) => r.GetValueOrDefault(k)?.ToString() ?? "";

            // Status mapping
            static string MapStatus(string ia) => (ia ?? "").Trim().ToUpperInvariant() switch
            {
                "Y" => "Approved",
                "R" => "Rejected",
                _ => "Pending"
            };

            // Compose display name
            var fullName = ComposeName(G("frstname"), G("middname"), G("lastname"), G("inflName"));
            var name = string.IsNullOrWhiteSpace(fullName) ? G("inflName") : fullName;

            // Type: prefer contrtyp; fallback inflType; final fallback "Contractor"
            var typeRaw = string.IsNullOrWhiteSpace(G("contrtyp")) ? G("inflType") : G("contrtyp");
            var type = string.IsNullOrWhiteSpace(typeRaw) ? "Contractor" : typeRaw;

            // Company name: prefer trade name, else firm name
            var companyName = string.IsNullOrWhiteSpace(G("comtrdnm")) ? G("vatfrmnm") : G("comtrdnm");

            // Address line
            string AddressLine(params string[] parts)
            {
                var clean = parts
                    .Select(x => (x ?? "").Trim())
                    .Where(x => !string.IsNullOrWhiteSpace(x))
                    .ToList();
                return string.Join(", ", clean);
            }

            var address = AddressLine(G("inflAdd1"), G("inflAdd2"), G("inflAdd3"), G("inflCity"),
        G("district"), G("inflPinC"));
            var status = MapStatus(G("isActive"));

            return Ok(new
            {
                success = true,
                id = G("inflCode"),
                name = name,
                type = type,
                mobile = G("mobileNo"),
                email = G("emailAdd"),
                submittedDate = G("submittedDate"),
                status = status,
                fullName = name,
                address = address,
                reference = G("referenc"),
                companyName = companyName,
                licenseNumber = G("comlcnno"),
                trnNumber = G("vattxreg"),
                accountHolder = G("bankApNm"),
                iban = G("ibannumb"),
                bankName = G("bankBnNm"),
                branch = G("bankBnDs"),
                avatar = MakeAvatar(name, G("inflCode"))
            });
        }

        // ------------------------------------------------------------
        // FULL REGISTRATION DETAILS by inflCode (for details screen)
        // GET: /api/Approval/{inflCode}
        // ------------------------------------------------------------
        [HttpGet("{inflCode}")]
        public IActionResult GetRegistrationDetails([FromRoute] string inflCode)
        {
            if (string.IsNullOrWhiteSpace(inflCode))
                return BadRequest(new { success = false, message = "inflCode is required" });

            var p = new Dictionary<string, object?>
            {
                ["@code"] = inflCode.Trim()
            };

            var sql = @"
SELECT TOP 1
    -- keys / status / typing
    inflCode,
    ISNULL(isActive,'')            AS isActive,
    ISNULL(contrtyp,'')            AS contrtyp,
    ISNULL(inflType,'')            AS inflType,
    COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) AS submittedDateDt,

    -- names
    LTRIM(RTRIM(ISNULL(frstname,''))) AS frstname,
    LTRIM(RTRIM(ISNULL(middname,''))) AS middname,
    LTRIM(RTRIM(ISNULL(lastname,''))) AS lastname,
    LTRIM(RTRIM(ISNULL(inflName,''))) AS inflName,

    -- contact
    ISNULL(mobileNo,'')            AS mobileNo,
    ISNULL(emailAdd,'')            AS emailAdd,

    -- reference
    ISNULL(referenc,'')            AS referenc,

    -- address (present)
    ISNULL(inflAdd1,'')            AS inflAdd1,
    ISNULL(inflAdd2,'')            AS inflAdd2,
    ISNULL(inflAdd3,'')            AS inflAdd3,
    ISNULL(inflCity,'')            AS inflCity,
    ISNULL(district,'')            AS district,
    ISNULL(inflPinC,'')            AS inflPinC,

    -- business / VAT / license
    ISNULL(comtrdnm,'')            AS comtrdnm,   -- Trade Name (preferred companyName)
    ISNULL(vatfrmnm,'')            AS vatfrmnm,   -- Firm Name (fallback companyName)
    ISNULL(comlcnno,'')            AS comlcnno,   -- License Number
    ISNULL(vattxreg,'')            AS vattxreg,   -- TRN Number

    -- bank
    ISNULL(bankApNm,'')            AS bankApNm,   -- Account Holder
    ISNULL(ibannumb,'')            AS ibannumb,   -- IBAN
    ISNULL(bankBnNm,'')            AS bankBnNm,   -- Bank Name
    ISNULL(bankBnDs,'')            AS bankBnDs    -- Branch
FROM dbo.ctmInfluncr WITH (NOLOCK)
WHERE inflCode = @code;
";

            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var r = rows.FirstOrDefault();
            if (r == null)
                return NotFound(new { success = false, message = "Not found" });

            string G(string k) => r.GetValueOrDefault(k)?.ToString() ?? "";

            // Compose display name
            var fullName = ComposeName(G("frstname"), G("middname"), G("lastname"), G("inflName"));
            var name = string.IsNullOrWhiteSpace(fullName) ? G("inflName") : fullName;

            // Type: prefer contrtyp; fallback inflType; final fallback "Contractor"
            var typeRaw = string.IsNullOrWhiteSpace(G("contrtyp")) ? G("inflType") : G("contrtyp");
            var type = string.IsNullOrWhiteSpace(typeRaw) ? "Contractor" : typeRaw;

            // Company name: prefer trade name, else firm name
            var companyName = string.IsNullOrWhiteSpace(G("comtrdnm")) ? G("vatfrmnm") : G("comtrdnm");

            // Address line
            string AddressLine(params string[] parts)
                => string.Join(", ", parts.Where(x => !string.IsNullOrWhiteSpace(x?.Trim()))
                                          .Select(x => x!.Trim()));

            var address = AddressLine(G("inflAdd1"), G("inflAdd2"), G("inflAdd3"),
                                      G("inflCity"), G("district"), G("inflPinC"));

            // Status + date format
            var status = MapStatus(G("isActive"));
            var submittedDate = DateTime.TryParse(r.GetValueOrDefault("submittedDateDt")?.ToString(), out var dt)
                                ? dt.ToString("yyyy-MM-dd")
                                : DateTime.Now.ToString("yyyy-MM-dd");

            return Ok(new
            {
                success = true,

                // Header / Registration Information
                id = G("inflCode"),
                name = name,
                type = type,
                mobile = G("mobileNo"),
                email = G("emailAdd"),
                submittedDate = submittedDate,
                status = status,

                // Personal Details
                fullName = name,
                address = address,
                reference = G("referenc"),

                // Business Details
                companyName = companyName,
                licenseNumber = G("comlcnno"),
                trnNumber = G("vattxreg"),

                // Bank Details
                accountHolder = G("bankApNm"),
                iban = G("ibannumb"),
                bankName = G("bankBnNm"),
                branch = G("bankBnDs"),

                // UI avatar
                avatar = MakeAvatar(name, G("inflCode"))
            });
        }


        [HttpGet("lookup/{identifier}")]
        public IActionResult GetInflCodeByIdentifier([FromRoute] string identifier)
        {
            if (string.IsNullOrWhiteSpace(identifier))
                return BadRequest(new { success = false, message = "identifier is required" });

            var p = new Dictionary<string, object?>
            {
                ["@identifier"] = identifier.Trim()
            };

            // Search by multiple criteria to find the inflCode
            var sql = @"
  SELECT TOP 1
      inflCode,
      LTRIM(RTRIM(
          NULLIF(
              CONCAT(
                  NULLIF(LTRIM(RTRIM(ISNULL(frstname,''))),''), ' ',
                  NULLIF(LTRIM(RTRIM(ISNULL(middname,''))),''), ' ',
                  NULLIF(LTRIM(RTRIM(ISNULL(lastname,''))),'')
              ), '  ')
      )) AS compositeName,
      inflName,
      mobileNo,
      emailAdd
  FROM dbo.ctmInfluncr WITH (NOLOCK)
  WHERE
      ISNULL(blkStuts,'N') <> 'Y'
      AND (
          inflCode = @identifier
          OR LTRIM(RTRIM(
              NULLIF(
                  CONCAT(
                      NULLIF(LTRIM(RTRIM(ISNULL(frstname,''))),''), ' ',
                      NULLIF(LTRIM(RTRIM(ISNULL(middname,''))),''), ' ',
                      NULLIF(LTRIM(RTRIM(ISNULL(lastname,''))),'')
                  ), '  ')
          )) = @identifier
          OR inflName = @identifier
          OR mobileNo = @identifier
          OR emailAdd = @identifier
      );
  ";

            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var r = rows.FirstOrDefault();

            if (r == null)
                return NotFound(new { success = false, message = "Person not found" });

            string G(string k) => r.GetValueOrDefault(k)?.ToString() ?? "";

            return Ok(new
            {
                success = true,
                inflCode = G("inflCode"),
                name = string.IsNullOrWhiteSpace(G("compositeName")) ? G("inflName") :
G("compositeName"),
                mobile = G("mobileNo"),
                email = G("emailAdd")
            });
        }






        // ========================= Helpers =========================

        private static string MapStatus(string? ia)
        {
            ia = (ia ?? "").Trim().ToUpperInvariant();
            return ia switch
            {
                "Y" => "Approved",
                "R" => "Rejected",
                _ => "Pending"
            };
        }

        private static string MakeAvatar(string? name, string? fallbackId)
        {
            // build initials from name, else from inflCode
            if (!string.IsNullOrWhiteSpace(name))
            {
                var parts = Regex.Split(name.Trim(), @"\s+")
                                 .Where(s => !string.IsNullOrWhiteSpace(s))
                                 .ToList();
                if (parts.Count == 1)
                {
                    return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpperInvariant();
                }
                if (parts.Count >= 2)
                {
                    var a = parts[0][0];
                    var b = parts[^1][0];
                    return $"{char.ToUpperInvariant(a)}{char.ToUpperInvariant(b)}";
                }
            }
            var f = (fallbackId ?? "ID");
            return f.Length >= 2 ? f.Substring(0, 2).ToUpperInvariant() : f.ToUpperInvariant();
        }

        private static string ComposeName(string? f, string? m, string? l, string? fallback)
        {
            var list = new[] { f, m, l }
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .Select(x => x!.Trim());
            var joined = string.Join(" ", list).Trim();
            if (!string.IsNullOrWhiteSpace(joined)) return joined;
            return (fallback ?? "").Trim();
        }

        private static string? Left(string? s, int n)
        {
            if (string.IsNullOrWhiteSpace(s)) return null;
            var t = s.Trim();
            return t.Length <= n ? t : t.Substring(0, n);
        }

        private static string Cut(string? s, int max)
        {
            if (string.IsNullOrWhiteSpace(s)) return "";
            var t = s.Trim();
            return t.Length <= max ? t : t[..max];
        }

        private static string TryDate(string? sqlDate)
        {
            // Expecting yyyy-MM-ddTHH:mm:ss or SQL smalldatetime string; we output yyyy-MM-dd for Flutter
            if (DateTime.TryParse(sqlDate, out var dt))
                return dt.ToString("yyyy-MM-dd");
            return DateTime.Now.ToString("yyyy-MM-dd");
        }
    }

    // ========================= Request Models =========================

    public class ApprovalActionRequest
    {
        public string? InflCode { get; set; }
        public string? ActorId { get; set; }   // loginId to set updateId
    }

    public class RejectionActionRequest : ApprovalActionRequest
    {
        public string? Reason { get; set; }    // goes to rjcRemrk
    }
}
