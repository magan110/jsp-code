using Dapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class GrcLeadController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;
        private readonly IConfiguration _configuration;
        private readonly string _connectionString;

        public GrcLeadController(DatabaseHelper dbHelper, IConfiguration configuration)
        {
            _dbHelper = dbHelper;
            _configuration = configuration;
            _connectionString = _configuration.GetConnectionString("bwlive") ??
                throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
        }

        // Data Models
        public class GrcLeadRequest
        {
            public string ProcType { get; set; } = "A"; // A=Add, U=Update
            public string? DocuNumb { get; set; }
            public string? SiteType { get; set; } // O=Onsite, F=Offsite
            public string? MobileNo { get; set; }
            public string? LeadDate { get; set; }
            public string? LeadQnty { get; set; }
            public string? SiteName { get; set; }
            public string? SiteRmrk { get; set; }
            public string? SiteAddr { get; set; }
            public string? AreaCode { get; set; }
            public string? District { get; set; }
            public string? SitePinC { get; set; }
            public string? AdhrNumb { get; set; }
            public string? ArchtNam { get; set; }
            public string? ItxPanNo { get; set; }
            public string? GstnNumb { get; set; }
            public string? EmailAdd { get; set; }
            public string? CityName { get; set; }
            public string? PinCodeS { get; set; }
            public string? StateNam { get; set; }
            public string? StMobNum { get; set; }
            public string? AttchMnt { get; set; }
            public string? LeadMsrs { get; set; }
            public string? RetlAdd1 { get; set; }

        }

        public class GrcLeadResponse
        {
            public string? DocuNumb { get; set; }
            public string? LeadDate { get; set; }
            public string? LeadQnty { get; set; }
            public string? SiteName { get; set; }
            public string? MobileNo { get; set; }
            public string? SiteAddr { get; set; }
            public string? SiteRmrk { get; set; }
            public string? AdhrNumb { get; set; }
            public string? ArchtNam { get; set; }
            public string? ItxPanNo { get; set; }
            public string? GstnNumb { get; set; }
            public string? EmailAdd { get; set; }
            public string? District { get; set; }
            public string? AreaCode { get; set; }
            public string? SitePinC { get; set; }
            public string? AttchMnt { get; set; }
            public string? CityName { get; set; }
            public string? PinCodeS { get; set; }
            public string? StateNam { get; set; }
            public string? StMobNum { get; set; }
            public string? LeadMsrs { get; set; }
            public string? RetlAdd1 { get; set; }

        }

        public class DropdownOption
        {
            public string Value { get; set; } = string.Empty;
            public string Text { get; set; } = string.Empty;
        }

        // GET: Get dropdown options for form initialization
        [HttpGet("dropdown-options")]
        public async Task<IActionResult> GetDropdownOptions()
        {
            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();

                var result = new
                {
                    MeasurementUnits = await GetMeasurementUnits(connection),
                    DeliveryPeriods = await GetDeliveryPeriods(connection),
                    ProjectKinds = await GetProjectKinds(connection),
                    ContactPersonTypes = await GetContactPersonTypes(connection),
                    SiteTypes = GetSiteTypes(),
                    ProcessTypes = GetProcessTypes()
                };

                return Ok(result);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Error retrieving dropdown options: {ex.Message}" });
            }
        }

        // GET: Get existing lead for update
        [HttpGet("{docuNumb}")]
        public async Task<IActionResult> GetGrcLead(string docuNumb, string siteType = "F")
        {
            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();

                string sql;
                if (siteType == "F") // Offsite
                {
                    sql = @"SELECT docuNumb, CONVERT(varchar(10), leadDate, 111) as leadDate, leadQnty, siteName, 
                           mobileNo, siteAddr, siteRmrk, adhrNumb, archtNam, itxPanNo, gstnNumb, emailAdd, 
                           district, areaCode, retlPinC, attchMnt, stMobNum, leadMsrs, retlAdd1,  
                           
                           FROM bwlive.dbo.dptGrcLeadGn 
                           WHERE docuNumb = @docuNumb";
                }
                else // Onsite
                {
                    sql = @"SELECT docuNumb, CONVERT(varchar(10), leadDate, 111) as leadDate, leadQnty, siteName, 
                           mobileNo, siteAddr, siteRmrk, adhrNumb, archtNam, itxPanNo, gstnNumb, emailAdd, 
                           district, stateNam, cityName, attchMnt, stMobNum, leadMsrs, retlAdd1,  
                            pinCodeS
                           FROM bwlive.dbo.dptGrcLeadGn 
                           WHERE docuNumb = @docuNumb";
                }

                var lead = await connection.QueryFirstOrDefaultAsync<GrcLeadResponse>(sql, new { docuNumb });

                if (lead == null)
                {
                    return NotFound(new { message = "Lead not found" });
                }

                return Ok(lead);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Error retrieving lead: {ex.Message}" });
            }
        }

        // GET: Get list of documents for update dropdown
        [HttpGet("documents")]
        public async Task<IActionResult> GetDocuments(string loginId)
        {
            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();

                var sql = @"SELECT docuNumb as Value, docuNumb as Text 
                           FROM bwlive.dbo.dptGrcLeadGn 
                           WHERE createId = @loginId";

                var documents = await connection.QueryAsync<DropdownOption>(sql, new { loginId });

                return Ok(documents);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Error retrieving documents: {ex.Message}" });
            }
        }

        // POST: Create new GRC Lead
        [HttpPost]
        public async Task<IActionResult> CreateGrcLead([FromBody] GrcLeadRequest request)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                // Validate required fields
                if (string.IsNullOrEmpty(request.LeadDate))
                    return BadRequest(new { message = "Lead Date is required" });

                if (string.IsNullOrEmpty(request.LeadQnty))
                    return BadRequest(new { message = "Lead Quantity is required" });

                if (string.IsNullOrEmpty(request.SiteName))
                    return BadRequest(new { message = "Site Name is required" });

                if (string.IsNullOrEmpty(request.MobileNo))
                    return BadRequest(new { message = "Mobile No is required" });

                if (string.IsNullOrEmpty(request.SiteAddr))
                    return BadRequest(new { message = "Site Address is required" });

                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();

                using var transaction = await connection.BeginTransactionAsync();

                try
                {
                    string docuNumb;
                    string loginId = GetCurrentUserId(); // You'll need to implement this method
                    string areaCode = GetCurrentUserAreaCode(); // You'll need to implement this method

                    if (request.ProcType == "A") // Add new
                    {
                        // Generate new document number
                        docuNumb = await GetDocumentNumber(connection, transaction, "GRL", areaCode);

                        if (request.SiteType == "F") // Offsite
                        {
                            var sql = @"INSERT INTO dptGrcLeadGn (docuNumb, docuDate, leadDate, areaCode, leadQnty, 
                                       siteName, mobileNo, siteRmrk, siteAddr, pendWith, statFlag, createId, createDt, 
                                       adhrNumb, archtNam, itxPanNo, gstnNumb, emailAdd, district, retlPinC, stMobNum, 
                                       attchMnt, leadMsrs, retlAdd1  )
                                       VALUES (@DocuNumb, GETDATE(), @LeadDate, @AreaCode, @LeadQnty, @SiteName, 
                                       @MobileNo, @SiteRmrk, @SiteAddr, '1062', 'N', @LoginId, GETDATE(), @AdhrNumb, 
                                       @ArchtNam, @ItxPanNo, @GstnNumb, @EmailAdd, @District, @SitePinC, @StMobNum, 
                                       @AttchMnt, @LeadMsrs, @RetlAdd1)";

                            await connection.ExecuteAsync(sql, new
                            {
                                DocuNumb = docuNumb,
                                LeadDate = ConvertDMYToYMD(request.LeadDate),
                                AreaCode = areaCode,
                                LeadQnty = request.LeadQnty,
                                SiteName = request.SiteName,
                                MobileNo = request.MobileNo,
                                SiteRmrk = request.SiteRmrk,
                                SiteAddr = request.SiteAddr,
                                LoginId = loginId,
                                AdhrNumb = request.AdhrNumb,
                                ArchtNam = request.ArchtNam,
                                ItxPanNo = request.ItxPanNo,
                                GstnNumb = request.GstnNumb,
                                EmailAdd = request.EmailAdd,
                                District = request.District,
                                SitePinC = request.SitePinC,
                                StMobNum = request.StMobNum,
                                AttchMnt = request.AttchMnt,
                                LeadMsrs = request.LeadMsrs,
                                RetlAdd1 = request.RetlAdd1,
                                
                           
                            }, transaction);
                        }
                        else // Onsite
                        {
                            var sql = @"INSERT INTO dptGrcLeadGn (docuNumb, docuDate, leadDate, areaCode, leadQnty, 
                                       siteName, mobileNo, siteRmrk, siteAddr, pendWith, statFlag, createId, createDt, 
                                       adhrNumb, archtNam, itxPanNo, gstnNumb, emailAdd, district, pinCodeS, cityName, 
                                       stateNam, attchMnt, stMobNum, leadMsrs, retlAdd1)
                                       VALUES (@DocuNumb, GETDATE(), @LeadDate, @AreaCode, @LeadQnty, @SiteName, 
                                       @MobileNo, @SiteRmrk, @SiteAddr, '1062', 'N', @LoginId, GETDATE(), @AdhrNumb, 
                                       @ArchtNam, @ItxPanNo, @GstnNumb, @EmailAdd, @District, @PinCodeS, @CityName, 
                                       @StateNam, @AttchMnt, @StMobNum, @LeadMsrs, @RetlAdd1)";

                            await connection.ExecuteAsync(sql, new
                            {
                                DocuNumb = docuNumb,
                                LeadDate = ConvertDMYToYMD(request.LeadDate),
                                AreaCode = areaCode,
                                LeadQnty = request.LeadQnty,
                                SiteName = request.SiteName,
                                MobileNo = request.MobileNo,
                                SiteRmrk = request.SiteRmrk,
                                SiteAddr = request.SiteAddr,
                                LoginId = loginId,
                                AdhrNumb = request.AdhrNumb,
                                ArchtNam = request.ArchtNam,
                                ItxPanNo = request.ItxPanNo,
                                GstnNumb = request.GstnNumb,
                                EmailAdd = request.EmailAdd,
                                District = request.District,
                                PinCodeS = request.PinCodeS,
                                CityName = request.CityName,
                                StateNam = request.StateNam,
                                AttchMnt = request.AttchMnt,
                                StMobNum = request.StMobNum,
                                LeadMsrs = request.LeadMsrs,
                                RetlAdd1 = request.RetlAdd1,
                                
                     
                            }, transaction);
                        }
                    }
                    else // Update existing
                    {
                        docuNumb = request.DocuNumb ?? "";

                        if (string.IsNullOrEmpty(docuNumb))
                        {
                            return BadRequest(new { message = "Document Number is required for update" });
                        }

                        var sql = @"UPDATE dptGrcLeadGn SET 
                                   leadQnty = @LeadQnty, siteName = @SiteName, mobileNo = @MobileNo, 
                                   siteRmrk = @SiteRmrk, siteAddr = @SiteAddr, updateId = @LoginId, updateDt = GETDATE(),
                                   adhrNumb = @AdhrNumb, archtNam = @ArchtNam, itxPanNo = @ItxPanNo, 
                                   gstnNumb = @GstnNumb, emailAdd = @EmailAdd, district = @District, 
                                   retlPinC = @SitePinC, leadMsrs = @LeadMsrs, retlAdd1 = @RetlAdd1
                                     
                                   WHERE docuNumb = @DocuNumb";

                        await connection.ExecuteAsync(sql, new
                        {
                            LeadQnty = request.LeadQnty,
                            SiteName = request.SiteName,
                            MobileNo = request.MobileNo,
                            SiteRmrk = request.SiteRmrk,
                            SiteAddr = request.SiteAddr,
                            LoginId = loginId,
                            AdhrNumb = request.AdhrNumb,
                            ArchtNam = request.ArchtNam,
                            ItxPanNo = request.ItxPanNo,
                            GstnNumb = request.GstnNumb,
                            EmailAdd = request.EmailAdd,
                            District = request.District,
                            SitePinC = request.SitePinC,
                            LeadMsrs = request.LeadMsrs,
                            RetlAdd1 = request.RetlAdd1,
                            
                          
                            DocuNumb = docuNumb
                        }, transaction);
                    }

                    await transaction.CommitAsync();

                    return Ok(new
                    {
                        message = "Transaction has been completed successfully",
                        docuNumb = docuNumb
                    });
                }
                catch
                {
                    await transaction.RollbackAsync();
                    throw;
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Error processing GRC Lead: {ex.Message}" });
            }
        }

        // GET: Get area codes dropdown
        [HttpGet("areas")]
        public async Task<IActionResult> GetAreas()
        {
            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();

                // Based on existing PersonalVisitController pattern
                var sql = @"SELECT DISTINCT areaCode as Value, areaCode as Text FROM bwlive.dbo.rtmRetailer ORDER BY areaCode";

                var areas = await connection.QueryAsync<DropdownOption>(sql);

                return Ok(areas);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Error retrieving areas: {ex.Message}" });
            }
        }

        // GET: Get districts by area code
        [HttpGet("districts/{areaCode}")]
        public async Task<IActionResult> GetDistricts(string areaCode)
        {
            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();

                // Based on JSP pattern - you may need to adjust table names
                var sql = @"SELECT DISTINCT district as Value, district as Text
                           FROM bwlive.dbo.rtmRetailer
                           WHERE areaCode = @areaCode AND district IS NOT NULL
                           ORDER BY district";

                var districts = await connection.QueryAsync<DropdownOption>(sql, new { areaCode });

                return Ok(districts);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Error retrieving districts: {ex.Message}" });
            }
        }

        // GET: Get pin codes by district
        [HttpGet("pincodes/{district}")]
        public async Task<IActionResult> GetPinCodes(string district)
        {
            try
            {
                using var connection = new SqlConnection(_connectionString);
                await connection.OpenAsync();

                // Based on JSP pattern - you may need to adjust table names
                var sql = @"SELECT DISTINCT retlPinC as Value, CONCAT(retlPinC, ' - ', cityName) as Text
                           FROM bwlive.dbo.rtmRetailer
                           WHERE district = @district AND retlPinC IS NOT NULL
                           ORDER BY retlPinC";

                var pinCodes = await connection.QueryAsync<DropdownOption>(sql, new { district });

                return Ok(pinCodes);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = $"Error retrieving pin codes: {ex.Message}" });
            }
        }

        // Private helper methods
        private async Task<IEnumerable<DropdownOption>> GetMeasurementUnits(SqlConnection connection)
        {
            var sql = @"SELECT 'F2' as Value, 'Feet Square' as Text 
                       UNION ALL SELECT 'FT', 'Feet' 
                       UNION ALL SELECT 'M2', 'Meter Square' 
                       UNION ALL SELECT 'NO', 'Numbers' 
                       UNION ALL SELECT 'RF', 'Running Ft'";

            return await connection.QueryAsync<DropdownOption>(sql);
        }

        private async Task<IEnumerable<DropdownOption>> GetDeliveryPeriods(SqlConnection connection)
        {
            var sql = @"SELECT '01-03 month' as Value, '01-03 month' as Text 
                       UNION ALL SELECT '04-06 month', '04-06 month' 
                       UNION ALL SELECT '07-12 month', '07-12 month' 
                       UNION ALL SELECT 'over 12 month', 'over 12 month'";

            return await connection.QueryAsync<DropdownOption>(sql);
        }

        private async Task<IEnumerable<DropdownOption>> GetProjectKinds(SqlConnection connection)
        {
            var sql = @"SELECT 'residence / bunglow' as Value, 'residence / bunglow' as Text 
                       UNION ALL SELECT 'religious', 'religious' 
                       UNION ALL SELECT 'hotel', 'hotel' 
                       UNION ALL SELECT 'hospital', 'hospital' 
                       UNION ALL SELECT 'Govt. Project', 'Govt. Project' 
                       UNION ALL SELECT 'Commercial Project', 'Commercial Project' 
                       UNION ALL SELECT 'high rise', 'high rise' 
                       UNION ALL SELECT 'land scaping', 'land scaping' 
                       UNION ALL SELECT 'educational institute', 'educational institute' 
                       UNION ALL SELECT 'Others', 'Others'";

            return await connection.QueryAsync<DropdownOption>(sql);
        }

        private async Task<IEnumerable<DropdownOption>> GetContactPersonTypes(SqlConnection connection)
        {
            var sql = @"SELECT 'Owner' as Value, 'Owner' as Text 
                       UNION ALL SELECT 'builder', 'builder' 
                       UNION ALL SELECT 'contractor', 'contractor' 
                       UNION ALL SELECT 'architect', 'architect' 
                       UNION ALL SELECT 'construction company', 'construction company'";

            return await connection.QueryAsync<DropdownOption>(sql);
        }

        private IEnumerable<DropdownOption> GetSiteTypes()
        {
            return new List<DropdownOption>
            {
                new DropdownOption { Value = "O", Text = "Onsite" },
                new DropdownOption { Value = "F", Text = "Offsite" }
            };
        }

        private IEnumerable<DropdownOption> GetProcessTypes()
        {
            return new List<DropdownOption>
            {
                new DropdownOption { Value = "A", Text = "Add" },
                new DropdownOption { Value = "U", Text = "Update" }
            };
        }

        private async Task<string> GetDocumentNumber(SqlConnection connection, IDbTransaction transaction, string docuType, string areaCode)
        {
            // This would need to be replaced with your actual document number generation logic
            var sql = "SELECT RIGHT(NEWID(), 8)";
            var result = await connection.QueryFirstAsync<string>(sql, transaction: transaction);
            return result;
        }

        private string? ConvertDMYToYMD(string? dmyDate)
        {
            try
            {
                if (string.IsNullOrEmpty(dmyDate)) return null;

                var parts = dmyDate.Split('/');
                if (parts.Length == 3)
                {
                    return $"{parts[2]}-{parts[1]}-{parts[0]}"; // Convert DD/MM/YYYY to YYYY-MM-DD
                }
                return dmyDate;
            }
            catch
            {
                return dmyDate;
            }
        }

        private string GetCurrentUserId()
        {
            // Implementation depends on your authentication system
            // This could come from JWT token, session, etc.
            return "defaultUser"; // Replace with actual implementation
        }

        private string GetCurrentUserAreaCode()
        {
            // Implementation depends on your user management system
            return "001"; // Replace with actual implementation
        }
    }
}
