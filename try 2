class LoginRequest {
  final String userID;
  final String password;
  final String appRegId;

  const LoginRequest({
    required this.userID,
    required this.password,
    required this.appRegId,
  });

  Map<String, dynamic> toJson() => {
        'userID': userID,
        'password': password,
        'appRegId': appRegId,
      };

  factory LoginRequest.fromJson(Map<String, dynamic> json) => LoginRequest(
        userID: json['userID'] as String,
        password: json['password'] as String,
        appRegId: json['appRegId'] as String,
      );
}

class LoginResponse {
  final String msg;
  final UserData data;

  const LoginResponse({
    required this.msg,
    required this.data,
  });

  factory LoginResponse.fromJson(Map<String, dynamic> json) => LoginResponse(
        msg: json['msg'] as String,
        data: UserData.fromJson(json['data'] as Map<String, dynamic>),
      );

  Map<String, dynamic> toJson() => {
        'msg': msg,
        'data': data.toJson(),
      };
}

class UserData {
  final String emplName;
  final String areaCode;
  final List<String> roles;
  final List<String> pages;
  final String? userID; // Add userID field

  const UserData({
    required this.emplName,
    required this.areaCode,
    required this.roles,
    required this.pages,
    this.userID,
  });

  factory UserData.fromJson(Map<String, dynamic> json) => UserData(
        emplName: json['emplName'] as String,
        areaCode: json['areaCode'] as String,
        roles: (json['roles'] as List<dynamic>).cast<String>(),
        pages: (json['pages'] as List<dynamic>).cast<String>(),
        userID: json['userID'] as String?,
      );

  Map<String, dynamic> toJson() => {
        'emplName': emplName,
        'areaCode': areaCode,
        'roles': roles,
        'pages': pages,
        'userID': userID,
      };

  bool hasRole(String role) => roles.contains(role);
  bool hasPage(String page) => pages.contains(page);
  bool hasAnyRole(List<String> roleList) => roleList.any((role) => roles.contains(role));
  bool hasAnyPage(List<String> pageList) => pageList.any((page) => pages.contains(page));
}

















class AreaItem {
  final String code;
  final String desc;

  AreaItem({
    required this.code,
    required this.desc,
  });

  factory AreaItem.fromJson(Map<String, dynamic> json) {
    return AreaItem(
      code: json['code']?.toString() ?? '',
      desc: json['desc']?.toString() ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'code': code,
      'desc': desc,
    };
  }
}

class SampleDistributionRequest {
  final String? loginId;
  final String emirate;
  final String retailerName;
  final String? retailerCode;
  final String distributor;
  final String painterName;
  final String? painterMobile;
  final String skuSize;
  final String? materialQty;
  final String? missedQty;
  final String distributionDate;
  final String? salesLead;

  SampleDistributionRequest({
    this.loginId,
    required this.emirate,
    required this.retailerName,
    this.retailerCode,
    required this.distributor,
    required this.painterName,
    this.painterMobile,
    required this.skuSize,
    this.materialQty,
    this.missedQty,
    required this.distributionDate,
    this.salesLead,
  });

  Map<String, dynamic> toJson() {
    return {
      'loginId': loginId,
      'emirate': emirate,
      'retailerName': retailerName,
      'retailerCode': retailerCode,
      'distributor': distributor,
      'painterName': painterName,
      'painterMobile': painterMobile,
      'skuSize': skuSize,
      'materialQty': materialQty,
      'missedQty': missedQty,
      'distributionDate': distributionDate,
      'salesLead': salesLead,
    };
  }
}

class SubmitResponse {
  final bool success;
  final String message;
  final String? docuNumb;

  SubmitResponse({
    required this.success,
    required this.message,
    this.docuNumb,
  });

  factory SubmitResponse.fromJson(Map<String, dynamic> json) {
    return SubmitResponse(
      success: json['success'] ?? false,
      message: json['message']?.toString() ?? '',
      docuNumb: json['docuNumb']?.toString(),
    );
  }
}























import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import '../models/auth_models.dart';
import '../utils/app_logger.dart';
 
class AuthService {
  static final AppLogger _logger = AppLogger();
  static const Duration _defaultTimeout = Duration(seconds: 30);
 
  static const String baseUrl = 'http://10.4.64.23:8521';
  static const String authEndpoint = '/api/Auth/execute';
 
  static Future<Map<String, dynamic>> authenticateUser({
    required String userID,
    required String password,
    String? appRegId,
  }) async {
    try {
      _logger.info('Authenticating user: $userID');
 
      final loginRequest = LoginRequest(
        userID: userID,
        password: password,
        appRegId: appRegId ?? 'mobile_app_${DateTime.now().millisecondsSinceEpoch}',
      );
 
      final uri = Uri.parse('$baseUrl$authEndpoint');
      final requestHeaders = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      };
 
      final requestBody = jsonEncode(loginRequest.toJson());
 
      _logger.debug('Making POST request to: $uri');
      _logger.debug('Request headers: $requestHeaders');
      _logger.debug('Request body: $requestBody');
 
      final response = await http
          .post(
            uri,
            headers: requestHeaders,
            body: requestBody,
          )
          .timeout(_defaultTimeout);
 
      _logger.debug('Response status: ${response.statusCode}');
      _logger.debug('Response headers: ${response.headers}');
      _logger.debug('Response body: ${response.body}');
 
      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body) as Map<String, dynamic>;
 
        try {
          final loginResponse = LoginResponse.fromJson(responseData);
          _logger.info('Authentication successful for user: $userID');
 
          return {
            'success': true,
            'data': loginResponse,
            'statusCode': response.statusCode,
          };
        } catch (e) {
          _logger.error('Failed to parse login response', e);
          return {
            'success': false,
            'error': 'Invalid response format from server',
            'statusCode': response.statusCode,
          };
        }
      } else if (response.statusCode == 401) {
        final errorData = _safeJsonDecode(response.body);
        final errorMessage = errorData['error'] ?? 'Authentication failed';
 
        _logger.warning('Authentication failed for user: $userID - $errorMessage');
 
        return {
          'success': false,
          'error': errorMessage,
          'statusCode': response.statusCode,
        };
      } else if (response.statusCode == 400) {
        final errorData = _safeJsonDecode(response.body);
        final errorMessage = errorData['error'] ?? response.body.isNotEmpty ? response.body : 'Invalid request parameters';
 
        _logger.warning('Bad request for user: $userID - $errorMessage');
        _logger.warning('Request was: $requestBody');
 
        return {
          'success': false,
          'error': 'Bad Request: $errorMessage',
          'statusCode': response.statusCode,
          'raw_response': response.body,
        };
      } else {
        final errorData = _safeJsonDecode(response.body);
        final errorMessage = errorData['error'] ?? 'Server error occurred';
 
        _logger.error('Server error during authentication: ${response.statusCode} - $errorMessage');
 
        return {
          'success': false,
          'error': errorMessage,
          'statusCode': response.statusCode,
        };
      }
    } on http.ClientException catch (e) {
      _logger.error('Network error during authentication', e);
      return {
        'success': false,
        'error': 'Network connection failed. Please check your internet connection.',
        'statusCode': 0,
      };
    } on FormatException catch (e) {
      _logger.error('JSON parsing error during authentication', e);
      return {
        'success': false,
        'error': 'Invalid response from server',
        'statusCode': 0,
      };
    } catch (e) {
      _logger.error('Unexpected error during authentication', e);
      return {
        'success': false,
        'error': 'An unexpected error occurred: ${e.toString()}',
        'statusCode': 0,
      };
    }
  }
 
  static Future<bool> login(String userId, String password) async {
    final result = await authenticateUser(userID: userId, password: password);
    if (result['success'] == true) {
      final loginResponse = result['data'] as LoginResponse;
      // Create a new UserData instance with the userID preserved
      final userDataWithId = UserData(
        emplName: loginResponse.data.emplName,
        areaCode: loginResponse.data.areaCode,
        roles: loginResponse.data.roles,
        pages: loginResponse.data.pages,
        userID: userId, // Preserve the original userID from login
      );
      AuthManager.setUser(userDataWithId);
      return true;
    }
    return false;
  }
 
  static Future<bool> loginWithOtp(String mobile, String otp) async {
    await Future.delayed(const Duration(seconds: 1));
    return mobile.isNotEmpty && otp.isNotEmpty;
  }
 
  static Future<bool> sendOtp(String mobile) async {
    await Future.delayed(const Duration(seconds: 1));
    return mobile.isNotEmpty;
  }
 
  static Future<void> logout() async {
    AuthManager.clearUser();
    await Future.delayed(const Duration(milliseconds: 500));
  }
 
  static Future<Map<String, dynamic>> testConnection() async {
    try {
      _logger.info('Testing connection to auth server');
 
      final uri = Uri.parse('$baseUrl/health');
      final response = await http
          .get(
            uri,
            headers: {'Accept': 'application/json'},
          )
          .timeout(const Duration(seconds: 10));
 
      _logger.debug('Health check response: ${response.statusCode}');
 
      return {
        'success': response.statusCode == 200,
        'statusCode': response.statusCode,
        'message': response.statusCode == 200
            ? 'Connection successful'
            : 'Server responded with status ${response.statusCode}',
      };
    } catch (e) {
      _logger.error('Connection test failed', e);
      return {
        'success': false,
        'statusCode': 0,
        'message': 'Connection failed: ${e.toString()}',
      };
    }
  }
 
  static Map<String, dynamic> _safeJsonDecode(String body) {
    try {
      final decoded = jsonDecode(body);
      return decoded is Map<String, dynamic>
          ? decoded
          : {'raw': decoded.toString()};
    } catch (_) {
      return {'raw': body};
    }
  }
}
 
class AuthManager {
  static UserData? _currentUser;
  static String? _authToken;
  static final _authChangeNotifier = ValueNotifier<int>(0);
 
  static UserData? get currentUser => _currentUser;
  static String? get authToken => _authToken;
  static bool get isLoggedIn => _currentUser != null;
  static ValueNotifier<int> get authChangeNotifier => _authChangeNotifier;
 
  static void setUser(UserData userData, {String? token}) {
    _currentUser = userData;
    _authToken = token;
    _notifyAuthChanged();
  }
 
  static void clearUser() {
    _currentUser = null;
    _authToken = null;
    _notifyAuthChanged();
  }
 
  static void Function()? _authChangeCallback;
 
  static void setAuthChangeCallback(void Function() callback) {
    _authChangeCallback = callback;
  }
 
  static void _notifyAuthChanged() {
    _authChangeCallback?.call();
    _authChangeNotifier.value++;
  }
 
  static bool hasRole(String role) {
    return _currentUser?.hasRole(role) ?? false;
  }
 
  static bool hasPage(String page) {
    return _currentUser?.hasPage(page) ?? false;
  }
 
  static bool hasAnyRole(List<String> roles) {
    return _currentUser?.hasAnyRole(roles) ?? false;
  }
 
  static bool hasAnyPage(List<String> pages) {
    return _currentUser?.hasAnyPage(pages) ?? false;
  }
 
  static List<String> getUserRoles() {
    return _currentUser?.roles ?? [];
  }
 
  static List<String> getUserPages() {
    return _currentUser?.pages ?? [];
  }
 
  static String getUserName() {
    return _currentUser?.emplName ?? '';
  }
 
  static String getUserAreaCode() {
    return _currentUser?.areaCode ?? '';
  }
}
 

























import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/sample_distribution_models.dart';
import 'auth_service.dart';

class SampleDistributionService {
  static const String baseUrl = 'http://10.4.64.23:8521';
  static const String apiPath = '/api/sampledistribution';

  static Future<List<AreaItem>> getAreas({bool onlyActive = true}) async {
    try {
      final uri = Uri.parse('$baseUrl$apiPath/areas')
          .replace(queryParameters: {'onlyActive': onlyActive.toString()});

      final response = await http.get(
        uri,
        headers: {
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        return data.map((item) => AreaItem.fromJson(item)).toList();
      } else {
        throw Exception('Failed to load areas: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching areas: $e');
    }
  }

  static Future<SubmitResponse> submitSampleDistribution(
    SampleDistributionRequest request,
  ) async {
    try {
      final uri = Uri.parse('$baseUrl$apiPath/submit');

      final headers = <String, String>{
        'Content-Type': 'application/json',
      };

      // Get loginId from current authenticated user
      final currentUser = AuthManager.currentUser;
      if (currentUser != null && currentUser.userID != null) {
        // Use userID from the login (max 6 characters as per API requirement)
        final loginId = currentUser.userID!.length > 6
            ? currentUser.userID!.substring(0, 6)
            : currentUser.userID!;
        headers['LoginID'] = loginId;
      }

      final response = await http.post(
        uri,
        headers: headers,
        body: json.encode(request.toJson()),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return SubmitResponse.fromJson(data);
      } else {
        final errorData = json.decode(response.body);
        return SubmitResponse(
          success: false,
          message: errorData['message'] ?? 'Unknown error occurred',
        );
      }
    } catch (e) {
      return SubmitResponse(
        success: false,
        message: 'Error submitting sample distribution: $e',
      );
    }
  }
}






















import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../SAMPLING/sample_model.dart';
import '../../../core/models/sample_distribution_models.dart';
import '../../../core/services/sample_distribution_service.dart';

class SampleDistributEntry extends StatefulWidget {
  @override
  _SampleDistributEntryState createState() => _SampleDistributEntryState();
}

class _SampleDistributEntryState extends State<SampleDistributEntry>
    with TickerProviderStateMixin {
  // Controllers final missedQtyController = TextEditingController();

  final missedQtyController = TextEditingController();
  final emirateController = TextEditingController();
  final retailerNameController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final painterNameController = TextEditingController();
  final painterMobileController = TextEditingController();
  final skuSizeController = TextEditingController();
  final materialQtyController = TextEditingController();
  final distributionDateController = TextEditingController();
  final salesLeadController = TextEditingController();
  List<SupplyChainEntry> currentEntries = [];
  List<AreaItem> _areas = [];
  bool _isLoadingAreas = false;
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  bool _isSubmitting = false;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    _loadAreas();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  Future<void> _loadAreas() async {
    setState(() {
      _isLoadingAreas = true;
    });
    try {
      final areas = await SampleDistributionService.getAreas();
      setState(() {
        _areas = areas;
        _isLoadingAreas = false;
      });
    } catch (e) {
      setState(() {
        _isLoadingAreas = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading areas: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    missedQtyController.dispose();
    emirateController.dispose();
    retailerNameController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    painterNameController.dispose();
    painterMobileController.dispose();
    skuSizeController.dispose();
    materialQtyController.dispose();
    distributionDateController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        final prefs = await SharedPreferences.getInstance();

        // Create request object
        final request = SampleDistributionRequest(
          emirate: emirateController.text,
          retailerName: retailerNameController.text,
          retailerCode: retailerCodeController.text.isEmpty ? null : retailerCodeController.text,
          distributor: distributorController.text,
          painterName: painterNameController.text,
          painterMobile: painterMobileController.text.isEmpty ? null : painterMobileController.text,
          skuSize: skuSizeController.text,
          materialQty: materialQtyController.text.isEmpty ? null : materialQtyController.text,
          missedQty: missedQtyController.text.isEmpty ? null : missedQtyController.text,
          distributionDate: distributionDateController.text,
          salesLead: salesLeadController.text.isEmpty ? null : salesLeadController.text,
        );

        // Submit to API (loginId is automatically taken from AuthManager)
        final response = await SampleDistributionService.submitSampleDistribution(
          request,
        );

        if (response.success) {
          // Save to local storage on success
          await prefs.setString('MissedQty', missedQtyController.text);
          await prefs.setString('Emirate', emirateController.text);
          await prefs.setString('retailerName', retailerNameController.text);
          await prefs.setString('retailerCode', retailerCodeController.text);
          await prefs.setString('distributor', distributorController.text);
          await prefs.setString('painterName', painterNameController.text);
          await prefs.setString('painterMobile', painterMobileController.text);
          await prefs.setString('skuSize', skuSizeController.text);
          await prefs.setString('materialQty', materialQtyController.text);
          await prefs.setString('distributionDate', distributionDateController.text);

          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    const Icon(Icons.check_circle, color: Colors.white, size: 20),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text('${response.message}${response.docuNumb != null ? ' (Doc: ${response.docuNumb})' : ''}'),
                    ),
                  ],
                ),
                backgroundColor: Colors.green,
                behavior: SnackBarBehavior.floating,
                duration: const Duration(seconds: 4),
              ),
            );
          }
        } else {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Row(
                  children: [
                    const Icon(Icons.error, color: Colors.white, size: 20),
                    const SizedBox(width: 8),
                    Expanded(child: Text(response.message)),
                  ],
                ),
                backgroundColor: Colors.red,
                behavior: SnackBarBehavior.floating,
                duration: const Duration(seconds: 4),
              ),
            );
          }
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Error saving data: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  final demoSupplyChain = SupplyChainData(
    totalReceived: 500,
    billedToDistributor: 400,
    billedToRetailer: 350,
    distributedToPainter: 280,
  );

  Widget buildSupplyChainTable(List<SupplyChainEntry> entries) {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        headingRowColor: MaterialStateProperty.all(const Color(0xFF1E3A8A)),
        headingTextStyle: const TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.bold,
        ),
        columns: const [
          DataColumn(label: Text("Retailer")),
          DataColumn(label: Text("Code")),
          DataColumn(label: Text("Distributor")),
          DataColumn(label: Text("Painter")),
          DataColumn(label: Text("Mobile")),
          DataColumn(label: Text("SKU")),
          DataColumn(label: Text("Distributed (Kg)")),
          DataColumn(label: Text("Total Received (Kg)")),
          DataColumn(label: Text("Remaining (Kg)")),
        ],
        rows: entries.map((entry) {
          return DataRow(
            cells: [
              DataCell(Text(entry.retailerName)),
              DataCell(Text(entry.retailerCode)),
              DataCell(Text(entry.distributorName)),
              DataCell(Text(entry.painterName)),
              DataCell(Text(entry.painterMobile)),
              DataCell(Text(entry.skuSize)),
              DataCell(Text(entry.qtyDistributed.toString())),
              DataCell(Text(entry.totalReceived.toString())),
              DataCell(Text(entry.remaining.toString())),
            ],
          );
        }).toList(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet =
            constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;

        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 32),

                              // Submit Button
                              // In your build method (below Submit button)
                              if (currentEntries.isNotEmpty)
                                buildSupplyChainTable(currentEntries),

                              const SizedBox(height: 20),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Retailer Details',
                icon: Icons.store_rounded,
                children: [
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Emirates',
                    icon: Icons.location_on_outlined,
                    items: _areas.map((area) => area.desc).toList(),
                    value: emirateController.text.isEmpty
                        ? null
                        : emirateController.text,
                    onChanged: (value) {
                      setState(() {
                        final selectedArea = _areas.firstWhere(
                          (area) => area.desc == value,
                          orElse: () => AreaItem(code: '', desc: ''),
                        );
                        emirateController.text = selectedArea.code;
                      });
                    },
                    isLoading: _isLoadingAreas,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerNameController,
                    label: 'Retailer Name',
                    icon: Icons.store_outlined,
                  ),

                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerCodeController,
                    label: 'Retailer Code',
                    icon: Icons.qr_code_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: distributorController,
                    label: 'Concern Distributor',
                    icon: Icons.business_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: salesLeadController,
                    label: 'Sales Leads',
                    icon: Icons.leaderboard_rounded,
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: _buildModernSection(
                title: 'Distribution Details',
                icon: Icons.local_shipping_outlined,
                children: [
                  _buildModernTextField(
                    controller: painterNameController,
                    label: 'Name of Painter / Contractor',
                    icon: Icons.person_outline_rounded,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: painterMobileController,
                    label: 'Mobile no Painter / Contractor',
                    icon: Icons.phone_outlined,
                    isPhone: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Material SKU',
                    icon: Icons.inventory_2_outlined,
                    items: const ['1 Kg', '5 Kg'],
                    value: skuSizeController.text.isEmpty
                        ? null
                        : skuSizeController.text,
                    onChanged: (value) {
                      setState(() {
                        skuSizeController.text = value ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: materialQtyController,
                    label: 'Sample distributed in Kg.',
                    icon: Icons.scale_outlined,
                    keyboardType: TextInputType.numberWithOptions(
                      decimal: true,
                    ),
                    inputFormatters: [
                      FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                    ],
                  ),
                  const SizedBox(height: 16),
                  _buildModernTextField(
                    controller: missedQtyController,
                    label: 'Missed qty (if any)',
                    icon: Icons.remove_circle_outline,
                    keyboardType: TextInputType.numberWithOptions(
                      decimal: true,
                    ),
                    isRequired: false,
                    inputFormatters: [
                      FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
                    ],
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: distributionDateController,
                    label: 'Date of distribution',
                    icon: Icons.event_available_outlined,
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Retailer Details Section
        _buildModernSection(
          title: 'Retailer Details',
          icon: Icons.store_rounded,
          children: [
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Emirate',
              icon: Icons.location_on_outlined,
              items: _areas.map((area) => area.desc).toList(),
              value: emirateController.text.isEmpty
                  ? null
                  : _areas.firstWhere(
                      (area) => area.code == emirateController.text,
                      orElse: () => AreaItem(code: '', desc: ''),
                    ).desc,
              onChanged: (value) {
                setState(() {
                  final selectedArea = _areas.firstWhere(
                    (area) => area.desc == value,
                    orElse: () => AreaItem(code: '', desc: ''),
                  );
                  emirateController.text = selectedArea.code;
                });
              },
              isLoading: _isLoadingAreas,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerNameController,
              label: 'Retailer Name',
              icon: Icons.store_outlined,
            ),

            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: salesLeadController,
              label: 'Sales Leads',
              icon: Icons.leaderboard_rounded,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Distribution Details Section
        _buildModernSection(
          title: 'Distribution Details',
          icon: Icons.local_shipping_outlined,
          children: [
            _buildModernTextField(
              controller: painterNameController,
              label: 'Name of Painter / Contractor',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: painterMobileController,
              label: 'Mobile no Painter / Contractor',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Material SKU',
              icon: Icons.inventory_2_outlined,
              items: const ['1 Kg', '5 Kg'],
              value: skuSizeController.text.isEmpty
                  ? null
                  : skuSizeController.text,
              onChanged: (value) {
                setState(() {
                  skuSizeController.text = value ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: materialQtyController,
              label: 'Number of Bags.',
              icon: Icons.scale_outlined,
              keyboardType: TextInputType.numberWithOptions(decimal: true),
              inputFormatters: [
                FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
              ],
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: missedQtyController,
              label: 'Missed qty (if any)',
              icon: Icons.remove_circle_outline,
              keyboardType: TextInputType.numberWithOptions(decimal: true),
              isRequired: false,
              inputFormatters: [
                FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
              ],
            ),

            const SizedBox(height: 16),
            _buildModernDateField(
              controller: distributionDateController,
              label: 'Date of distribution',
              icon: Icons.event_available_outlined,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'Sample Distribution Entry',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(
            Icons.help_outline_rounded,
            color: Color(0xFF1E3A8A),
          ),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Sample Distribution Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter sample distribution details',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
    TextInputType? keyboardType,
    List<TextInputFormatter>? inputFormatters,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType:
          keyboardType ?? (isPhone ? TextInputType.phone : TextInputType.text),
      inputFormatters: inputFormatters,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Distribution',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Distribution Help',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF1F2937),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Ensure all distribution details are accurate before submission.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text(
                    'Got it',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}




