import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:web/web.dart' as web;
import 'dart:js_interop';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/modern_dropdown.dart';

@JS()
@staticInterop
class WindowWithGeoLocation {}

extension WindowGeoLocationExtension on WindowWithGeoLocation {
  external JSPromise<JSAny?> requestGeoPosition();
}

class ActivityEntryScreen extends StatefulWidget {
  @override
  _ActivityEntryScreenState createState() => _ActivityEntryScreenState();
}

class _ActivityEntryScreenState extends State<ActivityEntryScreen>
    with TickerProviderStateMixin {
  // Controllers
  final processTypeController = TextEditingController();
  final activityController = TextEditingController();
  final descriptionController = TextEditingController();
  final objectiveController = TextEditingController();
  final activityDateController = TextEditingController();
  final meetingVenueController = TextEditingController();
  final areaController = TextEditingController();
  final cityNameController = TextEditingController();
  final districtController = TextEditingController();
  final pinCodeController = TextEditingController();
  final productController = TextEditingController();
  final employeesCountController = TextEditingController();
  final channelPartnerCountController = TextEditingController();
  final influencersCountController = TextEditingController();
  final totalParticipantsController = TextEditingController();
  final ruralUrbanController = TextEditingController();
  final latitudeController = TextEditingController();
  final longitudeController = TextEditingController();
  
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  // Add to your state class
List<Map<String, String>> painterList = [];
void _addPainterRow() {
  setState(() {
    painterList.add({
      'type': '',
      'mobile': '',
      'name': '',
      'pastData': '',
      'kyc': '',
      'appDownloaded': '',
    });
  });
}
void _deletePainterRow() {
  if (painterList.isNotEmpty) {
    setState(() {
      painterList.removeLast();
    });
  }
}
void _deletePainterAt(int index) {
  setState(() {
    painterList.removeAt(index);
  });
}


  bool _isSubmitting = false;
  bool _isGettingLocation = false;
  String? _uploadedFileName;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  // Lists for tables
  List<Map<String, String>> employeesList = [];
  List<Map<String, String>> imagesList = [];

  @override
  void initState() {
    super.initState();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
    
    // Auto-fill location on load
    _initLocation();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    processTypeController.dispose();
    activityController.dispose();
    descriptionController.dispose();
    objectiveController.dispose();
    activityDateController.dispose();
    meetingVenueController.dispose();
    areaController.dispose();
    cityNameController.dispose();
    districtController.dispose();
    pinCodeController.dispose();
    productController.dispose();
    employeesCountController.dispose();
    channelPartnerCountController.dispose();
    influencersCountController.dispose();
    totalParticipantsController.dispose();
    ruralUrbanController.dispose();
    latitudeController.dispose();
    longitudeController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        // Here you would create and submit the activity entry
        // For now, we'll just show a success message
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text('Activity entry submitted successfully'),
                  ),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 5),
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Unexpected error: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  void _saveAsDraft() {
    // Save form data to SharedPreferences
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.save, color: Colors.white, size: 20),
            SizedBox(width: 8),
            Expanded(child: Text('Draft saved successfully')),
          ],
        ),
        backgroundColor: Colors.blue,
        behavior: SnackBarBehavior.floating,
        duration: Duration(seconds: 4),
      ),
    );
  }

  // --- GEOLOCATION (using web JavaScript helper from index.html) ---
  Future<void> _initLocation() async {
    setState(() => _isGettingLocation = true);
    try {
      await _getWebLocation();
    } catch (e) {
      _toast('Could not fetch location: $e');
    } finally {
      if (mounted) setState(() => _isGettingLocation = false);
    }
  }

  Future<void> _getWebLocation() async {
    try {
      // First try to get from localStorage (cached values from index.html)
      final lastLat = web.window.localStorage.getItem('lastLat');
      final lastLng = web.window.localStorage.getItem('lastLng');
      if (lastLat != null && lastLng != null && mounted) {
        latitudeController.text = double.parse(lastLat).toStringAsFixed(6);
        longitudeController.text = double.parse(lastLng).toStringAsFixed(6);
      }
      
      // Use the JavaScript geolocation helper from index.html
      final jsWindow = web.window as WindowWithGeoLocation;
      final result = await jsWindow.requestGeoPosition().toDart;
      if (result != null) {
        // Convert JSAny to proper Dart object
        final resultDart = result.dartify();
        if (resultDart is Map<String, dynamic>) {
          if (resultDart['ok'] == true) {
            if (mounted) {
              final lat = resultDart['lat'] as num?;
              final lng = resultDart['lng'] as num?;
              if (lat != null && lng != null) {
                latitudeController.text = lat.toStringAsFixed(6);
                longitudeController.text = lng.toStringAsFixed(6);
              }
            }
          } else {
            final error = resultDart['error']?.toString() ?? 'Unknown error';
            _toast('Web geolocation failed: $error');
          }
        }
      }
    } catch (e) {
      _toast('Web geolocation error: $e');
    }
  }

  void _captureLocation() {
    // Location capture logic - now calls the web location
    _initLocation();
  }

  void _toast(String msg) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(msg), behavior: SnackBarBehavior.floating),
    );
  }

  void _addEmployee() {
    // Add a new empty employee to the list
    setState(() {
      employeesList.add({
        'employeeCode': '',
        'name': '',
      });
    });
  }

  void _deleteEmployee(int index) {
    // Remove an employee from the list
    setState(() {
      employeesList.removeAt(index);
    });
  }

  void _addImage() {
    // Add a new empty image to the list
    setState(() {
      imagesList.add({
        'type': 'Select',
        'path': '',
      });
    });
  }

  void _deleteImage(int index) {
    // Remove an image from the list
    setState(() {
      imagesList.removeAt(index);
    });
  }


Widget _buildPainterMeetSection(BoxConstraints constraints) {
  if (activityController.text != 'Painter Meet') return SizedBox.shrink();
  final isMobile = constraints.maxWidth <= 800;
  return _buildModernSection(
    title: 'List of Painter/Contractor/Tile Applicator',
    icon: Icons.format_paint,
    children: [
      isMobile ? _buildPainterCardsMobile() : _buildPainterMeetTableDesktop(),
      const SizedBox(height: 16),
      Row(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          ElevatedButton(
            onPressed: _addPainterRow,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.grey.shade200,
              foregroundColor: Colors.black87,
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: const Text('Add'),
          ),
          const SizedBox(width: 16),
          ElevatedButton(
            onPressed: painterList.isEmpty ? null : _deletePainterRow,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red.shade400,
              foregroundColor: Colors.white,
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
            ),
            child: const Text('Delete'),
          ),
        ],
      ),
    ],
  );
}

Widget _buildPainterMeetTableDesktop() {
  return SingleChildScrollView(
    scrollDirection: Axis.horizontal,
    child: Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          // Table Header
          Container(
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
            ),
            child: Row(
              children: [
                _buildTableHeaderCell('Del', flex: 1),
                _buildTableHeaderCell('Type', flex: 2),
                _buildTableHeaderCell('Mobile No', flex: 2),
                _buildTableHeaderCell('Name', flex: 2),
                _buildTableHeaderCell('Past Data', flex: 2),
                _buildTableHeaderCell('KYC Collected', flex: 3),
                _buildTableHeaderCell('App Downloaded', flex: 2),
              ],
            ),
          ),
          if (painterList.isEmpty)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'No painters added yet. Click "Add" to add a painter.',
                style: TextStyle(color: Colors.grey.shade600),
              ),
            )
          else
            ...painterList.asMap().entries.map((entry) {
              final index = entry.key;
              final painter = entry.value;
              return Row(
                children: [
                  _buildTableCell(
                    Checkbox(
                      value: false,
                      onChanged: (value) {
                        if (value == true) _deletePainterAt(index);
                      },
                    ),
                    flex: 1,
                  ),
                  _buildTableCell(
                    DropdownButtonFormField<String>(
                      value: painter['type']!.isEmpty ? null : painter['type'],
                      items: ['Painter', 'Contractor', 'Tile Applicator']
                          .map((t) =>
                              DropdownMenuItem(value: t, child: Text(t)))
                          .toList(),
                      onChanged: (val) {
                        setState(() => painterList[index]['type'] = val ?? '');
                      },
                      decoration: InputDecoration(
                        isDense: true,
                        border: InputBorder.none,
                        hintText: 'Select',
                      ),
                    ),
                    flex: 2,
                  ),
                  _buildTableCell(
                    TextFormField(
                      initialValue: painter['mobile'],
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Mobile',
                      ),
                      onChanged: (val) =>
                          painterList[index]['mobile'] = val,
                    ),
                    flex: 2,
                  ),
                  _buildTableCell(
                    TextFormField(
                      initialValue: painter['name'],
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Name',
                      ),
                      onChanged: (val) =>
                          painterList[index]['name'] = val,
                    ),
                    flex: 2,
                  ),
                  _buildTableCell(
                    TextFormField(
                      initialValue: painter['pastData'],
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Past Data',
                      ),
                      onChanged: (val) =>
                          painterList[index]['pastData'] = val,
                    ),
                    flex: 2,
                  ),
                  _buildTableCell(
                    Wrap(
                      spacing: 4,
                      children: ['Full KYC', 'Partial KYC', 'No', 'Already KYC']
                          .map((kyc) => OutlinedButton(
                                onPressed: () => setState(() =>
                                    painterList[index]['kyc'] = kyc),
                                style: OutlinedButton.styleFrom(
                                  side: BorderSide(color: Colors.blue),
                                  backgroundColor:
                                      painter['kyc'] == kyc
                                          ? Colors.blue.shade100
                                          : null,
                                ),
                                child: Text(kyc, style: TextStyle(fontSize: 12)),
                              ))
                          .toList(),
                    ),
                    flex: 3,
                  ),
                  _buildTableCell(
                    Row(
                      children: [
                        OutlinedButton(
                          onPressed: () => setState(() =>
                              painterList[index]['appDownloaded'] = 'Yes'),
                          style: OutlinedButton.styleFrom(
                            side: BorderSide(color: Colors.blue),
                            backgroundColor: painter['appDownloaded'] == 'Yes'
                                ? Colors.blue.shade100
                                : null,
                          ),
                          child: Text('Yes', style: TextStyle(fontSize: 12)),
                        ),
                        SizedBox(width: 4),
                        OutlinedButton(
                          onPressed: () => setState(() =>
                              painterList[index]['appDownloaded'] = 'No'),
                          style: OutlinedButton.styleFrom(
                            side: BorderSide(color: Colors.blue),
                            backgroundColor: painter['appDownloaded'] == 'No'
                                ? Colors.blue.shade100
                                : null,
                          ),
                          child: Text('No', style: TextStyle(fontSize: 12)),
                        ),
                      ],
                    ),
                    flex: 2,
                  ),
                ],
              );
            }).toList(),
        ],
      ),
    ),
  );
}
Widget _buildPainterCardsMobile() {
  return Column(
    children: painterList.isEmpty
        ? [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'No painters added yet. Click "Add" to add a painter.',
                style: TextStyle(color: Colors.grey.shade600),
              ),
            )
          ]
        : painterList.asMap().entries.map((entry) {
            final index = entry.key;
            final painter = entry.value;
            return Card(
              margin: EdgeInsets.only(bottom: 12),
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8)),
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: DropdownButtonFormField<String>(
                            value: painter['type']!.isEmpty ? null : painter['type'],
                            items: ['Painter', 'Contractor', 'Tile Applicator']
                                .map((t) =>
                                    DropdownMenuItem(value: t, child: Text(t)))
                                .toList(),
                            onChanged: (val) {
                              setState(
                                  () => painterList[index]['type'] = val ?? '');
                            },
                            decoration: InputDecoration(
                              labelText: 'Type',
                              border: OutlineInputBorder(),
                            ),
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.delete, color: Colors.red),
                          onPressed: () => _deletePainterAt(index),
                        ),
                      ],
                    ),
                    const SizedBox(height: 10),
                    TextFormField(
                      initialValue: painter['mobile'],
                      decoration: InputDecoration(
                        labelText: 'Mobile No',
                        border: OutlineInputBorder(),
                      ),
                      onChanged: (val) => painterList[index]['mobile'] = val,
                    ),
                    const SizedBox(height: 10),
                    TextFormField(
                      initialValue: painter['name'],
                      decoration: InputDecoration(
                        labelText: 'Name',
                        border: OutlineInputBorder(),
                      ),
                      onChanged: (val) => painterList[index]['name'] = val,
                    ),
                    const SizedBox(height: 10),
                    TextFormField(
                      initialValue: painter['pastData'],
                      decoration: InputDecoration(
                        labelText: 'Past Data',
                        border: OutlineInputBorder(),
                      ),
                      onChanged: (val) =>
                          painterList[index]['pastData'] = val,
                    ),
                    const SizedBox(height: 10),
                    Align(
                      alignment: Alignment.centerLeft,
                      child: Text('KYC Collected:'),
                    ),
                    Wrap(
                      spacing: 4,
                      children: ['Full KYC', 'Partial KYC', 'No', 'Already KYC']
                          .map((kyc) => OutlinedButton(
                                onPressed: () => setState(
                                    () => painterList[index]['kyc'] = kyc),
                                style: OutlinedButton.styleFrom(
                                  side: BorderSide(color: Colors.blue),
                                  backgroundColor:
                                      painter['kyc'] == kyc
                                          ? Colors.blue.shade100
                                          : null,
                                ),
                                child: Text(kyc, style: TextStyle(fontSize: 12)),
                              ))
                          .toList(),
                    ),
                    const SizedBox(height: 10),
                    Align(
                      alignment: Alignment.centerLeft,
                      child: Text('App Downloaded:'),
                    ),
                    Row(
                      children: [
                        OutlinedButton(
                          onPressed: () =>
                              setState(() =>
                                  painterList[index]['appDownloaded'] = 'Yes'),
                          style: OutlinedButton.styleFrom(
                            side: BorderSide(color: Colors.blue),
                            backgroundColor: painter['appDownloaded'] == 'Yes'
                                ? Colors.blue.shade100
                                : null,
                          ),
                          child: Text('Yes', style: TextStyle(fontSize: 12)),
                        ),
                        SizedBox(width: 8),
                        OutlinedButton(
                          onPressed: () =>
                              setState(() =>
                                  painterList[index]['appDownloaded'] = 'No'),
                          style: OutlinedButton.styleFrom(
                            side: BorderSide(color: Colors.blue),
                            backgroundColor: painter['appDownloaded'] == 'No'
                                ? Colors.blue.shade100
                                : null,
                          ),
                          child: Text('No', style: TextStyle(fontSize: 12)),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            );
          }).toList(),
  );
}


  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              // Submit and Save as Draft Buttons
                              if (activityController.text == 'Painter Meet')
                                _buildPainterMeetSection(constraints),
                              const SizedBox(height: 24),
                              _buildActionButtons(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Activity Details',
                icon: Icons.event_note_rounded,
                children: [
                  ModernDropdown(
                    label: 'Process Type',
                    icon: Icons.category_outlined,
                    items: const ['Add', 'Process 2', 'Process 3'],
                    value: processTypeController.text.isEmpty
                        ? null
                        : processTypeController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        processTypeController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
  label: 'Activity',
  icon: Icons.event_outlined,
  items: ['Select', 'Painter Meet', 'Activity 2', 'Activity 3'],
  value: activityController.text.isEmpty ? null : activityController.text,
  onChanged: (String? newValue) {
  setState(() {
    activityController.text = newValue ?? '';
    if (newValue == 'Painter Meet') {
      if (painterList.isEmpty) _addPainterRow();
    } else {
      painterList.clear();
    }
  });
},

  isRequired: true,
),

                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: descriptionController,
                    label: 'Description',
                    icon: Icons.description_outlined,
                    isRequired: true,
                    isMultiline: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Objective',
                    icon: Icons.flag_outlined,
                    items: ['Select', 'Objective 2', 'Objective 3'],
                    value: objectiveController.text.isEmpty
                        ? null
                        : objectiveController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        objectiveController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: activityDateController,
                    label: 'Activity Date',
                    icon: Icons.calendar_today_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: meetingVenueController,
                    label: 'Meeting Venue(Enter Address)',
                    icon: Icons.location_on_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Area',
                    icon: Icons.map_outlined,
                    items: ['Select', 'Area 2', 'Area 3'],
                    value: areaController.text.isEmpty
                        ? null
                        : areaController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        areaController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: cityNameController,
                    label: 'City Name',
                    icon: Icons.location_city_outlined,
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'District',
                    icon: Icons.location_city_outlined,
                    items: ['Select', 'District 2', 'District 3'],
                    value: districtController.text.isEmpty
                        ? null
                        : districtController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        districtController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Pin Code',
                    icon: Icons.pin_outlined,
                    items: ['Select', 'Pin 2', 'Pin 3'],
                    value: pinCodeController.text.isEmpty
                        ? null
                        : pinCodeController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        pinCodeController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Product',
                    icon: Icons.inventory_2_outlined,
                    items: ['0 options selected', 'Product 2', 'Product 3'],
                    value: productController.text.isEmpty
                        ? null
                        : productController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        productController.text = newValue ?? '';
                      });
                    },
                    isRequired: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: employeesCountController,
                    label: 'No. of Employees',
                    icon: Icons.people_outline,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: channelPartnerCountController,
                    label: 'No. of Channel Partner',
                    icon: Icons.business_outlined,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: influencersCountController,
                    label: 'No. of Influencers',
                    icon: Icons.people_alt_outlined,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: totalParticipantsController,
                    label: 'Total Participants',
                    icon: Icons.groups_outlined,
                    isRequired: false,
                    isNumeric: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Rural / Urban',
                    icon: Icons.home_work_outlined,
                    items: ['Select', 'Rural', 'Urban'],
                    value: ruralUrbanController.text.isEmpty
                        ? null
                        : ruralUrbanController.text,
                    onChanged: (String? newValue) {
                      setState(() {
                        ruralUrbanController.text = newValue ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  Column(
                    children: [
                      _buildModernTextField(
                        controller: latitudeController,
                        label: 'Latitude',
                        icon: Icons.my_location_outlined,
                        isRequired: false,
                        suffix: IconButton(
                          tooltip: 'Refresh location',
                          icon: const Icon(Icons.gps_fixed),
                          onPressed: _isGettingLocation
                              ? null
                              : () async {
                                  HapticFeedback.selectionClick();
                                  await _initLocation();
                                },
                        ),
                      ),
                      const SizedBox(height: 24),
                      _buildModernTextField(
                        controller: longitudeController,
                        label: 'Longitude',
                        icon: Icons.my_location_outlined,
                        isRequired: false,
                        suffix: IconButton(
                          tooltip: 'Refresh location',
                          icon: const Icon(Icons.gps_fixed),
                          onPressed: _isGettingLocation
                              ? null
                              : () async {
                                  HapticFeedback.selectionClick();
                                  await _initLocation();
                                },
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  
                  Row(
                    children: [
                      const Icon(
                        Icons.info_outline,
                        size: 16,
                        color: Colors.grey,
                      ),
                      const SizedBox(width: 6),
                      Expanded(
                        child: Text(
                          _isGettingLocation
                              ? 'Fetching GPS…'
                              : (latitudeController.text.isEmpty ||
                                    longitudeController.text.isEmpty)
                              ? 'Tap the GPS icon if fields are empty.'
                              : 'Coordinates captured from your device GPS.',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey.shade700,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            
            // Right Column
            Expanded(
              child: Column(
                children: [
                  // BW Employees Present Table
                  _buildModernSection(
                    title: 'BW Employees Present',
                    icon: Icons.people_outline,
                    children: [
                      _buildEmployeesTable(),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          ElevatedButton(
                            onPressed: _addEmployee,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.grey.shade200,
                              foregroundColor: Colors.black87,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Add'),
                          ),
                          const SizedBox(width: 16),
                          ElevatedButton(
                            onPressed: employeesList.isEmpty ? null : () {
                              if (employeesList.isNotEmpty) {
                                _deleteEmployee(employeesList.length - 1);
                              }
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red.shade400,
                              foregroundColor: Colors.white,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  
                  // Image Upload Section
                  _buildModernSection(
                    title: 'Image Upload',
                    icon: Icons.image_outlined,
                    children: [
                      _buildImageUploadTable(),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          ElevatedButton(
                            onPressed: _addImage,
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.grey.shade200,
                              foregroundColor: Colors.black87,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Add'),
                          ),
                          const SizedBox(width: 16),
                          ElevatedButton(
                            onPressed: imagesList.isEmpty ? null : () {
                              if (imagesList.isNotEmpty) {
                                _deleteImage(imagesList.length - 1);
                              }
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red.shade400,
                              foregroundColor: Colors.white,
                              elevation: 0,
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Delete'),
                          ),
                        ],
                      ),
                    ],
                  ),
                 
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Activity Details Section
        _buildModernSection(
          title: 'Activity Details',
          icon: Icons.event_note_rounded,
          children: [
            ModernDropdown(
              label: 'Process Type',
              icon: Icons.category_outlined,
              items: const ['Add', 'Process 2', 'Process 3'],
              value: processTypeController.text.isEmpty
                  ? null
                  : processTypeController.text,
              onChanged: (String? newValue) {
                setState(() {
                  processTypeController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
  label: 'Activity',
  icon: Icons.event_outlined,
  items: ['Select', 'Painter Meet', 'Activity 2', 'Activity 3'],
  value: activityController.text.isEmpty ? null : activityController.text,
  onChanged: (String? newValue) {
    setState(() {
      activityController.text = newValue ?? '';
      // Show painter row table if selecting "Painter Meet", otherwise clear
      if (newValue == 'Painter Meet') {
        if (painterList.isEmpty) _addPainterRow();
      } else {
        painterList.clear();
      }
    });
  },
  isRequired: true,
),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: descriptionController,
              label: 'Description',
              icon: Icons.description_outlined,
              isRequired: true,
              isMultiline: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Objective',
              icon: Icons.flag_outlined,
              items: ['Select', 'Objective 2', 'Objective 3'],
              value: objectiveController.text.isEmpty
                  ? null
                  : objectiveController.text,
              onChanged: (String? newValue) {
                setState(() {
                  objectiveController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernDateField(
              controller: activityDateController,
              label: 'Activity Date',
              icon: Icons.calendar_today_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: meetingVenueController,
              label: 'Meeting Venue(Enter Address)',
              icon: Icons.location_on_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Area',
              icon: Icons.map_outlined,
              items: ['Select', 'Area 2', 'Area 3'],
              value: areaController.text.isEmpty
                  ? null
                  : areaController.text,
              onChanged: (String? newValue) {
                setState(() {
                  areaController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: cityNameController,
              label: 'City Name',
              icon: Icons.location_city_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'District',
              icon: Icons.location_city_outlined,
              items: ['Select', 'District 2', 'District 3'],
              value: districtController.text.isEmpty
                  ? null
                  : districtController.text,
              onChanged: (String? newValue) {
                setState(() {
                  districtController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Pin Code',
              icon: Icons.pin_outlined,
              items: ['Select', 'Pin 2', 'Pin 3'],
              value: pinCodeController.text.isEmpty
                  ? null
                  : pinCodeController.text,
              onChanged: (String? newValue) {
                setState(() {
                  pinCodeController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Product',
              icon: Icons.inventory_2_outlined,
              items: ['0 options selected', 'Product 2', 'Product 3'],
              value: productController.text.isEmpty
                  ? null
                  : productController.text,
              onChanged: (String? newValue) {
                setState(() {
                  productController.text = newValue ?? '';
                });
              },
              isRequired: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: employeesCountController,
              label: 'No. of Employees',
              icon: Icons.people_outline,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: channelPartnerCountController,
              label: 'No. of Channel Partner',
              icon: Icons.business_outlined,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: influencersCountController,
              label: 'No. of Influencers',
              icon: Icons.people_alt_outlined,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: totalParticipantsController,
              label: 'Total Participants',
              icon: Icons.groups_outlined,
              isRequired: false,
              isNumeric: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Rural / Urban',
              icon: Icons.home_work_outlined,
              items: ['Select', 'Rural', 'Urban'],
              value: ruralUrbanController.text.isEmpty
                  ? null
                  : ruralUrbanController.text,
              onChanged: (String? newValue) {
                setState(() {
                  ruralUrbanController.text = newValue ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            Column(
              children: [
                _buildModernTextField(
                  controller: latitudeController,
                  label: 'Latitude',
                  icon: Icons.my_location_outlined,
                  isRequired: false,
                  suffix: IconButton(
                    tooltip: 'Refresh location',
                    icon: const Icon(Icons.gps_fixed),
                    onPressed: _isGettingLocation
                        ? null
                        : () async {
                            HapticFeedback.selectionClick();
                            await _initLocation();
                          },
                  ),
                ),
                const SizedBox(height: 24),
                _buildModernTextField(
                  controller: longitudeController,
                  label: 'Longitude',
                  icon: Icons.my_location_outlined,
                  isRequired: false,
                  suffix: IconButton(
                    tooltip: 'Refresh location',
                    icon: const Icon(Icons.gps_fixed),
                    onPressed: _isGettingLocation
                        ? null
                        : () async {
                            HapticFeedback.selectionClick();
                            await _initLocation();
                          },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                const Icon(
                  Icons.info_outline,
                  size: 16,
                  color: Colors.grey,
                ),
                const SizedBox(width: 6),
                Expanded(
                  child: Text(
                    _isGettingLocation
                        ? 'Fetching GPS…'
                        : (latitudeController.text.isEmpty ||
                              longitudeController.text.isEmpty)
                        ? 'Tap the GPS icon if fields are empty.'
                        : 'Coordinates captured from your device GPS.',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade700,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
        const SizedBox(height: 24),
        // BW Employees Present Table
        _buildModernSection(
          title: 'BW Employees Present',
          icon: Icons.people_outline,
          children: [
            _buildEmployeesTable(),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                ElevatedButton(
                  onPressed: _addEmployee,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey.shade200,
                    foregroundColor: Colors.black87,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Add'),
                ),
                const SizedBox(width: 16),
                ElevatedButton(
                  onPressed: employeesList.isEmpty ? null : () {
                    if (employeesList.isNotEmpty) {
                      _deleteEmployee(employeesList.length - 1);
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red.shade400,
                    foregroundColor: Colors.white,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Delete'),
                ),
              ],
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Image Upload Section
        _buildModernSection(
          title: 'Image Upload',
          icon: Icons.image_outlined,
          children: [
            _buildImageUploadTable(),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                ElevatedButton(
                  onPressed: _addImage,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey.shade200,
                    foregroundColor: Colors.black87,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Add'),
                ),
                const SizedBox(width: 16),
                ElevatedButton(
                  onPressed: imagesList.isEmpty ? null : () {
                    if (imagesList.isNotEmpty) {
                      _deleteImage(imagesList.length - 1);
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red.shade400,
                    foregroundColor: Colors.white,
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Delete'),
                ),
              ],
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildEmployeesTable() {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          // Table Header
          Container(
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
            ),
            child: Row(
              children: [
                _buildTableHeaderCell('Del', flex: 1),
                _buildTableHeaderCell('BW Employees Present', flex: 3),
                _buildTableHeaderCell('Employee Code', flex: 3),
                _buildTableHeaderCell('Name', flex: 5),
              ],
            ),
          ),
          // Table Rows
          if (employeesList.isEmpty)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'No employees added yet. Click "Add" to add an employee.',
                style: TextStyle(color: Colors.grey.shade600),
              ),
            )
          else
            ...employeesList.asMap().entries.map((entry) {
              final index = entry.key;
              final employee = entry.value;
              return Row(
                children: [
                  _buildTableCell(
                    Checkbox(
                      value: false,
                      onChanged: (value) {
                        if (value == true) {
                          _deleteEmployee(index);
                        }
                      },
                    ),
                    flex: 1,
                  ),
                  _buildTableCell(
                    Text('Employee ${index + 1}'),
                    flex: 3,
                  ),
                  _buildTableCell(
                    TextField(
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Enter code',
                      ),
                      onChanged: (value) {
                        setState(() {
                          employeesList[index]['employeeCode'] = value;
                        });
                      },
                    ),
                    flex: 3,
                  ),
                  _buildTableCell(
                    TextField(
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Enter name',
                      ),
                      onChanged: (value) {
                        setState(() {
                          employeesList[index]['name'] = value;
                        });
                      },
                    ),
                    flex: 5,
                  ),
                ],
              );
            }).toList(),
        ],
      ),
    );
  }

  Widget _buildImageUploadTable() {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        children: [
          // Table Header
          Container(
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(8),
                topRight: Radius.circular(8),
              ),
            ),
            child: Row(
              children: [
                _buildTableHeaderCell('Del', flex: 1),
                _buildTableHeaderCell('Upload Supporting', flex: 5),
                _buildTableHeaderCell('View', flex: 5),
              ],
            ),
          ),
          // Table Rows
          if (imagesList.isEmpty)
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'No images added yet. Click "Add" to add an image.',
                style: TextStyle(color: Colors.grey.shade600),
              ),
            )
          else
            ...imagesList.asMap().entries.map((entry) {
              final index = entry.key;
              final image = entry.value;
              return Row(
                children: [
                  _buildTableCell(
                    Checkbox(
                      value: false,
                      onChanged: (value) {
                        if (value == true) {
                          _deleteImage(index);
                        }
                      },
                    ),
                    flex: 1,
                  ),
                  _buildTableCell(
                    ModernDropdown(
                      label: '',
                      icon: Icons.category_outlined,
                      items: ['Select', 'Image', 'Document'],
                      value: image['type'],
                      onChanged: (String? newValue) {
                        setState(() {
                          imagesList[index]['type'] = newValue ?? 'Select';
                        });
                      },
                      isRequired: false,
                    ),
                    flex: 5,
                  ),
                  _buildTableCell(
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        ElevatedButton(
                          onPressed: () {
                            // Upload image logic
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            foregroundColor: Colors.white,
                          ),
                          child: Text('Upload Image'),
                        ),
                        SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: image['path']!.isEmpty ? null : () {
                            // View image logic
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            foregroundColor: Colors.white,
                          ),
                          child: Text('View Image'),
                        ),
                      ],
                    ),
                    flex: 5,
                  ),
                ],
              );
            }).toList(),
        ],
      ),
    );
  }

  Widget _buildTableHeaderCell(String text, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 12, horizontal: 8),
        decoration: BoxDecoration(
          border: Border(
            right: BorderSide(color: Colors.grey.shade300),
            bottom: BorderSide(color: Colors.grey.shade300),
          ),
        ),
        child: Text(
          text,
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
      ),
    );
  }

  Widget _buildTableCell(Widget child, {int flex = 1}) {
    return Expanded(
      flex: flex,
      child: Container(
        padding: EdgeInsets.symmetric(vertical: 8, horizontal: 8),
        decoration: BoxDecoration(
          border: Border(
            right: BorderSide(color: Colors.grey.shade300),
            bottom: BorderSide(color: Colors.grey.shade300),
          ),
        ),
        child: child,
      ),
    );
  }

  Widget _buildActionButtons() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        SizedBox(
          width: 200,
          height: 56,
          child: ElevatedButton(
            onPressed: _saveAsDraft,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: const Text(
              'Save as Draft',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ),
        const SizedBox(width: 24),
        SizedBox(
          width: 200,
          height: 56,
          child: ElevatedButton(
            onPressed: _isSubmitting ? null : _submitForm,
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF1E3A8A),
              foregroundColor: Colors.white,
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: _isSubmitting
                ? const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(width: 16),
                      Text('Submitting...', style: TextStyle(color: Colors.white)),
                    ],
                  )
                : const Text(
                    'Submit',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
          ),
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'Activity Entry',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.home, color: Color(0xFF1E3A8A)),
          onPressed: () {
            // Navigate to home
          },
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Activity Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter activity details and capture location',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumeric = false,
    bool isMultiline = false,
    bool isRequired = true,
    Widget? suffix,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: suffix,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone
          ? TextInputType.phone
          : isNumeric
              ? TextInputType.number
              : isMultiline
                  ? TextInputType.multiline
                  : TextInputType.text,
      maxLines: isMultiline ? 3 : 1,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[0-9]+$').hasMatch(value)) {
            return 'Please enter valid number';
          }
        }
        if (isNumeric && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[0-9]+$').hasMatch(value)) {
            return 'Please enter valid number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }
}
