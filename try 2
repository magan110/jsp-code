using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using System.Data.SqlClient;

namespace sparshWebService.Controllers
{
    #region JSON converters (same as reference)
    public class JsonDateConverter : JsonConverter<DateTime>
    {
        private const string Format = "dd/MM/yyyy";
        public override DateTime Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions opts)
            => DateTime.ParseExact(reader.GetString()!, Format, CultureInfo.InvariantCulture);
        public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions opts)
            => writer.WriteStringValue(value.ToString(Format));
    }

    public class JsonNullableDateConverter : JsonConverter<DateTime?>
    {
        private const string Format = "dd/MM/yyyy";
        public override DateTime? Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions opts)
        {
            var s = reader.GetString();
            return string.IsNullOrEmpty(s)
                ? (DateTime?)null
                : DateTime.ParseExact(s!, Format, CultureInfo.InvariantCulture);
        }
        public override void Write(Utf8JsonWriter writer, DateTime? value, JsonSerializerOptions opts)
            => writer.WriteStringValue(value?.ToString(Format));
    }
    #endregion

    #region DTOs used by init + save/get
    public class FieldConfig
    {
        public string Label { get; set; }            // eg. "Topic Discussed"
        public string Type { get; set; }             // 'T' text-area, 'S' select, 'H' hidden
        public int Rows { get; set; } = 2;           // textarea rows default 2
        public int Cols { get; set; } = 35;          // textarea width default 35
        public List<string> Options { get; set; }    // if Type=='S'
    }

    public class InitFlags
    {
        public bool CusSelRq { get; set; }
        public bool PrdSelRq { get; set; }
        public bool ActPntRq { get; set; }
        public bool PrjSelRq { get; set; }
        public bool CusCodRq { get; set; }
        public bool PinCdRqA { get; set; }
        public bool DocuDtRq { get; set; }
        public bool DsrEntAl { get; set; }
        public bool DsrStkAl { get; set; }
        public bool RtlTrgFl { get; set; }
    }

    public class OptionDto { public string Code { get; set; } public string Description { get; set; } }

    public class DefaultOrderDto
    {
        public string RepoCatg { get; set; }
        public string RepoDesc { get; set; }
        public decimal ProdQnty { get; set; }
        public decimal ProjQnty { get; set; }
        public string ActnRemk { get; set; }
        [JsonConverter(typeof(JsonNullableDateConverter))]
        public DateTime? TargetDt { get; set; }
    }

    public class InitResponse
    {
        public string DeptCode { get; set; }
        public string ProcType { get; set; }
        public string DsrParam { get; set; }
        public string AreaCode { get; set; }
        public string ZoneCode { get; set; }

        public InitFlags Flags { get; set; }
        public List<OptionDto> ActivityTypes { get; set; }
        public List<OptionDto> PurchaserRetailerTypes { get; set; }
        public List<OptionDto> AreaCodes { get; set; }
        public List<OptionDto> DocTypes { get; set; }           // 1BF/2AF/ADH
        public List<(string DocuNumb, string Display)> LastDocs { get; set; } // last 3 days

        public FieldConfig[] DsrRemFields { get; set; } = new FieldConfig[8];
        public List<DefaultOrderDto> DefaultOrders { get; set; } = new();
        public List<DefaultOrderDto> PrevMarketMapping { get; set; } = new();
        public List<DefaultOrderDto> MarketMappingEdit { get; set; } = new();

        public string Message { get; set; }          // eg. gating messages
    }

    // Request for init
    public class InitRequest
    {
        [Required] public string LoginId { get; set; }            // loginIdM
        [Required] public string DeptCode { get; set; }           // KKR116/115/118/162/166...
        [Required] public string ProcType { get; set; }           // A/U
        public string DsrParam { get; set; } = "";                // might be blank on first load
        public string AreaCode { get; set; } = "";                // optional; used for zone/pincode rules
        public bool SiteMktg { get; set; } = false;               // mirrors siteMktg=='S'
    }

    // Save/get DTO (re-using what we built before, trimmed)
    public class DsrSaveRequest
    {
        [Required] public string ProcType { get; set; }  // A/U/D
        [Required] public string DocuNumb { get; set; }
        [Required] public string DsrParam { get; set; }
        [Required] public string CusRtlFl { get; set; }
        [Required] public string AreaCode { get; set; }
        [Required] public string CusRtlCd { get; set; }
        public string CuRtType { get; set; }
        public string DeptCode { get; set; }

        [JsonConverter(typeof(JsonDateConverter))]
        public DateTime DocuDate { get; set; }

        public string[] DsrRem { get; set; } = new string[10]; // index 1..9 match JSP
        public string GeoLatit { get; set; }
        public string GeoLongt { get; set; }
        public string IsTilRtl { get; set; }
        public decimal TileStck { get; set; }
        public List<DefaultOrderDto> Orders { get; set; } = new();
    }
    #endregion

    [ApiController]
    [Route("api/[controller]")]
    public class DsrDynamicController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        public DsrDynamicController(DatabaseHelper db) => _db = db;

        #region INIT (main dynamic endpoint)
        // POST /api/DsrDynamic/init
        [HttpPost("init")]
        public IActionResult Init([FromBody] InitRequest req)
        {
            if (!ModelState.IsValid) return BadRequest(ModelState);

            try
            {
                var resp = new InitResponse
                {
                    DeptCode = NormalizeDept(req.DeptCode),
                    ProcType = req.ProcType,
                    DsrParam = req.DsrParam ?? "",
                    AreaCode = req.AreaCode ?? "",
                    DocTypes = new List<OptionDto>
                    {
                        new() { Code="1BF", Description="Before"},
                        new() { Code="2AF", Description="After"},
                        new() { Code="ADH", Description="More Image"}
                    },
                    ActivityTypes = GetActivityTypes(NormalizeDept(req.DeptCode)),
                    PurchaserRetailerTypes = GetPurchaserRetailerTypes(req.DsrParam),
                    AreaCodes = GetAreaOptions(req.LoginId),
                    LastDocs = GetLastDocs(req.LoginId),
                };

                // Zone & pin rule
                resp.ZoneCode = GetZone(req.AreaCode);
                var pinCdRqA = resp.ZoneCode == "A" || resp.ZoneCode == "B";

                // Derive flags like JSP
                var flags = new InitFlags();
                var p = resp.DsrParam;
                var dept = resp.DeptCode;

                flags.ActPntRq = (p == "52" || p == "13" || p == "23" || p == "41" || p == "50");
                flags.PrdSelRq = (p == "01" || p == "02" || p == "61" || p == "51" || p == "11" || p == "21");
                flags.PrjSelRq = (p == "01" || p == "02" || p == "21");

                // customer selection / code requested
                var cusSelRq = new[] { "01","61","02","12","13","22","23","50","41" }.Contains(p);
                var cusCodRq = !(p == "50" || p == "61");
                flags.CusSelRq = cusSelRq;
                flags.CusCodRq = cusCodRq;

                flags.PinCdRqA = pinCdRqA;
                flags.DocuDtRq = req.ProcType == "U";

                // gating (DSR entry allowed?)
                var gate = EvaluateGating(req.LoginId, resp.ZoneCode);
                flags.DsrEntAl = gate.DsrEntAl;
                flags.DsrStkAl = gate.DsrStkAl;
                flags.RtlTrgFl = gate.RtlTrgFl;
                resp.Flags = flags;
                resp.Message = gate.Message;

                // Build dynamic dsrRem fields (labels/types/options) exactly like JSP
                resp.DsrRemFields = BuildDsrRemFields(dept, p);

                // Default Orders grid for Add/Update
                resp.DefaultOrders = GetDefaultOrders(req.ProcType, req.DsrParam, req.LoginId, req.AreaCode);

                // Market mapping panes when needed (like JSP shows prev + edit for dsrParam 01/50)
                if (p == "01" || p == "50")
                {
                    resp.PrevMarketMapping = GetPrevMarketMap(req.LoginId);
                    resp.MarketMappingEdit = GetMarketMapTemplate();
                }

                return Ok(resp);
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { error = ex.Message });
            }
        }
        #endregion

        #region Lookups used by init
        private string NormalizeDept(string deptCode)
        {
            // JSP: if KKR158 => KKR116 ; if KKR125 => KKR118
            if (deptCode == "KKR158") return "KKR116";
            if (deptCode == "KKR125") return "KKR118";
            return deptCode;
        }

        private List<OptionDto> GetActivityTypes(string deptCode)
        {
            // Mirrors JSP wcmParametr filters (paramTyp=83)
            string sql;
            var p = new Dictionary<string, object> { ["@Dept"] = deptCode };
            if (deptCode == "KKR115")
            {
                sql = @"select paramCod Code, paramDes Description
                          from wcmParametr with (nolock)
                         where paramTyp = 83 and paramCod <> '00000'
                           and paramCod not in ('31','51','01','02','04')
                           and (paramCod in ('02') or paramAd5 in ('', @Dept))
                         order by paramDes";
            }
            else if (deptCode == "KKR162")
            {
                sql = @"select paramCod Code, paramDes Description
                          from wcmParametr with (nolock)
                         where paramTyp = 83 and paramCod <> '00000'
                           and paramCod not in ('01','02','04')
                           and (paramAd3 in (@Dept) or paramAd5 = '')
                         order by paramDes";
            }
            else if (deptCode == "KKR166")
            {
                sql = @"select paramCod Code, paramDes Description
                          from wcmParametr with (nolock)
                         where paramTyp = 83 and (paramAd4 in (@Dept) or paramAd5 in ('', @Dept))
                           and paramCod not in ('01','02','04')
                         order by paramDes";
            }
            else
            {
                sql = @"select paramCod Code, paramDes Description
                          from wcmParametr with (nolock)
                         where paramTyp = 83 and paramAd4 not in (@Dept)
                           and paramAd5 in ('', @Dept)
                           and paramCod not in ('01','02','04')
                         order by paramDes";
            }

            var rows = _db.WebSessBean(sql, p) as List<Dictionary<string, object>>;
            return rows?.Select(r => new OptionDto
            {
                Code = r["Code"]?.ToString(),
                Description = r["Description"]?.ToString()
            }).ToList() ?? new List<OptionDto>();
        }

        private List<OptionDto> GetPurchaserRetailerTypes(string dsrParam)
        {
            // JSP had a different set for dsrParam in ('50','61')
            if (dsrParam == "50" || dsrParam == "61")
            {
                return new()
                {
                    new() { Code="C", Description="Purchaser"},
                    new() { Code="D", Description="Direct Dealer"},
                    new() { Code="RD", Description="Rural Stockiest"},
                    new() { Code="R", Description="Retailer"},
                    new() { Code="3", Description="Contractor"},
                    new() { Code="7", Description="Applicator"},
                    new() { Code="RR", Description="Rural Retailer"},
                    new() { Code="07", Description="Registered Applicator"},
                    new() { Code="08", Description="Painter"},
                };
            }

            return new()
            {
                new() { Code="C",  Description="Stockiest/ Urbon Stockiest"},
                new() { Code="D",  Description="Direct Dealer"},
                new() { Code="RD", Description="Rural Stockiest"},
                new() { Code="R",  Description="Retailer"},
                new() { Code="RR", Description="Rural Retailer"},
                new() { Code="07", Description="Registered Applicator"},
                new() { Code="08", Description="Painter"},
            };
        }

        private List<OptionDto> GetAreaOptions(string loginId)
        {
            // Simple area list; adjust if you need the fancy display text
            const string sql = @"select areaCode as Code, areaDesc as Description
                                   from bkmAreaMast with (nolock)
                                  where retlArHd = @Login and isActive='Y' and isnull(isOnlyDp,'N') <> 'Y'
                                  order by areaDesc";
            var rows = _db.WebSessBean(sql, new Dictionary<string, object> { ["@Login"] = loginId })
                       as List<Dictionary<string, object>>;
            return rows?.Select(r => new OptionDto
            {
                Code = r["Code"]?.ToString(),
                Description = r["Description"]?.ToString()
            }).ToList() ?? new List<OptionDto>();
        }

        private List<(string DocuNumb, string Display)> GetLastDocs(string loginId)
        {
            const string sql = @"
select distinct top 30 docuNumb,
       (dbo.wcfParamDes(dsrParam, 'dsrParNw') + ' ~ ' + docuNumb + ' ~ ' + convert(char(10), docuDate, 103)) as Display
  from dptDSRActvt with (nolock)
 where docuDate > GETDATE() - 4 and createId = @Login
 order by docuNumb desc";
            var rows = _db.WebSessBean(sql, new Dictionary<string, object> { ["@Login"] = loginId })
                       as List<Dictionary<string, object>>;
            return rows?.Select(r => (r["docuNumb"]?.ToString() ?? "", r["Display"]?.ToString() ?? "")).ToList()
                   ?? new List<(string, string)>();
        }

        private string GetZone(string areaCode)
        {
            if (string.IsNullOrWhiteSpace(areaCode)) return "";
            const string sql = "select zoneCode from bkmAreaStZn with (nolock) where areaCode=@A";
            var rows = _db.WebSessBean(sql, new Dictionary<string, object> { ["@A"] = areaCode })
                       as List<Dictionary<string, object>>;
            return rows?.FirstOrDefault()?["zoneCode"]?.ToString() ?? "";
        }

        private (bool DsrEntAl, bool DsrStkAl, bool RtlTrgFl, string Message) EvaluateGating(string loginId, string zoneCode)
        {
            // Mirrors JSP’s market MIS and stock target gating and zone C retailer target % checks.
            // For brevity we compact the queries; tweak to match your exact DB.
            bool dsrEntAl = true, dsrStkAl = true, rtlTrgFl = false;
            string message = "";

            // Market MIS completion check (simplified)
            const string misSql = @"
select  count(distinct a.areaCode) as Mapped,
        count(distinct b.areaCode) as Entered
from    bkmAreaMast a with (nolock)
left join dptMktIntel b with (nolock)
       on a.areaCode=b.areaCode and b.mnthYear = dbo.cofPrevMnYr(convert(varchar(6), getdate(), 112),  getdate())
where a.retlArHd = @Login and a.isActive='Y' and isnull(a.isOnlyDp,'N') <> 'Y'
  and a.areaCode not in ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXT','EXR','KKR', 'KAT', 'DLC','PNY','BKM','HAM','JAG')";
            var mis = _db.WebSessBean(misSql, new Dictionary<string, object> { ["@Login"] = loginId })
                      as List<Dictionary<string, object>>;
            if (mis?.Count > 0)
            {
                var mapped = Convert.ToInt32(mis[0]["Mapped"]);
                var entered = Convert.ToInt32(mis[0]["Entered"]);
                if (mapped > 0 && mapped != entered) dsrEntAl = false;
            }

            // Stock target completion check (simplified aggregate of 01/02)
            const string stkSql = @"
select  count(distinct a.areaCode) as Mapped,
        count(distinct b.areaCode) as Entered
from    bkmAreaMast a with (nolock)
left join (
    select distinct a.mnthYear, c.areaCode
      from dptStkTgtRc a with (nolock)
      join dpmCustomer c with (nolock) on a.custCode = c.custCode
     where a.mnthYear = convert(varchar(6), getdate(), 112)
       and a.repoCatg in ('01','02')
) b on a.areaCode=b.areaCode and b.mnthYear=convert(varchar(6), getdate(), 112)
where a.retlArHd = @Login and a.isActive='Y' and isnull(a.isOnlyDp,'N') <> 'Y'
  and a.areaCode not in ('EXB','EXC','EXE','EXG','EXN','EXR','EXT','EXR','EXR','KKR','EXT','KAT','DLC','HAM','KGR','SHI','SGO','DHU','JAG')";
            var stk = _db.WebSessBean(stkSql, new Dictionary<string, object> { ["@Login"] = loginId })
                      as List<Dictionary<string, object>>;
            if (stk?.Count > 0)
            {
                var mapped = Convert.ToInt32(stk[0]["Mapped"]);
                var entered = Convert.ToInt32(stk[0]["Entered"]);
                if (mapped > 0 && mapped != entered) dsrStkAl = false;
            }

            // Zone C retailer target % rule (compact)
            if (zoneCode == "C")
            {
                const string zoneSql = @"
select  sum(mapedRtlCnt) as totalMapped,
        sum(cmt01) as Cmt, sum(cmt02) as Pty, sum(cmt03) as Vap
from (
    select b.loginIdM, count(*) mapedRtlCnt, 0 cmt01,0 cmt02,0 cmt03
      from rtmRetailer a with (nolock)
      join prmEmployee b with (nolock) on a.concEmpl=b.loginIdM
      join bkmAreaStZn c with (nolock) on b.areaCode=c.areaCode
     where a.isActive='Y' and b.isActive='Y' and b.position <> 'EM05' and c.zoneCode='C'
       and b.loginIdM=@Login and a.createDt < convert(varchar(11), DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())-1, 0), 113)
     group by b.loginIdM
    union all
    select b.loginIdM, 0,
           sum(case when repoCatg='01' then 1 else 0 end),
           sum(case when repoCatg='02' then 1 else 0 end),
           sum(case when repoCatg='03' then 1 else 0 end)
      from rtmRetailer a with (nolock)
      join prmEmployee b with (nolock) on a.concEmpl=b.loginIdM
      join bkmAreaStZn c with (nolock) on b.areaCode=c.areaCode
      join dptCusRtlTg d with (nolock) on a.retlCode=d.cusRtlCd
     where b.position<>'EM05' and d.cusRtlFl='R'
       and d.mnthYear=CONVERT(varchar(6), getdate(), 112)
       and d.statFlag not in ('C','R')
       and a.isActive='Y' and b.isActive='Y'
       and c.zoneCode='C' and b.loginIdM=@Login
     group by b.loginIdM
) x";
                var rt = _db.WebSessBean(zoneSql, new Dictionary<string, object> { ["@Login"] = loginId })
                         as List<Dictionary<string, object>>;
                if (rt?.Count > 0)
                {
                    var total = Convert.ToInt32(rt[0]["totalMapped"]);
                    if (total > 0)
                    {
                        // crude % check like JSP (>=100%)
                        // If any below 100 -> block
                        rtlTrgFl = true; // true means "needs target"
                        // For UX message consistency:
                        if (!dsrEntAl) message = "Market MIS pending.";
                        if (!dsrStkAl) message = "Stockiest targets pending.";
                        if (rtlTrgFl)  message = (message == "" ? "" : message + " ") + "Retailer targets < 100%.";
                    }
                }
            }

            // JSP eventually forced dsrEntAl & dsrStkAl to true for now; we don’t do that here.

            return (dsrEntAl, dsrStkAl, rtlTrgFl, message);
        }

        private FieldConfig[] BuildDsrRemFields(string dept, string p)
        {
            // Default base (height=2, width=35, Type='T')
            var f = Enumerable.Range(0, 8).Select(_ => new FieldConfig
            {
                Label = "",
                Type = "T",
                Rows = 2,
                Cols = 35,
                Options = null
            }).ToArray();

            // Defaults across many cases (from JSP head)
            f[0].Label = "Topic Discussed"; // KKR158/KKR116 default
            f[1].Label = "Ugai Recovery Plans";
            f[2].Label = "Any Purchaser Grievances";
            f[3].Label = "Any Other Points";

            // Specialized layouts:
            if (p == "41") // Advt
            {
                f[0].Label = "Dangler";     f[0].Rows = 1; f[0].Cols = 25;
                f[1].Label = "Posters";     f[1].Rows = 1; f[1].Cols = 25;
                f[2].Label = "Stickers";    f[2].Rows = 1; f[2].Cols = 25;
                f[3].Label = "Feedback";    f[3].Cols = 40;
                f[4].Label = "Recommendations"; f[4].Cols = 40;
                f[5].Label = "Insights";    f[5].Cols = 40;
            }
            else if (p == "60" || p == "55")
            {
                f[0].Label = "Activity Details 1";
                f[1].Label = "Activity Details 2";
                f[2].Label = "Activity Details 3";
                f[3].Label = "Other Points";
            }
            else if (p == "50" || p == "61") // New Purchaser/Retailer
            {
                f[0].Label = "Party Name";           f[0].Rows = 1; f[0].Cols = 40;
                f[1].Label = "Name and Designation of Person";
                f[2].Label = "Topics discussed during meeting";
                f[3].Label = "Any Other Points";
                f[7].Label = "Mobile No";            f[7].Rows = 1; f[7].Cols = 40;

                if (dept == "KKR115") // advt adds 3 more
                {
                    f[4].Label = "Dangler"; f[5].Label = "Posters"; f[6].Label = "Stickers";
                }
            }
            else if (p == "51") // Engagement
            {
                f[0].Label = "Type of Activity"; f[0].Type = "S"; f[0].Options = "Retailer Meet,Rural Retailer Meet,Stockiest Meet,Painter Meet,Architect Meet,Counter Meet,Painter Training Program,Other BTL Activities".Split(',').ToList();
                f[1].Label = "No of participants"; f[1].Rows = 1; f[1].Cols = 4;
                f[2].Label = "Town in which Activity conducted";
                f[3].Label = "Learning's from Activity";
            }
            else if (p == "52") // Internal meetings
            {
                f[0].Label = "Meeting Done With";
                f[1].Label = "Topics discussed during meeting";
                f[2].Label = ""; f[3].Label = ""; f[4].Label = "";
            }
            else if (p == "31") // Get Check Sampling at Site
            {
                f[0].Label = "Site Name"; f[0].Rows = 2; f[0].Cols = 32;
                f[1].Label = "Product for which Sample is applied"; f[1].Type="S";
                f[1].Options = "White Cement,Wall Care Putty,Textura,Levelplast,Wall Primer".Split(',').ToList();
                f[2].Label = "Approx Potentail of Site (MT)"; f[2].Rows = 1; f[2].Cols = 32;
                f[3].Label = "Applicator Name Who Applied Sample"; f[3].Cols = 32;
                f[4].Label = "Quality of Sample"; f[4].Type="S"; f[4].Options = "Average,Medium,Good".Split(',').ToList();
                f[5].Label = "Status of Sample"; f[5].Type="S"; f[5].Options = "Yet to be checked by Purchaser,Approved,Rejected".Split(',').ToList();
                f[6].Label = "Contact Name";
                f[7].Label = "Mobile No"; f[7].Rows = 1; f[7].Cols = 32;
            }
            else if (p == "53") // Office work
            {
                f[0].Label = "Work Related To";
                f[1].Label = "No of Hours Spent"; f[1].Rows = 1; f[1].Cols = 4;
                f[2].Label = ""; f[3].Label = ""; f[4].Label = "";
            }
            else if (p == "54") // Leave
            {
                f[0].Label = "Remarks";
                f[1].Label = ""; f[2].Label = ""; f[3].Label = ""; f[4].Label = "";
            }
            else if (dept == "KKR118" || p == "12" || p == "13") // Project visits
            {
                if (p == "11" || p == "12")
                {
                    f[0].Label = "Site Name";
                    f[1].Label = "Contractor Working at Site";
                    f[2].Label = "Met With"; f[2].Type="S"; f[2].Options = "Builder,Contractor".Split(',').ToList();
                    f[3].Label = "Name and Designation of Person";
                    f[4].Label = "Topic Discussed";
                    f[5].Label = "Ugai Recovery Plans";
                    f[6].Label = "Any Purchaser Grievances";
                    f[7].Label = "Any Other Point";
                }
            }
            else if (dept == "KKR116" && p == "03") // Retail site type
            {
                f[0].Label = "Type of Site"; f[0].Type="S"; f[0].Options="Projects,IHB".Split(',').ToList();
                f[1].Label = "Potential Of Site (MT)"; f[1].Rows = 1; f[1].Cols = 4;
                f[2].Label = "Construction Stage"; f[2].Type="S"; f[2].Options="Plinth,Plaster,Brick Work".Split(',').ToList();
                f[3].Label = "Name of Contractor Working at Site";
            }
            else if (dept == "KKR117" && (p == "21" || p == "22" || p == "23" || p == "50"))
            {
                f[0].Label = "Site Type"; f[0].Type="S"; f[0].Options="IHB,Project".Split(',').ToList();
                f[1].Label = "Contractor Working at Site";
                f[2].Label = "Agenda of Site Visit";
                f[3].Label = "Action Points from Meeting";
                if (p == "21") { f[4].Label = "Contact Name"; f[5].Label = "Mobile No"; }
            }

            return f;
        }

        private List<DefaultOrderDto> GetDefaultOrders(string procType, string dsrParam, string loginId, string areaCode)
        {
            var list = new List<DefaultOrderDto>();

            if (procType == "A")
            {
                if (new[] { "01", "02", "61" }.Contains(dsrParam))
                {
                    // JSP: add one row with repoCatg '02' (Putty) blank quantities
                    list.Add(new DefaultOrderDto
                    {
                        RepoCatg = "02",
                        RepoDesc = "",
                        ProdQnty = 0,
                        ProjQnty = 0
                    });
                }
                // You can add more defaulting like the JSP’s commented blocks if needed.
            }
            else if (procType == "U")
            {
                const string sql = @"
select a.repoCatg, a.repoDesc, isnull(b.prodQnty,0) prodQnty, isnull(b.projQnty,0) projQnty,
       isnull(b.actnRemk,'') actnRemk, isnull(convert(char(10), b.targetDt, 103),'') targetDt
  from bkmRepoCatg a with (nolock)
  left join dptDSRActvtDtl b with (nolock)
    on a.repoCatg=b.repoCatg and b.docuNumb=@Doc and b.createId=@Login
 where a.isActive='Y' and a.repoCatg in ('01','02','03','09','12','15','17','18','19')
 order by a.repoCatg";
                // You’ll pass docuNumb from client when procType=U (same call or separate /get)
            }
            return list;
        }

        private List<DefaultOrderDto> GetPrevMarketMap(string loginId)
        {
            // Two recent rows like JSP “Last Recorded Market Mapping Data”
            const string sql = @"
select top 2 a.repoCatg, b.repoDesc, a.prodQnty, a.projQnty, convert(varchar(10), c.docuDate, 103) as docDate
from dptDSRActvtDtl a with (nolock)
join bkmRepoCatg b with (nolock) on a.repoCatg=b.repoCatg
join dptDSRActvt c with (nolock) on a.docuNumb=c.docuNumb
where a.repoCatg in ('01','02')
  and a.mrktData = '01' and (a.prodQnty>0 or a.projQnty>0)
  and a.createId=@Login
order by a.createDt desc";
            var rows = _db.WebSessBean(sql, new Dictionary<string, object> { ["@Login"] = loginId })
                       as List<Dictionary<string, object>>;
            return rows?.Select(r => new DefaultOrderDto
            {
                RepoCatg = r["repoCatg"]?.ToString(),
                RepoDesc = r["repoDesc"]?.ToString(),
                ProdQnty = r["prodQnty"] == null ? 0 : Convert.ToDecimal(r["prodQnty"]),
                ProjQnty = r["projQnty"] == null ? 0 : Convert.ToDecimal(r["projQnty"]),
                ActnRemk = r["docDate"]?.ToString()
            }).ToList() ?? new List<DefaultOrderDto>();
        }

        private List<DefaultOrderDto> GetMarketMapTemplate()
        {
            // Editable rows for market mapping for repoCatg 01/02 with zeros
            const string sql = @"select repoCatg, repoDesc from bkmRepoCatg with (nolock)
                                 where isActive='Y' and repoCatg in ('01','02')";
            var rows = _db.WebSessBean(sql, new Dictionary<string, object>())
                       as List<Dictionary<string, object>>;
            return rows?.Select(r => new DefaultOrderDto
            {
                RepoCatg = r["repoCatg"]?.ToString(),
                RepoDesc = r["repoDesc"]?.ToString(),
                ProdQnty = 0,
                ProjQnty = 0
            }).ToList() ?? new List<DefaultOrderDto>();
        }
        #endregion

        #region Helpers exposed like JSP AJAX calls

        // GET /api/DsrDynamic/pinCodes?areaCode=AGR&prefix=1100
        [HttpGet("pinCodes")]
        public IActionResult PinCodes([FromQuery][Required] string areaCode, [FromQuery] string prefix = "")
        {
            try
            {
                // JSP MK_00005 equivalent (filtered by areaCode + prefix)
                const string sql = @"
select distinct top 20
       p.pinCodeN + '~' + p.cityName + '~' + p.district as Combo
  from bwPinMaster p with (nolock)
 where (@Area='' or p.areaCode=@Area)
   and (@Pref='' or p.pinCodeN like @Pref + '%')
 order by p.pinCodeN";
                var rows = _db.WebSessBean(sql, new Dictionary<string, object>
                {
                    ["@Area"] = areaCode ?? "",
                    ["@Pref"] = prefix ?? ""
                }) as List<Dictionary<string, object>>;

                var values = rows?.Select(r => r["Combo"]?.ToString()).Where(s => !string.IsNullOrEmpty(s)).ToList()
                             ?? new List<string>();
                return Ok(values);
            }
            catch (Exception ex) { return StatusCode(500, new { error = ex.Message }); }
        }

        // GET /api/DsrDynamic/mobile/check?mobile=98...&areaCode=AGR
        // blocks if mobile is already registered
        [HttpGet("mobile/check")]
        public IActionResult CheckMobile([FromQuery][Required] string mobile, [FromQuery] string areaCode)
        {
            try
            {
                const string sql = @"
select top 1 a.cusRtlCd, b.custName
  from dptDSRActvt a with (nolock)
  left join dpmCustomer b with (nolock) on a.cusRtlCd=b.custCode
 where isnull(a.dsrRem08,'') = @Mobile and (@Area='' or a.areaCode=@Area)
 order by a.createDt desc";
                var rows = _db.WebSessBean(sql, new Dictionary<string, object>
                {
                    ["@Mobile"] = mobile,
                    ["@Area"] = areaCode ?? ""
                }) as List<Dictionary<string, object>>;

                if (rows?.Count > 0)
                {
                    var code = rows[0]["cusRtlCd"]?.ToString();
                    var name = rows[0]["custName"]?.ToString();
                    return Ok(new { duplicate = true, message = $"{mobile} already registered: {code}-{name}" });
                }
                return Ok(new { duplicate = false });
            }
            catch (Exception ex) { return StatusCode(500, new { error = ex.Message }); }
        }

        // GET /api/DsrDynamic/mobile/autofill?mobile=...&areaCode=...
        // JSP MK_01106 – returns last party details to prefill
        [HttpGet("mobile/autofill")]
        public IActionResult MobileAutofill([FromQuery][Required] string mobile, [FromQuery][Required] string areaCode)
        {
            try
            {
                const string sql = @"
select top 1 a.dsrRem01 as PartyName, a.dsrRem08 as Mobile, a.cuRtType,
       a.areaCode, a.pinCodeN, a.cityName, a.district, a.cusRtlCd, b.stateCod,
       isnull(a.dsrRem03,'') as LastTopic
  from dptDSRActvt a with (nolock)
  join bkmAreaStZn b with (nolock) on a.areaCode=b.areaCode
 where a.dsrRem08=@M and a.areaCode=@A and a.statFlag not in ('C','R')
 order by a.createDt desc";
                var row = (_db.WebSessBean(sql, new Dictionary<string, object>
                {
                    ["@M"] = mobile, ["@A"] = areaCode
                }) as List<Dictionary<string, object>>)?.FirstOrDefault();

                if (row == null) return NotFound();

                return Ok(new
                {
                    partyName = row["PartyName"]?.ToString(),
                    mobile = row["Mobile"]?.ToString(),
                    cuRtType = row["cuRtType"]?.ToString(),
                    areaCode = row["areaCode"]?.ToString(),
                    pinCodeN = row["pinCodeN"]?.ToString(),
                    cityName = row["cityName"]?.ToString(),
                    district = row["district"]?.ToString(),
                    custCdRt = row["cusRtlCd"]?.ToString(),
                    stateGeo = row["stateCod"]?.ToString(),
                    lastTopic = row["LastTopic"]?.ToString()
                });
            }
            catch (Exception ex) { return StatusCode(500, new { error = ex.Message }); }
        }

        // GET /api/DsrDynamic/codes?areaCode=...&type=R
        [HttpGet("codes")]
        public IActionResult CodeSearch([FromQuery][Required] string areaCode, [FromQuery][Required] string type)
        {
            try
            {
                string sql;
                var p = new Dictionary<string, object> { ["@A"] = areaCode };

                if (new[] { "C", "D", "RD", "AD", "UR" }.Contains(type))
                {
                    sql = @"select distinct custCode as CodeSearch from dpmCustomer with (nolock)
                            where areaCode=@A and isActive='Y' order by custCode";
                }
                else
                {
                    // R / RR
                    sql = @"select distinct retlCode as CodeSearch from rtmRetailer with (nolock)
                            where areaCode=@A and isActive='Y' order by retlCode";
                }

                var rows = _db.WebSessBean(sql, p) as List<Dictionary<string, object>>;
                var list = rows?.Select(r => r["CodeSearch"]?.ToString()).Where(s => !string.IsNullOrEmpty(s)).ToList()
                           ?? new List<string>();
                return Ok(list);
            }
            catch (Exception ex) { return StatusCode(500, new { error = ex.Message }); }
        }

        // GET /api/DsrDynamic/retailer?code=...
        [HttpGet("retailer")]
        public IActionResult Retailer([FromQuery][Required] string code)
        {
            try
            {
                const string sql = @"
SELECT retlCode as Code, retlName as Name, latitute, lgtitute
  FROM rtmRetailer WITH (NOLOCK)
 WHERE isActive = 'Y' AND retlCode = @Code
UNION ALL
SELECT custCode, custName, latitute, lgtitute
  FROM dpmCustomer WITH (NOLOCK)
 WHERE isActive='Y' AND custCode = @Code";
                var rows = _db.WebSessBean(sql, new Dictionary<string, object> { ["@Code"] = code })
                           as List<Dictionary<string, object>>;
                if (rows?.Count > 0) return Ok(rows[0]);
                return NotFound();
            }
            catch (Exception ex) { return StatusCode(500, new { error = ex.Message }); }
        }

        public class DistanceValidationRequest
        {
            public double CustomerLatitude { get; set; }
            public double CustomerLongitude { get; set; }
            public double UserLatitude { get; set; }
            public double UserLongitude { get; set; }
        }

        [HttpPost("validateDistance")]
        public IActionResult ValidateDistance([FromBody] DistanceValidationRequest r)
        {
            if (r == null) return BadRequest("Invalid payload.");
            if (r.CustomerLatitude == 0 || r.CustomerLongitude == 0 || r.UserLatitude == 0 || r.UserLongitude == 0)
                return BadRequest("All latitude and longitude values are required.");
            try
            {
                var d = CalcDist(r.CustomerLatitude, r.CustomerLongitude, r.UserLatitude, r.UserLongitude);
                if (d <= 500) return Ok(new { ok = true, distance = d });
                return BadRequest(new { ok = false, distance = d, message = "Not at customer's location." });
            }
            catch (Exception ex) { return StatusCode(500, new { error = ex.Message }); }
        }

        private double CalcDist(double lat1, double lon1, double lat2, double lon2)
        {
            var radlat1 = Math.PI * lat1 / 180;
            var radlat2 = Math.PI * lat2 / 180;
            var theta = lon1 - lon2;
            var radtheta = Math.PI * theta / 180;
            var dist = Math.Sin(radlat1) * Math.Sin(radlat2) + Math.Cos(radlat1) * Math.Cos(radlat2) * Math.Cos(radtheta);
            if (dist > 1) dist = 1;
            dist = Math.Acos(dist) * 180 / Math.PI * 60 * 1.1515 * 1.609344 * 1000;
            return dist;
        }
        #endregion

        #region Save/Get endpoints (mirror your previous ones, now with dynamic fields array)
        // POST /api/DsrDynamic/save
        [HttpPost("save")]
        public IActionResult Save([FromBody] DsrSaveRequest dto)
        {
            if (!ModelState.IsValid) return BadRequest(ModelState);

            var userId = User.Identity?.Name ?? "UNKNOWN";

            // Enforce last three days (like JSP)
            var today = DateTime.Today;
            if (dto.ProcType != "D" && !(dto.DocuDate.Date >= today.AddDays(-3) && dto.DocuDate.Date <= today))
                return BadRequest("Please put valid DSR date (only last three days allowed).");

            try
            {
                if (dto.ProcType == "A")
                {
                    const string insHdr = @"
insert into dptDSRActvt
 (docuNumb, docuDate, dsrParTy, dsrParam, cusRtlFl, areaCode, cusRtlCd,
  dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, dsrRem09,
  cuRtType, latitute, lgtitute, deptCode, statFlag, createId, createDt, isTilRtl, tileStck)
values
 (@DocuNumb, @DocuDate, '83', @DsrParam, @CusRtlFl, @AreaCode, @CusRtlCd,
  @R1, @R2, @R3, @R4, @R5, @R6, @R7, @R8, @R9,
  @CuRtType, @Lat, @Lng, @Dept, 'N', @User, getdate(), @IsTilRtl, @TileStck)";
                    var p = new Dictionary<string, object>
                    {
                        ["@DocuNumb"]=dto.DocuNumb, ["@DocuDate"]=dto.DocuDate,
                        ["@DsrParam"]=dto.DsrParam, ["@CusRtlFl"]=dto.CusRtlFl,
                        ["@AreaCode"]=dto.AreaCode, ["@CusRtlCd"]=dto.CusRtlCd,
                        ["@R1"]=dto.DsrRem.ElementAtOrDefault(1) ?? "",
                        ["@R2"]=dto.DsrRem.ElementAtOrDefault(2) ?? "",
                        ["@R3"]=dto.DsrRem.ElementAtOrDefault(3) ?? "",
                        ["@R4"]=dto.DsrRem.ElementAtOrDefault(4) ?? "",
                        ["@R5"]=dto.DsrRem.ElementAtOrDefault(5) ?? "",
                        ["@R6"]=dto.DsrRem.ElementAtOrDefault(6) ?? "",
                        ["@R7"]=dto.DsrRem.ElementAtOrDefault(7) ?? "",
                        ["@R8"]=dto.DsrRem.ElementAtOrDefault(8) ?? "",
                        ["@R9"]=dto.DsrRem.ElementAtOrDefault(9) ?? "",
                        ["@CuRtType"]=dto.CuRtType ?? "",
                        ["@Lat"]=dto.GeoLatit ?? "", ["@Lng"]=dto.GeoLongt ?? "",
                        ["@Dept"]=dto.DeptCode ?? "", ["@User"]=userId,
                        ["@IsTilRtl"]=dto.IsTilRtl ?? "", ["@TileStck"]=dto.TileStck
                    };
                    _db.WebSessBean(insHdr, p);

                    if (dto.Orders?.Count > 0)
                    {
                        const string insDtl = @"
insert into dptDSRActvtDtl
 (docuNumb, docuSrNo, repoCatg, prodQnty, projQnty, actnRemk, targetDt, statFlag, createId, createDt)
values
 (@Doc, @Sr, @Catg, @Prod, @Proj, @Remk, @Tgt, 'N', @User, getdate())";
                        int sr = 1;
                        foreach (var o in dto.Orders)
                        {
                            var dp = new Dictionary<string, object>
                            {
                                ["@Doc"]=dto.DocuNumb, ["@Sr"]=sr++,
                                ["@Catg"]=o.RepoCatg ?? "", ["@Prod"]=o.ProdQnty,
                                ["@Proj"]=o.ProjQnty, ["@Remk"]=o.ActnRemk ?? "",
                                ["@Tgt"]=o.TargetDt ?? (object)DBNull.Value, ["@User"]=userId
                            };
                            _db.WebSessBean(insDtl, dp);
                        }
                    }
                }
                else if (dto.ProcType == "U")
                {
                    const string updHdr = @"
update dptDSRActvt set
  docuDate=@DocuDate, dsrParam=@DsrParam, cusRtlFl=@CusRtlFl, areaCode=@AreaCode, cusRtlCd=@CusRtlCd,
  dsrRem01=@R1, dsrRem02=@R2, dsrRem03=@R3, dsrRem04=@R4, dsrRem05=@R5,
  dsrRem06=@R6, dsrRem07=@R7, dsrRem08=@R8, dsrRem09=@R9,
  cuRtType=@CuRtType, latitute=@Lat, lgtitute=@Lng, isTilRtl=@IsTilRtl, tileStck=@TileStck,
  updateId=@User, updateDt=getdate()
where docuNumb=@DocuNumb and createId=@User";
                    var p = new Dictionary<string, object>
                    {
                        ["@DocuNumb"]=dto.DocuNumb, ["@DocuDate"]=dto.DocuDate,
                        ["@DsrParam"]=dto.DsrParam, ["@CusRtlFl"]=dto.CusRtlFl,
                        ["@AreaCode"]=dto.AreaCode, ["@CusRtlCd"]=dto.CusRtlCd,
                        ["@R1"]=dto.DsrRem.ElementAtOrDefault(1) ?? "",
                        ["@R2"]=dto.DsrRem.ElementAtOrDefault(2) ?? "",
                        ["@R3"]=dto.DsrRem.ElementAtOrDefault(3) ?? "",
                        ["@R4"]=dto.DsrRem.ElementAtOrDefault(4) ?? "",
                        ["@R5"]=dto.DsrRem.ElementAtOrDefault(5) ?? "",
                        ["@R6"]=dto.DsrRem.ElementAtOrDefault(6) ?? "",
                        ["@R7"]=dto.DsrRem.ElementAtOrDefault(7) ?? "",
                        ["@R8"]=dto.DsrRem.ElementAtOrDefault(8) ?? "",
                        ["@R9"]=dto.DsrRem.ElementAtOrDefault(9) ?? "",
                        ["@CuRtType"]=dto.CuRtType ?? "",
                        ["@Lat"]=dto.GeoLatit ?? "", ["@Lng"]=dto.GeoLongt ?? "",
                        ["@IsTilRtl"]=dto.IsTilRtl ?? "", ["@TileStck"]=dto.TileStck,
                        ["@User"]=userId
                    };
                    _db.WebSessBean(updHdr, p);

                    const string delDtl = @"delete from dptDSRActvtDtl where docuNumb=@Doc and createId=@User";
                    _db.WebSessBean(delDtl, new Dictionary<string, object> { ["@Doc"] = dto.DocuNumb, ["@User"] = userId });

                    if (dto.Orders?.Count > 0)
                    {
                        const string insDtl = @"
insert into dptDSRActvtDtl
 (docuNumb, docuSrNo, repoCatg, prodQnty, projQnty, actnRemk, targetDt, statFlag, createId, createDt)
values
 (@Doc, @Sr, @Catg, @Prod, @Proj, @Remk, @Tgt, 'N', @User, getdate())";
                        int sr = 1;
                        foreach (var o in dto.Orders)
                        {
                            var dp = new Dictionary<string, object>
                            {
                                ["@Doc"]=dto.DocuNumb, ["@Sr"]=sr++,
                                ["@Catg"]=o.RepoCatg ?? "", ["@Prod"]=o.ProdQnty,
                                ["@Proj"]=o.ProjQnty, ["@Remk"]=o.ActnRemk ?? "",
                                ["@Tgt"]=o.TargetDt ?? (object)DBNull.Value, ["@User"]=userId
                            };
                            _db.WebSessBean(insDtl, dp);
                        }
                    }
                }
                else if (dto.ProcType == "D")
                {
                    const string delDtl = @"delete from dptDSRActvtDtl where docuNumb=@Doc and createId=@User";
                    const string delHdr = @"delete from dptDSRActvt where docuNumb=@Doc and createId=@User";
                    var par = new Dictionary<string, object> { ["@Doc"] = dto.DocuNumb, ["@User"] = userId };
                    _db.WebSessBean(delDtl, par);
                    _db.WebSessBean(delHdr, par);
                }
                else return BadRequest("Invalid ProcType (A/U/D).");

                return Ok(new { success = true, docuNumb = dto.DocuNumb });
            }
            catch (SqlException ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new { success=false, error="Database error: " + ex.Message });
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, new { success=false, error=ex.Message });
            }
        }

        // GET /api/DsrDynamic/get?docuNumb=...&loginId=...
        [HttpGet("get")]
        public IActionResult Get([FromQuery][Required] string docuNumb, [FromQuery][Required] string loginId)
        {
            try
            {
                const string hdrSql = @"
select docuNumb, convert(char(10), docuDate, 103) as docuDate,
       dsrParam, cusRtlFl, areaCode, cusRtlCd, isnull(cuRtType,'') cuRtType,
       dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, dsrRem09,
       latitute, lgtitute, isTilRtl, tileStck, deptCode
  from dptDSRActvt with (nolock)
 where docuNumb=@Doc and createId=@Login";
                var h = (_db.WebSessBean(hdrSql, new Dictionary<string, object>
                {
                    ["@Doc"]=docuNumb, ["@Login"]=loginId
                }) as List<Dictionary<string, object>>)?.FirstOrDefault();

                if (h == null) return NotFound("Document not found.");

                const string dtlSql = @"select repoCatg, prodQnty, projQnty, actnRemk, targetDt
                                          from dptDSRActvtDtl with (nolock)
                                         where docuNumb=@Doc
                                         order by docuSrNo";
                var d = _db.WebSessBean(dtlSql, new Dictionary<string, object> { ["@Doc"]=docuNumb })
                        as List<Dictionary<string, object>>;

                return Ok(new
                {
                    DocuNumb = h["docuNumb"]?.ToString(),
                    DocuDate = h["docuDate"]?.ToString(),
                    DsrParam = h["dsrParam"]?.ToString(),
                    CusRtlFl = h["cusRtlFl"]?.ToString(),
                    AreaCode = h["areaCode"]?.ToString(),
                    CusRtlCd = h["cusRtlCd"]?.ToString(),
                    CuRtType = h["cuRtType"]?.ToString(),
                    DsrRem = new[]
                    {
                        null,
                        h["dsrRem01"]?.ToString(), h["dsrRem02"]?.ToString(), h["dsrRem03"]?.ToString(),
                        h["dsrRem04"]?.ToString(), h["dsrRem05"]?.ToString(), h["dsrRem06"]?.ToString(),
                        h["dsrRem07"]?.ToString(), h["dsrRem08"]?.ToString(), h["dsrRem09"]?.ToString()
                    },
                    GeoLatit = h["latitute"]?.ToString(),
                    GeoLongt = h["lgtitute"]?.ToString(),
                    IsTilRtl = h["isTilRtl"]?.ToString(),
                    TileStck = h["tileStck"] == null ? 0 : Convert.ToDecimal(h["tileStck"]),
                    DeptCode = h["deptCode"]?.ToString(),
                    Orders = d?.Select(r => new {
                        RepoCatg = r["repoCatg"]?.ToString(),
                        ProdQnty = r["prodQnty"] == null ? 0 : Convert.ToDecimal(r["prodQnty"]),
                        ProjQnty = r["projQnty"] == null ? 0 : Convert.ToDecimal(r["projQnty"]),
                        ActnRemk = r["actnRemk"]?.ToString(),
                        TargetDt = r["targetDt"]
                    }).ToList() ?? new List<object>()
                });
            }
            catch (Exception ex) { return StatusCode(500, new { error = ex.Message }); }
        }
        #endregion
    }
}
