// File: DsrModule.cs
// ===========================================
// This single C# file defines:
//  1) JsonDateConverter / JsonNullableDateConverter
//  2) The DsrRequest model (with nested DTOs)
//  3) The DsrController (API endpoint)
// ===========================================

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;

namespace MyApp
{
    // --- 1) JSON DATE CONVERTERS ---
    public class JsonDateConverter : JsonConverter<DateTime>
    {
        private const string Format = "dd/MM/yyyy";
        public override DateTime Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions opts)
            => DateTime.ParseExact(reader.GetString()!, Format, CultureInfo.InvariantCulture);

        public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions opts)
            => writer.WriteStringValue(value.ToString(Format));
    }

    public class JsonNullableDateConverter : JsonConverter<DateTime?>
    {
        private const string Format = "dd/MM/yyyy";
        public override DateTime? Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions opts)
        {
            var s = reader.GetString();
            return string.IsNullOrEmpty(s)
                ? (DateTime?)null
                : DateTime.ParseExact(s, Format, CultureInfo.InvariantCulture);
        }

        public override void Write(Utf8JsonWriter writer, DateTime? value, JsonSerializerOptions opts)
            => writer.WriteStringValue(value?.ToString(Format));
    }


    // --- 2) REQUEST MODEL ---
    public class DsrRequest
    {
        // Header
        [Required] public string ProcType { get; set; }
        [Required] public string DocuNumb { get; set; }
        [Required] public string DsrParam { get; set; }
        [Required] public string CusRtlFl { get; set; }
        [Required] public string AreaCode { get; set; }
        [Required] public string CusRtlCd { get; set; }
        public string KycStatus { get; set; }

        [Required]
        [JsonConverter(typeof(JsonDateConverter))]
        public DateTime ReportDate { get; set; }

        public string MarketName { get; set; }
        public string PrtDsCnt { get; set; }
        public string PendIsue { get; set; }
        public string PndIsuDt { get; set; }
        public string IsuDetal { get; set; }

        public decimal WcErlSlb { get; set; }
        public decimal WpErlSlb { get; set; }
        public decimal VpErlSlb { get; set; }
        public decimal BwStkWcc { get; set; }
        public decimal BwStkWcp { get; set; }
        public decimal BwStkVap { get; set; }

        public string SlWcVlum { get; set; }
        public string SlWpVlum { get; set; }
        public string JkAvgWcc { get; set; }
        public string JkAvgWcp { get; set; }
        public string AsAvgWcc { get; set; }
        public string AsAvgWcp { get; set; }
        public string OtAvgWcc { get; set; }
        public string OtAvgWcp { get; set; }

        [JsonConverter(typeof(JsonNullableDateConverter))]
        public DateTime? OrdExDat { get; set; }

        public string DsrRem05 { get; set; }
        public string GeoLatit { get; set; }
        public string GeoLongt { get; set; }
        public string IsTilRtl { get; set; }
        public decimal TileStck { get; set; }

        // Detail grids
        public List<OrderDto> Orders { get; set; }
        public List<MarketSkuDto> MarketSkus { get; set; }
        public List<GiftDto> Gifts { get; set; }

        public class OrderDto
        {
            public string RepoCatg { get; set; }
            public string ProdCode { get; set; }
            public decimal ProdQnty { get; set; }
            public decimal ProjQnty { get; set; }
            public string ActnRemk { get; set; }

            [JsonConverter(typeof(JsonNullableDateConverter))]
            public DateTime? TargetDt { get; set; }
        }

        public class MarketSkuDto
        {
            public string BranName { get; set; }
            public string PrdCodMk { get; set; }
            public decimal BPriceVl { get; set; }
            public decimal CPriceVl { get; set; }
        }

        public class GiftDto
        {
            public string MrtlCode { get; set; }
            public decimal IsueQnty { get; set; }
        }
    }


    // --- 3) API CONTROLLER ---
    [ApiController]
    [Route("api/[controller]")]
    public class DsrController : ControllerBase
    {
        private readonly string _connString;
        public DsrController(IConfiguration cfg)
            => _connString = cfg.GetConnectionString("Bwlive");

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] DsrRequest dto)
        {
            string createId = User.Identity?.Name ?? "UNKNOWN";

            await using var conn = new SqlConnection(_connString);
            await conn.OpenAsync();
            await using var tx = conn.BeginTransaction();

            try
            {
                // HEADER INSERT
                const string hdrSql = @"
INSERT INTO dptDSRActvt
 (docuNumb, docuDate, ordExDat, dsrParTy, dsrParam, cusRtlFl, areaCode, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10, district, deptCode, pendWith, statFlag, createId, createDt, locaCapr, latitute, lgtitute, ltLgDist, pinCodeN, cityName, cstBisTy, cuRtType, isTilRtl, tileStck, rtlInTim)
VALUES
 (@DocuNumb, @DocuDate, @OrdExDat, @DsrParTy, @DsrParam, @CusRtlFl, @AreaCode, @CusRtlCd, @MarketName, @PendIsue, @PndIsuDt, @IsuDetal, @DsrRem05, @BrndSlWc, @BrndSlWp, @PrtDsCnt, @SlWcVlum, @SlWpVlum, @District, @DeptCode, @PendWith, @StatFlag, @CreateId, GETDATE(), @FinlRslt, @GeoLatit, @GeoLongt, @LtLgDist, @PinCodeN, @CityName, @CstBisTy, @CusRtTyp, @IsTilRtl, @TileStck, GETDATE());";

                await using (var hdrCmd = new SqlCommand(hdrSql, conn, tx))
                {
                    hdrCmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                    hdrCmd.Parameters.AddWithValue("@DocuDate", DateTime.Now);
                    hdrCmd.Parameters.AddWithValue("@OrdExDat", dto.OrdExDat ?? (object)DBNull.Value);
                    hdrCmd.Parameters.AddWithValue("@DsrParTy", "83");
                    hdrCmd.Parameters.AddWithValue("@DsrParam", dto.DsrParam);
                    hdrCmd.Parameters.AddWithValue("@CusRtlFl", dto.CusRtlFl);
                    hdrCmd.Parameters.AddWithValue("@AreaCode", dto.AreaCode);
                    hdrCmd.Parameters.AddWithValue("@CusRtlCd", dto.CusRtlCd);
                    hdrCmd.Parameters.AddWithValue("@MarketName", dto.MarketName ?? "");
                    hdrCmd.Parameters.AddWithValue("@PendIsue", dto.PendIsue ?? "");
                    hdrCmd.Parameters.AddWithValue("@PndIsuDt", dto.PndIsuDt ?? "");
                    hdrCmd.Parameters.AddWithValue("@IsuDetal", dto.IsuDetal ?? "");
                    hdrCmd.Parameters.AddWithValue("@DsrRem05", dto.DsrRem05 ?? "");
                    hdrCmd.Parameters.AddWithValue("@BrndSlWc", "");
                    hdrCmd.Parameters.AddWithValue("@BrndSlWp", "");
                    hdrCmd.Parameters.AddWithValue("@PrtDsCnt", dto.PrtDsCnt ?? "");
                    hdrCmd.Parameters.AddWithValue("@SlWcVlum", dto.SlWcVlum ?? "");
                    hdrCmd.Parameters.AddWithValue("@SlWpVlum", dto.SlWpVlum ?? "");
                    hdrCmd.Parameters.AddWithValue("@District", "");
                    hdrCmd.Parameters.AddWithValue("@DeptCode", "");
                    hdrCmd.Parameters.AddWithValue("@PendWith", "");
                    hdrCmd.Parameters.AddWithValue("@StatFlag", "N");
                    hdrCmd.Parameters.AddWithValue("@CreateId", createId);
                    hdrCmd.Parameters.AddWithValue("@FinlRslt", "");
                    hdrCmd.Parameters.AddWithValue("@GeoLatit", dto.GeoLatit ?? "");
                    hdrCmd.Parameters.AddWithValue("@GeoLongt", dto.GeoLongt ?? "");
                    hdrCmd.Parameters.AddWithValue("@LtLgDist", "");
                    hdrCmd.Parameters.AddWithValue("@PinCodeN", "");
                    hdrCmd.Parameters.AddWithValue("@CityName", "");
                    hdrCmd.Parameters.AddWithValue("@CstBisTy", "");
                    hdrCmd.Parameters.AddWithValue("@CusRtTyp", "RT");
                    hdrCmd.Parameters.AddWithValue("@IsTilRtl", dto.IsTilRtl ?? "");
                    hdrCmd.Parameters.AddWithValue("@TileStck", dto.TileStck);

                    await hdrCmd.ExecuteNonQueryAsync();
                }

                // Logic for inserting into dptDSRActvtDtl
                const string insertDtlSql = @"
INSERT INTO dptDSRActvtDtl
 (docuNumb, repoCatg, prodCode, prodQnty, projQnty, actnRemk, targetDt)
VALUES
 (@DocuNumb, @RepoCatg, @ProdCode, @ProdQnty, @ProjQnty, @ActnRemk, @TargetDt);";

                foreach (var order in dto.Orders)
                {
                    await using (var cmd = new SqlCommand(insertDtlSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                        cmd.Parameters.AddWithValue("@RepoCatg", order.RepoCatg ?? "");
                        cmd.Parameters.AddWithValue("@ProdCode", order.ProdCode ?? "");
                        cmd.Parameters.AddWithValue("@ProdQnty", order.ProdQnty);
                        cmd.Parameters.AddWithValue("@ProjQnty", order.ProjQnty);
                        cmd.Parameters.AddWithValue("@ActnRemk", order.ActnRemk ?? "");
                        cmd.Parameters.AddWithValue("@TargetDt", order.TargetDt ?? (object)DBNull.Value);

                        await cmd.ExecuteNonQueryAsync();
                    }
                }

                // Logic for inserting into dptGiftDist
                const string insertGiftSql = @"
INSERT INTO dptGiftDist
 (docuNumb, mrtlCode, isueQnty)
VALUES
 (@DocuNumb, @MrtlCode, @IsueQnty);";

                foreach (var gift in dto.Gifts)
                {
                    await using (var cmd = new SqlCommand(insertGiftSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                        cmd.Parameters.AddWithValue("@MrtlCode", gift.MrtlCode ?? "");
                        cmd.Parameters.AddWithValue("@IsueQnty", gift.IsueQnty);

                        await cmd.ExecuteNonQueryAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                await tx.RollbackAsync();
                return StatusCode(500, new { success = false, error = ex.Message });
            }

            return Ok(new { success = true });
        }

        [HttpPost("ProcessDsr")]
        public async Task<IActionResult> ProcessDsr([FromBody] DsrRequest dto)
        {
            string createId = User.Identity?.Name ?? "UNKNOWN";

            await using var conn = new SqlConnection(_connString);
            await conn.OpenAsync();
            await using var tx = conn.BeginTransaction();

            try
            {
                if (dto.ProcType == "A")
                {
                    // Insert into dptDSRActvt
                    const string insertActvtSql = @"
INSERT INTO dptDSRActvt
 (docuNumb, docuDate, ordExDat, dsrParTy, dsrParam, cusRtlFl, areaCode, cusRtlCd, dsrRem01, dsrRem02, dsrRem03, dsrRem04, dsrRem05, dsrRem06, dsrRem07, dsrRem08, dsrRem09, dsrRem10, district, deptCode, pendWith, statFlag, createId, createDt, locaCapr, latitute, lgtitute, ltLgDist, pinCodeN, cityName, cstBisTy, cuRtType, isTilRtl, tileStck, rtlInTim)
VALUES
 (@DocuNumb, @DocuDate, @OrdExDat, @DsrParTy, @DsrParam, @CusRtlFl, @AreaCode, @CusRtlCd, @MarketName, @PendIsue, @PndIsuDt, @IsuDetal, @DsrRem05, @BrndSlWc, @BrndSlWp, @PrtDsCnt, @SlWcVlum, @SlWpVlum, @District, @DeptCode, @PendWith, @StatFlag, @CreateId, GETDATE(), @FinlRslt, @GeoLatit, @GeoLongt, @LtLgDist, @PinCodeN, @CityName, @CstBisTy, @CusRtTyp, @IsTilRtl, @TileStck, GETDATE());";

                    await using (var cmd = new SqlCommand(insertActvtSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                        cmd.Parameters.AddWithValue("@DocuDate", DateTime.Now);
                        cmd.Parameters.AddWithValue("@OrdExDat", dto.OrdExDat ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@DsrParTy", "83");
                        cmd.Parameters.AddWithValue("@DsrParam", dto.DsrParam);
                        cmd.Parameters.AddWithValue("@CusRtlFl", dto.CusRtlFl);
                        cmd.Parameters.AddWithValue("@AreaCode", dto.AreaCode);
                        cmd.Parameters.AddWithValue("@CusRtlCd", dto.CusRtlCd);
                        cmd.Parameters.AddWithValue("@MarketName", dto.MarketName ?? "");
                        cmd.Parameters.AddWithValue("@PendIsue", dto.PendIsue ?? "");
                        cmd.Parameters.AddWithValue("@PndIsuDt", dto.PndIsuDt ?? "");
                        cmd.Parameters.AddWithValue("@IsuDetal", dto.IsuDetal ?? "");
                        cmd.Parameters.AddWithValue("@DsrRem05", dto.DsrRem05 ?? "");
                        cmd.Parameters.AddWithValue("@BrndSlWc", "");
                        cmd.Parameters.AddWithValue("@BrndSlWp", "");
                        cmd.Parameters.AddWithValue("@PrtDsCnt", dto.PrtDsCnt ?? "");
                        cmd.Parameters.AddWithValue("@SlWcVlum", dto.SlWcVlum ?? "");
                        cmd.Parameters.AddWithValue("@SlWpVlum", dto.SlWpVlum ?? "");
                        cmd.Parameters.AddWithValue("@District", "");
                        cmd.Parameters.AddWithValue("@DeptCode", "");
                        cmd.Parameters.AddWithValue("@PendWith", "");
                        cmd.Parameters.AddWithValue("@StatFlag", "N");
                        cmd.Parameters.AddWithValue("@CreateId", createId);
                        cmd.Parameters.AddWithValue("@FinlRslt", "");
                        cmd.Parameters.AddWithValue("@GeoLatit", dto.GeoLatit ?? "");
                        cmd.Parameters.AddWithValue("@GeoLongt", dto.GeoLongt ?? "");
                        cmd.Parameters.AddWithValue("@LtLgDist", "");
                        cmd.Parameters.AddWithValue("@PinCodeN", "");
                        cmd.Parameters.AddWithValue("@CityName", "");
                        cmd.Parameters.AddWithValue("@CstBisTy", "");
                        cmd.Parameters.AddWithValue("@CusRtTyp", "RT");
                        cmd.Parameters.AddWithValue("@IsTilRtl", dto.IsTilRtl ?? "");
                        cmd.Parameters.AddWithValue("@TileStck", dto.TileStck);

                        await cmd.ExecuteNonQueryAsync();
                    }

                    // Additional logic for inserting into dptDSRActvtDtl
                    const string insertDtlSql = @"
INSERT INTO dptDSRActvtDtl
 (docuNumb, repoCatg, prodCode, prodQnty, projQnty, actnRemk, targetDt)
VALUES
 (@DocuNumb, @RepoCatg, @ProdCode, @ProdQnty, @ProjQnty, @ActnRemk, @TargetDt);";

                    foreach (var order in dto.Orders)
                    {
                        await using (var cmd = new SqlCommand(insertDtlSql, conn, tx))
                        {
                            cmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                            cmd.Parameters.AddWithValue("@RepoCatg", order.RepoCatg ?? "");
                            cmd.Parameters.AddWithValue("@ProdCode", order.ProdCode ?? "");
                            cmd.Parameters.AddWithValue("@ProdQnty", order.ProdQnty);
                            cmd.Parameters.AddWithValue("@ProjQnty", order.ProjQnty);
                            cmd.Parameters.AddWithValue("@ActnRemk", order.ActnRemk ?? "");
                            cmd.Parameters.AddWithValue("@TargetDt", order.TargetDt ?? (object)DBNull.Value);

                            await cmd.ExecuteNonQueryAsync();
                        }
                    }

                    // Additional logic for inserting into dptGiftDist
                    const string insertGiftSql = @"
INSERT INTO dptGiftDist
 (docuNumb, mrtlCode, isueQnty)
VALUES
 (@DocuNumb, @MrtlCode, @IsueQnty);";

                    foreach (var gift in dto.Gifts)
                    {
                        await using (var cmd = new SqlCommand(insertGiftSql, conn, tx))
                        {
                            cmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                            cmd.Parameters.AddWithValue("@MrtlCode", gift.MrtlCode ?? "");
                            cmd.Parameters.AddWithValue("@IsueQnty", gift.IsueQnty);

                            await cmd.ExecuteNonQueryAsync();
                        }
                    }

                    // Additional logic for inserting into dptDSRActvtDtl and dptGiftDist can be added similarly.
                }
                else if (dto.ProcType == "U")
                {
                    // Update logic
                    const string updateActvtSql = @"
UPDATE dptDSRActvt
SET docuDate = @DocuDate,
    ordExDat = @OrdExDat,
    dsrParam = @DsrParam,
    cusRtlFl = @CusRtlFl,
    areaCode = @AreaCode,
    cusRtlCd = @CusRtlCd,
    dsrRem01 = @MarketName,
    dsrRem02 = @PendIsue,
    dsrRem03 = @PndIsuDt,
    dsrRem04 = @IsuDetal,
    dsrRem05 = @DsrRem05,
    dsrRem06 = @BrndSlWc,
    dsrRem07 = @BrndSlWp,
    dsrRem08 = @PrtDsCnt,
    dsrRem09 = @SlWcVlum,
    dsrRem10 = @SlWpVlum,
    latitute = @GeoLatit,
    lgtitute = @GeoLongt,
    tileStck = @TileStck,
    updateId = @UpdateId,
    updateDt = GETDATE()
WHERE docuNumb = @DocuNumb;";

                    await using (var cmd = new SqlCommand(updateActvtSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);
                        cmd.Parameters.AddWithValue("@DocuDate", DateTime.Now);
                        cmd.Parameters.AddWithValue("@OrdExDat", dto.OrdExDat ?? (object)DBNull.Value);
                        cmd.Parameters.AddWithValue("@DsrParam", dto.DsrParam);
                        cmd.Parameters.AddWithValue("@CusRtlFl", dto.CusRtlFl);
                        cmd.Parameters.AddWithValue("@AreaCode", dto.AreaCode);
                        cmd.Parameters.AddWithValue("@CusRtlCd", dto.CusRtlCd);
                        cmd.Parameters.AddWithValue("@MarketName", dto.MarketName ?? "");
                        cmd.Parameters.AddWithValue("@PendIsue", dto.PendIsue ?? "");
                        cmd.Parameters.AddWithValue("@PndIsuDt", dto.PndIsuDt ?? "");
                        cmd.Parameters.AddWithValue("@IsuDetal", dto.IsuDetal ?? "");
                        cmd.Parameters.AddWithValue("@DsrRem05", dto.DsrRem05 ?? "");
                        cmd.Parameters.AddWithValue("@BrndSlWc", "");
                        cmd.Parameters.AddWithValue("@BrndSlWp", "");
                        cmd.Parameters.AddWithValue("@PrtDsCnt", dto.PrtDsCnt ?? "");
                        cmd.Parameters.AddWithValue("@SlWcVlum", dto.SlWcVlum ?? "");
                        cmd.Parameters.AddWithValue("@SlWpVlum", dto.SlWpVlum ?? "");
                        cmd.Parameters.AddWithValue("@GeoLatit", dto.GeoLatit ?? "");
                        cmd.Parameters.AddWithValue("@GeoLongt", dto.GeoLongt ?? "");
                        cmd.Parameters.AddWithValue("@TileStck", dto.TileStck);
                        cmd.Parameters.AddWithValue("@UpdateId", createId);

                        await cmd.ExecuteNonQueryAsync();
                    }
                }
                else if (dto.ProcType == "D")
                {
                    // Delete logic
                    const string deleteActvtSql = @"
DELETE FROM dptDSRActvt
WHERE docuNumb = @DocuNumb;";

                    await using (var cmd = new SqlCommand(deleteActvtSql, conn, tx))
                    {
                        cmd.Parameters.AddWithValue("@DocuNumb", dto.DocuNumb);

                        await cmd.ExecuteNonQueryAsync();
                    }
                }

                await tx.CommitAsync();
                return Ok(new { success = true });
            }
            catch (Exception ex)
            {
                await tx.RollbackAsync();
                return StatusCode(500, new { success = false, error = ex.Message });
            }
        }
    }
}
