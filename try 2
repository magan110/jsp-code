using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        private const int ITERATION_NUMBER = 1; // matches your stored scheme

        public AuthController(DatabaseHelper dbHelper) => _db = dbHelper;

        // --------- Envelope ----------
        public sealed class ApiResponse<T>
        {
            public bool Success { get; set; }
            public T Data { get; set; }
            public string Error { get; set; }
            public static ApiResponse<T> Ok(T d) => new() { Success = true, Data = d };
            public static ApiResponse<T> Fail(string m) => new() { Success = false, Error = m };
        }

        // --------- DTOs ----------
        public class LoginRequest
        {
            public string userID { get; set; }
            public string password { get; set; }
            public string appRegId { get; set; } // REQUIRED (from Flutter)
        }

        public class AutoLoginRequest { public string appRegId { get; set; } }
        public class LogoutRequest    { public string appRegId { get; set; } }

        public class UserDetails
        {
            public string emplName { get; set; }
            public string areaCode { get; set; }
            public HashSet<string> roles { get; set; }
            public HashSet<string> pages { get; set; }
        }

        // ===================================================
        //                      LOGIN
        // ===================================================
        [AllowAnonymous]
        [HttpPost("login")]
        public IActionResult Login([FromBody] LoginRequest request)
        {
            if (request == null ||
                string.IsNullOrWhiteSpace(request.userID) ||
                string.IsNullOrWhiteSpace(request.password) ||
                string.IsNullOrWhiteSpace(request.appRegId))
            {
                return BadRequest(ApiResponse<object>.Fail(
                    "Parameters 'userID', 'password', and 'appRegId' are required."
                ));
            }

            try
            {
                // 1) Read stored hash/salt
                const string credSql = @"
                    SELECT loginIdm, hashPass, hashSalt
                    FROM wcmUserCred WITH (NOLOCK)
                    WHERE loginIdM = @userID";
                var credParams = new Dictionary<string, object> { { "@userID", request.userID } };
                var credRows = _db.QaEWebBean(credSql, credParams);

                if (credRows == null || credRows.Count == 0)
                    return Unauthorized(ApiResponse<object>.Fail("Invalid userID."));

                string hashPass = credRows[0]["hashPass"]?.ToString();
                string hashSalt = credRows[0]["hashSalt"]?.ToString();
                if (string.IsNullOrWhiteSpace(hashPass) || string.IsNullOrWhiteSpace(hashSalt))
                    return BadRequest(ApiResponse<object>.Fail("Hash or salt not configured for this user."));

                // 2) Verify password
                string inputHash = HashPassword(request.password, hashSalt);
                if (!string.Equals(inputHash, hashPass, StringComparison.Ordinal))
                    return Unauthorized(ApiResponse<object>.Fail("Invalid password."));

                // 3) Store provided appRegId
                const string updSql = @"
                    UPDATE wcmUserCred
                    SET appRegId = @appRegId,
                        updateDt = GETDATE(),
                        updateID = @userID
                    WHERE loginIdm = @userID";
                _db.QaEWebBean(updSql, new Dictionary<string, object>
                {
                    { "@appRegId", request.appRegId },
                    { "@userID",   request.userID  }
                });

                // 4) Load user details
                var details = GetUserDetails(request.userID);
                if (details == null)
                    return Unauthorized(ApiResponse<object>.Fail("No active role/page data found."));

                var payload = new
                {
                    appRegId = request.appRegId,
                    userID   = request.userID,
                    emplName = details.emplName,
                    areaCode = details.areaCode,
                    roles    = details.roles,
                    pages    = details.pages
                };
                return Ok(ApiResponse<object>.Ok(payload));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<object>.Fail($"Internal server error: {ex.Message}"));
            }
        }

        // ===================================================
        //                   AUTO-LOGIN
        // ===================================================
        [AllowAnonymous]
        [HttpPost("auto-login")]
        public IActionResult AutoLogin([FromBody] AutoLoginRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.appRegId))
                return BadRequest(ApiResponse<object>.Fail("Parameter 'appRegId' is required."));

            try
            {
                const string findSql = @"
                    SELECT loginIdm FROM wcmUserCred WITH (NOLOCK)
                    WHERE appRegId = @appRegId";
                var rows = _db.QaEWebBean(findSql, new Dictionary<string, object>
                {
                    { "@appRegId", request.appRegId }
                });

                if (rows == null || rows.Count == 0)
                    return Unauthorized(ApiResponse<object>.Fail("App registration not found."));

                string userID = rows[0]["loginIdm"]?.ToString();
                if (string.IsNullOrWhiteSpace(userID))
                    return Unauthorized(ApiResponse<object>.Fail("Invalid app registration record."));

                var details = GetUserDetails(userID);
                if (details == null)
                    return Unauthorized(ApiResponse<object>.Fail("No active role/page data found."));

                // Touch last access time (optional)
                const string touchSql = @"UPDATE wcmUserCred SET updateDt = GETDATE() WHERE loginIdm = @userID";
                _db.QaEWebBean(touchSql, new Dictionary<string, object> { { "@userID", userID } });

                var payload = new
                {
                    userID,
                    emplName = details.emplName,
                    areaCode = details.areaCode,
                    roles    = details.roles,
                    pages    = details.pages
                };
                return Ok(ApiResponse<object>.Ok(payload));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<object>.Fail($"Internal server error: {ex.Message}"));
            }
        }

        // ===================================================
        //                      LOGOUT
        // ===================================================
        [AllowAnonymous]
        [HttpPost("logout")]
        public IActionResult Logout([FromBody] LogoutRequest request)
        {
            if (request == null || string.IsNullOrWhiteSpace(request.appRegId))
                return BadRequest(ApiResponse<object>.Fail("Parameter 'appRegId' is required."));

            try
            {
                const string updSql = @"
                    UPDATE wcmUserCred
                    SET appRegId = NULL,
                        updateDt = GETDATE()
                    WHERE appRegId = @appRegId";
                _db.QaEWebBean(updSql, new Dictionary<string, object>
                {
                    { "@appRegId", request.appRegId }
                });

                return Ok(ApiResponse<object>.Ok(new { msg = "Logout successful" }));
            }
            catch (Exception ex)
            {
                return StatusCode(500, ApiResponse<object>.Fail($"Internal server error: {ex.Message}"));
            }
        }

        // ---------------- Helpers ----------------
        private UserDetails GetUserDetails(string userID)
        {
            const string sql = @"
                SELECT a.emplName, a.areaCode, b.roleCode, c.mobPagId
                FROM prmEmployee a WITH (NOLOCK)
                JOIN wcmEmplRole b WITH (NOLOCK) ON a.loginIdM = b.loginIdM
                JOIN wcmMobPgMas c WITH (NOLOCK) ON b.roleCode = c.roleCode
                WHERE a.isActive = 'Y' AND b.isActive = 'Y' AND c.isActive = 'Y'
                  AND a.loginIdM = @userID";

            var rs = _db.QaEWebBean(sql, new Dictionary<string, object> { { "@userID", userID } });
            if (rs == null || rs.Count == 0) return null;

            var roles = new HashSet<string>();
            var pages = new HashSet<string>();
            string emplName = rs[0]["emplName"]?.ToString();
            string areaCode = rs[0]["areaCode"]?.ToString();

            foreach (var row in rs)
            {
                var role = row["roleCode"]?.ToString();
                var page = row["mobPagId"]?.ToString();
                if (!string.IsNullOrWhiteSpace(role)) roles.Add(role);
                if (!string.IsNullOrWhiteSpace(page)) pages.Add(page);
            }

            return new UserDetails { emplName = emplName, areaCode = areaCode, roles = roles, pages = pages };
        }

        private static string HashPassword(string password, string saltBase64)
        {
            if (string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(saltBase64)) return null;

            var saltBytes = Convert.FromBase64String(saltBase64);
            var pwdBytes  = Encoding.UTF8.GetBytes(password);

            using var sha1 = SHA1.Create();

            var combined = new byte[saltBytes.Length + pwdBytes.Length];
            Buffer.BlockCopy(saltBytes, 0, combined, 0, saltBytes.Length);
            Buffer.BlockCopy(pwdBytes, 0, combined, saltBytes.Length, pwdBytes.Length);

            var hash = sha1.ComputeHash(combined);
            for (int i = 0; i < ITERATION_NUMBER; i++) hash = sha1.ComputeHash(hash);

            return Convert.ToBase64String(hash);
        }
    }
}
