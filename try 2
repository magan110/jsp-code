import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:rak_web/features/auth/screens/login_screen_with_otp.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../SAMPLING/sampleExcutionM.dart';


class SamplingDriveFormPage extends StatefulWidget {
  @override
  _SamplingDriveFormPageState createState() => _SamplingDriveFormPageState();
}

class _SamplingDriveFormPageState extends State<SamplingDriveFormPage>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  String? _photoImage;
  
  // Controllers for all fields
  final retailerController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final areaController = TextEditingController();
  final dateController = TextEditingController();
  final painterController = TextEditingController();
  final phoneController = TextEditingController();
  final siteAdController = TextEditingController();
  final qtyController = TextEditingController();
  final remarksController = TextEditingController();
  final reimbursementModeController = TextEditingController();
  final reimbursementAmtController = TextEditingController();
  final searchRetailerCodeController = TextEditingController();
  final startDateController = TextEditingController();
  final endDateController = TextEditingController();
  final emiratesController = TextEditingController();
  final samplDateController = TextEditingController();
  final prodController = TextEditingController();


List<SupplyChainEntry> filteredRetailerEntries = [];
  bool _isSubmitting = false;
  
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;


 final ScrollController _scrollController = ScrollController();
 
 final ScrollController _horizontalScrollController = ScrollController();
  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
   WidgetsBinding.instance.addPostFrameCallback((_) {
    _mainController.forward();
    _fabController.forward();
  });

filteredRetailerEntries =retailerData.values.expand((list) => list).toList();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    retailerController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    areaController.dispose();
    dateController.dispose();
    painterController.dispose();
    phoneController.dispose();
    siteAdController.dispose();
    qtyController.dispose();
    remarksController.dispose();
    reimbursementModeController.dispose();
    reimbursementAmtController.dispose();
     _scrollController.dispose();
     _horizontalScrollController.dispose();
     emiratesController.dispose();
     samplDateController.dispose();
     prodController.dispose();
    super.dispose();
  }

void populateControllers(SupplyChainEntry entry) {
  retailerController.text = entry.retailerName;
  retailerCodeController.text = entry.retailerCode;
  distributorController.text = entry.distributorName;
  areaController.text = entry.area;
  dateController.text = "${entry.distributionDate.year}-${entry.distributionDate.month.toString().padLeft(2, '0')}-${entry.distributionDate.day.toString().padLeft(2, '0')}";
  painterController.text = entry.painterName;
  phoneController.text = entry.painterMobile;
  siteAdController.text = entry.skuSizeLabel;
  qtyController.text = entry.qtyDistributedKg.toStringAsFixed(1);
  remarksController.text = entry.missedQtyKg.toStringAsFixed(1);
  reimbursementModeController.text = reimbursementModeToText(entry.reimbursementMode);
  reimbursementAmtController.text = entry.reimbursementAmountAED.toStringAsFixed(1);
}


Widget _buildSearchSection() {
  return _buildModernSection(
    title: 'Search Sampling Entries',
    icon: Icons.search,
    children: [
      ModernTextField(
            controller: searchRetailerCodeController,
            labelText: 'Retailer Code',
            isDark: true,
            keyboardType: TextInputType.text,
            prefixIcon: Icons.person_outline,
            validator: (value) {
              // if (value == null || value.isEmpty || startDateController.text.isEmpty || startDateController.text == null || endDateController.text.isEmpty ||endDateController.text == null ) {
              //   return 'Please a valid Retailer Code ';
              // }
              return null;
            },
            delay: const Duration(milliseconds: 10),
          ),
      const SizedBox(height: 16),
      _buildModernDateField(
        controller: startDateController,
        label: 'Start Date',
        icon: Icons.calendar_today,
        isRequired: false,
      ),
      const SizedBox(height: 16),
      _buildModernDateField(
        controller: endDateController,
        label: 'End Date',
        icon: Icons.calendar_today,
        isRequired: false,
      ),
      const SizedBox(height: 8),
      
     Align(
        alignment: Alignment.centerRight,
        child: TextButton.icon(
          onPressed: () {
            startDateController.clear();
            endDateController.clear();
          },
          icon: const Icon(Icons.clear),
          label: const Text('Clear Dates'),
        ),
      ),
      const SizedBox(height: 16),
      SizedBox(
        width: double.infinity,
        child: ElevatedButton.icon(
          onPressed: _performSearch,
          icon: const Icon(Icons.search),
          label: const Text('Search'),
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF1E3A8A),
            foregroundColor: Colors.white,
          ),
        ),
      ),
    ],
  );
}


void _performSearch() {
  final retailerCode = searchRetailerCodeController.text.trim();
  final startDate = startDateController.text.trim();
  final endDate = endDateController.text.trim();

  // Validation: Either retailer code OR both dates must be provided
  if (retailerCode.isEmpty && (startDate.isEmpty || endDate.isEmpty)) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Please enter a Retailer Code or both Start and End Dates'), backgroundColor: Colors.red,),
    );
    return;
  }

  final results = _filteredEntries();

  print('Filtered Entries: ${results.length}');

  setState(() {
    filteredRetailerEntries = results;
  });
}

List<SupplyChainEntry> _filteredEntries() {
  final code = searchRetailerCodeController.text.trim().toLowerCase();
  final startDate = startDateController.text.isNotEmpty
      ? DateTime.tryParse(startDateController.text)
      : null;
  final endDate = endDateController.text.isNotEmpty
      ? DateTime.tryParse(endDateController.text)
      : null;

  List<SupplyChainEntry> allEntries = retailerData.values.expand((list) => list).toList();

  return allEntries.where((entry) {
    final matchesCode = code.isEmpty || entry.retailerCode.toLowerCase().contains(code);
    final matchesStart = startDate == null || entry.distributionDate.isAfter(startDate.subtract(const Duration(days: 1)));
    final matchesEnd = endDate == null || entry.distributionDate.isBefore(endDate.add(const Duration(days: 1)));
    return matchesCode && (matchesEnd && matchesStart);//&& matchesStart && matchesEnd;
  }).toList();
}

Widget buildSupplyChainTableExtended(
  BuildContext context,
  List<SupplyChainEntry> retailerData,
  ScrollController verticalScrollController,
  ScrollController horizontalScrollController,
) {
  Widget numCell(double v) => Align(
        alignment: Alignment.centerRight,
        child: Text(v.toStringAsFixed(1)),
      );

  String dateText(DateTime d) =>
      "${d.year.toString().padLeft(4, '0')}-${d.month.toString().padLeft(2, '0')}-${d.day.toString().padLeft(2, '0')}";

  const double rowHeight = 50.0;
  int visibleRows = retailerData.length < 10 ? retailerData.length : 10;
  double tableHeight = (visibleRows + 1) * rowHeight; // +1 for heading row

  return Center(
    child: SizedBox(
      width: MediaQuery.of(context).size.width * 0.95,
      height: tableHeight + 20, // extra space for scrollbar
      child: Scrollbar(
        controller: verticalScrollController,
        thumbVisibility: true,
        child: SingleChildScrollView(
          controller: verticalScrollController,
          scrollDirection: Axis.vertical,
          child: Scrollbar(
            controller: horizontalScrollController,
            thumbVisibility: true,
            notificationPredicate: (notif) => notif.depth == 1,
            child: SingleChildScrollView(
              controller: horizontalScrollController,
              scrollDirection: Axis.horizontal,
              child: DataTable(
                showCheckboxColumn: false,
                headingRowColor: WidgetStateProperty.resolveWith<Color>(
                  (Set<WidgetState> states) => Colors.blue,
                ),
                columns: const [
                  DataColumn(label: SizedBox(width: 100, child: Text("DocuNumb"))),
                  DataColumn(label: SizedBox(width: 120, child: Text("Retailer"))),
                  DataColumn(label: SizedBox(width: 80, child: Text("Code"))),
                  DataColumn(label: SizedBox(width: 120, child: Text("Distributor"))),
                  DataColumn(label: SizedBox(width: 100, child: Text("Area"))),
                  DataColumn(label: SizedBox(width: 100, child: Text("Date"))),
                  DataColumn(
                    label: SizedBox(
                      width: 160,
                      child: Text("Painter / Contractor", softWrap: true),
                    ),
                  ),
                  DataColumn(
                    label: SizedBox(
                      width: 180,
                      child: Text("Painter / Contractor Mobile", softWrap: true),
                    ),
                  ),
                  DataColumn(label: SizedBox(width: 120, child: Text("Distributed (Kg)"))),
                ],
                rows: retailerData.map((entry) {
                  return DataRow(
                    cells: [
                      DataCell(Text(entry.docuNumb)),
                      DataCell(Text(entry.retailerName)),
                      DataCell(Text(entry.retailerCode)),
                      DataCell(Text(entry.distributorName)),
                      DataCell(Text(entry.area)),
                      DataCell(Text(dateText(entry.distributionDate))),
                      DataCell(Text(entry.painterName)),
                      DataCell(Text(entry.painterMobile)),
                      DataCell(numCell(entry.qtyDistributedKg)),
                    ],
                    onSelectChanged: (_) {
                      populateControllers(entry);
                    },
                  );
                }).toList(),
              ),
            ),
          ),
        ),
      ),
    ),
  );
}


@override
Widget build(BuildContext context) {
  final isDesktop = MediaQuery.of(context).size.width >= 1200;

  return Scaffold(
    appBar: _buildModernAppBar(),
    body: SafeArea(
      child: LayoutBuilder(
        builder: (ctx, constraints) {
          return SingleChildScrollView( // only ONE vertical scroller
            child: Center(
              child: ConstrainedBox(
                constraints: BoxConstraints(
                  maxWidth: isDesktop ? 1800 : double.infinity,
                ),
                child: Padding(
                  padding: const EdgeInsets.all(6),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      if (filteredRetailerEntries.isNotEmpty) // Assuming you already have: final isDesktop = MediaQuery.of(context).size.width >= 1200;

                    ...[
                      // 1) Header
                      _buildAnimatedHeader(),
                      const SizedBox(height: 32),

                      // 2) Search
                      _buildSearchSection(),
                      const SizedBox(height: 32),

                      // 3) Table/List section
                      // If this returns a ListView/GridView, ensure it has shrinkWrap:true and NeverScrollableScrollPhysics
                      buildSupplyChainTableExtended(context,filteredRetailerEntries,_scrollController, _horizontalScrollController),
                      const SizedBox(height: 10),

                      // 4) Responsive detail/entry section + submit (only when data exists)
                      if (filteredRetailerEntries.isNotEmpty) ...[
                        // ===== Inline responsive layout starts here =====
                        const SizedBox(height: 10),
                        if (isDesktop)
                          buildDesktopLayout()
                          
                        else
                          buildMobileLayout(),
                      ],
                        // ===== Inline responsive layout ends here =====

                        const SizedBox(height: 48),
                        _buildAnimatedSubmitButton(),
                        const SizedBox(height: 48),
                      ],
                    ]
                  ),
                ),
              ),
            ),
          );
        },
      ),
    ),
  );
}


Widget buildDesktopLayout() {
  return Column(
    children: [
      Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Left Column
          Expanded(
            child: Column(
              children: [ 
                 _buildModernSection(
                  title: 'Sample Material Distribution',
                  icon: Icons.inventory_2_outlined,
                  children: [
                  _buildModernTextField(
                    controller: retailerController,
                    label: 'Retailer Name',
                    icon: Icons.storefront,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerCodeController,
                    label: 'Retailer Code',
                    icon: Icons.qr_code_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: distributorController,
                    label: 'Concern Distributor',
                    icon: Icons.business_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: areaController,
                    label: 'Area',
                    icon: Icons.location_city_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: dateController,
                    label: 'Date of Distribution',
                    icon: Icons.calendar_today_outlined,
                  ),
                  ],
                ),const SizedBox(height: 24),
                  _buildModernSection(
                    title: 'Sample Proof',
                    icon: Icons.photo_camera_outlined,
                    children: [
                    const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: samplDateController,
                        label: 'Sample Date',
                        icon: Icons.calendar_month_outlined,
                      ),
                      const SizedBox(height: 20),
                      ModernDropdown(
                        label: 'Product',
                        icon: Icons.production_quantity_limits_sharp,
                        items: const ['Wall Care Putty'],
                        value: prodController.text.isEmpty
                            ? null
                            : prodController.text,
                        onChanged: (value) =>
                            setState(() => prodController.text = value ?? ''),
                          ),
                          const SizedBox(height: 20),
                          FileUploadWidget(
                            label: 'Sample Photograph',
                            icon: Icons.camera_alt_outlined,
                            onFileSelected: (value) {
                              setState(() => _photoImage = value);
                            },
                            allowedExtensions: const ['jpg', 'jpeg', 'png'],
                            maxSizeInMB: 10.0,
                            currentFilePath: _photoImage,
                            formType: 'sampling',
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                const SizedBox(width: 24),
                // Right Column
              Expanded(
                child: Column(
                  children: [
                    _buildModernSection(
                      title: 'Execution Details',
                      icon: Icons.engineering_outlined,
                      children: [
                        _buildModernTextField(
                          controller: painterController,
                          label: 'Painter/Contractor Name',
                          icon: Icons.person_outline_rounded,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: phoneController,
                          label: 'Contact Number',
                          icon: Icons.phone_outlined,
                          isPhone: true,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: siteAdController,
                          label: 'Site Address',
                          icon: Icons.format_list_numbered_outlined,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: emiratesController,
                          label: 'Emirates',
                          icon: Icons.my_location_rounded,
                          isNumeric: true,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: qtyController,
                          label: 'Material Qty Distributed (Kg)',
                          icon: Icons.inventory_outlined,
                          isNumeric: true,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: remarksController,
                          label: 'Remarks',
                          icon: Icons.notes_rounded,
                          isRequired: false,
                        ),
                      ],
                    ),
                    const SizedBox(height: 24),
                    _buildModernSection(
                      title: 'Reimbursement',
                      icon: Icons.payments_outlined,
                      children: [
                        ModernDropdown(
                          label: 'Reimbursement Mode',
                          icon: Icons.monetization_on_outlined,
                          items: [
                            '0 AED (No Reimbursement)',
                            'Max 150 AED ',
                          ],
                          value: reimbursementModeController.text.isEmpty
                              ? null
                              : reimbursementModeController.text,
                          onChanged: (String? value) {
                            setState(() {
                              reimbursementModeController.text = value ?? '';
                              if (value != null) {
                                if (value.contains('Max 150 AED')) {
                                  reimbursementAmtController.text = '150';
                                } else if (value.contains('0')) {
                                  reimbursementAmtController.text = '0';
                                }
                              }
                            });
                          },
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: reimbursementAmtController,
                          label: 'Amount Reimbursed',
                          icon: Icons.attach_money_outlined,
                          isNumeric: true,
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      );
    }


  Widget buildMobileLayout() {
    return Column(
      children: [
        // Sample Material Distribution
        _buildModernSection(
          title: 'Sample Material Distribution',
          icon: Icons.inventory_2_outlined,
          children: [
           _buildModernTextField(
                        controller: retailerController,
                        label: 'Retailer Name',
                        icon: Icons.storefront,
                      ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: areaController,
              label: 'Area',
              icon: Icons.location_city_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernDateField(
              controller: dateController,
              label: 'Date of Distribution',
              icon: Icons.calendar_today_outlined,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Execution Details
        _buildModernSection(
          title: 'Execution Details',
          icon: Icons.engineering_outlined,
          children:  [
                        _buildModernTextField(
                          controller: painterController,
                          label: 'Painter/Contractor Name',
                          icon: Icons.person_outline_rounded,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: phoneController,
                          label: 'Contact Number',
                          icon: Icons.phone_outlined,
                          isPhone: true,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: siteAdController,
                          label: 'Site Address',
                          icon: Icons.format_list_numbered_outlined,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: emiratesController,
                          label: 'Emirates',
                          icon: Icons.my_location_rounded,
                          isNumeric: true,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: qtyController,
                          label: 'Material Qty Distributed (Kg)',
                          icon: Icons.inventory_outlined,
                          isNumeric: true,
                        ),
                        const SizedBox(height: 20),
                        _buildModernTextField(
                          controller: remarksController,
                          label: 'Remarks',
                          icon: Icons.notes_rounded,
                          isRequired: false,
                        ),
                      ],
                ),
                const SizedBox(height: 24),
                // Sample Proof
                _buildModernSection(
                    title: 'Sample Proof',
                    icon: Icons.photo_camera_outlined,
                    children: [
                    const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: samplDateController,
                        label: 'Sample Date',
                        icon: Icons.calendar_month_outlined,
                      ),
                      const SizedBox(height: 20),
                      ModernDropdown(
                        label: 'Product',
                        icon: Icons.production_quantity_limits_sharp,
                        items: const ['Wall Care Putty'],
                        value: prodController.text.isEmpty
                            ? null
                            : prodController.text,
                        onChanged: (value) =>
                            setState(() => prodController.text = value ?? ''),
                          ),
                          const SizedBox(height: 20),
                          FileUploadWidget(
                            label: 'Sample Photograph',
                            icon: Icons.camera_alt_outlined,
                            onFileSelected: (value) {
                              setState(() => _photoImage = value);
                            },
                            allowedExtensions: const ['jpg', 'jpeg', 'png'],
                            maxSizeInMB: 10.0,
                            currentFilePath: _photoImage,
                            formType: 'sampling',
                          ),
                        ],
                      ),
        const SizedBox(height: 24),
        // Reimbursement
        _buildModernSection(
          title: 'Reimbursement',
          icon: Icons.payments_outlined,
          children: [
            ModernDropdown(
              label: 'Reimbursement Mode',
              icon: Icons.monetization_on_outlined,
              items: [
                          '0 AED (No Reimbursement)',
                          'Max 150 AED ',
                        ],
                        value: reimbursementModeController.text.isEmpty
                            ? null
                            : reimbursementModeController.text,
                        onChanged: (String? value) {
                          setState(() {
                            reimbursementModeController.text = value ?? '';
                            // Auto-fill amount based on selection
                            if (value != null) {
                              if (value.contains('Max 150 AED')) {
                                reimbursementAmtController.text = '150';
                              } else if (value.contains('0')) {
                                reimbursementAmtController.text = '0';
                              }
                            }
                          });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: reimbursementAmtController,
              label: 'Amount Reimbursed',
              icon: Icons.attach_money_outlined,
              isNumeric: true,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      title: Text(
        'Sample Execution Entry',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Sample Execution Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Sample Execution Entry',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isNumeric = false,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone
          ? TextInputType.phone
          : isNumeric
          ? TextInputType.number
          : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.save, size: 20),
                  const SizedBox(width: 12),
                  const Text(
                    'Submit',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Sampling Drive Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Reimbursement amount will be auto-filled based on the selected mode.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      // Simulate API call
      await Future.delayed(const Duration(seconds: 2));
      setState(() {
        _isSubmitting = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(child: Text('Sampling Entry Saved Successfully!')),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }
}
