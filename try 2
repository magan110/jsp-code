import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../SAMPLING/sample_model.dart';

class SampleDistributEntry extends StatefulWidget {
  @override
  _SampleDistributEntryState createState() => _SampleDistributEntryState();
}

class _SampleDistributEntryState extends State<SampleDistributEntry>
    with TickerProviderStateMixin {
  // Controllers final missedQtyController = TextEditingController();

  final missedQtyController = TextEditingController();
  final emirateController = TextEditingController();
  final retailerNameController = TextEditingController();
  final retailerCodeController = TextEditingController();
  final distributorController = TextEditingController();
  final painterNameController = TextEditingController();
  final painterMobileController = TextEditingController();
  final skuSizeController = TextEditingController();
  final materialQtyController = TextEditingController();
  final distributionDateController = TextEditingController();
  final salesLeadController = TextEditingController();
  // Animation controllers
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  
  bool _isSubmitting = false;
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    // Initialize animations
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
      ),
    );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    missedQtyController.dispose();
    emirateController.dispose();
    retailerNameController.dispose();
    retailerCodeController.dispose();
    distributorController.dispose();
    painterNameController.dispose();
    painterMobileController.dispose();
    skuSizeController.dispose();
    materialQtyController.dispose();
    distributionDateController.dispose();
    super.dispose();
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSubmitting = true;
      });
      try {
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('MissedQty', missedQtyController.text);
        await prefs.setString('Emirate', emirateController.text);
        await prefs.setString('retailerName', retailerNameController.text);
        await prefs.setString('retailerCode', retailerCodeController.text);
        await prefs.setString('distributor', distributorController.text);
        await prefs.setString('painterName', painterNameController.text);
        await prefs.setString('painterMobile', painterMobileController.text);
        await prefs.setString('skuSize', skuSizeController.text);
        await prefs.setString('materialQty', materialQtyController.text);
        await prefs.setString(
          'distributionDate',
          distributionDateController.text,
        );
        
        // Simulate API call
        await Future.delayed(const Duration(seconds: 2));
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text('Sample distribution data saved successfully!'),
                  ),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  Icon(Icons.warning, color: Colors.white, size: 20),
                  SizedBox(width: 8),
                  Expanded(child: Text('Error saving data: ${e.toString()}')),
                ],
              ),
              backgroundColor: Colors.orange,
              behavior: SnackBarBehavior.floating,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isSubmitting = false;
          });
        }
      }
    }
  }

  final demoSupplyChain = SupplyChainData(
  totalReceived: 500,
  billedToDistributor: 400,
  billedToRetailer: 350,
  distributedToPainter: 280,
);

  

Widget buildSupplyChainTable(List<SupplyChainEntry> entries) {
  return SingleChildScrollView(
    scrollDirection: Axis.horizontal,
    child: DataTable(
      headingRowColor: MaterialStateProperty.all(const Color(0xFF1E3A8A)),
      headingTextStyle: const TextStyle(
        color: Colors.white,
        fontWeight: FontWeight.bold,
      ),
      columns: const [
        DataColumn(label: Text("Retailer")),
        DataColumn(label: Text("Code")),
        DataColumn(label: Text("Distributor")),
        DataColumn(label: Text("Painter")),
        DataColumn(label: Text("Mobile")),
        DataColumn(label: Text("SKU")),
        DataColumn(label: Text("Distributed (Kg)")),
        DataColumn(label: Text("Total Received (Kg)")),
        DataColumn(label: Text("Remaining (Kg)")),
      ],
      rows: entries.map((entry) {
        return DataRow(
          cells: [
            DataCell(Text(entry.retailerName)),
            DataCell(Text(entry.retailerCode)),
            DataCell(Text(entry.distributorName)),
            DataCell(Text(entry.painterName)),
            DataCell(Text(entry.painterMobile)),
            DataCell(Text(entry.skuSize)),
            DataCell(Text(entry.qtyDistributed.toString())),
            DataCell(Text(entry.totalReceived.toString())),
            DataCell(Text(entry.remaining.toString())),
          ],
        );
      }).toList(),
    ),
  );
}



  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet = constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;
        
        return Scaffold(
          backgroundColor: const Color(0xFFF8FAFC),
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(
                  color: Color(0xFFF8FAFC),
                ),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Header with animation
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 32),
                              // Submit Button
                              // In your build method (below Submit button)

                                if (currentEntries.isNotEmpty)
                                     buildSupplyChainTable(currentEntries),

                              const SizedBox(height: 20),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: _buildModernSection(
                title: 'Retailer Details',
                icon: Icons.store_rounded,
                children: [
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Emirates',
                    icon: Icons.location_on_outlined,
                    items: const ['Dubai',
          'Abu Dhabi',
          'Sharjah',
          'Ajman',
          'Umm Al Quwain',
          'Ras Al Khaimah',
          'Fujairah',],
                    value: emirateController.text.isEmpty
                        ? null
                        : emirateController.text,
                    onChanged: (value) {
                      setState(() {
                        emirateController.text = value ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Retailer Name',
                    icon: Icons.store_outlined,
                    items: const ['Retailer A', 'Retailer B'], // later from API
                    value: retailerNameController.text.isEmpty
                        ? null
                        : retailerNameController.text,
                    onChanged: (value) {
                      setState(() {
                        retailerNameController.text = value ?? '';
                        currentEntries = retailerData[value] ?? []; // 🔹 auto-load data
                      });
                    },
                  ),

                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: retailerCodeController,
                    label: 'Retailer Code',
                    icon: Icons.qr_code_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: distributorController,
                    label: 'Concern Distributor',
                    icon: Icons.business_outlined,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                  controller: salesLeadController,
                  label: 'Sales Leads',
                  icon: Icons.leaderboard_rounded,
                ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: _buildModernSection(
                title: 'Distribution Details',
                icon: Icons.local_shipping_outlined,
                children: [
                  _buildModernTextField(
                    controller: painterNameController,
                    label: 'Name of Painter / Contractor',
                    icon: Icons.person_outline_rounded,
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: painterMobileController,
                    label: 'Mobile no Painter / Contractor',
                    icon: Icons.phone_outlined,
                    isPhone: true,
                  ),
                  const SizedBox(height: 20),
                  ModernDropdown(
                    label: 'Material SKU',
                    icon: Icons.inventory_2_outlined,
                    items: const ['1 Kg', '5 Kg'],
                    value: skuSizeController.text.isEmpty
                        ? null
                        : skuSizeController.text,
                    onChanged: (value) {
                      setState(() {
                        skuSizeController.text = value ?? '';
                      });
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildModernTextField(
                    controller: materialQtyController,
                    label: 'Sample distributed in Kg.',
                    icon: Icons.scale_outlined,
                    keyboardType: TextInputType.numberWithOptions(
                      decimal: true,
                    ),
                    inputFormatters: [
                      FilteringTextInputFormatter.allow(
                        RegExp(r'^\d*\.?\d*'),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
            _buildModernTextField(
              controller: missedQtyController,
              label: 'Missed qty (if any)',
              icon: Icons.remove_circle_outline,
              keyboardType: TextInputType.numberWithOptions(decimal: true),
              isRequired: false,
              inputFormatters: [
                FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
              ],
            ),
            const SizedBox(height: 20),
                  _buildModernDateField(
                    controller: distributionDateController,
                    label: 'Date of distribution',
                    icon: Icons.event_available_outlined,
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Retailer Details Section
        _buildModernSection(
          title: 'Retailer Details',
          icon: Icons.store_rounded,
          children: [

            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Emirate',
              icon: Icons.location_on_outlined,
              items: const ['Dubai',
          'Abu Dhabi',
          'Sharjah',
          'Ajman',
          'Umm Al Quwain',
          'Ras Al Khaimah',
          'Fujairah',],
              value: emirateController.text.isEmpty
                  ? null
                  : emirateController.text,
              onChanged: (value) {
                setState(() {
                  emirateController.text = value ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label: 'Retailer Name',
              icon: Icons.store_outlined,
              items: const ['Retailer A', 'Retailer B'], // later from API
              value: retailerNameController.text.isEmpty
                  ? null
                  : retailerNameController.text,
              onChanged: (value) {
                setState(() {
                  retailerNameController.text = value ?? '';
                  currentEntries = retailerData[value] ?? []; // 🔹 auto-load data
                });
              },
            ),

            const SizedBox(height: 16),
            _buildModernTextField(
              controller: retailerCodeController,
              label: 'Retailer Code',
              icon: Icons.qr_code_outlined,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: distributorController,
              label: 'Concern Distributor',
              icon: Icons.business_outlined,
            ),
            const SizedBox(height: 20),
             _buildModernTextField(
              controller: salesLeadController,
              label: 'Sales Leads',
              icon: Icons.leaderboard_rounded,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Distribution Details Section
        _buildModernSection(
          title: 'Distribution Details',
          icon: Icons.local_shipping_outlined,
          children: [
            _buildModernTextField(
              controller: painterNameController,
              label: 'Name of Painter / Contractor',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: painterMobileController,
              label: 'Mobile no Painter / Contractor',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 16),
            ModernDropdown(
              label:'Material SKU',
              icon: Icons.inventory_2_outlined,
              items: const ['1 Kg', '5 Kg'],
              value: skuSizeController.text.isEmpty
                  ? null
                  : skuSizeController.text,
              onChanged: (value) {
                setState(() {
                  skuSizeController.text = value ?? '';
                });
              },
            ),
            const SizedBox(height: 16),
            _buildModernTextField(
              controller: materialQtyController,
              label: 'Number of Bags.',
              icon: Icons.scale_outlined,
              keyboardType: TextInputType.numberWithOptions(
                decimal: true,
              ),
              inputFormatters: [
                FilteringTextInputFormatter.allow(
                  RegExp(r'^\d*\.?\d*'),
                ),
              ],
            ),const SizedBox(height: 16),
            _buildModernTextField(
              controller: missedQtyController,
              label: 'Missed qty (if any)',
              icon: Icons.remove_circle_outline,
              keyboardType: TextInputType.numberWithOptions(decimal: true),
              isRequired: false,
              inputFormatters: [
                FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d*')),
              ],
            ),

            const SizedBox(height: 16),
            _buildModernDateField(
              controller: distributionDateController,
              label: 'Date of distribution',
              icon: Icons.event_available_outlined,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: IconButton(
                icon: const Icon(Icons.arrow_back, color: Color(0xFF1E3A8A)),
                onPressed: () => Navigator.of(context).pop(),
              ),
            )
          : null,
      title: Text(
        'Sample Distribution Entry',
        style: TextStyle(fontWeight: FontWeight.w600, fontSize: 20, color: const Color(0xFF1E3A8A)),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.help_outline_rounded, color: Color(0xFF1E3A8A)),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Sample Distribution Entry',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Enter sample distribution details',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
    TextInputType? keyboardType,
    List<TextInputFormatter>? inputFormatters,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType:
          keyboardType ??
          (isPhone ? TextInputType.phone : TextInputType.text),
      inputFormatters: inputFormatters,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          if (!RegExp(r'^[50|52|54|55|56|58]\d{7}$').hasMatch(value)) {
            return 'Please enter valid UAE mobile number';
          }
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(primary: Color(0xFF1E3A8A)),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ')[0];
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Distribution',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Distribution Help',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: const Color(0xFF1F2937)),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. '
                'Ensure all distribution details are accurate before submission.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Got it', style: TextStyle(color: Colors.white)),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}













// ==================== DATA MODEL ====================
import 'package:flutter/material.dart';

class SupplyChainData {
  final double totalReceived;
  final double billedToDistributor;
  final double billedToRetailer;
  final double distributedToPainter;

  SupplyChainData({
    required this.totalReceived,
    required this.billedToDistributor,
    required this.billedToRetailer,
    required this.distributedToPainter,
  });

  double get remaining => totalReceived - distributedToPainter;

  // Example factory for parsing API JSON
  factory SupplyChainData.fromJson(Map<String, dynamic> json) {
    return SupplyChainData(
      totalReceived: (json['totalReceived'] ?? 0).toDouble(),
      billedToDistributor: (json['billedToDistributor'] ?? 0).toDouble(),
      billedToRetailer: (json['billedToRetailer'] ?? 0).toDouble(),
      distributedToPainter: (json['distributedToPainter'] ?? 0).toDouble(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      "totalReceived": totalReceived,
      "billedToDistributor": billedToDistributor,
      "billedToRetailer": billedToRetailer,
      "distributedToPainter": distributedToPainter,
      "remaining": remaining,
    };
  }
}

class SupplyChainEntry {
  final String retailerName;
  final String retailerCode;
  final String distributorName;
  final String painterName;
  final String painterMobile;
  final String skuSize;
  final double qtyDistributed;
  final double totalReceived;

  SupplyChainEntry({
    required this.retailerName,
    required this.retailerCode,
    required this.distributorName,
    required this.painterName,
    required this.painterMobile,
    required this.skuSize,
    required this.qtyDistributed,
    required this.totalReceived,
  });

  double get remaining => totalReceived - qtyDistributed;
}

List<SupplyChainEntry> currentEntries = [];

final Map<String, List<SupplyChainEntry>> retailerData = {
  "Retailer A": [
    SupplyChainEntry(
      retailerName: "Retailer A",
      retailerCode: "R001",
      distributorName: "Distributor X",
      painterName: "Painter 1",
      painterMobile: "0501234567",
      skuSize: "5 Kg",
      qtyDistributed: 50,
      totalReceived: 100,
    ),
  ],
  "Retailer B": [
    SupplyChainEntry(
      retailerName: "Retailer B",
      retailerCode: "R002",
      distributorName: "Distributor Y",
      painterName: "Painter 2",
      painterMobile: "0559876543",
      skuSize: "1 Kg",
      qtyDistributed: 30,
      totalReceived: 80,
    ),
  ],
};


// // ==================== SUPPLY CHAIN TRACKER ====================
// Widget buildSupplyChainRow(SupplyChainData data) {
//   return Container(
//     padding: const EdgeInsets.all(16),
//     margin: const EdgeInsets.only(top: 16),
//     decoration: BoxDecoration(
//       color: Colors.white,
//       borderRadius: BorderRadius.circular(16),
//       boxShadow: [
//         BoxShadow(
//           color: Colors.black.withOpacity(0.05),
//           blurRadius: 8,
//           offset: const Offset(0, 4),
//         ),
//       ],
//     ),
//     child: SingleChildScrollView(
//       scrollDirection: Axis.horizontal,
//       child: Row(
//         crossAxisAlignment: CrossAxisAlignment.center,
//         children: [
//           _buildChainBox("RAK\nReceived", "${data.totalReceived} Kg", Icons.warehouse),
//           _buildArrow(),
//           _buildChainBox("Distributor\nBilled", "${data.billedToDistributor} Kg", Icons.business),
//           _buildArrow(),
//           _buildChainBox("Retailer\nBilled", "${data.billedToRetailer} Kg", Icons.store),
//           _buildArrow(),
//           _buildChainBox("Painter\nDistributed", "${data.distributedToPainter} Kg", Icons.person),
//           _buildArrow(),
//           _buildChainBox("Remaining", "${data.remaining} Kg", Icons.inventory_outlined,
//               highlight: Colors.orange.shade100),
//         ],
//       ),
//     ),
//   );
// }

// Widget _buildChainBox(String title, String value, IconData icon, {Color? highlight}) {
//   return Container(
//     padding: const EdgeInsets.all(12),
//     margin: const EdgeInsets.symmetric(horizontal: 6),
//     decoration: BoxDecoration(
//       color: highlight ?? const Color(0xFFF8FAFC),
//       borderRadius: BorderRadius.circular(12),
//       border: Border.all(color: Colors.grey.shade300),
//     ),
//     width: 140,
//     child: Column(
//       mainAxisSize: MainAxisSize.min,
//       children: [
//         Icon(icon, color: const Color(0xFF1E3A8A), size: 28),
//         const SizedBox(height: 8),
//         Text(title, textAlign: TextAlign.center,
//             style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 14)),
//         const SizedBox(height: 6),
//         Text(value, style: const TextStyle(fontSize: 13, color: Colors.black87)),
//       ],
//     ),
//   );
// }

// Widget _buildArrow() {
//   return const Icon(Icons.arrow_forward, color: Colors.grey, size: 28);
// }
