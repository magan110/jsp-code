using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class DashboardController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public DashboardController(DatabaseHelper dbHelper)
        {
            _db = dbHelper;
        }

        // =====================================================================
        // 1) STATS for the 4 cards
        // GET: /api/Dashboard/stats?start=2025-08-16&end=2025-09-15
        // If dates omitted, uses last 30 days.
        // =====================================================================
        [HttpGet("stats")]
        public IActionResult GetStats([FromQuery] string? start = null, [FromQuery] string? end = null)
        {
            var (d1, d2) = NormalizeDateRange(start, end, defaultDays: 30);

            var p = new Dictionary<string, object?>
            {
                ["@d1"] = d1,
                ["@d2"] = d2
            };

            // date column priority: createDt -> sapInsDt -> frstScDt
            var sql = @"
;WITH base AS
(
    SELECT
        ISNULL(isActive,'') AS ia,
        ISNULL(contrtyp,'') AS contrtyp,
        ISNULL(inflType,'') AS inflType,
        CAST(CONVERT(date, COALESCE(createDt, sapInsDt, frstScDt, GETDATE())) AS date) AS d
    FROM dbo.ctmInfluncr WITH (NOLOCK)
    WHERE ISNULL(blkStuts,'N') <> 'Y'
      AND COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) >= @d1
      AND COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) < DATEADD(day, 1, @d2)
)
SELECT
    (SELECT COUNT(1) FROM base) AS total,
    (SELECT COUNT(1) FROM base WHERE contrtyp LIKE '%Contractor%' OR UPPER(inflType) IN ('CT','CO')) AS contractors,
    (SELECT COUNT(1) FROM base WHERE contrtyp LIKE '%Painter%'    OR UPPER(inflType) IN ('PN','PA')) AS painters,
    (SELECT COUNT(1) FROM base WHERE ia NOT IN ('Y','R')) AS pending;
";
            var row = (_db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>()).FirstOrDefault()
                      ?? new Dictionary<string, object>();

            int N(string k) => int.TryParse(row.GetValueOrDefault(k)?.ToString(), out var v) ? v : 0;

            return Ok(new
            {
                success = true,
                start = d1.ToString("yyyy-MM-dd"),
                end = d2.ToString("yyyy-MM-dd"),
                totalRegistrations = N("total"),
                contractors = N("contractors"),
                painters = N("painters"),
                pending = N("pending"),
                timestamp = DateTime.Now
            });
        }

        // =====================================================================
        // 2) REGISTRATION TRENDS (daily buckets)
        // GET: /api/Dashboard/trends?start=YYYY-MM-DD&end=YYYY-MM-DD
        // =====================================================================
        [HttpGet("trends")]
        public IActionResult GetTrends([FromQuery] string? start = null, [FromQuery] string? end = null)
        {
            var (d1, d2) = NormalizeDateRange(start, end, defaultDays: 30);

            var p = new Dictionary<string, object?>
            {
                ["@d1"] = d1,
                ["@d2"] = d2
            };

            var sql = @"
;WITH base AS
(
    SELECT
        ISNULL(isActive,'') AS ia,
        ISNULL(contrtyp,'') AS contrtyp,
        ISNULL(inflType,'') AS inflType,
        CAST(CONVERT(date, COALESCE(createDt, sapInsDt, frstScDt, GETDATE())) AS date) AS d
    FROM dbo.ctmInfluncr WITH (NOLOCK)
    WHERE ISNULL(blkStuts,'N') <> 'Y'
      AND COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) >= @d1
      AND COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) < DATEADD(day, 1, @d2)
),
agg AS
(
    SELECT
        d,
        COUNT(1) AS total,
        SUM(CASE WHEN contrtyp LIKE '%Contractor%' OR UPPER(inflType) IN ('CT','CO') THEN 1 ELSE 0 END) AS contractors,
        SUM(CASE WHEN contrtyp LIKE '%Painter%'    OR UPPER(inflType) IN ('PN','PA') THEN 1 ELSE 0 END) AS painters,
        SUM(CASE WHEN ia = 'Y' THEN 1 ELSE 0 END) AS approved,
        SUM(CASE WHEN ia = 'R' THEN 1 ELSE 0 END) AS rejected,
        SUM(CASE WHEN ia NOT IN ('Y','R') THEN 1 ELSE 0 END) AS pending
    FROM base
    GROUP BY d
)
SELECT
    CONVERT(varchar(10), d, 120) AS [date],
    total,
    contractors,
    painters,
    approved,
    pending,
    rejected
FROM agg
ORDER BY d ASC;
";

            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var series = rows.Select(r => new
            {
                date = r.GetValueOrDefault("date")?.ToString() ?? "",
                total = ToInt(r, "total"),
                contractors = ToInt(r, "contractors"),
                painters = ToInt(r, "painters"),
                approved = ToInt(r, "approved"),
                pending = ToInt(r, "pending"),
                rejected = ToInt(r, "rejected")
            });

            return Ok(new
            {
                success = true,
                start = d1.ToString("yyyy-MM-dd"),
                end = d2.ToString("yyyy-MM-dd"),
                data = series
            });
        }

        // =====================================================================
        // 3) RECENT REGISTRATIONS
        // GET: /api/Dashboard/recent?limit=5
        // =====================================================================
        [HttpGet("recent")]
        public IActionResult GetRecent([FromQuery] int limit = 5)
        {
            limit = limit <= 0 ? 5 : Math.Min(limit, 50);

            var p = new Dictionary<string, object?>
            {
                ["@top"] = limit
            };

            var sql = @"
;WITH base AS
(
    SELECT TOP (@top)
        inflCode,
        ISNULL(isActive,'') AS ia,
        ISNULL(contrtyp,'') AS contrtyp,
        ISNULL(inflType,'') AS inflType,
        LTRIM(RTRIM(ISNULL(frstname,''))) AS frstname,
        LTRIM(RTRIM(ISNULL(middname,''))) AS middname,
        LTRIM(RTRIM(ISNULL(lastname,''))) AS lastname,
        LTRIM(RTRIM(ISNULL(inflName,''))) AS inflName,
        COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) AS dt
    FROM dbo.ctmInfluncr WITH (NOLOCK)
    WHERE ISNULL(blkStuts,'N') <> 'Y'
    ORDER BY COALESCE(createDt, sapInsDt, frstScDt, GETDATE()) DESC, inflCode DESC
)
SELECT
    inflCode,
    ia,
    contrtyp,
    inflType,
    frstname, middname, lastname, inflName,
    CONVERT(varchar(10), dt, 120) AS [date]
FROM base
ORDER BY [date] DESC, inflCode DESC;
";

            var rows = _db.WebSessBean(sql, p) ?? new List<Dictionary<string, object>>();
            var items = rows.Select(r =>
            {
                string G(string k) => r.GetValueOrDefault(k)?.ToString() ?? "";
                var name = ComposeName(G("frstname"), G("middname"), G("lastname"), G("inflName"));
                var type = NormalizeType(G("contrtyp"), G("inflType"));
                var status = MapStatus(G("ia"));
                return new
                {
                    name,
                    type,
                    status,
                    date = G("date"),
                    avatar = MakeAvatar(name, G("inflCode"))
                };
            });

            return Ok(new
            {
                success = true,
                items
            });
        }

        // ============================= Helpers =============================
        private static (DateTime d1, DateTime d2) NormalizeDateRange(string? s1, string? s2, int defaultDays)
        {
            // Interpret as local server time; return inclusive end (date only)
            bool ok1 = DateTime.TryParse(s1, out var d1);
            bool ok2 = DateTime.TryParse(s2, out var d2);
            if (!ok1 && !ok2)
            {
                d2 = DateTime.Today;
                d1 = d2.AddDays(-defaultDays);
            }
            else if (!ok1)
            {
                d1 = d2.AddDays(-defaultDays);
            }
            else if (!ok2)
            {
                d2 = d1.AddDays(defaultDays);
            }

            // Use dates with time zero, keep end as the provided date (inclusive)
            d1 = d1.Date;
            d2 = d2.Date;
            return (d1, d2);
        }

        private static int ToInt(Dictionary<string, object> r, string key)
        {
            return int.TryParse(r.GetValueOrDefault(key)?.ToString(), out var v) ? v : 0;
        }

        private static string MapStatus(string? ia)
        {
            ia = (ia ?? "").Trim().ToUpperInvariant();
            return ia switch
            {
                "Y" => "Approved",
                "R" => "Rejected",
                _ => "Pending"
            };
        }

        private static string NormalizeType(string contrtyp, string inflType)
        {
            if (!string.IsNullOrWhiteSpace(contrtyp))
            {
                if (contrtyp.Contains("paint", StringComparison.OrdinalIgnoreCase)) return "Painter";
                if (contrtyp.Contains("contract", StringComparison.OrdinalIgnoreCase)) return "Contractor";
                return contrtyp.Trim();
            }
            inflType = (inflType ?? "").Trim().ToUpperInvariant();
            return inflType switch
            {
                "PN" or "PA" => "Painter",
                "CT" or "CO" => "Contractor",
                _ => "Contractor"
            };
        }

        private static string ComposeName(string? f, string? m, string? l, string? fallback)
        {
            var parts = new[] { f, m, l }
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .Select(x => x!.Trim());
            var n = string.Join(" ", parts);
            if (!string.IsNullOrWhiteSpace(n)) return n;
            return (fallback ?? "").Trim();
        }

        private static string MakeAvatar(string? name, string? fallbackId)
        {
            if (!string.IsNullOrWhiteSpace(name))
            {
                var tokens = Regex.Split(name.Trim(), @"\s+")
                                  .Where(t => !string.IsNullOrWhiteSpace(t))
                                  .ToArray();
                if (tokens.Length == 1)
                {
                    var t = tokens[0];
                    return t.Substring(0, Math.Min(2, t.Length)).ToUpperInvariant();
                }
                if (tokens.Length >= 2)
                {
                    return $"{char.ToUpperInvariant(tokens[0][0])}{char.ToUpperInvariant(tokens[^1][0])}";
                }
            }
            var f = (fallbackId ?? "ID").Trim();
            return f.Length >= 2 ? f.Substring(0, 2).ToUpperInvariant() : f.ToUpperInvariant();
        }
    }
}
