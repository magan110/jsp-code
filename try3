using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System;
using System.Collections.Generic;

namespace sparshWebService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class GrcLeadController : ControllerBase
    {
        private readonly DatabaseHelper _db;
        public GrcLeadController(DatabaseHelper db) { _db = db; }

        // GET api/GrcLead/meta -> dynamic option lists (queried via SQL)
        [HttpGet("meta")]
        public IActionResult GetMeta()
        {
            // Queries mirror the JSP unions but are executed on DB side to avoid hardcoded arrays here
            const string uomSql = @"select 'F2' Code, 'Feet Squre' Name
union all select 'FT','Feet'
union all select 'M2','Meter Squre'
union all select 'NO','Numbers'
union all select 'RF','Running Ft'";

            const string delSql = @"select '01-03 month' Code, '01-03 month' Name
union all select '04-06 month','04-06 month'
union all select '07-12 month','07-12 month'
union all select 'over 12 month','over 12 month'";

            const string prjSql = @"select 'residence / bunglow' Code, 'residence / bunglow' Name
union all select 'religious','religious'
union all select 'hotel','hotel'
union all select 'hospital','hospital'
union all select 'Govt. Project','Govt. Project'
union all select 'Commercial Project','Commercial Project'
union all select 'high rise','high rise'
union all select 'land scaping','land scaping'
union all select 'educational institute','educational institute'
union all select 'Others','Others'";

            const string cntSql = @"select 'Owner' Code, 'Owner' Name
union all select 'builder','builder'
union all select 'contractor','contractor'
union all select 'architect','architect'
union all select 'construction company','construction company'";

            const string siteTypeSql = @"select 'O' Code, 'Onsite' Name
union all select 'F','Offsite'";

            const string procTypeSql = @"select 'A' Code, 'Add' Name
union all select 'U','Update'";

            var units = _db.WebSessBean(uomSql, new Dictionary<string, object>());
            var delivery = _db.WebSessBean(delSql, new Dictionary<string, object>());
            var projectKinds = _db.WebSessBean(prjSql, new Dictionary<string, object>());
            var contactTypes = _db.WebSessBean(cntSql, new Dictionary<string, object>());
            var siteTypes = _db.WebSessBean(siteTypeSql, new Dictionary<string, object>());
            var procTypes = _db.WebSessBean(procTypeSql, new Dictionary<string, object>());

            return Ok(new
            {
                unitsOfMeasure = units,
                deliveryPeriods = delivery,
                projectKinds,
                contactPersonTypes = contactTypes,
                siteTypes,
                procTypes
            });
        }
        
        // GET api/GrcLead/docs?createdBy=S5558 -> list of doc numbers for the user (matches JSP when procType=U)
        [HttpGet("docs")]
        public IActionResult GetDocs([FromQuery] string createdBy)
        {
            if (string.IsNullOrWhiteSpace(createdBy)) return BadRequest("createdBy is required");
            const string sql = @"SELECT a.docuNumb FROM bwlive.dbo.dptGrcLeadGn a WITH (NOLOCK) WHERE a.createId = @createdBy ORDER BY a.docuNumb DESC";
            var res = _db.WebSessBean(sql, new Dictionary<string, object> { ["@createdBy"] = createdBy });
            return Ok(res);
        }

        // GET api/GrcLead/areas -> dynamic areas from retailer data
        [HttpGet("areas")]
        public IActionResult GetAreas()
        {
            const string sql = @"SELECT DISTINCT areaCode AS Code, areaCode AS Name FROM bwlive.dbo.rtmRetailer WITH (NOLOCK) WHERE areaCode IS NOT NULL ORDER BY areaCode";
            var res = _db.WebSessBean(sql, new Dictionary<string, object>());
            return Ok(res);
        }

        // GET api/GrcLead/districts?areaCode=... -> dynamic districts inferred from existing leads (can be pointed to a master later)
        [HttpGet("districts")]
        public IActionResult GetDistricts([FromQuery] string areaCode)
        {
            if (string.IsNullOrWhiteSpace(areaCode)) return BadRequest("areaCode is required");
            const string sql = @"SELECT DISTINCT district AS Name, district AS Code
                                   FROM bwlive.dbo.dptGrcLeadGn WITH (NOLOCK)
                                  WHERE areaCode = @areaCode AND ISNULL(district,'') <> ''
                               ORDER BY district";
            var res = _db.WebSessBean(sql, new Dictionary<string, object> { ["@areaCode"] = areaCode });
            return Ok(res);
        }

        // GET api/GrcLead/pincodes?district=... -> dynamic pincode list inferred from existing leads
        [HttpGet("pincodes")]
        public IActionResult GetPincodes([FromQuery] string district)
        {
            if (string.IsNullOrWhiteSpace(district)) return BadRequest("district is required");
            const string sql = @"SELECT DISTINCT sitePinC AS Code, sitePinC AS Name
                                   FROM bwlive.dbo.dptGrcLeadGn WITH (NOLOCK)
                                  WHERE district = @district AND ISNULL(sitePinC,'') <> ''
                               ORDER BY sitePinC";
            var res = _db.WebSessBean(sql, new Dictionary<string, object> { ["@district"] = district });
            return Ok(res);
        }

        // GET api/GrcLead/{docuNumb} -> fetch a lead (subset of fields shown in JSP)
        [HttpGet("{docuNumb}")]
        public IActionResult GetLead(string docuNumb, [FromQuery] string siteType = "F")
        {
            if (string.IsNullOrWhiteSpace(docuNumb)) return BadRequest("docuNumb is required");

            string sql = siteType == "O"
                ? @"SELECT docuNumb, CONVERT(varchar(10), leadDate, 111) AS leadDate, leadQnty, leadMsrs, siteName, mobileNo, siteAddr, siteRmrk, stMobNum, cntPrsnt, adhrNumb, archtNam, itxPanNo, gstnNumb, emailAdd, district, stateNam, cityName, delvrPrd, prjctKnd, attchMnt
                      FROM bwlive.dbo.dptGrcLeadGn WITH (NOLOCK) WHERE docuNumb = @docuNumb"
                : @"SELECT docuNumb, CONVERT(varchar(10), leadDate, 111) AS leadDate, leadQnty, leadMsrs, siteName, mobileNo, siteAddr, siteRmrk, stMobNum, cntPrsnt, adhrNumb, archtNam, itxPanNo, gstnNumb, emailAdd, district, areaCode, sitePinC, delvrPrd, prjctKnd, attchMnt
                      FROM bwlive.dbo.dptGrcLeadGn WITH (NOLOCK) WHERE docuNumb = @docuNumb";

            var res = _db.WebSessBean(sql, new Dictionary<string, object> { ["@docuNumb"] = docuNumb });
            if (res.Count == 0) return NotFound("Lead not found");
            return Ok(res[0]);
        }

        // GET api/GrcLead/attachments?drawRand=... -> returns base64 images like JSP image listing
        [HttpGet("attachments")]
        public IActionResult GetAttachments([FromQuery] string drawRand)
        {
            if (string.IsNullOrWhiteSpace(drawRand)) return BadRequest("drawRand is required");
            // In JSP, images are fetched from imageData.dbo.cotDocAttch where docuNumb = drawRand
            const string sql = @"SELECT attachFl FROM imageData.dbo.cotDocAttch WITH (NOLOCK) WHERE docuNumb = @drawRand";
            var res = _db.ImgSessBean(sql, new Dictionary<string, object> { ["@drawRand"] = drawRand });
            // DatabaseHelper returns raw objects; assume varbinary data comes as byte[] or base64-able string
            var images = new List<string>();
            foreach (var row in res)
            {
                if (row.TryGetValue("attachFl", out var blob) && blob != null)
                {
                    if (blob is byte[] b) images.Add(Convert.ToBase64String(b));
                    else
                    {
                        var s = blob.ToString();
                        if (!string.IsNullOrEmpty(s)) images.Add(s);
                    }
                }
            }
            return Ok(new { count = images.Count, images });
        }

        // GET api/GrcLead/pincode-info?pincode=... -> infer district/areaCode for a pincode (used by pinCodeNoGet in JSP)
        [HttpGet("pincode-info")]
        public IActionResult GetPincodeInfo([FromQuery] string pincode)
        {
            if (string.IsNullOrWhiteSpace(pincode)) return BadRequest("pincode is required");
            const string sql = @"SELECT TOP 1 district, areaCode, stateNam, cityName
                                   FROM bwlive.dbo.dptGrcLeadGn WITH (NOLOCK)
                                  WHERE sitePinC = @pincode AND (ISNULL(district,'')<>'' OR ISNULL(areaCode,'')<>'')
                               ORDER BY leadDate DESC";
            var res = _db.WebSessBean(sql, new Dictionary<string, object> { ["@pincode"] = pincode });
            if (res.Count == 0) return NotFound("No mapping found for pincode");
            return Ok(res[0]);
        }

        // POST api/GrcLead/save -> Add or Update (ProcType: A/U). Uses INSERT/UPDATE + trailing SELECT to keep within select API.
        [HttpPost("save")]
        public IActionResult SaveLead([FromBody] GrcLeadRequest req)
        {
            if (req == null) return BadRequest("Body is required");
            if (string.IsNullOrWhiteSpace(req.ProcType)) return BadRequest("ProcType is required");
            // Match JSP validations: Date, Qty, Site Name, Mobile No, Address are mandatory
            if (string.IsNullOrWhiteSpace(req.SiteName) || string.IsNullOrWhiteSpace(req.MobileNo) || string.IsNullOrWhiteSpace(req.SiteAddr))
                return BadRequest("SiteName, MobileNo and SiteAddr are required");
            if (string.IsNullOrWhiteSpace(req.LeadQnty))
                return BadRequest("LeadQnty is required");
            if (string.IsNullOrWhiteSpace(req.LeadDate))
                return BadRequest("LeadDate is required");

            var partnerId = Request.Headers.ContainsKey("PartnerID") ? Request.Headers["PartnerID"].ToString() : "UNKNOWN";
            var endpoint = "/api/GrcLead/save";

            try
            {
                // Normalize date
                DateTime? leadDate = null;
                if (!string.IsNullOrWhiteSpace(req.LeadDate))
                {
                    if (DateTime.TryParse(req.LeadDate, out var d)) leadDate = d;
                }

                // For Add, generate docuNumb similar to JSP (RIGHT(NEWID(),8))
                if (req.ProcType.Equals("A", StringComparison.OrdinalIgnoreCase))
                {
                    const string genSql = "SELECT RIGHT(CONVERT(VARCHAR(36), NEWID()), 8) AS docuNumb";
                    var gen = _db.WebSessBean(genSql, new Dictionary<string, object>());
                    var dn = gen.Count > 0 ? gen[0]["docuNumb"]?.ToString() : null;
                    req.DocuNumb = !string.IsNullOrWhiteSpace(dn) ? dn : Guid.NewGuid().ToString("N").Substring(24, 8);
                }
                if (string.IsNullOrWhiteSpace(req.DocuNumb)) return BadRequest("DocuNumb is required for update");

                // Common params
                var p = new Dictionary<string, object>
                {
                    ["@docuNumb"] = req.DocuNumb,
                    ["@leadDate"] = (object?)leadDate ?? DBNull.Value,
                    ["@leadQnty"] = req.LeadQnty ?? (object)DBNull.Value,
                    ["@leadMsrs"] = req.LeadMsrs ?? (object)DBNull.Value,
                    ["@siteName"] = req.SiteName,
                    ["@mobileNo"] = req.MobileNo,
                    ["@siteAddr"] = req.SiteAddr,
                    ["@siteRmrk"] = req.SiteRmrk ?? (object)DBNull.Value,
                    ["@stMobNum"] = req.StMobNum ?? (object)DBNull.Value,
                    ["@cntPrsnt"] = req.CntPrsnt ?? (object)DBNull.Value,
                    ["@adhrNumb"] = req.AdhrNumb ?? (object)DBNull.Value,
                    ["@archtNam"] = req.ArchtNam ?? (object)DBNull.Value,
                    ["@itxPanNo"] = req.ItxPanNo ?? (object)DBNull.Value,
                    ["@gstnNumb"] = req.GstnNumb ?? (object)DBNull.Value,
                    ["@emailAdd"] = req.EmailAdd ?? (object)DBNull.Value,
                    ["@district"] = req.District ?? (object)DBNull.Value,
                    ["@areaCode"] = req.AreaCode ?? (object)DBNull.Value,
                    ["@sitePinC"] = req.SitePinC ?? (object)DBNull.Value,
                    ["@stateNam"] = req.StateNam ?? (object)DBNull.Value,
                    ["@cityName"] = req.CityName ?? (object)DBNull.Value,
                    ["@delvrPrd"] = req.DelvrPrd ?? (object)DBNull.Value,
                    ["@prjctKnd"] = req.PrjctKnd ?? (object)DBNull.Value,
                    ["@attchMnt"] = req.DrawRand ?? (object)DBNull.Value,
                    ["@createId"] = req.CreatedBy ?? (object)DBNull.Value
                };

                string sql;
                if (req.ProcType.Equals("A", StringComparison.OrdinalIgnoreCase))
                {
              // Insert - include both F and O fields, unknown columns get NULL
                    sql = @"
INSERT INTO bwlive.dbo.dptGrcLeadGn
  (docuNumb, leadDate, leadQnty, leadMsrs, siteName, mobileNo, siteAddr, siteRmrk, stMobNum, cntPrsnt, adhrNumb, archtNam, itxPanNo, gstnNumb, emailAdd,
   district, areaCode, sitePinC, stateNam, cityName, delvrPrd, prjctKnd, attchMnt, createId)
VALUES (@docuNumb, @leadDate, @leadQnty, @leadMsrs, @siteName, @mobileNo, @siteAddr, @siteRmrk, @stMobNum, @cntPrsnt, @adhrNumb, @archtNam, @itxPanNo, @gstnNumb, @emailAdd,
      @district, @areaCode, @sitePinC, @stateNam, @cityName, @delvrPrd, @prjctKnd, @attchMnt, @createId);
SELECT 'OK' AS Status, @docuNumb AS docuNumb;";
                }
                else
                {
                    // Update by docuNumb
                    sql = @"
UPDATE bwlive.dbo.dptGrcLeadGn SET
  leadDate=@leadDate, leadQnty=@leadQnty, leadMsrs=@leadMsrs, siteName=@siteName, mobileNo=@mobileNo, siteAddr=@siteAddr, siteRmrk=@siteRmrk,
  stMobNum=@stMobNum, cntPrsnt=@cntPrsnt,
  adhrNumb=@adhrNumb, archtNam=@archtNam, itxPanNo=@itxPanNo, gstnNumb=@gstnNumb, emailAdd=@emailAdd,
  district=@district, areaCode=@areaCode, sitePinC=@sitePinC, stateNam=@stateNam, cityName=@cityName,
  delvrPrd=@delvrPrd, prjctKnd=@prjctKnd, attchMnt=@attchMnt
WHERE docuNumb=@docuNumb;
SELECT 'OK' AS Status, @docuNumb AS docuNumb;";
                }

                var result = _db.WebSessBean(sql, p);
                _db.InsertIntoLog(partnerId, endpoint, "Saved", 200, req);
                return Ok(new { message = "Saved", docuNumb = req.DocuNumb, result });
            }
            catch (Exception ex)
            {
                _db.InsertIntoLog(partnerId, endpoint, ex.Message, 500, req);
                return StatusCode(500, new { message = ex.Message });
            }
        }
    }

    public class GrcLeadRequest
    {
        public string? ProcType { get; set; } // A/U
        public string? DocuNumb { get; set; }
        public string? SiteType { get; set; } // O/F (not persisted directly)
        public string? LeadDate { get; set; } // string accepted
        public string? LeadQnty { get; set; }
        public string? LeadMsrs { get; set; }
        public string? SiteName { get; set; }
        public string? MobileNo { get; set; }
        public string? SiteAddr { get; set; }
        public string? SiteRmrk { get; set; }
            public string? StMobNum { get; set; } // contact person mobile
            public string? CntPrsnt { get; set; } // contact person type
        public string? AdhrNumb { get; set; }
        public string? ArchtNam { get; set; }
        public string? ItxPanNo { get; set; }
        public string? GstnNumb { get; set; }
        public string? EmailAdd { get; set; }
        public string? District { get; set; }
        public string? AreaCode { get; set; }
        public string? SitePinC { get; set; }
        public string? StateNam { get; set; }
        public string? CityName { get; set; }
        public string? DelvrPrd { get; set; }
        public string? PrjctKnd { get; set; }
        public string? DrawRand { get; set; } // attachment doc number (attchMnt)
        public string? CreatedBy { get; set; } // createId
    }
}
