import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/services/uae_id_ocr_service.dart';
import '../../../core/services/bank_details_ocr_service.dart';
import '../../../core/widgets/modern_dropdown.dart';
// NEW: API model + service
import '../../../core/models/painter_models.dart';
import '../../../core/models/contractor_models.dart';
import '../../../core/services/painter_service.dart';
import '../../../core/services/auth_service.dart';
import '../../../core/models/auth_models.dart';
import '../../../core/navigation/app_router.dart';

class PainterRegistrationScreen extends StatefulWidget {
  const PainterRegistrationScreen({super.key});

  @override
  State<PainterRegistrationScreen> createState() =>
      _PainterRegistrationScreenState();
}

class _PainterRegistrationScreenState extends State<PainterRegistrationScreen>
    with TickerProviderStateMixin {
  String? _emiratesIdFrontImage;
  String? _emiratesIdBackImage;
  String? _photoImage;
  String? _bankDocumentImage;

  final _formKey = GlobalKey<FormState>();
  final _firstNameController = TextEditingController();
  final _middleNameController = TextEditingController();
  final _lastNameController = TextEditingController();
  final _mobileController = TextEditingController();
  final _addressController = TextEditingController();
  final _emiratesController = TextEditingController();

  // API dropdown data
  List<EmirateItem> _emirates = [];
  EmirateItem? _selectedEmirate;
  bool _isLoadingDropdowns = true;

  // Emirates ID Details
  final _emiratesIdController = TextEditingController();
  final _idNameController = TextEditingController();
  final _dobController = TextEditingController();
  final _nationalityController = TextEditingController();
  final _companyDetailsController = TextEditingController();
  final _issueDateController = TextEditingController();
  final _expiryDateController = TextEditingController();
  final _occupationController = TextEditingController();

  // Bank Details (Non-Mandatory)
  final _accountHolderController = TextEditingController();
  final _ibanController = TextEditingController();
  final _bankNameController = TextEditingController();
  final _branchNameController = TextEditingController();
  final _bankAddressController = TextEditingController();

  bool _isSubmitting = false;
  bool _isProcessingEmiratesId = false;
  bool _isProcessingBankDocument = false;

  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
    _loadDropdownData();
  }

  Future<void> _loadDropdownData() async {
    try {
      final emirates = await PainterService.getEmiratesList();
      setState(() {
        _emirates = emirates;
        _isLoadingDropdowns = false;
      });
    } catch (_) {
      setState(() {
        _emirates = [
          EmirateItem(code: 'DUB', desc: 'Dubai'),
          EmirateItem(code: 'ABD', desc: 'Abu Dhabi'),
          EmirateItem(code: 'SHJ', desc: 'Sharjah'),
          EmirateItem(code: 'AJM', desc: 'Ajman'),
          EmirateItem(code: 'UAQ', desc: 'Umm Al Quwain'),
          EmirateItem(code: 'RAK', desc: 'Ras Al Khaimah'),
          EmirateItem(code: 'FUJ', desc: 'Fujairah'),
        ];
        _isLoadingDropdowns = false;
      });
    }
  }

  // ---------- Emirates ID processing ----------
  Future<void> _checkAndProcessEmiratesId() async {
    if (_emiratesIdFrontImage == null ||
        _emiratesIdFrontImage!.isEmpty ||
        _emiratesIdBackImage == null ||
        _emiratesIdBackImage!.isEmpty) {
      return;
    }
    setState(() => _isProcessingEmiratesId = true);
    try {
      final frontData = await UAEIdOCRService.processUAEId(
        _emiratesIdFrontImage!,
      );
      final backData = await UAEIdOCRService.processUAEId(
        _emiratesIdBackImage!,
      );
      final combinedData = _combineEmiratesIdData(frontData, backData);
      _fillEmiratesIdFields(combinedData);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(child: Text('Emirates ID processed successfully!')),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
            duration: Duration(seconds: 4),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.warning, color: Colors.white, size: 20),
                const SizedBox(width: 8),
                Expanded(child: Text('Failed to process Emirates ID: $e')),
              ],
            ),
            backgroundColor: Colors.orange,
            behavior: SnackBarBehavior.floating,
            duration: const Duration(seconds: 4),
          ),
        );
      }
    } finally {
      if (mounted) setState(() => _isProcessingEmiratesId = false);
    }
  }

  UAEIdData _combineEmiratesIdData(UAEIdData frontData, UAEIdData backData) {
    return UAEIdData(
      name: frontData.name ?? backData.name,
      idNumber: frontData.idNumber ?? backData.idNumber,
      dateOfBirth: frontData.dateOfBirth ?? backData.dateOfBirth,
      nationality: frontData.nationality ?? backData.nationality,
      issuingDate: frontData.issuingDate ?? backData.issuingDate,
      expiryDate: frontData.expiryDate ?? backData.expiryDate,
      sex: frontData.sex ?? backData.sex,
      signature: frontData.signature ?? backData.signature,
      cardNumber: backData.cardNumber ?? frontData.cardNumber,
      occupation: backData.occupation ?? frontData.occupation,
      employer: backData.employer ?? frontData.employer,
      issuingPlace: backData.issuingPlace ?? frontData.issuingPlace,
    );
  }

  Color _getStatusColor() {
    if (_isProcessingEmiratesId) return const Color(0xFF1E3A8A);
    final frontUploaded =
        _emiratesIdFrontImage != null && _emiratesIdFrontImage!.isNotEmpty;
    final backUploaded =
        _emiratesIdBackImage != null && _emiratesIdBackImage!.isNotEmpty;
    if (frontUploaded && backUploaded) return Colors.green;
    if (frontUploaded || backUploaded) return Colors.orange;
    return Colors.grey;
  }

  IconData _getStatusIcon() {
    final frontUploaded =
        _emiratesIdFrontImage != null && _emiratesIdFrontImage!.isNotEmpty;
    final backUploaded =
        _emiratesIdBackImage != null && _emiratesIdBackImage!.isNotEmpty;
    if (frontUploaded && backUploaded) return Icons.check_circle;
    if (frontUploaded || backUploaded) return Icons.upload_file;
    return Icons.info_outline;
  }

  String _getStatusMessage() {
    if (_isProcessingEmiratesId) {
      return 'Processing both sides of Emirates ID...';
    }
    final frontUploaded =
        _emiratesIdFrontImage != null && _emiratesIdFrontImage!.isNotEmpty;
    final backUploaded =
        _emiratesIdBackImage != null && _emiratesIdBackImage!.isNotEmpty;
    if (frontUploaded && backUploaded) {
      return '✅ Both sides uploaded successfully!';
    }
    if (frontUploaded && !backUploaded) {
      return 'Front side uploaded. Please upload the back side.';
    }
    if (!frontUploaded && backUploaded) {
      return 'Back side uploaded. Please upload the front side.';
    }
    return 'Please upload both sides of your Emirates ID.';
  }

  // ---------- Bank doc OCR ----------
  Color _getBankDocumentStatusColor() {
    if (_isProcessingBankDocument) return const Color(0xFF1E3A8A);
    final bankDocumentUploaded =
        _bankDocumentImage != null && _bankDocumentImage!.isNotEmpty;
    if (bankDocumentUploaded) return Colors.green;
    return Colors.grey;
  }

  IconData _getBankDocumentStatusIcon() {
    final bankDocumentUploaded =
        _bankDocumentImage != null && _bankDocumentImage!.isNotEmpty;
    if (bankDocumentUploaded) return Icons.check_circle;
    return Icons.info_outline;
  }

  String _getBankDocumentStatusMessage() {
    if (_isProcessingBankDocument) {
      return 'Processing bank document...';
    }
    final bankDocumentUploaded =
        _bankDocumentImage != null && _bankDocumentImage!.isNotEmpty;
    if (bankDocumentUploaded) {
      return '✅ Bank document uploaded successfully!';
    }
    return 'Upload a bank statement, cheque, or bank document.';
  }

  void _fillEmiratesIdFields(UAEIdData data, {bool mergeWithExisting = false}) {
    final fieldMapping = UAEIdOCRService.getFormFieldMapping(data);
    if (fieldMapping['firstName'] != null &&
        (!mergeWithExisting || _firstNameController.text.isEmpty)) {
      _firstNameController.text = fieldMapping['firstName']!;
    }
    if (fieldMapping['middleName'] != null &&
        (!mergeWithExisting || _middleNameController.text.isEmpty)) {
      _middleNameController.text = fieldMapping['middleName']!;
    }
    if (fieldMapping['lastName'] != null &&
        (!mergeWithExisting || _lastNameController.text.isEmpty)) {
      _lastNameController.text = fieldMapping['lastName']!;
    }
    if (fieldMapping['idName'] != null &&
        (!mergeWithExisting || _idNameController.text.isEmpty)) {
      _idNameController.text = fieldMapping['idName']!;
    }
    if (data.idNumber?.isNotEmpty == true &&
        (!mergeWithExisting || _emiratesIdController.text.isEmpty)) {
      _emiratesIdController.text = data.idNumber!;
    }
    if (data.dateOfBirth?.isNotEmpty == true &&
        (!mergeWithExisting || _dobController.text.isEmpty)) {
      _dobController.text = data.dateOfBirth!;
    }
    if (data.nationality?.isNotEmpty == true &&
        (!mergeWithExisting || _nationalityController.text.isEmpty)) {
      _nationalityController.text = data.nationality!;
    }
    if (data.issuingDate?.isNotEmpty == true &&
        (!mergeWithExisting || _issueDateController.text.isEmpty)) {
      _issueDateController.text = data.issuingDate!;
    }
    if (data.expiryDate?.isNotEmpty == true &&
        (!mergeWithExisting || _expiryDateController.text.isEmpty)) {
      _expiryDateController.text = data.expiryDate!;
    }
    if (data.occupation?.isNotEmpty == true &&
        (!mergeWithExisting || _occupationController.text.isEmpty)) {
      _occupationController.text = data.occupation!;
    }
    if (data.employer?.isNotEmpty == true &&
        (!mergeWithExisting || _companyDetailsController.text.isEmpty)) {
      _companyDetailsController.text = data.employer!;
    }
    if (data.issuingPlace?.isNotEmpty == true &&
        (!mergeWithExisting || _emiratesController.text.isEmpty)) {
      final emirates = [
        'Dubai',
        'Abu Dhabi',
        'Sharjah',
        'Ajman',
        'Umm Al Quwain',
        'Ras Al Khaimah',
        'Fujairah',
      ];
      final matchingEmirate = emirates.firstWhere(
        (e) =>
            e.toLowerCase().contains(data.issuingPlace!.toLowerCase()) ||
            data.issuingPlace!.toLowerCase().contains(e.toLowerCase()),
        orElse: () => '',
      );
      if (matchingEmirate.isNotEmpty) {
        _emiratesController.text = matchingEmirate;
      }
    }
    setState(() {});
  }

  Future<void> _processBankDocument() async {
    if (_bankDocumentImage == null || _bankDocumentImage!.isEmpty) return;
    setState(() => _isProcessingBankDocument = true);
    try {
      final bankData = await BankDetailsOCRService.processBankDocument(
        _bankDocumentImage!,
      );
      _fillBankDetailsFields(bankData);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white, size: 20),
                SizedBox(width: 8),
                Expanded(child: Text('Bank document processed successfully!')),
              ],
            ),
            backgroundColor: Colors.green,
            behavior: SnackBarBehavior.floating,
            duration: Duration(seconds: 4),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.warning, color: Colors.white, size: 20),
                const SizedBox(width: 8),
                Expanded(child: Text('Failed to process bank document: $e')),
              ],
            ),
            backgroundColor: Colors.orange,
            behavior: SnackBarBehavior.floating,
            duration: const Duration(seconds: 4),
          ),
        );
      }
    } finally {
      if (mounted) setState(() => _isProcessingBankDocument = false);
    }
  }

  void _fillBankDetailsFields(BankDetailsData data) {
    if (data.accountHolderName != null &&
        _accountHolderController.text.isEmpty) {
      _accountHolderController.text = data.accountHolderName!;
    }
    if (data.ibanNumber != null && _ibanController.text.isEmpty) {
      _ibanController.text = data.ibanNumber!;
    }
    if (data.bankName != null && _bankNameController.text.isEmpty) {
      _bankNameController.text = data.bankName!;
    }
    if (data.branchName != null && _branchNameController.text.isEmpty) {
      _branchNameController.text = data.branchName!;
    }
    if (data.bankAddress != null && _bankAddressController.text.isEmpty) {
      _bankAddressController.text = data.bankAddress!;
    }
    setState(() {});
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    _firstNameController.dispose();
    _middleNameController.dispose();
    _lastNameController.dispose();
    _mobileController.dispose();
    _addressController.dispose();
    _emiratesController.dispose();
    _emiratesIdController.dispose();
    _idNameController.dispose();
    _dobController.dispose();
    _nationalityController.dispose();
    _companyDetailsController.dispose();
    _issueDateController.dispose();
    _expiryDateController.dispose();
    _occupationController.dispose();
    _accountHolderController.dispose();
    _ibanController.dispose();
    _bankNameController.dispose();
    _branchNameController.dispose();
    _bankAddressController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet =
            constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;

        return Scaffold(
          backgroundColor: Colors.white,
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: Column(
                children: [
                  // Personal Details
                  _buildModernSection(
                    title: 'Personal Details',
                    icon: Icons.person_rounded,
                    children: [
                      _buildModernTextField(
                        controller: _firstNameController,
                        label: 'First Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _middleNameController,
                        label: 'Middle Name',
                        icon: Icons.person_outline_rounded,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _lastNameController,
                        label: 'Last Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _mobileController,
                        label: 'Mobile Number',
                        icon: Icons.phone_outlined,
                        isPhone: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _addressController,
                        label: 'Address',
                        icon: Icons.home_outlined,
                      ),
                      const SizedBox(height: 20),
                      ModernDropdown(
                        label: 'Emirates',
                        icon: Icons.public_outlined,
                        items: _emirates.map((e) => e.desc).toList(),
                        value: _selectedEmirate?.desc,
                        onChanged: (String? value) {
                          if (!_isLoadingDropdowns && value != null) {
                            setState(() {
                              _selectedEmirate = _emirates.firstWhere(
                                (e) => e.desc == value,
                                orElse: () => _emirates.first,
                              );
                              _emiratesController.text = _selectedEmirate!.desc;
                            });
                          }
                        },
                      ),
                      const SizedBox(height: 20),
                      FileUploadWidget(
                        label: 'Profile Photo',
                        icon: Icons.camera_alt_outlined,
                        onFileSelected: (value) {
                          setState(() => _photoImage = value);
                        },
                        allowedExtensions: const ['*'],
                        maxSizeInMB: 10.0,
                        currentFilePath: _photoImage,
                        formType: 'painter',
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: Column(
                children: [
                  // Emirates ID
                  _buildModernSection(
                    title: 'Emirates ID',
                    icon: Icons.badge_outlined,
                    children: [
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: _getStatusColor().withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: _getStatusColor(),
                            width: 1,
                          ),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Icon(
                                  _getStatusIcon(),
                                  color: _getStatusColor(),
                                  size: 20,
                                ),
                                const SizedBox(width: 8),
                                Expanded(
                                  child: Text(
                                    'Emirates ID Processing Status',
                                    style: TextStyle(
                                      fontWeight: FontWeight.w600,
                                      color: _getStatusColor(),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 8),
                            Text(
                              _getStatusMessage(),
                              style: TextStyle(
                                fontSize: 13,
                                color: Colors.grey.shade700,
                              ),
                            ),
                            if (_isProcessingEmiratesId) ...[
                              const SizedBox(height: 12),
                              const LinearProgressIndicator(),
                            ],
                          ],
                        ),
                      ),
                      const SizedBox(height: 20),
                      FileUploadWidget(
                        label: 'Emirates ID - Front Side',
                        icon: Icons.credit_card_outlined,
                        onFileSelected: (value) {
                          setState(() => _emiratesIdFrontImage = value);
                          _checkAndProcessEmiratesId();
                        },
                        allowedExtensions: const ['jpg', 'jpeg', 'png'],
                        maxSizeInMB: 10.0,
                        currentFilePath: _emiratesIdFrontImage,
                        formType: 'painter',
                      ),
                      const SizedBox(height: 20),
                      FileUploadWidget(
                        label: 'Emirates ID - Back Side',
                        icon: Icons.credit_card_outlined,
                        onFileSelected: (value) {
                          setState(() => _emiratesIdBackImage = value);
                          _checkAndProcessEmiratesId();
                        },
                        allowedExtensions: const ['jpg', 'jpeg', 'png'],
                        maxSizeInMB: 10.0,
                        currentFilePath: _emiratesIdBackImage,
                        formType: 'painter',
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _emiratesIdController,
                        label: 'Emirates ID Number',
                        icon: Icons.pin_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _idNameController,
                        label: 'Name of Holder',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _dobController,
                        label: 'Date of Birth',
                        icon: Icons.cake_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _nationalityController,
                        label: 'Nationality',
                        icon: Icons.flag_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _companyDetailsController,
                        label: 'Company Details / Sponsor Name',
                        icon: Icons.business_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _issueDateController,
                        label: 'Issue Date',
                        icon: Icons.event_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _expiryDateController,
                        label: 'Expiry Date',
                        icon: Icons.event_available_outlined,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _occupationController,
                        label: 'Occupation',
                        icon: Icons.work_outline,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Bank Details (Full width below the two columns)
        _buildModernSection(
          title: 'Bank Details',
          icon: Icons.account_balance_outlined,
          isOptional: true,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _getBankDocumentStatusColor().withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: _getBankDocumentStatusColor(),
                  width: 1,
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        _getBankDocumentStatusIcon(),
                        color: _getBankDocumentStatusColor(),
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'Bank Document OCR Status',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            color: _getBankDocumentStatusColor(),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _getBankDocumentStatusMessage(),
                    style: TextStyle(fontSize: 13, color: Colors.grey.shade700),
                  ),
                  if (_isProcessingBankDocument) ...[
                    const SizedBox(height: 12),
                    const LinearProgressIndicator(),
                  ],
                ],
              ),
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: '',
              icon: Icons.receipt_long_outlined,
              onFileSelected: (value) {
                setState(() => _bankDocumentImage = value);
                _processBankDocument();
              },
              allowedExtensions: const ['jpg', 'jpeg', 'png', 'pdf'],
              maxSizeInMB: 10.0,
              currentFilePath: _bankDocumentImage,
              formType: 'painter',
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _accountHolderController,
              label: 'Account Holder Name',
              icon: Icons.person_outline_rounded,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _ibanController,
              label: 'IBAN Number',
              icon: Icons.account_balance_wallet_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankNameController,
              label: 'Bank Name',
              icon: Icons.business_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _branchNameController,
              label: 'Branch Name',
              icon: Icons.location_on_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankAddressController,
              label: 'Bank Address',
              icon: Icons.location_city_outlined,
              isRequired: false,
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Personal Details
        _buildModernSection(
          title: 'Personal Details',
          icon: Icons.person_rounded,
          children: [
            _buildModernTextField(
              controller: _firstNameController,
              label: 'First Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _middleNameController,
              label: 'Middle Name',
              icon: Icons.person_outline_rounded,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _lastNameController,
              label: 'Last Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _mobileController,
              label: 'Mobile Number',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _addressController,
              label: 'Address',
              icon: Icons.home_outlined,
            ),
            const SizedBox(height: 20),
            ModernDropdown(
              label: 'Emirates',
              icon: Icons.public_outlined,
              items: _emirates.map((e) => e.desc).toList(),
              value: _selectedEmirate?.desc,
              onChanged: (String? value) {
                if (!_isLoadingDropdowns && value != null) {
                  setState(() {
                    _selectedEmirate = _emirates.firstWhere(
                      (e) => e.desc == value,
                      orElse: () => _emirates.first,
                    );
                    _emiratesController.text = _selectedEmirate!.desc;
                  });
                }
              },
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Profile Photo',
              icon: Icons.camera_alt_outlined,
              onFileSelected: (value) {
                setState(() => _photoImage = value);
              },
              allowedExtensions: const ['*'],
              maxSizeInMB: 10.0,
              currentFilePath: _photoImage,
              formType: 'painter',
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Emirates ID
        _buildModernSection(
          title: 'Emirates ID',
          icon: Icons.badge_outlined,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _getStatusColor().withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: _getStatusColor(), width: 1),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        _getStatusIcon(),
                        color: _getStatusColor(),
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'Emirates ID Processing Status',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            color: _getStatusColor(),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _getStatusMessage(),
                    style: TextStyle(fontSize: 13, color: Colors.grey.shade700),
                  ),
                  if (_isProcessingEmiratesId) ...[
                    const SizedBox(height: 12),
                    const LinearProgressIndicator(),
                  ],
                ],
              ),
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Emirates ID - Front Side',
              icon: Icons.credit_card_outlined,
              onFileSelected: (value) {
                setState(() => _emiratesIdFrontImage = value);
                _checkAndProcessEmiratesId();
              },
              allowedExtensions: const ['jpg', 'jpeg', 'png'],
              maxSizeInMB: 10.0,
              currentFilePath: _emiratesIdFrontImage,
              formType: 'painter',
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Emirates ID - Back Side',
              icon: Icons.credit_card_outlined,
              onFileSelected: (value) {
                setState(() => _emiratesIdBackImage = value);
                _checkAndProcessEmiratesId();
              },
              allowedExtensions: const ['jpg', 'jpeg', 'png'],
              maxSizeInMB: 10.0,
              currentFilePath: _emiratesIdBackImage,
              formType: 'painter',
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _emiratesIdController,
              label: 'Emirates ID Number',
              icon: Icons.pin_outlined,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _idNameController,
              label: 'Name of Holder',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _dobController,
              label: 'Date of Birth',
              icon: Icons.cake_outlined,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _nationalityController,
              label: 'Nationality',
              icon: Icons.flag_outlined,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _companyDetailsController,
              label: 'Company Details / Sponsor Name',
              icon: Icons.business_outlined,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _issueDateController,
              label: 'Issue Date',
              icon: Icons.event_outlined,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _expiryDateController,
              label: 'Expiry Date',
              icon: Icons.event_available_outlined,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _occupationController,
              label: 'Occupation',
              icon: Icons.work_outline,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Bank Details
        _buildModernSection(
          title: 'Bank Details',
          icon: Icons.account_balance_outlined,
          isOptional: true,
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _getBankDocumentStatusColor().withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: _getBankDocumentStatusColor(),
                  width: 1,
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        _getBankDocumentStatusIcon(),
                        color: _getBankDocumentStatusColor(),
                        size: 20,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'Bank Document OCR Status',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            color: _getBankDocumentStatusColor(),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _getBankDocumentStatusMessage(),
                    style: TextStyle(fontSize: 13, color: Colors.grey.shade700),
                  ),
                  if (_isProcessingBankDocument) ...[
                    const SizedBox(height: 12),
                    const LinearProgressIndicator(),
                  ],
                ],
              ),
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: '',
              icon: Icons.receipt_long_outlined,
              onFileSelected: (value) {
                setState(() => _bankDocumentImage = value);
                _processBankDocument();
              },
              allowedExtensions: const ['jpg', 'jpeg', 'png', 'pdf'],
              maxSizeInMB: 10.0,
              currentFilePath: _bankDocumentImage,
              formType: 'painter',
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _accountHolderController,
              label: 'Account Holder Name',
              icon: Icons.person_outline_rounded,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _ibanController,
              label: 'IBAN Number',
              icon: Icons.account_balance_wallet_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankNameController,
              label: 'Bank Name',
              icon: Icons.business_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _branchNameController,
              label: 'Branch Name',
              icon: Icons.location_on_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankAddressController,
              label: 'Bank Address',
              icon: Icons.location_city_outlined,
              isRequired: false,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: CustomBackButton(animated: false, size: 36),
            )
          : null,
      title: Text(
        'Painter Registration',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(
            Icons.help_outline_rounded,
            color: Color(0xFF1E3A8A),
          ),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Welcome!',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Complete your painter registration',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone ? TextInputType.phone : TextInputType.text,
      inputFormatters: isPhone
          ? [FilteringTextInputFormatter.digitsOnly]
          : null,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          return PainterService.validateMobileNumber(value);
        }
        if (label.toLowerCase().contains('emirates id')) {
          return PainterService.validateEmiratesId(value);
        }
        if (label.toLowerCase().contains('iban')) {
          return PainterService.validateIban(value);
        }
        if (label.toLowerCase().contains('nationality')) {
          return PainterService.validateNationality(value);
        }
        if (label.toLowerCase().contains('occupation')) {
          return PainterService.validateOccupation(value);
        }
        if (label.toLowerCase().contains('name') &&
            (label.toLowerCase().contains('first') ||
                label.toLowerCase().contains('last') ||
                label.toLowerCase().contains('holder')) &&
            !label.toLowerCase().contains('account holder')) {
          return PainterService.validateName(value, label);
        }
        // Optional account holder name validation (only if not empty)
        if (label.toLowerCase().contains('account holder') &&
            value != null &&
            value.trim().isNotEmpty) {
          return PainterService.validateName(value, label);
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ').first;
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Registration',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Registration Help',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF1F2937),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. Bank details are optional but recommended for payments.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => context.pop(),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text(
                    'Got it',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // --------------------- SUBMIT ---------------------
  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isSubmitting = true);
      try {
        final req = PainterRegistrationRequest(
          // Personal
          firstName: _firstNameController.text.trim(),
          middleName: _middleNameController.text.trim(),
          lastName: _lastNameController.text.trim(),
          mobileNumber: PainterService.formatMobileNumber(
            _mobileController.text,
          ),
          address: _addressController.text.trim(),
          area: _selectedEmirate?.code ?? '', // Pass emirate code as area
          emirates: _selectedEmirate?.desc ?? '', // Pass emirate description
          // Emirates ID
          emiratesIdNumber: _emiratesIdController.text.trim(),
          idName: _idNameController.text.trim(),
          dateOfBirth: _dobController.text.trim(),
          nationality: _nationalityController.text.trim(),
          companyDetails: _companyDetailsController.text.trim(),
          issueDate: _issueDateController.text.trim(),
          expiryDate: _expiryDateController.text.trim(),
          occupation: _occupationController.text.trim(),
          // Bank
          accountHolderName: _accountHolderController.text.trim(),
          ibanNumber: PainterService.formatIban(_ibanController.text.trim()),
          bankName: _bankNameController.text.trim(),
          branchName: _branchNameController.text.trim(),
          bankAddress: _bankAddressController.text.trim(),
        );
        final resp = await PainterService.registerPainter(req);
        if (!mounted) return;
        setState(() => _isSubmitting = false);
        if (resp.success) {
          // Set user as authenticated after successful registration
          final userData = UserData(
            emplName:
                '${_firstNameController.text} ${_lastNameController.text}',
            areaCode: _selectedEmirate?.code ?? '',
            roles: ['painter'],
            pages: [],
            userID: _mobileController.text,
          );
          AuthManager.setUser(userData);

          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.white, size: 20),
                  const SizedBox(width: 8),
                  Expanded(child: Text('Registration successful!')),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              duration: const Duration(seconds: 2),
            ),
          );

          // Navigate to home screen after successful registration
          await Future.delayed(const Duration(seconds: 1));
          if (mounted) {
            context.go('${AppRouter.home}?newRegistration=true&role=painter');
          }
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.error, color: Colors.white, size: 20),
                  const SizedBox(width: 8),
                  Expanded(child: Text(resp.message)),
                ],
              ),
              backgroundColor: Colors.red,
              behavior: SnackBarBehavior.floating,
              duration: const Duration(seconds: 5),
            ),
          );
        }
      } catch (e) {
        if (!mounted) return;
        setState(() => _isSubmitting = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white, size: 20),
                const SizedBox(width: 8),
                Expanded(child: Text('Registration failed: $e')),
              ],
            ),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }
}



























import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'package:go_router/go_router.dart';
import '../../../core/services/contractor_service.dart';
import '../../../core/models/contractor_models.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/services/trade_license_ocr_service.dart';
import '../../../core/services/vat_registration_ocr_service.dart';
import '../../../core/services/bank_details_ocr_service.dart';
import '../../../core/services/auth_service.dart';
import '../../../core/models/auth_models.dart';
import '../../../core/navigation/app_router.dart';

class ContractorRegistrationScreen extends StatefulWidget {
  const ContractorRegistrationScreen({super.key});

  @override
  State<ContractorRegistrationScreen> createState() =>
      _ContractorRegistrationScreenState();
}

class _ContractorRegistrationScreenState
    extends State<ContractorRegistrationScreen>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  // Personal
  final _contractorTypeController = TextEditingController();
  final _firstNameController = TextEditingController();
  final _middleNameController = TextEditingController();
  final _lastNameController = TextEditingController();
  final _mobileController = TextEditingController();
  final _addressController = TextEditingController();
  final _emiratesController = TextEditingController();
  // Contractor Certificate
  String? _contractorCertificatePath;
  // Bank
  final _accountHolderController = TextEditingController();
  final _ibanController = TextEditingController();
  final _bankNameController = TextEditingController();
  final _branchNameController = TextEditingController();
  final _bankAddressController = TextEditingController();
  String? _bankDocumentPath;
  // VAT
  final _firmNameController = TextEditingController();
  final _vatAddressController = TextEditingController();
  final _trnController = TextEditingController();
  final _vatDateController = TextEditingController();
  // License
  final _licenseNumberController = TextEditingController();
  final _issuingAuthorityController = TextEditingController();
  final _licenseTypeController = TextEditingController();
  final _establishmentDateController = TextEditingController();
  final _licenseExpiryDateController = TextEditingController();
  final _tradeNameController = TextEditingController();
  final _responsiblePersonController = TextEditingController();
  final _licenseAddressController = TextEditingController();
  final _effectiveDateController = TextEditingController();
  bool _isSubmitting = false;
  final bool _showVatTooltip = false;

  // Section-specific OCR processing state
  // Commercial License OCR
  bool _isProcessingLicenseOCR = false;
  String? _licenseOcrError;
  String _licenseOcrCurrentStep = '';
  double _licenseOcrProgress = 0.0;
  int _licenseEstimatedTimeLeft = 0;
  Timer? _licenseProgressTimer;
  DateTime? _licenseOcrStartTime;

  // VAT Certificate OCR
  bool _isProcessingVatOCR = false;
  String? _vatOcrError;
  String _vatOcrCurrentStep = '';
  double _vatOcrProgress = 0.0;
  int _vatEstimatedTimeLeft = 0;
  Timer? _vatProgressTimer;
  DateTime? _vatOcrStartTime;

  // Bank Document OCR
  bool _isProcessingBankOCR = false;
  String? _bankOcrError;
  String _bankOcrCurrentStep = '';
  double _bankOcrProgress = 0.0;
  int _bankEstimatedTimeLeft = 0;
  Timer? _bankProgressTimer;
  DateTime? _bankOcrStartTime;

  // VAT and License document paths
  String? _vatCertificatePath;
  String? _licenseDocumentPath;
  String? _photographPath;

  // API dropdown data
  List<String> _contractorTypes = [];
  List<EmirateItem> _emirates = [];
  EmirateItem? _selectedEmirate;
  bool _isLoadingDropdowns = true;
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
    _loadDropdownData();
  }

  Future<void> _loadDropdownData() async {
    try {
      final contractorTypes = await ContractorService.getContractorTypes();
      final emirates = await ContractorService.getEmiratesList();
      setState(() {
        _contractorTypes = contractorTypes;
        _emirates = emirates;
        _isLoadingDropdowns = false;
      });
    } catch (_) {
      setState(() {
        _contractorTypes = const [
          'Maintenance Contractor',
          'Petty contractors',
        ];
        _emirates = [
          EmirateItem(code: 'DUB', desc: 'Dubai'),
          EmirateItem(code: 'ABD', desc: 'Abu Dhabi'),
          EmirateItem(code: 'SHJ', desc: 'Sharjah'),
          EmirateItem(code: 'AJM', desc: 'Ajman'),
          EmirateItem(code: 'UAQ', desc: 'Umm Al Quwain'),
          EmirateItem(code: 'RAK', desc: 'Ras Al Khaimah'),
          EmirateItem(code: 'FUJ', desc: 'Fujairah'),
        ];
        _isLoadingDropdowns = false;
      });
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    _licenseProgressTimer?.cancel();
    _vatProgressTimer?.cancel();
    _bankProgressTimer?.cancel();
    _contractorTypeController.dispose();
    _firstNameController.dispose();
    _middleNameController.dispose();
    _lastNameController.dispose();
    _mobileController.dispose();
    _addressController.dispose();
    _emiratesController.dispose();
    _accountHolderController.dispose();
    _ibanController.dispose();
    _bankNameController.dispose();
    _branchNameController.dispose();
    _bankAddressController.dispose();
    _firmNameController.dispose();
    _vatAddressController.dispose();
    _trnController.dispose();
    _vatDateController.dispose();
    _licenseNumberController.dispose();
    _issuingAuthorityController.dispose();
    _licenseTypeController.dispose();
    _establishmentDateController.dispose();
    _licenseExpiryDateController.dispose();
    _tradeNameController.dispose();
    _responsiblePersonController.dispose();
    _licenseAddressController.dispose();
    _effectiveDateController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet =
            constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;

        return Scaffold(
          backgroundColor: Colors.white,
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: Column(
                children: [
                  // Personal Details
                  _buildModernSection(
                    title: 'Personal Details',
                    icon: Icons.person_rounded,
                    children: [
                      ModernDropdown(
                        label: 'Contractor Type',
                        icon: Icons.business_center_outlined,
                        items: _contractorTypes,
                        value: _contractorTypeController.text.isNotEmpty
                            ? _contractorTypeController.text
                            : null,
                        onChanged: (String? value) {
                          if (!_isLoadingDropdowns) {
                            setState(() {
                              _contractorTypeController.text = value ?? '';
                            });
                          }
                        },
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _firstNameController,
                        label: 'First Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _middleNameController,
                        label: 'Middle Name',
                        icon: Icons.person_outline_rounded,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _lastNameController,
                        label: 'Last Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _mobileController,
                        label: 'Mobile Number',
                        icon: Icons.phone_outlined,
                        isPhone: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _addressController,
                        label: 'Address',
                        icon: Icons.home_outlined,
                      ),
                      const SizedBox(height: 20),
                      ModernDropdown(
                        label: 'Emirates',
                        icon: Icons.public_outlined,
                        items: _emirates.map((e) => e.desc).toList(),
                        value: _selectedEmirate?.desc,
                        onChanged: (String? value) {
                          if (!_isLoadingDropdowns && value != null) {
                            setState(() {
                              _selectedEmirate = _emirates.firstWhere(
                                (e) => e.desc == value,
                                orElse: () => _emirates.first,
                              );
                              _emiratesController.text = _selectedEmirate!.desc;
                            });
                          }
                        },
                      ),
                      const SizedBox(height: 20),
                      FileUploadWidget(
                        label: 'Contractor Certificate',
                        icon: Icons.file_copy_outlined,
                        isRequired: true,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _contractorCertificatePath,
                        onFileSelected: (String? filePath) {
                          setState(() {
                            _contractorCertificatePath = filePath;
                          });
                        },
                      ),
                      const SizedBox(height: 20),
                      FileUploadWidget(
                        label: 'Upload Photograph',
                        icon: Icons.photo_camera_outlined,
                        isRequired: true,
                        allowedExtensions: ['jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _photographPath,
                        onFileSelected: (String? filePath) {
                          setState(() {
                            _photographPath = filePath;
                          });
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),

                  // Bank Details
                  _buildModernSection(
                    title: 'Bank Details',
                    icon: Icons.account_balance_outlined,
                    subtitle: 'All bank details are mandatory',
                    children: [
                      FileUploadWidget(
                        label: 'Bank Document Upload',
                        icon: Icons.upload_file_outlined,
                        isRequired: false,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _bankDocumentPath,
                        onFileSelected: (String? filePath) async {
                          setState(() {
                            _bankDocumentPath = filePath;
                            _isProcessingBankOCR = true;
                            _bankOcrError = null;
                          });

                          if (filePath != null) {
                            await _processBankDocumentOCR(filePath);
                          }
                        },
                      ),
                      if (_isProcessingBankOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFF0F9FF),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFF3B82F6).withOpacity(0.2),
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Color(0xFF3B82F6),
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: Text(
                                        _bankOcrCurrentStep,
                                        style: const TextStyle(
                                          fontWeight: FontWeight.w600,
                                          color: Color(0xFF1E40AF),
                                        ),
                                      ),
                                    ),
                                    if (_bankEstimatedTimeLeft > 0)
                                      Text(
                                        '${_bankEstimatedTimeLeft}s',
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.grey.shade600,
                                        ),
                                      ),
                                  ],
                                ),
                                const SizedBox(height: 12),
                                LinearProgressIndicator(
                                  value: _bankOcrProgress,
                                  backgroundColor: Colors.grey.shade200,
                                  valueColor:
                                      const AlwaysStoppedAnimation<Color>(
                                        Color(0xFF3B82F6),
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      if (_bankOcrError != null && !_isProcessingBankOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFFEF2F2),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFFEF4444).withOpacity(0.2),
                              ),
                            ),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error_outline_rounded,
                                  color: Color(0xFFDC2626),
                                  size: 20,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    _bankOcrError!,
                                    style: const TextStyle(
                                      color: Color(0xFFB91C1C),
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _accountHolderController,
                        label: 'Account Holder Name',
                        icon: Icons.person_outline_rounded,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _ibanController,
                        label: 'IBAN Number',
                        icon: Icons.account_balance_wallet_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _bankNameController,
                        label: 'Bank Name',
                        icon: Icons.business_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _branchNameController,
                        label: 'Branch Name',
                        icon: Icons.map_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _bankAddressController,
                        label: 'Bank Address',
                        icon: Icons.location_city_outlined,
                        isRequired: true,
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: Column(
                children: [
                  // VAT Certificate
                  _buildModernSection(
                    title: 'VAT Certificate (Non-Mandatory)',
                    icon: Icons.receipt_long_outlined,
                    subtitle:
                        'Not mandatory for firms with turnover below 375,000 AED per annum',
                    children: [
                      FileUploadWidget(
                        label: 'VAT Certificate Upload',
                        icon: Icons.upload_file_outlined,
                        isRequired: false,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _vatCertificatePath,
                        onFileSelected: (String? filePath) async {
                          setState(() {
                            _vatCertificatePath = filePath;
                            _isProcessingVatOCR = true;
                            _vatOcrError = null;
                          });

                          if (filePath != null) {
                            await _processVATCertificateOCR(filePath);
                          }
                        },
                      ),
                      if (_isProcessingVatOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFF0F9FF),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFF3B82F6).withOpacity(0.2),
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Color(0xFF3B82F6),
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: Text(
                                        _vatOcrCurrentStep,
                                        style: const TextStyle(
                                          fontWeight: FontWeight.w600,
                                          color: Color(0xFF1E40AF),
                                        ),
                                      ),
                                    ),
                                    if (_vatEstimatedTimeLeft > 0)
                                      Text(
                                        '${_vatEstimatedTimeLeft}s',
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.grey.shade600,
                                        ),
                                      ),
                                  ],
                                ),
                                const SizedBox(height: 12),
                                LinearProgressIndicator(
                                  value: _vatOcrProgress,
                                  backgroundColor: Colors.grey.shade200,
                                  valueColor:
                                      const AlwaysStoppedAnimation<Color>(
                                        Color(0xFF3B82F6),
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      if (_vatOcrError != null && !_isProcessingVatOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFFEF2F2),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFFEF4444).withOpacity(0.2),
                              ),
                            ),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error_outline_rounded,
                                  color: Color(0xFFDC2626),
                                  size: 20,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    _vatOcrError!,
                                    style: const TextStyle(
                                      color: Color(0xFFB91C1C),
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _firmNameController,
                        label: 'Firm Name',
                        icon: Icons.business_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _vatAddressController,
                        label: 'Registered Address',
                        icon: Icons.home_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _trnController,
                        label: 'Tax Registration Number',
                        icon: Icons.pin_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _vatDateController,
                        label: 'Effective Date',
                        icon: Icons.event_outlined,
                        isRequired: false,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  // Commercial License
                  _buildModernSection(
                    title: 'Commercial License',
                    icon: Icons.workspace_premium_outlined,
                    subtitle:
                        'Note: Each emirate has separate licensing authority. Different emirates require different licenses.',
                    children: [
                      FileUploadWidget(
                        label: 'Commercial License Upload',
                        icon: Icons.upload_file_outlined,
                        isRequired: true,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _licenseDocumentPath,
                        onFileSelected: (String? filePath) async {
                          setState(() {
                            _licenseDocumentPath = filePath;
                            _isProcessingLicenseOCR = true;
                            _licenseOcrError = null;
                          });

                          if (filePath != null) {
                            await _processCommercialLicenseOCR(filePath);
                          }
                        },
                      ),
                      if (_isProcessingLicenseOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Container(
                                padding: const EdgeInsets.all(16),
                                decoration: BoxDecoration(
                                  color: const Color(0xFFF0F9FF),
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(
                                    color: const Color(
                                      0xFF3B82F6,
                                    ).withOpacity(0.2),
                                  ),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Row(
                                      children: [
                                        const SizedBox(
                                          width: 20,
                                          height: 20,
                                          child: CircularProgressIndicator(
                                            strokeWidth: 2,
                                            color: Color(0xFF3B82F6),
                                          ),
                                        ),
                                        const SizedBox(width: 12),
                                        Expanded(
                                          child: Text(
                                            _licenseOcrCurrentStep,
                                            style: const TextStyle(
                                              fontWeight: FontWeight.w600,
                                              color: Color(0xFF1E40AF),
                                            ),
                                          ),
                                        ),
                                        if (_licenseEstimatedTimeLeft > 0)
                                          Text(
                                            '${_licenseEstimatedTimeLeft}s',
                                            style: TextStyle(
                                              fontSize: 12,
                                              color: Colors.grey.shade600,
                                            ),
                                          ),
                                      ],
                                    ),
                                    const SizedBox(height: 12),
                                    LinearProgressIndicator(
                                      value: _licenseOcrProgress,
                                      backgroundColor: Colors.grey.shade200,
                                      valueColor:
                                          const AlwaysStoppedAnimation<Color>(
                                            Color(0xFF3B82F6),
                                          ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      if (_licenseOcrError != null && !_isProcessingLicenseOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFFEF2F2),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFFEF4444).withOpacity(0.2),
                              ),
                            ),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error_outline_rounded,
                                  color: Color(0xFFDC2626),
                                  size: 20,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    _licenseOcrError!,
                                    style: const TextStyle(
                                      color: Color(0xFFB91C1C),
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _licenseNumberController,
                        label: 'License Number',
                        icon: Icons.pin_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _issuingAuthorityController,
                        label: 'Issuing Authority',
                        icon: Icons.account_balance_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _licenseTypeController,
                        label: 'License Type',
                        icon: Icons.category_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _establishmentDateController,
                        label: 'Establishment Date',
                        icon: Icons.event_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _licenseExpiryDateController,
                        label: 'Expiry Date',
                        icon: Icons.event_available_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _tradeNameController,
                        label: 'Trade Name',
                        icon: Icons.store_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _responsiblePersonController,
                        label: 'Responsible Person',
                        icon: Icons.person_outline_rounded,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _licenseAddressController,
                        label: 'Registered Address',
                        icon: Icons.home_outlined,
                        isRequired: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _effectiveDateController,
                        label: 'Effective Registration Date',
                        icon: Icons.event_outlined,
                        isRequired: true,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Personal Details
        _buildModernSection(
          title: 'Personal Details',
          icon: Icons.person_rounded,
          children: [
            ModernDropdown(
              label: 'Contractor Type',
              icon: Icons.business_center_outlined,
              items: _contractorTypes,
              value: _contractorTypeController.text.isNotEmpty
                  ? _contractorTypeController.text
                  : null,
              onChanged: (String? value) {
                if (!_isLoadingDropdowns) {
                  setState(() {
                    _contractorTypeController.text = value ?? '';
                  });
                }
              },
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _firstNameController,
              label: 'First Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _middleNameController,
              label: 'Middle Name',
              icon: Icons.person_outline_rounded,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _lastNameController,
              label: 'Last Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _mobileController,
              label: 'Mobile Number',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _addressController,
              label: 'Address',
              icon: Icons.home_outlined,
            ),
            const SizedBox(height: 20),
            ModernDropdown(
              label: 'Emirates',
              icon: Icons.public_outlined,
              items: _emirates.map((e) => e.desc).toList(),
              value: _selectedEmirate?.desc,
              onChanged: (String? value) {
                if (!_isLoadingDropdowns && value != null) {
                  setState(() {
                    _selectedEmirate = _emirates.firstWhere(
                      (e) => e.desc == value,
                      orElse: () => _emirates.first,
                    );
                    _emiratesController.text = _selectedEmirate!.desc;
                  });
                }
              },
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Contractor Certificate',
              icon: Icons.file_copy_outlined,
              isRequired: true,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _contractorCertificatePath,
              onFileSelected: (String? filePath) {
                setState(() {
                  _contractorCertificatePath = filePath;
                });
              },
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Upload Photograph',
              icon: Icons.photo_camera_outlined,
              isRequired: true,
              allowedExtensions: ['jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _photographPath,
              onFileSelected: (String? filePath) {
                setState(() {
                  _photographPath = filePath;
                });
              },
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Bank Details
        _buildModernSection(
          title: 'Bank Details',
          icon: Icons.account_balance_outlined,
          subtitle: 'All bank details are mandatory',
          children: [
            _buildModernTextField(
              controller: _accountHolderController,
              label: 'Account Holder Name',
              icon: Icons.person_outline_rounded,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _ibanController,
              label: 'IBAN Number',
              icon: Icons.account_balance_wallet_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankNameController,
              label: 'Bank Name',
              icon: Icons.business_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _branchNameController,
              label: 'Branch Name',
              icon: Icons.map_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankAddressController,
              label: 'Bank Address',
              icon: Icons.location_city_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Bank Document Upload',
              icon: Icons.upload_file_outlined,
              isRequired: false,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _bankDocumentPath,
              onFileSelected: (String? filePath) async {
                setState(() {
                  _bankDocumentPath = filePath;
                  _isProcessingBankOCR = true;
                  _bankOcrError = null;
                });

                if (filePath != null) {
                  await _processBankDocumentOCR(filePath);
                }
              },
            ),
          ],
        ),
        const SizedBox(height: 24),
        // VAT Certificate
        _buildModernSection(
          title: 'VAT Certificate (Non-Mandatory)',
          icon: Icons.receipt_long_outlined,
          subtitle:
              'Not mandatory for firms with turnover below 375,000 AED per annum',
          children: [
            FileUploadWidget(
              label: 'VAT Certificate Upload',
              icon: Icons.upload_file_outlined,
              isRequired: false,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _vatCertificatePath,
              onFileSelected: (String? filePath) async {
                setState(() {
                  _vatCertificatePath = filePath;
                  _isProcessingVatOCR = true;
                  _vatOcrError = null;
                });

                if (filePath != null) {
                  await _processVATCertificateOCR(filePath);
                }
              },
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _firmNameController,
              label: 'Firm Name',
              icon: Icons.business_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _vatAddressController,
              label: 'Registered Address',
              icon: Icons.home_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _trnController,
              label: 'Tax Registration Number',
              icon: Icons.pin_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _vatDateController,
              label: 'Effective Date',
              icon: Icons.event_outlined,
              isRequired: false,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Commercial License
        _buildModernSection(
          title: 'Commercial License',
          icon: Icons.workspace_premium_outlined,
          subtitle:
              'Note: Each emirate has separate licensing authority. Different emirates require different licenses.',
          children: [
            FileUploadWidget(
              label: 'Commercial License Upload',
              icon: Icons.upload_file_outlined,
              isRequired: true,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _licenseDocumentPath,
              onFileSelected: (String? filePath) async {
                setState(() {
                  _licenseDocumentPath = filePath;
                  _isProcessingLicenseOCR = true;
                  _licenseOcrError = null;
                });

                if (filePath != null) {
                  await _processCommercialLicenseOCR(filePath);
                }
              },
            ),
            if (_isProcessingLicenseOCR)
              Padding(
                padding: const EdgeInsets.only(top: 16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: const Color(0xFFF0F9FF),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: const Color(0xFF3B82F6).withOpacity(0.2),
                        ),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  color: Color(0xFF3B82F6),
                                ),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Text(
                                  _licenseOcrCurrentStep,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.w600,
                                    color: Color(0xFF1E40AF),
                                  ),
                                ),
                              ),
                              if (_licenseEstimatedTimeLeft > 0)
                                Text(
                                  '${_licenseEstimatedTimeLeft}s',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.grey.shade600,
                                  ),
                                ),
                            ],
                          ),
                          const SizedBox(height: 12),
                          LinearProgressIndicator(
                            value: _licenseOcrProgress,
                            backgroundColor: Colors.grey.shade200,
                            valueColor: const AlwaysStoppedAnimation<Color>(
                              Color(0xFF3B82F6),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            if (_licenseOcrError != null && !_isProcessingLicenseOCR)
              Padding(
                padding: const EdgeInsets.only(top: 16.0),
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: const Color(0xFFFEF2F2),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: const Color(0xFFEF4444).withOpacity(0.2),
                    ),
                  ),
                  child: Row(
                    children: [
                      const Icon(
                        Icons.error_outline_rounded,
                        color: Color(0xFFDC2626),
                        size: 20,
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          _licenseOcrError!,
                          style: const TextStyle(
                            color: Color(0xFFB91C1C),
                            fontSize: 14,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _licenseNumberController,
              label: 'License Number',
              icon: Icons.pin_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _issuingAuthorityController,
              label: 'Issuing Authority',
              icon: Icons.account_balance_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _licenseTypeController,
              label: 'License Type',
              icon: Icons.category_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _establishmentDateController,
              label: 'Establishment Date',
              icon: Icons.event_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _licenseExpiryDateController,
              label: 'Expiry Date',
              icon: Icons.event_available_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _tradeNameController,
              label: 'Trade Name',
              icon: Icons.store_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _responsiblePersonController,
              label: 'Responsible Person',
              icon: Icons.person_outline_rounded,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _licenseAddressController,
              label: 'Registered Address',
              icon: Icons.home_outlined,
              isRequired: true,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _effectiveDateController,
              label: 'Effective Registration Date',
              icon: Icons.event_outlined,
              isRequired: true,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: CustomBackButton(animated: false, size: 36),
            )
          : null,
      title: Text(
        'Contractor Registration',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(
            Icons.help_outline_rounded,
            color: Color(0xFF1E3A8A),
          ),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
    String? subtitle,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                      if (subtitle != null)
                        Padding(
                          padding: const EdgeInsets.only(top: 4),
                          child: Text(
                            subtitle,
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey.shade600,
                              fontStyle: FontStyle.italic,
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone ? TextInputType.phone : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          return ContractorService.validateMobileNumber(value);
        }
        if (label.toLowerCase().contains('iban')) {
          return ContractorService.validateIban(value);
        }
        if (label.toLowerCase().contains('tax registration')) {
          return ContractorService.validateTaxRegistrationNumber(value);
        }
        if (label.toLowerCase().contains('name') &&
            (label.toLowerCase().contains('first') ||
                label.toLowerCase().contains('last') ||
                label.toLowerCase().contains('account holder') ||
                label.toLowerCase().contains('responsible person'))) {
          return ContractorService.validateName(value, label);
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ').first;
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Registration',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Registration Help',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF1F2937),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. Optional fields can be skipped.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => context.pop(),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text(
                    'Got it',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Welcome!',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Complete your contractor registration',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  // OCR Processing Methods
  void _toast(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          duration: const Duration(seconds: 3),
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  void _startLicenseProgressTracking() {
    _licenseOcrStartTime = DateTime.now();
    _licenseProgressTimer = Timer.periodic(const Duration(milliseconds: 100), (
      timer,
    ) {
      if (!_isProcessingLicenseOCR) {
        timer.cancel();
        return;
      }

      setState(() {
        if (_licenseEstimatedTimeLeft > 0) {
          _licenseEstimatedTimeLeft = (_licenseEstimatedTimeLeft - 0.1)
              .round()
              .clamp(0, 100);
        }
      });
    });
  }

  void _startVatProgressTracking() {
    _vatOcrStartTime = DateTime.now();
    _vatProgressTimer = Timer.periodic(const Duration(milliseconds: 100), (
      timer,
    ) {
      if (!_isProcessingVatOCR) {
        timer.cancel();
        return;
      }

      setState(() {
        if (_vatEstimatedTimeLeft > 0) {
          _vatEstimatedTimeLeft = (_vatEstimatedTimeLeft - 0.1).round().clamp(
            0,
            100,
          );
        }
      });
    });
  }

  void _startBankProgressTracking() {
    _bankOcrStartTime = DateTime.now();
    _bankProgressTimer = Timer.periodic(const Duration(milliseconds: 100), (
      timer,
    ) {
      if (!_isProcessingBankOCR) {
        timer.cancel();
        return;
      }

      setState(() {
        if (_bankEstimatedTimeLeft > 0) {
          _bankEstimatedTimeLeft = (_bankEstimatedTimeLeft - 0.1).round().clamp(
            0,
            100,
          );
        }
      });
    });
  }

  Future<void> _processCommercialLicenseOCR(String filePath) async {
    try {
      print('=== CONTRACTOR LICENSE OCR START ===');
      print('Processing contractor license file: $filePath');

      _startLicenseProgressTracking();

      // Step 1: File Loading (0-30%)
      if (mounted) {
        setState(() {
          _licenseOcrCurrentStep = '📄 Loading license document...';
          _licenseOcrProgress = 0.1;
          _licenseEstimatedTimeLeft = 15;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 2: OCR Processing (30-70%)
      if (mounted) {
        setState(() {
          _licenseOcrCurrentStep = '🔍 Extracting license information...';
          _licenseOcrProgress = 0.4;
          _licenseEstimatedTimeLeft = 10;
        });
      }

      // Process the commercial license document with OCR
      final tradeLicenseData = await TradeLicenseOCRService.processTradeLicense(
        filePath,
      );

      // Step 3: Data Extraction (70-90%)
      if (mounted) {
        setState(() {
          _licenseOcrCurrentStep = '✨ Processing extracted data...';
          _licenseOcrProgress = 0.8;
          _licenseEstimatedTimeLeft = 5;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 4: Complete (90-100%)
      if (mounted) {
        setState(() {
          _licenseOcrProgress = 1.0;
          _licenseOcrCurrentStep = '✅ Processing complete!';
          _licenseEstimatedTimeLeft = 0;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      if (mounted) {
        setState(() {
          _isProcessingLicenseOCR = false;
          _licenseProgressTimer?.cancel();

          // Auto-fill form fields if OCR extracted any valid data
          if (tradeLicenseData.isValid) {
            print('OCR extracted valid data, auto-filling fields...');

            int fieldsFilledCount = 0;

            // Fill license details
            if (tradeLicenseData.licenseNumber != null) {
              _licenseNumberController.text = tradeLicenseData.licenseNumber!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.issuingAuthority != null) {
              _issuingAuthorityController.text =
                  tradeLicenseData.issuingAuthority!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.establishmentDate != null) {
              _establishmentDateController.text =
                  tradeLicenseData.establishmentDate!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.expiryDate != null) {
              _licenseExpiryDateController.text = tradeLicenseData.expiryDate!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.tradeName != null) {
              _tradeNameController.text = tradeLicenseData.tradeName!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.responsiblePerson != null) {
              _responsiblePersonController.text =
                  tradeLicenseData.responsiblePerson!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.registeredAddress != null) {
              _licenseAddressController.text =
                  tradeLicenseData.registeredAddress!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.effectiveRegistrationDate != null) {
              _effectiveDateController.text =
                  tradeLicenseData.effectiveRegistrationDate!;
              fieldsFilledCount++;
            }

            _licenseOcrError = null;

            // Show appropriate success message based on completeness
            if (tradeLicenseData.isCompletelyValid) {
              _toast(
                '🎉 Commercial license processed successfully! All $fieldsFilledCount fields auto-filled in ${DateTime.now().difference(_licenseOcrStartTime!).inSeconds}s.',
              );
            } else {
              _toast(
                '✨ Commercial license processed! $fieldsFilledCount fields auto-filled. Please complete remaining fields manually.',
              );
            }

            print(
              'OCR auto-fill completed successfully - $fieldsFilledCount fields filled',
            );
          } else {
            print('OCR did not extract enough valid data');
            _licenseOcrError =
                'Could not extract complete information from the document';
            _toast(
              '⚠️ Document processed but no valid fields could be extracted. Please fill them manually.',
            );
          }
        });
      }
    } catch (e) {
      print('OCR processing error: $e');
      if (mounted) {
        setState(() {
          _isProcessingLicenseOCR = false;
          _licenseProgressTimer?.cancel();
          _licenseOcrError = 'Failed to process document: $e';
        });
        _toast('❌ OCR processing failed. Please fill the fields manually.');
      }
    }
  }

  Future<void> _processVATCertificateOCR(String filePath) async {
    try {
      print('=== CONTRACTOR VAT CERTIFICATE OCR START ===');
      print('Processing contractor VAT certificate file: $filePath');

      _startVatProgressTracking();

      // Step 1: File Loading (0-30%)
      if (mounted) {
        setState(() {
          _vatOcrCurrentStep = '📄 Loading VAT certificate...';
          _vatOcrProgress = 0.1;
          _vatEstimatedTimeLeft = 10;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 2: OCR Processing (30-70%)
      if (mounted) {
        setState(() {
          _vatOcrCurrentStep = '🔍 Extracting VAT information...';
          _vatOcrProgress = 0.4;
          _vatEstimatedTimeLeft = 7;
        });
      }

      // Process the VAT certificate document with OCR
      final vatData = await VATRegistrationOCRService.processVATRegistration(
        filePath,
      );

      // Step 3: Data Extraction (70-90%)
      if (mounted) {
        setState(() {
          _vatOcrCurrentStep = '✨ Processing extracted data...';
          _vatOcrProgress = 0.8;
          _vatEstimatedTimeLeft = 3;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 4: Complete (90-100%)
      if (mounted) {
        setState(() {
          _vatOcrProgress = 1.0;
          _vatOcrCurrentStep = '✅ Processing complete!';
          _vatEstimatedTimeLeft = 0;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      if (mounted) {
        setState(() {
          _isProcessingVatOCR = false;
          _vatProgressTimer?.cancel();

          // Auto-fill form fields if OCR extracted any valid data
          if (vatData.isValid) {
            print('VAT OCR extracted valid data, auto-filling fields...');

            int fieldsFilledCount = 0;

            // Fill VAT details
            if (vatData.companyName != null) {
              _firmNameController.text = vatData.companyName!;
              fieldsFilledCount++;
            }

            if (vatData.registeredAddress != null) {
              _vatAddressController.text = vatData.registeredAddress!;
              fieldsFilledCount++;
            }

            if (vatData.vatNumber != null) {
              _trnController.text = vatData.vatNumber!;
              fieldsFilledCount++;
            }

            if (vatData.effectiveDate != null) {
              _vatDateController.text = vatData.effectiveDate!;
              fieldsFilledCount++;
            }

            _vatOcrError = null;

            // Show appropriate success message
            if (fieldsFilledCount > 0) {
              _toast(
                '✨ VAT certificate processed! $fieldsFilledCount fields auto-filled. Please review and complete remaining fields.',
              );
            } else {
              _toast(
                '⚠️ VAT certificate processed but no fields could be extracted. Please fill them manually.',
              );
            }

            print(
              'VAT OCR auto-fill completed successfully - $fieldsFilledCount fields filled',
            );
          } else {
            print('VAT OCR did not extract enough valid data');
            _vatOcrError =
                'Could not extract VAT information from the document';
            _toast(
              '⚠️ VAT certificate processed but no valid fields could be extracted. Please fill them manually.',
            );
          }
        });
      }
    } catch (e) {
      print('VAT OCR processing error: $e');
      if (mounted) {
        setState(() {
          _isProcessingVatOCR = false;
          _vatProgressTimer?.cancel();
          _vatOcrError = 'Failed to process VAT document: $e';
        });
        _toast('❌ VAT OCR processing failed. Please fill the fields manually.');
      }
    }
  }

  Future<void> _processBankDocumentOCR(String filePath) async {
    try {
      print('=== CONTRACTOR BANK DOCUMENT OCR START ===');
      print('Processing contractor bank document file: $filePath');

      _startBankProgressTracking();

      // Step 1: File Loading (0-30%)
      if (mounted) {
        setState(() {
          _bankOcrCurrentStep = '📄 Loading bank document...';
          _bankOcrProgress = 0.1;
          _bankEstimatedTimeLeft = 8;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 2: OCR Processing (30-70%)
      if (mounted) {
        setState(() {
          _bankOcrCurrentStep = '🔍 Extracting bank information...';
          _bankOcrProgress = 0.4;
          _bankEstimatedTimeLeft = 5;
        });
      }

      // Process the bank document with OCR
      final bankData = await BankDetailsOCRService.processBankDocument(
        filePath,
      );

      // Step 3: Data Extraction (70-90%)
      if (mounted) {
        setState(() {
          _bankOcrCurrentStep = '✨ Processing extracted data...';
          _bankOcrProgress = 0.8;
          _bankEstimatedTimeLeft = 2;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 4: Complete (90-100%)
      if (mounted) {
        setState(() {
          _bankOcrProgress = 1.0;
          _bankOcrCurrentStep = '✅ Processing complete!';
          _bankEstimatedTimeLeft = 0;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      if (mounted) {
        setState(() {
          _isProcessingBankOCR = false;
          _bankProgressTimer?.cancel();

          // Auto-fill form fields if OCR extracted any valid data
          if (bankData.isValid) {
            print('Bank OCR extracted valid data, auto-filling fields...');

            int fieldsFilledCount = 0;

            // Fill bank details
            if (bankData.accountHolderName != null) {
              _accountHolderController.text = bankData.accountHolderName!;
              fieldsFilledCount++;
            }

            if (bankData.ibanNumber != null) {
              _ibanController.text = bankData.ibanNumber!;
              fieldsFilledCount++;
            }

            if (bankData.bankName != null) {
              _bankNameController.text = bankData.bankName!;
              fieldsFilledCount++;
            }

            if (bankData.branchName != null) {
              _branchNameController.text = bankData.branchName!;
              fieldsFilledCount++;
            }

            if (bankData.bankAddress != null) {
              _bankAddressController.text = bankData.bankAddress!;
              fieldsFilledCount++;
            }

            _bankOcrError = null;

            // Show appropriate success message
            if (fieldsFilledCount > 0) {
              _toast(
                '✨ Bank document processed! $fieldsFilledCount fields auto-filled. Please review and complete remaining fields.',
              );
            } else {
              _toast(
                '⚠️ Bank document processed but no fields could be extracted. Please fill them manually.',
              );
            }

            print(
              'Bank OCR auto-fill completed successfully - $fieldsFilledCount fields filled',
            );
          } else {
            print('Bank OCR did not extract enough valid data');
            _bankOcrError =
                'Could not extract bank information from the document';
            _toast(
              '⚠️ Bank document processed but no valid fields could be extracted. Please fill them manually.',
            );
          }
        });
      }
    } catch (e) {
      print('Bank OCR processing error: $e');
      if (mounted) {
        setState(() {
          _isProcessingBankOCR = false;
          _bankProgressTimer?.cancel();
          _bankOcrError = 'Failed to process bank document: $e';
        });
        _toast(
          '❌ Bank OCR processing failed. Please fill the fields manually.',
        );
      }
    }
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isSubmitting = true);
      try {
        final request = ContractorRegistrationRequest(
          contractorType: _contractorTypeController.text,
          firstName: _firstNameController.text,
          middleName: _middleNameController.text,
          lastName: _lastNameController.text,
          mobileNumber: ContractorService.formatMobileNumber(
            _mobileController.text,
          ),
          address: _addressController.text,
          area: _selectedEmirate?.code ?? '',
          emirates: _selectedEmirate?.desc ?? '',

          // Contractor Certificate
          contractorCertificate: _contractorCertificatePath ?? '',
          // Photo
          profilePhoto: _photographPath ?? '',
          // Bank
          accountHolderName: _accountHolderController.text,
          ibanNumber: ContractorService.formatIban(_ibanController.text),
          bankName: _bankNameController.text,
          branchName: _branchNameController.text,
          bankAddress: _bankAddressController.text,
          bankDocument: _bankDocumentPath ?? '',
          // VAT
          vatCertificate: _vatCertificatePath ?? '',
          firmName: _firmNameController.text,
          vatAddress: _vatAddressController.text,
          taxRegistrationNumber: ContractorService.formatTaxRegistrationNumber(
            _trnController.text,
          ),
          vatEffectiveDate: _vatDateController.text,
          // License
          licenseDocument: _licenseDocumentPath ?? '',
          licenseNumber: _licenseNumberController.text,
          issuingAuthority: _issuingAuthorityController.text,
          licenseType: _licenseTypeController.text,
          establishmentDate: _establishmentDateController.text,
          licenseExpiryDate: _licenseExpiryDateController.text,
          tradeName: _tradeNameController.text,
          responsiblePerson: _responsiblePersonController.text,
          licenseAddress: _licenseAddressController.text,
          effectiveDate: _effectiveDateController.text,
        );
        final response = await ContractorService.registerContractor(request);
        if (!mounted) return;
        setState(() => _isSubmitting = false);
        if (response.success) {
          // Set user as authenticated after successful registration
          final userData = UserData(
            emplName:
                '${_firstNameController.text} ${_lastNameController.text}',
            areaCode: _selectedEmirate?.code ?? '',
            roles: ['contractor'],
            pages: [],
            userID: _mobileController.text,
          );
          AuthManager.setUser(userData);

          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.white, size: 20),
                  const SizedBox(width: 8),
                  Expanded(child: Text('Registration successful!')),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              duration: const Duration(seconds: 2),
            ),
          );

          // Navigate to home screen after successful registration
          await Future.delayed(const Duration(seconds: 1));
          if (mounted) {
            context.go('${AppRouter.home}?newRegistration=true&role=contractor');
          }
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.error, color: Colors.white, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text('Registration failed: ${response.message}'),
                  ),
                ],
              ),
              backgroundColor: Colors.red,
              behavior: SnackBarBehavior.floating,
              duration: const Duration(seconds: 5),
            ),
          );
        }
      } catch (e) {
        if (!mounted) return;
        setState(() => _isSubmitting = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white, size: 20),
                const SizedBox(width: 8),
                Expanded(child: Text('Registration failed: $e')),
              ],
            ),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }
}





























import 'package:go_router/go_router.dart';
import 'package:flutter/material.dart';
import 'package:rak_web/features/products/screens/incentive_scheme_form.dart';
import 'package:rak_web/features/products/screens/sampling_drive_form_screen.dart';
import 'package:rak_web/features/quality_control/screens/dashboard_screen.dart';

// Import AuthManager for authentication checks
import '../services/auth_service.dart';

// Auth Screens
import '../../features/auth/screens/login_screen_with_otp.dart';
import '../../features/auth/screens/login_with_password_screen.dart';

// Registration Screens
import '../../features/registration/screens/registration_type_screen.dart';
import '../../features/registration/screens/contractor_registration_screen.dart';
import '../../features/registration/screens/painter_registration_screen.dart';
import '../../features/registration/screens/registration_details_screen.dart';
import '../../features/registration/screens/success_screen.dart';

// Retail Screens
import '../../features/retail/screens/retailer_onboarding_screen.dart';

// Product Screens
import '../../features/products/screens/new_product_entry_screen.dart';
import '../../features/products/screens/sample_distribution_entry_screen.dart';

// Quality Control Screens
import '../../features/quality_control/screens/approval_dashboard_screen.dart';

// Activity Screens
import '../../features/activity/screens/activity_entry_screen.dart';

// Common Screens (to be moved later)
import '../../screens/splash_screen.dart';
import '../../screens/home_screen.dart';
import '../../screens/contact_us_screen.dart';

import '../../screens/file_manager_screen.dart';

import '../../screens/camera_scanner_screen.dart';
import '../../screens/qr_input_screen.dart';

class AppRouter {
  static const String splash = '/';
  static const String loginPassword = '/login-password';
  static const String loginOtp = '/login-otp';
  static const String home = '/home';

  // Authentication redirect function
  static String? _handleRedirect(BuildContext context, GoRouterState state) {
    final isLoggedIn = AuthManager.isLoggedIn;
    final currentPath = state.uri.path;

    // List of public routes that don't require authentication
    final publicRoutes = [
      splash,
      loginPassword,
      loginOtp,
      registrationType,
      contractorRegistration,
      painterRegistration,
      registrationSuccess,
    ];

    // If user is not logged in and trying to access a protected route
    if (!isLoggedIn && !publicRoutes.contains(currentPath)) {
      return loginPassword;
    }

    // If user is logged in and trying to access login pages (but not splash), redirect to home
    if (isLoggedIn &&
        (currentPath == loginPassword || currentPath == loginOtp)) {
      return home;
    }

    // No redirect needed
    return null;
  }

  // Registration routes
  static const String registrationType = '/registration-type';
  static const String contractorRegistration = '/contractor-registration';
  static const String painterRegistration = '/painter-registration';
  static const String registrationDetails = '/registration-details';
  static const String registrationSuccess = '/success';
  static const String retailerRegistration = '/retailer-registration';

  // Retail routes
  static const String retailerOnboarding = '/retailer-onboarding';
  static const String retailerPlan = '/retailer-plan';
  static const String retailEntry = '/retail-entry';

  // Product routes
  static const String newProductEntry = '/new-product-entry';
  static const String sampleDistribution = '/sample-distribution';
  static const String samplingDriveForm = '/sampling-drive-form';
  static const String incentiveSchemeForm = '/incentive-scheme-form';
  static const String expertMeetClaim = '/expert-meet-claim';

  // Quality Control routes
  static const String approvalDashboard = '/approval-dashboard';
  static const String dashboard = '/dashboard';

  // Utility routes
  static const String fileManager = '/file-manager';
  static const String uploadTest = '/upload-test';
  static const String cameraScanner = '/camera-scanner';
  static const String qrInput = '/qr-input';

  // Activity routes
  static const String activityEntry = '/activity-entry';

  // Support routes
  static const String contactUs = '/contact-us';

  static final GoRouter router = GoRouter(
    initialLocation: splash,
    redirect: _handleRedirect,
    refreshListenable: AuthManager.authChangeNotifier,
    routes: [
      // Splash and Auth
      GoRoute(path: splash, builder: (context, state) => const SplashScreen()),
      GoRoute(
        path: loginPassword,
        builder: (context, state) => const LoginWithPasswordScreen(),
      ),
      GoRoute(
        path: loginOtp,
        builder: (context, state) => const LoginScreenWithOtp(),
      ),

      // Main App
      GoRoute(
        path: home,
        builder: (context, state) {
          final newRegistration = state.uri.queryParameters['newRegistration'] == 'true';
          final role = state.uri.queryParameters['role'];
          return HomeScreen(
            isNewRegistration: newRegistration,
            userRole: role,
          );
        },
      ),

      // Registration Feature
      GoRoute(
        path: registrationType,
        builder: (context, state) => const RegistrationTypeScreen(),
      ),
      GoRoute(
        path: contractorRegistration,
        builder: (context, state) => const ContractorRegistrationScreen(),
      ),
      GoRoute(
        path: painterRegistration,
        builder: (context, state) => const PainterRegistrationScreen(),
      ),
      GoRoute(
        path: '$registrationDetails/:id',
        builder: (context, state) {
          final id = state.pathParameters['id'];
          return RegistrationDetailsScreen(registrationId: id);
        },
      ),
      GoRoute(
        path: registrationSuccess,
        builder: (context, state) => const SuccessScreen(),
      ),

      // Retail Feature
      GoRoute(
        path: retailerOnboarding,
        builder: (context, state) => const RetailerOnboardingApp(),
      ),

      // Product Feature
      GoRoute(
        path: newProductEntry,
        builder: (context, state) => NewProductEntry(),
      ),
      GoRoute(
        path: sampleDistribution,
        builder: (context, state) => SampleDistributEntry(),
      ),
      GoRoute(
        path: samplingDriveForm,
        builder: (context, state) => SamplingDriveFormPage(),
      ),
      GoRoute(
        path: incentiveSchemeForm,
        builder: (context, state) => IncentiveSchemeFormPage(),
      ),

      // Quality Control Feature
      GoRoute(
        path: approvalDashboard,
        builder: (context, state) => const ApprovalDashboardScreen(),
      ),
      GoRoute(
        path: dashboard,
        builder: (context, state) => const DashboardScreen(),
      ),

      // Utilities
      GoRoute(
        path: fileManager,
        builder: (context, state) => const FileManagerScreen(),
      ),

      GoRoute(
        path: cameraScanner,
        builder: (context, state) => const CameraScannerScreen(),
      ),
      GoRoute(
        path: qrInput,
        builder: (context, state) => const QRInputScreen(),
      ),

      // Activity Feature
      GoRoute(
        path: activityEntry,
        builder: (context, state) => ActivityEntryScreen(),
      ),

      // Support Feature
      GoRoute(
        path: contactUs,
        builder: (context, state) => const ContactUsScreen(),
      ),
    ],
  );
}


























import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import 'package:rak_web/core/controllers/home_controller.dart';
import 'package:rak_web/core/di/service_locator.dart';
import 'package:rak_web/features/home/widgets/home_tab.dart';
import 'package:rak_web/core/utils/app_logger.dart';
import 'package:rak_web/core/services/auth_service.dart';
import 'package:rak_web/core/utils/user_role_utils.dart';

/// Refactored HomeScreen with clean architecture
class HomeScreen extends StatefulWidget {
  final bool isNewRegistration;
  final String? userRole;

  const HomeScreen({
    super.key,
    this.isNewRegistration = false,
    this.userRole,
  });

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  late HomeController _controller;
  late AnimationController _mainController;
  late AnimationController _navController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<double> _navScaleAnimation;
  final AppLogger _logger = AppLogger();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    _controller = homeController;
    _controller.addListener(_onControllerChanged);

    // Listen to auth changes to update profile dynamically
    AuthManager.authChangeNotifier.addListener(_onAuthChanged);

    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );
    _navController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _navScaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
      CurvedAnimation(parent: _navController, curve: Curves.elasticOut),
    );
    _mainController.forward();
    _navController.forward();
    _logger.info('HomeScreenRefactored initialized');
  }

  @override
  void dispose() {
    _controller.removeListener(_onControllerChanged);
    AuthManager.authChangeNotifier.removeListener(_onAuthChanged);
    _mainController.dispose();
    _navController.dispose();
    _logger.info('HomeScreenRefactored disposed');
    super.dispose();
  }

  void _onControllerChanged() {
    setState(() {});
  }

  void _onAuthChanged() {
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    SystemChrome.setSystemUIOverlayStyle(
      const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
      ),
    );
    return LayoutBuilder(
      builder: (context, constraints) {
        final isWeb = constraints.maxWidth > 800;
        final isTablet =
            constraints.maxWidth > 600 && constraints.maxWidth <= 800;
        final isMobile = constraints.maxWidth <= 600;
        final isDesktop = constraints.maxWidth > 1200;

        return Scaffold(
          key: _scaffoldKey,
          backgroundColor: const Color(0xFFF3F4F6),
          appBar: isWeb ? null : _buildAppBar(),
          drawer: isWeb ? null : _buildDrawerMenu(),
          body: isWeb
              ? _buildDesktopLayout(isDesktop: isDesktop)
              : _buildMobileLayout(isTablet: isTablet, isMobile: isMobile),
        );
      },
    );
  }

  Widget _buildDesktopLayout({bool isDesktop = false}) {
    return Row(
      children: [
        _buildSidebar(isDesktop: isDesktop),
        Expanded(
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(maxWidth: isDesktop ? 1200 : 1000),
              child: _buildMainContent(
                isWeb: true,
                isTablet: false,
                isMobile: false,
                isDesktop: isDesktop,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildMobileLayout({bool isTablet = false, bool isMobile = false}) {
    return Stack(
      children: [
        _buildMainContent(
          isWeb: false,
          isTablet: isTablet,
          isMobile: isMobile,
          isDesktop: false,
        ),
        _buildBottomNavigation(isWeb: false, isTablet: isTablet),
      ],
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      backgroundColor: const Color(0xFFF3F4F6),
      elevation: 0,
      toolbarHeight: 70,
      leading: Builder(
        builder: (context) => IconButton(
          onPressed: () {
            Scaffold.of(context).openDrawer();
          },
          icon: const Icon(
            Icons.menu_rounded,
            color: Color(0xFF1E3A8A),
            size: 24,
          ),
        ),
      ),
      title: Container(
        height: 50,
        margin: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(25),
          border: Border.all(color: Colors.grey.shade200, width: 1),
        ),
        child: Row(
          children: [
            const SizedBox(width: 20),
            Icon(Icons.search_rounded, color: Colors.grey[600], size: 22),
            const SizedBox(width: 12),
            Expanded(
              child: TextField(
                style: TextStyle(
                  color: Colors.grey[800],
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
                decoration: InputDecoration(
                  hintText: 'Search',
                  hintStyle: TextStyle(
                    color: Colors.grey[500],
                    fontSize: 15,
                    fontWeight: FontWeight.w400,
                  ),
                  border: InputBorder.none,
                  contentPadding: const EdgeInsets.symmetric(vertical: 15),
                ),
              ),
            ),
            Container(
              margin: const EdgeInsets.only(right: 8),
              height: 34,
              width: 34,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(17),
                color: const Color(0xFF1E3A8A).withOpacity(0.1),
              ),
              child: IconButton(
                onPressed: () {},
                padding: EdgeInsets.zero,
                icon: const Icon(
                  Icons.tune_rounded,
                  color: Color(0xFF1E3A8A),
                  size: 18,
                ),
              ),
            ),
          ],
        ),
      ),
      actions: [
        Stack(
          children: [
            IconButton(
              onPressed: () {},
              icon: const Icon(
                Icons.notifications_rounded,
                color: Color(0xFF1E3A8A),
                size: 24,
              ),
            ),
            Positioned(
              right: 8,
              top: 8,
              child: Container(
                height: 8,
                width: 8,
                decoration: BoxDecoration(
                  color: const Color(0xFFEF4444),
                  borderRadius: BorderRadius.circular(4),
                  border: Border.all(color: Colors.white, width: 1.5),
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildSidebar({bool isDesktop = false}) {
    final currentUser = AuthManager.currentUser;
    final userName = currentUser?.emplName ?? 'Guest User';
    final userArea = currentUser?.areaCode ?? 'N/A';

    return Container(
      width: isDesktop ? 280 : 240,
      decoration: const BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Color(0x0F000000),
            blurRadius: 10,
            offset: Offset(1, 0),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
            child: Column(
              children: [
                Image.asset(
                  'assets/images/rak_logo.jpg',
                  height: isDesktop ? 80 : 70,
                  width: isDesktop ? 80 : 70,
                  fit: BoxFit.contain,
                  errorBuilder: (context, error, stackTrace) => Icon(
                    Icons.business,
                    color: Colors.white,
                    size: isDesktop ? 80 : 70,
                  ),
                ),
                const SizedBox(height: 16),
                CircleAvatar(
                  radius: isDesktop ? 35 : 30,
                  backgroundColor: Colors.white,
                  child: Text(
                    userName.isNotEmpty ? userName[0].toUpperCase() : 'G',
                    style: TextStyle(
                      fontSize: isDesktop ? 28 : 24,
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF1E3A8A),
                    ),
                  ),
                ),
                const SizedBox(height: 12),
                Text(
                  userName,
                  style: TextStyle(
                    fontSize: isDesktop ? 18 : 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 4),
                Text(
                  'Area: $userArea',
                  style: TextStyle(
                    fontSize: isDesktop ? 14 : 12,
                    color: Colors.white70,
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 8),
              children: _buildDrawerItems(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDrawerMenu() {
    final currentUser = AuthManager.currentUser;
    final userName = currentUser?.emplName ?? 'Guest User';
    final userArea = currentUser?.areaCode ?? 'N/A';

    return Drawer(
      backgroundColor: Colors.white,
      width: MediaQuery.of(context).size.width * 0.75,
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
            child: SafeArea(
              bottom: false,
              child: Column(
                children: [
                  Image.asset(
                    'assets/images/rak_logo.jpg',
                    height: 80,
                    width: 80,
                    fit: BoxFit.contain,
                    errorBuilder: (context, error, stackTrace) => const Icon(
                      Icons.business,
                      color: Colors.white,
                      size: 80,
                    ),
                  ),
                  const SizedBox(height: 16),
                  CircleAvatar(
                    radius: 30,
                    backgroundColor: Colors.white,
                    child: Text(
                      userName.isNotEmpty ? userName[0].toUpperCase() : 'G',
                      style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF1E3A8A),
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    userName,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Area: $userArea',
                    style: const TextStyle(fontSize: 14, color: Colors.white70),
                  ),
                ],
              ),
            ),
          ),
          Expanded(
            child: ListView(
              padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 8),
              children: _buildDrawerItems(isMobile: true),
            ),
          ),
        ],
      ),
    );
  }

  List<Widget> _buildDrawerItems({bool isMobile = false}) {
    final isPainterOrContractor = UserRoleUtils.isPainterOrContractor();

    if (isPainterOrContractor) {
      // Simplified menu for painters and contractors
      return [
        _buildDrawerItem(
          icon: Icons.dashboard,
          title: 'Dashboard',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/dashboard');
          },
        ),
        const Divider(height: 32),
        _buildDrawerItem(
          icon: Icons.settings,
          title: 'Settings',
          onTap: () {
            if (isMobile) context.pop();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Settings - Coming Soon!')),
            );
          },
        ),
        _buildDrawerItem(
          icon: Icons.help_outline,
          title: 'Help & Support',
          onTap: () {
            if (isMobile) context.pop();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Help & Support - Coming Soon!')),
            );
          },
        ),
        _buildDrawerItem(
          icon: Icons.logout,
          title: 'Logout',
          onTap: () async {
            await AuthService.logout();
            if (context.mounted) {
              context.go('/login-password');
            }
          },
        ),
      ];
    } else {
      // Full menu for other users
      return [
        _buildDrawerItem(
          icon: Icons.dashboard,
          title: 'Dashboard',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/dashboard');
          },
        ),
        _buildDrawerItem(
          icon: Icons.format_paint,
          title: 'Painter Registration',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/painter-registration');
          },
        ),
        _buildDrawerItem(
          icon: Icons.construction,
          title: 'Contractor Registration',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/contractor-registration');
          },
        ),
        _buildDrawerItem(
          icon: Icons.approval,
          title: 'Approval Dashboard',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/approval-dashboard');
          },
        ),
        _buildDrawerItem(
          icon: Icons.storefront,
          title: 'Retailer Onboarding',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/retailer-onboarding');
          },
        ),
        _buildDrawerItem(
          icon: Icons.inventory,
          title: 'Sample Distribution Entry',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/sample-distribution');
          },
        ),
        _buildDrawerItem(
          icon: Icons.science,
          title: 'Sample Execution Entry',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/sampling-drive-form');
          },
        ),
        _buildDrawerItem(
          icon: Icons.science,
          title: 'Incentive Scheme Form',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/incentive-scheme-form');
          },
        ),
        _buildDrawerItem(
          icon: Icons.event_note,
          title: 'Activity Entry',
          onTap: () {
            if (isMobile) context.pop();
            context.push('/activity-entry');
          },
        ),
        const Divider(height: 32),
        _buildDrawerItem(
          icon: Icons.settings,
          title: 'Settings',
          onTap: () {
            if (isMobile) context.pop();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Settings - Coming Soon!')),
            );
          },
        ),
        _buildDrawerItem(
          icon: Icons.help_outline,
          title: 'Help & Support',
          onTap: () {
            if (isMobile) context.pop();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Help & Support - Coming Soon!')),
            );
          },
        ),
        _buildDrawerItem(
          icon: Icons.logout,
          title: 'Logout',
          onTap: () async {
            await AuthService.logout();
            if (context.mounted) {
              context.go('/login-password');
            }
          },
        ),
      ];
    }
  }

  Widget _buildDrawerItem({
    required IconData icon,
    required String title,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Container(
        height: 40,
        width: 40,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          color: const Color(0xFF1E3A8A).withOpacity(0.1),
        ),
        child: Icon(icon, color: const Color(0xFF1E3A8A), size: 20),
      ),
      title: Text(
        title,
        style: const TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w500,
          color: Colors.black87,
        ),
      ),
      onTap: onTap,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 4),
    );
  }

  Widget _buildMainContent({
    required bool isWeb,
    required bool isTablet,
    required bool isMobile,
    required bool isDesktop,
  }) {
    return FadeTransition(
      opacity: _fadeAnimation,
      child: SlideTransition(
        position: _slideAnimation,
        child: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Color(0xFFF8FAFC), Color(0xFFF1F5F9)],
            ),
          ),
          child: IndexedStack(
            index: _controller.currentIndex,
            children: [
              HomeTab(
                controller: _controller,
                isWeb: isWeb,
                isTablet: isTablet,
                isMobile: isMobile,
                isDesktop: isDesktop,
              ),
              _buildQRScannerTab(
                isWeb: isWeb,
                isTablet: isTablet,
                isDesktop: isDesktop,
              ),
              _buildProfileTab(
                isWeb: isWeb,
                isTablet: isTablet,
                isDesktop: isDesktop,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildQRScannerTab({
    bool isWeb = false,
    bool isTablet = false,
    bool isDesktop = false,
  }) {
    return Container(
      decoration: const BoxDecoration(color: Color(0xFFF3F4F6)),
      child: SafeArea(
        child: Padding(
          padding: EdgeInsets.all(isDesktop ? 40 : 20),
          child: Column(
            children: [
              _buildScannerHeader(isDesktop: isDesktop),
              SizedBox(height: isDesktop ? 40 : 30),
              Expanded(child: _buildScannerOptions(isDesktop: isDesktop)),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildScannerHeader({bool isDesktop = false}) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(isDesktop ? 48 : 32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(24),
        boxShadow: const [
          BoxShadow(
            color: Color(0x331E3A8A),
            blurRadius: 20,
            offset: Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            width: isDesktop ? 120 : 100,
            height: isDesktop ? 120 : 100,
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              shape: BoxShape.circle,
              boxShadow: const [
                BoxShadow(
                  color: Color(0x1A000000),
                  blurRadius: 20,
                  offset: Offset(0, 10),
                ),
              ],
            ),
            child: Icon(
              Icons.qr_code_scanner,
              size: isDesktop ? 60 : 50,
              color: Colors.white,
            ),
          ),
          SizedBox(height: isDesktop ? 32 : 24),
          Text(
            'QR Scanner',
            style: TextStyle(
              fontSize: isDesktop ? 40 : 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: isDesktop ? 16 : 12),
          Text(
            'Scan or enter QR codes for quick processing',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: isDesktop ? 20 : 16,
              color: Colors.white70,
              height: 1.5,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildScannerOptions({bool isDesktop = false}) {
    if (isDesktop) {
      return Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 800),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: _buildScannerCard(
                  'Camera Scan',
                  Icons.camera_alt,
                  const Color(0xFF10B981),
                  () => context.push('/camera-scanner'),
                ),
              ),
              const SizedBox(width: 40),
              Expanded(
                child: _buildScannerCard(
                  'Manual Entry',
                  Icons.keyboard,
                  const Color(0xFF3B82F6),
                  () => context.push('/qr-input'),
                ),
              ),
            ],
          ),
        ),
      );
    }

    return GridView.count(
      crossAxisCount: 2,
      crossAxisSpacing: 20,
      mainAxisSpacing: 20,
      childAspectRatio: 1.1,
      children: [
        _buildScannerCard(
          'Camera Scan',
          Icons.camera_alt,
          const Color(0xFF10B981),
          () => context.push('/camera-scanner'),
        ),
        _buildScannerCard(
          'Manual Entry',
          Icons.keyboard,
          const Color(0xFF3B82F6),
          () => context.push('/qr-input'),
        ),
      ],
    );
  }

  Widget _buildScannerCard(
    String title,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(24),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
          boxShadow: const [
            BoxShadow(
              color: Color(0x0D000000),
              blurRadius: 20,
              offset: Offset(0, 8),
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 70,
              height: 70,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [color, color.withOpacity(0.8)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                shape: BoxShape.circle,
                boxShadow: [
                  BoxShadow(
                    color: color.withOpacity(0.3),
                    blurRadius: 15,
                    offset: const Offset(0, 8),
                  ),
                ],
              ),
              child: Icon(icon, color: Colors.white, size: 32),
            ),
            const SizedBox(height: 20),
            Text(
              title,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Color(0xFF1F2937),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileTab({
    bool isWeb = false,
    bool isTablet = false,
    bool isDesktop = false,
  }) {
    // Get current user data from AuthManager
    final currentUser = AuthManager.currentUser;
    final userName = currentUser?.emplName ?? 'Guest User';
    final userArea = currentUser?.areaCode ?? 'N/A';
    final userID = currentUser?.userID ?? 'N/A';

    // Generate display information
    final displayRole = 'Area: $userArea';
    final displayEmail = userID.contains('@')
        ? userID
        : '$userID@rakwhitecement.ae';

    return SingleChildScrollView(
      padding: EdgeInsets.only(
        left: isDesktop ? 60 : 20,
        right: isDesktop ? 60 : 20,
        top: isDesktop ? 40 : 20,
        bottom: isWeb ? 20 : 120,
      ),
      child: Center(
        child: ConstrainedBox(
          constraints: BoxConstraints(
            maxWidth: isDesktop ? 800 : double.infinity,
          ),
          child: Column(
            children: [
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(isDesktop ? 48 : 32),
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
                  ),
                  borderRadius: BorderRadius.circular(24),
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0x331E3A8A),
                      blurRadius: 20,
                      offset: Offset(0, 10),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    CircleAvatar(
                      radius: isDesktop ? 80 : 60,
                      backgroundColor: Colors.white,
                      child: Text(
                        userName.isNotEmpty ? userName[0].toUpperCase() : 'G',
                        style: TextStyle(
                          fontSize: isDesktop ? 48 : 36,
                          fontWeight: FontWeight.bold,
                          color: const Color(0xFF1E3A8A),
                        ),
                      ),
                    ),
                    SizedBox(height: isDesktop ? 32 : 24),
                    Text(
                      userName,
                      style: TextStyle(
                        fontSize: isDesktop ? 36 : 28,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    SizedBox(height: isDesktop ? 12 : 8),
                    Text(
                      displayRole,
                      style: TextStyle(
                        fontSize: isDesktop ? 20 : 16,
                        color: Colors.white70,
                      ),
                    ),
                    SizedBox(height: isDesktop ? 12 : 8),
                    Text(
                      displayEmail,
                      style: TextStyle(
                        fontSize: isDesktop ? 20 : 16,
                        color: Colors.white70,
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: isDesktop ? 48 : 32),
              // User Information Section
              _buildProfileSection('User Information', [
                _buildInfoItem(
                  'Employee Name',
                  userName,
                  Icons.badge,
                  const Color(0xFF3B82F6),
                ),
                const SizedBox(height: 16),
                _buildInfoItem(
                  'Area Code',
                  userArea,
                  Icons.location_on,
                  const Color(0xFF10B981),
                ),
                const SizedBox(height: 16),
                _buildInfoItem(
                  'User ID',
                  userID,
                  Icons.account_circle,
                  const Color(0xFF8B5CF6),
                ),
              ]),
              SizedBox(height: isDesktop ? 48 : 32),
              _buildProfileSection('Account Settings', [
                _buildProfileOption(
                  'Personal Information',
                  Icons.person,
                  const Color(0xFF3B82F6),
                  () => context.push('/profile'),
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'Security',
                  Icons.security,
                  const Color(0xFF10B981),
                  () {},
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'Notifications',
                  Icons.notifications,
                  const Color(0xFFF59E0B),
                  () {},
                ),
              ]),
              SizedBox(height: isDesktop ? 48 : 32),
              _buildProfileSection('Support', [
                _buildProfileOption(
                  'Help Center',
                  Icons.help,
                  const Color(0xFF60A5FA),
                  () {},
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'Contact Us',
                  Icons.contact_support,
                  const Color(0xFF1E3A8A),
                  () => context.push('/contact-us'),
                ),
                const SizedBox(height: 16),
                _buildProfileOption(
                  'About',
                  Icons.info,
                  const Color(0xFF6B7280),
                  () {},
                ),
              ]),
              SizedBox(height: isDesktop ? 48 : 32),
              SizedBox(
                width: double.infinity,
                height: isDesktop ? 64 : 56,
                child: ElevatedButton.icon(
                  onPressed: () async {
                    await AuthService.logout();
                    if (context.mounted) {
                      context.go('/login-password');
                    }
                  },
                  icon: const Icon(Icons.logout),
                  label: const Text('Logout'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFFEF4444),
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    elevation: 0,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileSection(String title, List<Widget> children) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF1F2937),
          ),
        ),
        const SizedBox(height: 16),
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: const [
              BoxShadow(
                color: Color(0x0D000000),
                blurRadius: 10,
                offset: Offset(0, 4),
              ),
            ],
          ),
          child: Column(children: children),
        ),
      ],
    );
  }

  Widget _buildInfoItem(
    String label,
    String value,
    IconData icon,
    Color color,
  ) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        children: [
          Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(icon, color: color, size: 24),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: const TextStyle(
                    fontSize: 14,
                    color: Color(0xFF6B7280),
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  value,
                  style: const TextStyle(
                    fontSize: 16,
                    color: Color(0xFF1F2937),
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProfileOption(
    String title,
    IconData icon,
    Color color,
    VoidCallback onTap,
  ) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(16),
        ),
        child: Row(
          children: [
            Container(
              width: 48,
              height: 48,
              decoration: BoxDecoration(
                color: color.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(icon, color: color, size: 24),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                title,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                  color: Color(0xFF1F2937),
                ),
              ),
            ),
            const Icon(Icons.chevron_right, color: Color(0xFF6B7280)),
          ],
        ),
      ),
    );
  }

  Widget _buildBottomNavigation({bool isWeb = false, bool isTablet = false}) {
    if (isWeb) {
      return Positioned(
        top: 0,
        left: 0,
        right: 0,
        child: Container(
          height: 70,
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.white.withOpacity(0.95),
                Colors.white.withOpacity(0.85),
              ],
            ),
            boxShadow: const [
              BoxShadow(
                color: Color(0x191E3A8A),
                blurRadius: 30,
                offset: Offset(0, 8),
              ),
            ],
          ),
          child: SafeArea(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 8),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 8,
                    ),
                    child: Row(
                      children: [
                        Container(
                          width: 40,
                          height: 40,
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [
                                const Color(0xFF1E3A8A).withOpacity(0.2),
                                const Color(0xFF1E3A8A).withOpacity(0.1),
                              ],
                            ),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Icon(
                            Icons.business,
                            color: Color(0xFF1E3A8A),
                            size: 24,
                          ),
                        ),
                        const SizedBox(width: 12),
                        const Text(
                          'RAK White Cement',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF1E3A8A),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const Spacer(),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.7),
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: Colors.white.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Row(
                      children: [
                        _buildWebNavItem(
                          0,
                          Icons.home_rounded,
                          'Home',
                          const Color(0xFF1E3A8A),
                        ),
                        const SizedBox(width: 8),
                        _buildWebNavItem(
                          1,
                          Icons.qr_code_scanner_rounded,
                          'Scan',
                          const Color(0xFF3B82F6),
                        ),
                        const SizedBox(width: 8),
                        _buildWebNavItem(
                          2,
                          Icons.person_rounded,
                          'Profile',
                          const Color(0xFF6B7280),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      );
    }
    return Positioned(
      bottom: 4,
      left: 20,
      right: 20,
      child: Container(
        height: 75,
        margin: EdgeInsets.zero,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Colors.white.withOpacity(0.95),
              Colors.white.withOpacity(0.85),
              Colors.white.withOpacity(0.9),
            ],
          ),
          borderRadius: BorderRadius.circular(25),
          border: Border.all(color: Colors.white.withOpacity(0.3), width: 1.5),
          boxShadow: const [
            BoxShadow(
              color: Color(0x331E3A8A),
              blurRadius: 25,
              offset: Offset(0, 8),
            ),
          ],
        ),
        child: SafeArea(
          top: false,
          child: Padding(
            padding: EdgeInsets.symmetric(
              horizontal: isTablet ? 24.0 : 16.0,
              vertical: isTablet ? 12.0 : 10.0,
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildNavItem(
                  0,
                  Icons.home_rounded,
                  'Home',
                  const Color(0xFF1E3A8A),
                  isTablet: isTablet,
                ),
                _buildNavItem(
                  1,
                  Icons.qr_code_scanner_rounded,
                  'Scan',
                  const Color(0xFF3B82F6),
                  isTablet: isTablet,
                ),
                _buildNavItem(
                  2,
                  Icons.person_rounded,
                  'Profile',
                  const Color(0xFF6B7280),
                  isTablet: isTablet,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildWebNavItem(int index, IconData icon, String label, Color color) {
    final isSelected = _controller.currentIndex == index;
    return GestureDetector(
      onTap: () {
        HapticFeedback.mediumImpact();
        if (index == 1) {
          // Scan button
          context.push('/camera-scanner');
        } else {
          _controller.setCurrentIndex(index);
          _navController.reset();
          _navController.forward();
        }
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 400),
        padding: EdgeInsets.symmetric(
          horizontal: 16 + (4 * (isSelected ? 1 : 0)),
          vertical: 8 + (2 * (isSelected ? 1 : 0)),
        ),
        decoration: BoxDecoration(
          gradient: isSelected
              ? LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [color.withOpacity(0.2), color.withOpacity(0.1)],
                )
              : null,
          borderRadius: BorderRadius.circular(12 + (4 * (isSelected ? 1 : 0))),
          border: Border.all(
            color: isSelected ? color.withOpacity(0.4) : Colors.transparent,
            width: 1 + (isSelected ? 1 : 0),
          ),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 20 + (2 * (isSelected ? 1 : 0)),
              color: Color.lerp(
                const Color(0xFF6B7280),
                color,
                isSelected ? 1 : 0,
              ),
            ),
            const SizedBox(width: 8),
            Text(
              label,
              style: TextStyle(
                fontSize: 16 + (isSelected ? 1 : 0),
                fontWeight: FontWeight.lerp(
                  FontWeight.w500,
                  FontWeight.w600,
                  isSelected ? 1 : 0,
                ),
                color: Color.lerp(
                  const Color(0xFF6B7280),
                  color,
                  isSelected ? 1 : 0,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNavItem(
    int index,
    IconData icon,
    String label,
    Color color, {
    bool isTablet = false,
  }) {
    final isSelected = _controller.currentIndex == index;
    final iconSize = isTablet
        ? (44.0 + (16.0 * (isSelected ? 1 : 0)))
        : (40.0 + (16.0 * (isSelected ? 1 : 0)));
    final iconInnerSize = isTablet
        ? (26.0 + (4.0 * (isSelected ? 1 : 0)))
        : (24.0 + (4.0 * (isSelected ? 1 : 0)));
    final fontSize = isTablet
        ? (12.0 + (2.0 * (isSelected ? 1 : 0)))
        : (10.0 + (2.0 * (isSelected ? 1 : 0)));
    return Expanded(
      child: GestureDetector(
        onTapDown: (_) => HapticFeedback.lightImpact(),
        onTap: () {
          HapticFeedback.heavyImpact();
          if (index == 1) {
            // Scan button
            context.push('/camera-scanner');
          } else {
            _controller.setCurrentIndex(index);
            _navController.reset();
            _navController.forward();
          }
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            AnimatedContainer(
              duration: const Duration(milliseconds: 600),
              width: iconSize,
              height: iconSize,
              decoration: BoxDecoration(
                gradient: isSelected
                    ? LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [
                          color.withOpacity(0.9),
                          color.withOpacity(0.7),
                          color.withOpacity(0.9),
                        ],
                      )
                    : LinearGradient(
                        colors: [
                          Colors.white.withOpacity(0.1),
                          Colors.white.withOpacity(0.05),
                        ],
                      ),
                borderRadius: BorderRadius.circular(iconSize / 2),
                border: Border.all(
                  color: isSelected
                      ? color.withOpacity(0.3)
                      : Colors.white.withOpacity(0.2),
                  width: isSelected ? 2 : 1,
                ),
                boxShadow: isSelected
                    ? [
                        BoxShadow(
                          color: color.withOpacity(0.4),
                          blurRadius: 20,
                          offset: const Offset(0, 8),
                        ),
                      ]
                    : [
                        const BoxShadow(
                          color: Color(0x1A000000),
                          blurRadius: 8,
                          offset: Offset(0, 4),
                        ),
                      ],
              ),
              child: Icon(
                icon,
                size: iconInnerSize,
                color: isSelected
                    ? Colors.white
                    : const Color(0xFF6B7280).withOpacity(0.7),
              ),
            ),
            SizedBox(height: isTablet ? 8 : 6),
            AnimatedDefaultTextStyle(
              duration: const Duration(milliseconds: 400),
              style: TextStyle(
                fontSize: fontSize,
                fontWeight: FontWeight.lerp(
                  FontWeight.w400,
                  FontWeight.w700,
                  isSelected ? 1 : 0,
                ),
                color: Color.lerp(
                  const Color(0xFF6B7280).withOpacity(0.6),
                  color,
                  isSelected ? 1 : 0,
                ),
              ),
              child: Text(label),
            ),
          ],
        ),
      ),
    );
  }
}


























import 'package:flutter/material.dart';
import 'dart:math' as math;

class CongratulationsDialog extends StatefulWidget {
  final String userRole;
  final VoidCallback? onClose;

  const CongratulationsDialog({
    super.key,
    required this.userRole,
    this.onClose,
  });

  @override
  State<CongratulationsDialog> createState() => _CongratulationsDialogState();
}

class _CongratulationsDialogState extends State<CongratulationsDialog>
    with TickerProviderStateMixin {
  late AnimationController _scaleController;
  late AnimationController _confettiController;
  late AnimationController _pointsController;
  late Animation<double> _scaleAnimation;
  late Animation<double> _fadeAnimation;
  late Animation<int> _pointsAnimation;

  @override
  void initState() {
    super.initState();

    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );

    _confettiController = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );

    _pointsController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    _scaleAnimation = CurvedAnimation(
      parent: _scaleController,
      curve: Curves.elasticOut,
    );

    _fadeAnimation = CurvedAnimation(
      parent: _scaleController,
      curve: Curves.easeIn,
    );

    final points = _getPoints();
    _pointsAnimation = IntTween(begin: 0, end: points).animate(
      CurvedAnimation(
        parent: _pointsController,
        curve: Curves.easeOutCubic,
      ),
    );

    _scaleController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      _confettiController.forward();
      _pointsController.forward();
    });
  }

  @override
  void dispose() {
    _scaleController.dispose();
    _confettiController.dispose();
    _pointsController.dispose();
    super.dispose();
  }

  int _getPoints() {
    return widget.userRole.toLowerCase() == 'painter' ? 100 : 250;
  }

  String _getRoleName() {
    return widget.userRole.toLowerCase() == 'painter' ? 'Painter' : 'Contractor';
  }

  @override
  Widget build(BuildContext context) {
    final points = _getPoints();
    final roleName = _getRoleName();

    return Dialog(
      backgroundColor: Colors.transparent,
      child: ScaleTransition(
        scale: _scaleAnimation,
        child: Container(
          constraints: const BoxConstraints(maxWidth: 400),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Color(0xFFFFFFFF),
                Color(0xFFF8F9FA),
              ],
            ),
            borderRadius: BorderRadius.circular(24),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.15),
                blurRadius: 30,
                offset: const Offset(0, 10),
              ),
            ],
          ),
          child: Stack(
            children: [
              // Confetti effect
              AnimatedBuilder(
                animation: _confettiController,
                builder: (context, child) {
                  return CustomPaint(
                    painter: ConfettiPainter(
                      animation: _confettiController.value,
                    ),
                    size: Size.infinite,
                  );
                },
              ),
              // Content
              Padding(
                padding: const EdgeInsets.all(32),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // Trophy icon
                    FadeTransition(
                      opacity: _fadeAnimation,
                      child: Container(
                        width: 100,
                        height: 100,
                        decoration: BoxDecoration(
                          gradient: const LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: [
                              Color(0xFFFFD700),
                              Color(0xFFFFA500),
                            ],
                          ),
                          shape: BoxShape.circle,
                          boxShadow: [
                            BoxShadow(
                              color: const Color(0xFFFFD700).withOpacity(0.3),
                              blurRadius: 20,
                              offset: const Offset(0, 5),
                            ),
                          ],
                        ),
                        child: const Icon(
                          Icons.emoji_events,
                          size: 60,
                          color: Colors.white,
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    // Congratulations text
                    FadeTransition(
                      opacity: _fadeAnimation,
                      child: const Text(
                        'Congratulations! 🎉',
                        style: TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1E3A8A),
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    const SizedBox(height: 16),
                    // Success message
                    FadeTransition(
                      opacity: _fadeAnimation,
                      child: Text(
                        'Welcome as a $roleName!',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.grey[700],
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    const SizedBox(height: 8),
                    FadeTransition(
                      opacity: _fadeAnimation,
                      child: Text(
                        'Your registration was successful',
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey[600],
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    const SizedBox(height: 32),
                    // Points earned
                    AnimatedBuilder(
                      animation: _pointsAnimation,
                      builder: (context, child) {
                        return Container(
                          padding: const EdgeInsets.symmetric(
                            horizontal: 24,
                            vertical: 16,
                          ),
                          decoration: BoxDecoration(
                            gradient: const LinearGradient(
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                              colors: [
                                Color(0xFF3B82F6),
                                Color(0xFF1E3A8A),
                              ],
                            ),
                            borderRadius: BorderRadius.circular(16),
                            boxShadow: [
                              BoxShadow(
                                color: const Color(0xFF3B82F6).withOpacity(0.3),
                                blurRadius: 15,
                                offset: const Offset(0, 5),
                              ),
                            ],
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              const Icon(
                                Icons.stars_rounded,
                                color: Color(0xFFFFD700),
                                size: 32,
                              ),
                              const SizedBox(width: 12),
                              Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  const Text(
                                    'You\'ve Earned',
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: Colors.white70,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                  const SizedBox(height: 2),
                                  Text(
                                    '${_pointsAnimation.value} Points',
                                    style: const TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                    const SizedBox(height: 32),
                    // Close button
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.of(context).pop();
                          widget.onClose?.call();
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF1E3A8A),
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          elevation: 0,
                        ),
                        child: const Text(
                          'Get Started',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Custom painter for confetti effect
class ConfettiPainter extends CustomPainter {
  final double animation;

  ConfettiPainter({required this.animation});

  @override
  void paint(Canvas canvas, Size size) {
    final random = math.Random(42); // Fixed seed for consistent animation
    final paint = Paint()..style = PaintingStyle.fill;

    for (int i = 0; i < 50; i++) {
      final x = random.nextDouble() * size.width;
      final startY = -20.0;
      final endY = size.height + 20;
      final y = startY + (endY - startY) * animation;
      final rotation = random.nextDouble() * 2 * math.pi * animation;
      final confettiSize = 4.0 + random.nextDouble() * 4;

      final colors = [
        const Color(0xFFFFD700),
        const Color(0xFF3B82F6),
        const Color(0xFFEF4444),
        const Color(0xFF10B981),
        const Color(0xFF8B5CF6),
      ];
      paint.color = colors[random.nextInt(colors.length)]
          .withOpacity(1 - animation * 0.5);

      canvas.save();
      canvas.translate(x, y);
      canvas.rotate(rotation);
      canvas.drawRect(
        Rect.fromCenter(center: Offset.zero, width: confettiSize, height: confettiSize * 2),
        paint,
      );
      canvas.restore();
    }
  }

  @override
  bool shouldRepaint(ConfettiPainter oldDelegate) {
    return animation != oldDelegate.animation;
  }
}



























