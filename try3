// Controllers/MobileTokenSubmitController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/token")]
    public class MobileTokenSubmitController : ControllerBase
    {
        private readonly IConfiguration _cfg;
        private readonly ILogger<MobileTokenSubmitController> _log;

        public MobileTokenSubmitController(IConfiguration cfg, ILogger<MobileTokenSubmitController> log)
        {
            _cfg = cfg;
            _log = log;
        }

        // Submit endpoint tailored to the JSP flow (TokenRecd submit for mobile)
        // Mirrors SQL and branching from the JSP you shared.
        [HttpPost("submit")]
        public async Task<ActionResult<MobileSubmitResponse>> SubmitAsync(
            [FromBody] MobileSubmitRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.TokenNums == null || req.TokenNums.Count == 0)
                return BadRequest(new { message = "No tokens to submit." });

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);
            await using var tx = (SqlTransaction)await con.BeginTransactionAsync(ct);

            try
            {
                // ---- 1) Generate docuNumb (JSP: WebSessBean.getDocumentNo("TKN", areaCode))
                var docuNumb = string.IsNullOrWhiteSpace(req.DocuNumb)
                    ? $"TKN-{req.AreaCode}-{DateTime.UtcNow:yyyyMMddHHmmss}-{Random.Shared.Next(1000, 9999)}"
                    : req.DocuNumb!.Trim();

                // (Optional) Tie a client-side unique id to doc number (JSP uses dptTknTestg/dptTknTestg)
                if (!string.IsNullOrWhiteSpace(req.UniqueId))
                {
                    try
                    {
                        await using var mark = new SqlCommand(@"
IF OBJECT_ID(N'dbo.dptTknTestg', N'U') IS NOT NULL
    UPDATE dbo.dptTknTestg
       SET docuNumb = @doc, updateDt = GETDATE()
     WHERE uniqueId = @uid AND createDt > DATEADD(day, -1, GETDATE());",
                            con, tx);
                        mark.Parameters.AddWithValue("@doc", docuNumb);
                        mark.Parameters.AddWithValue("@uid", req.UniqueId!);
                        await mark.ExecuteNonQueryAsync(ct);
                    }
                    catch { /* non-blocking */ }
                }

                // ---- 2) Insert header stub (JSP inserts header around this phase, then updates totals)
                await using (var hdr = new SqlCommand(@"
INSERT INTO cdtTokenRec
 (docuNumb, docuDate, tokenTyp, cdnDocTy, custCode, prodCode,
  recptQty, basTknAm, handAmnt, scnDedAm, payblAmt,
  statFlag, createId, createDt)
VALUES
 (@doc, CONVERT(date, GETDATE()), 'BC', 'CRN', @cust, 0,
  0, 0, 0, 0, 0, 'A', @login, GETDATE());", con, tx))
                {
                    hdr.Parameters.AddWithValue("@doc", docuNumb);
                    hdr.Parameters.AddWithValue("@cust", req.CustCode);
                    hdr.Parameters.AddWithValue("@login", req.LoginId);
                    await hdr.ExecuteNonQueryAsync(ct);
                }

                // ---- 3) Walk tokens (JSP loop)
                int rightEnt = 0, already = 0, expired = 0, invalid = 0;
                int prodCodeHdr = 0;
                decimal basTknAm = 0, handAmnt = 0, scnDedAm = 0, payblAmt = 0;

                var perToken = new List<TokenSubmitResult>();

                foreach (var rawToken in req.TokenNums)
                {
                    var token = (rawToken ?? "").Trim();
                    if (token.Length == 0)
                        continue;

                    // For parity with JSP, capture test log if table exists
                    try
                    {
                        await using var insTest = new SqlCommand(@"
IF OBJECT_ID(N'dbo.dpmTknTestg', N'U') IS NOT NULL
    INSERT INTO dbo.dpmTknTestg
        (docuNumb, tokenNum, mobileNo, inflName, inflCode, createId, createDt)
    VALUES
        (@doc, @tok, @mob, @inflName, @inflCode, @login, GETDATE());",
                            con, tx);
                        insTest.Parameters.AddWithValue("@doc", docuNumb);
                        insTest.Parameters.AddWithValue("@tok", token);
                        insTest.Parameters.AddWithValue("@mob", req.MobileNo ?? "9999999999");
                        insTest.Parameters.AddWithValue("@inflName", req.InflName ?? "Anhuit");
                        insTest.Parameters.AddWithValue("@inflCode", req.InflCode ?? "INF00000");
                        insTest.Parameters.AddWithValue("@login", req.LoginId);
                        await insTest.ExecuteNonQueryAsync(ct);
                    }
                    catch { /* best-effort */ }

                    // Call SP exactly like JSP: exec bwlive.dbo.dppToknProc 'jav01', @token, 0
                    string bcTknTyp = "", dbActSts = "", exprFlag = "N";
                    int prodCode = 0;
                    decimal tokenVal = 0, handRate = 0, scnrDdRt = 0, tokEndVl = 0;

                    try
                    {
                        const string execSql = "EXEC bwlive.dbo.dppToknProc @p1, @p2, @p3;";
                        await using var sp = new SqlCommand(execSql, con, tx) { CommandType = CommandType.Text };
                        sp.Parameters.AddWithValue("@p1", "jav01");
                        sp.Parameters.AddWithValue("@p2", token);
                        sp.Parameters.AddWithValue("@p3", 0);

                        await using var r = await sp.ExecuteReaderAsync(ct);
                        if (await r.ReadAsync(ct))
                        {
                            bcTknTyp = r.IsDBNull(0) ? "" : r.GetString(0);
                            tokenVal = SafeDec(r, 1);
                            handRate = SafeDec(r, 2);
                            scnrDdRt = SafeDec(r, 3);
                            tokEndVl = SafeDec(r, 4);
                            prodCode = r.IsDBNull(5) ? 0 : r.GetInt32(5);
                            // 6: updateId (not used for server decision)
                            dbActSts = r.IsDBNull(7) ? "" : r.GetString(7);
                            exprFlag = r.IsDBNull(8) ? "N" : r.GetString(8);
                        }
                    }
                    catch (Exception ex)
                    {
                        _log.LogError(ex, "SP dppToknProc failed for token {Token}", token);
                        exprFlag = "N"; // JSP continues; we’ll handle as invalid below
                    }

                    // Multi-scan window check (JSP only when not expired)
                    string scnMlStt = "";
                    int scnMlCnt = 0, scnMlAlw = 0;
                    string updIdMlt = "";

                    if (!string.Equals(exprFlag, "Y", StringComparison.OrdinalIgnoreCase))
                    {
                        await using var ms = new SqlCommand(@"
SELECT TOP 1 isActive, scnMlCnt, scnMlAlw, ISNULL(updateId,'')
FROM dbo.dpmToknMlSc WITH (NOLOCK)
WHERE tokenNum = @tok AND isActive='Y' AND scnMlCnt < scnMlAlw;", con, tx);
                        ms.Parameters.AddWithValue("@tok", token);
                        await using var r = await ms.ExecuteReaderAsync(ct);
                        if (await r.ReadAsync(ct))
                        {
                            scnMlStt = r.IsDBNull(0) ? "" : r.GetString(0);
                            scnMlCnt = r.IsDBNull(1) ? 0 : r.GetInt32(1);
                            scnMlAlw = r.IsDBNull(2) ? 0 : r.GetInt32(2);
                            updIdMlt = r.IsDBNull(3) ? "" : r.GetString(3);
                        }
                    }

                    // Master consume update — same predicate as JSP (area-sensitive validity)
                    // IMPORTANT: JSP changes the WHERE isActive depending on multi-scan count.
                    int upCnt = 0;
                    if (!string.Equals(exprFlag, "Y", StringComparison.OrdinalIgnoreCase))
                    {
                        await using var up = new SqlCommand(@"
UPDATE dbo.dpmTokenNos
   SET isActive = 'Z', updateId = @login, updateDt = GETDATE()
 WHERE tokenNum = @tok
   AND (CASE WHEN GETDATE() > dbo.dpfTknValDt(@bc, @area)
             THEN CAST(DATEDIFF(day, printgDt, GETDATE()) AS smallint)
             ELSE 1 END)
       <= validDay + dbo.dpfTknValDy(@bc, @area)
   AND isActive = @isa;", con, tx);
                        up.Parameters.AddWithValue("@login", req.LoginId);
                        up.Parameters.AddWithValue("@tok", token);
                        up.Parameters.AddWithValue("@bc", bcTknTyp);
                        up.Parameters.AddWithValue("@area", req.AreaCode);
                        // If first scan -> expect 'Y'; if multi-scan path -> expect 'Z'
                        up.Parameters.AddWithValue("@isa", scnMlCnt == 0 ? "Y" : "Z");
                        upCnt = await up.ExecuteNonQueryAsync(ct);
                    }

                    // If master moved or multi-scan allowance present, count as Right (if prod set)
                    string tokenVld;
                    if (exprFlag == "Y")
                    {
                        tokenVld = "N";
                        expired++;
                    }
                    else if (upCnt > 0 || !string.IsNullOrEmpty(scnMlStt))
                    {
                        if (prodCode > 0)
                        {
                            basTknAm += tokenVal;
                            handAmnt += handRate;
                            scnDedAm += scnrDdRt;
                            payblAmt += tokEndVl;
                            prodCodeHdr = prodCode;
                            tokenVld = "Y";
                            rightEnt++;

                            // bump multi-scan counter if that path is active
                            if (!string.IsNullOrEmpty(scnMlStt))
                            {
                                await using var up2 = new SqlCommand(@"
UPDATE dbo.dpmToknMlSc
   SET scnMlCnt = scnMlCnt + 1,
       isActive = CASE WHEN scnMlCnt + 1 >= scnMlAlw THEN 'Z' ELSE 'Y' END,
       updateId = @login, updateDt = GETDATE()
 WHERE tokenNum = @tok AND isActive='Y';", con, tx);
                                up2.Parameters.AddWithValue("@login", req.LoginId);
                                up2.Parameters.AddWithValue("@tok", token);
                                var m = await up2.ExecuteNonQueryAsync(ct);
                                if (m <= 0)
                                    throw new Exception($"Multi-scan status not updated for token {token}");
                            }
                        }
                        else
                        {
                            // prod not configured -> JSP throws; we’ll flag invalid
                            tokenVld = "N";
                            invalid++;
                            _log.LogWarning("Token {Token} has no prodCode from SP; treated as invalid.", token);
                        }
                    }
                    else
                    {
                        // Decide between 'already scanned' vs 'wrong'
                        var exists = 0;
                        await using (var exq = new SqlCommand(@"
SELECT TOP 1 1
FROM dbo.dpmTokenNos WITH (NOLOCK)
WHERE tokenNum=@tok AND isActive IN ('Z','X','Y')
UNION ALL
SELECT TOP 1 1
FROM dbo.dpaTokenNos WITH (NOLOCK)
WHERE tokenNum=@tok AND isActive IN ('Z','X','Y');", con, tx))
                        {
                            exq.Parameters.AddWithValue("@tok", token);
                            var o = await exq.ExecuteScalarAsync(ct);
                            exists = (o is int i) ? i : 0;
                        }

                        if (exists == 1)
                            already++;
                        else
                            invalid++;

                        tokenVld = "N";
                    }

                    // Detail row (always), as in JSP
                    await using (var det = new SqlCommand(@"
INSERT INTO dptTokenRecDtl
 (docuNumb, tokenNum, tokenVld, exprFlag, toknStat, bcTknTyp,
  tokenVal, handRate, tokEndVl, prodCode, inflCode, statFlag,
  createId, createDt)
VALUES
 (@doc, @tok, @vld, @expr, @stat, @typ,
  @tval, @hr, @endv, @prod, @infl, 'A',
  @login, GETDATE());", con, tx))
                    {
                        det.Parameters.AddWithValue("@doc", docuNumb);
                        det.Parameters.AddWithValue("@tok", token);
                        det.Parameters.AddWithValue("@vld", tokenVld);
                        det.Parameters.AddWithValue("@expr", exprFlag);
                        det.Parameters.AddWithValue("@stat", dbActSts);
                        det.Parameters.AddWithValue("@typ", bcTknTyp);
                        det.Parameters.AddWithValue("@tval", tokenVal);
                        det.Parameters.AddWithValue("@hr", handRate);
                        det.Parameters.AddWithValue("@endv", tokEndVl);
                        det.Parameters.AddWithValue("@prod", prodCode);
                        det.Parameters.AddWithValue("@infl", req.InflCode ?? "INF00000");
                        det.Parameters.AddWithValue("@login", req.LoginId);
                        await det.ExecuteNonQueryAsync(ct);
                    }

                    perToken.Add(new TokenSubmitResult
                    {
                        TokenNum = token,
                        Valid = tokenVld == "Y",
                        Already = tokenVld != "Y" && already > 0,   // coarse flag per run
                        Expired = exprFlag == "Y",
                        ProdCode = prodCode,
                        Value = tokEndVl
                    });
                }

                // JSP subtracts scanner deduction from payable after loop
                payblAmt -= scnDedAm;

                // ---- 4) Update header totals
                await using (var updHdr = new SqlCommand(@"
UPDATE cdtTokenRec
   SET recptQty = @qty,
       basTknAm = @bas,
       handAmnt = @hand,
       scnDedAm = @scn,
       payblAmt = @pay,
       prodCode = @prod,
       updateId = @login,
       updateDt = GETDATE()
 WHERE docuNumb = @doc;", con, tx))
                {
                    updHdr.Parameters.AddWithValue("@qty", rightEnt);
                    updHdr.Parameters.AddWithValue("@bas", basTknAm);
                    updHdr.Parameters.AddWithValue("@hand", handAmnt);
                    updHdr.Parameters.AddWithValue("@scn", scnDedAm);
                    updHdr.Parameters.AddWithValue("@pay", payblAmt);
                    updHdr.Parameters.AddWithValue("@prod", prodCodeHdr);
                    updHdr.Parameters.AddWithValue("@login", req.LoginId);
                    updHdr.Parameters.AddWithValue("@doc", docuNumb);
                    var j = await updHdr.ExecuteNonQueryAsync(ct);
                    if (j < 1) throw new Exception("Header not found to update.");
                }

                // ---- 5) Scanner deduction ledger (optional; JSP does when scnDedAm > 0)
                if (scnDedAm > 0)
                {
                    try
                    {
                        await using var ins = new SqlCommand(@"
IF OBJECT_ID(N'dbo.dptToknScnrDtl', N'U') IS NOT NULL
BEGIN
    INSERT INTO dptToknScnrDtl
      (docuNumb, docuDate, userCode, docuNarr, vouDrAmt, vouCrAmt,
       statFlag, createId, createDt)
    VALUES
      (@doc, CONVERT(date, GETDATE()), @cust,
       'Dedc. against Scanner Issued', 0, @cr,
       'N', @login, GETDATE());
END", con, tx);
                        ins.Parameters.AddWithValue("@doc", docuNumb);
                        ins.Parameters.AddWithValue("@cust", req.CustCode);
                        ins.Parameters.AddWithValue("@cr", scnDedAm);
                        ins.Parameters.AddWithValue("@login", req.LoginId);
                        await ins.ExecuteNonQueryAsync(ct);
                    }
                    catch (Exception ex)
                    {
                        _log.LogWarning(ex, "Scanner deduction insert skipped.");
                    }
                }

                await tx.CommitAsync(ct);

                var resp = new MobileSubmitResponse
                {
                    DocuNumb = docuNumb,
                    AreaCode = req.AreaCode,
                    CustCode = req.CustCode,
                    Right = rightEnt,
                    Already = already,
                    Expired = expired,
                    Invalid = invalid,
                    BasTknAm = basTknAm,
                    HandAmnt = handAmnt,
                    ScnDedAm = scnDedAm,
                    PayblAmt = payblAmt,
                    Tokens = perToken,
                    Message =
                        $"Batch {docuNumb}: Right={rightEnt}, Already={already}, Expired={expired}, Invalid={invalid}, Payable={payblAmt:0.##}"
                };

                return Ok(resp);
            }
            catch (Exception ex)
            {
                try { await tx.RollbackAsync(ct); } catch { /* ignore */ }
                _log.LogError(ex, "Mobile submit failed for cust {Cust}", req.CustCode);
                return Problem("Could not save tokens. Transaction rolled back.");
            }
        }

        // ===== helpers =====
        private static decimal SafeDec(IDataRecord r, int i)
        {
            if (r.IsDBNull(i)) return 0m;
            var v = r.GetValue(i);
            return v switch
            {
                decimal d => d,
                double dd => Convert.ToDecimal(dd),
                float ff => Convert.ToDecimal(ff),
                _ => Convert.ToDecimal(v)
            };
        }
    }

    // ===== DTOs (aligned to fields used in the JSP submit) =====

    public sealed class MobileSubmitRequest
    {
        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;     // JSP: areaCode

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;     // JSP: custCode

        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;      // JSP: loginIdM

        [StringLength(40)]
        public string? DocuNumb { get; set; }               // optional (JSP sometimes generates)

        [StringLength(64)]
        public string? UniqueId { get; set; }               // JSP: randNumb (used to tie client & server)

        [StringLength(1)]
        public string? UserType { get; set; }               // JSP: userType (R/C/I) – not strictly needed here

        [StringLength(16)]
        public string? InflCode { get; set; }               // defaults to INF00000 (JSP default)

        [StringLength(40)]
        public string? InflName { get; set; }               // defaults “Anhuit” in JSP test log

        [StringLength(16)]
        public string? MobileNo { get; set; }               // for test log parity

        [Required]
        public List<string> TokenNums { get; set; } = new(); // JSP: tokenNmL (comma) → we use structured list
    }

    public sealed class TokenSubmitResult
    {
        public string TokenNum { get; set; } = "";
        public bool Valid { get; set; }
        public bool Expired { get; set; }
        public bool Already { get; set; }
        public int ProdCode { get; set; }
        public decimal Value { get; set; }
    }

    public sealed class MobileSubmitResponse
    {
        public string DocuNumb { get; set; } = "";
        public string AreaCode { get; set; } = "";
        public string CustCode { get; set; } = "";

        public int Right { get; set; }
        public int Already { get; set; }
        public int Expired { get; set; }
        public int Invalid { get; set; }

        public decimal BasTknAm { get; set; }
        public decimal HandAmnt { get; set; }
        public decimal ScnDedAm { get; set; }
        public decimal PayblAmt { get; set; }

        public List<TokenSubmitResult> Tokens { get; set; } = new();
        public string Message { get; set; } = "";
    }
}
