// Controllers/TokenScanController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TokenScanController : ControllerBase
    {
        private readonly IConfiguration _cfg;
        private readonly ILogger<TokenScanController> _log;

        public TokenScanController(IConfiguration cfg, ILogger<TokenScanController> log)
        {
            _cfg = cfg;
            _log = log;
        }

        // -------------------- 1) TOKEN INFO (≈ MK_02004) --------------------
        [HttpPost("token-info")]
        public async Task<ActionResult<TokenInfoResponse>> GetTokenInfoAsync(
            [FromBody] TokenInfoRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            var info = new TokenInfoResponse
            {
                TokenNum = req.TokenNum,
                AreaCode = req.AreaCode,
                CustCode = req.CustCode,
                LoginId = req.LoginId
            };

            try
            {
                // (a) Try SP via positional EXEC (avoids name mismatch issues)
                try
                {
                    const string execSql = "EXEC bwlive.dbo.dppToknProc @p1, @p2, @p3;";
                    await using var sp = new SqlCommand(execSql, con) { CommandType = CommandType.Text };
                    sp.Parameters.AddWithValue("@p1", "jav01");
                    sp.Parameters.AddWithValue("@p2", req.TokenNum);
                    sp.Parameters.AddWithValue("@p3", 0);

                    await using var r = await sp.ExecuteReaderAsync(ct);
                    if (await r.ReadAsync(ct))
                    {
                        info.BcTknTyp = r.IsDBNull(0) ? "" : r.GetString(0);
                        info.TokenVal = SafeDecimal(r, 1);
                        info.HandRate = SafeDecimal(r, 2);
                        info.ScnrDdRt = SafeDecimal(r, 3);
                        info.TokEndVl = SafeDecimal(r, 4);
                        info.ProdCode = r.IsDBNull(5) ? 0 : r.GetInt32(5);
                        info.UpdIdAct = r.IsDBNull(6) ? "" : r.GetString(6);
                        info.DbActSts = r.IsDBNull(7) ? "" : r.GetString(7);
                        info.ExprFlag = r.IsDBNull(8) ? "" : r.GetString(8);
                    }
                }
                catch (Exception ex)
                {
                    _log.LogWarning(ex, "dppToknProc failed in token-info; continuing with master-only.");
                }

                // (b) Master row (safe even if archive tables absent)
                var master = await FetchMasterRowAsync(con, req.TokenNum, ct);
                if (!master.Found)
                    return Ok(new { found = false, message = "No record found for token." });

                info.IsActive = master.IsActive;
                info.ValidDat = master.ValidDat;
                info.ScanndBy = master.UpdateId;
                info.NumCvvNo = master.NumCvvNo ?? "";
                info.RequiresCvv = !string.IsNullOrWhiteSpace(info.NumCvvNo) && info.NumCvvNo != "0";

                if (info.TokDspVl == 0 && info.TokenVal > 0) info.TokDspVl = info.TokenVal;
                info.TokAmPay = info.TokDspVl + info.HandRate;

                // (c) Multi-scan (if table exists)
                const string sqlMult = @"
IF OBJECT_ID(N'dbo.dpmToknMlSc', N'U') IS NOT NULL
BEGIN
    SELECT TOP 1 isActive, scnMlCnt, scnMlAlw, ISNULL(updateId,'')
    FROM dbo.dpmToknMlSc WITH (NOLOCK)
    WHERE tokenNum = @token AND isActive='Y' AND scnMlCnt < scnMlAlw
    ORDER BY updateDt DESC;
END
ELSE
BEGIN
    SELECT TOP 0 isActive='', scnMlCnt=0, scnMlAlw=0, updateId='';
END";
                await using (var cmd = new SqlCommand(sqlMult, con))
                {
                    cmd.Parameters.AddWithValue("@token", req.TokenNum);
                    await using var r = await cmd.ExecuteReaderAsync(ct);
                    if (await r.ReadAsync(ct))
                    {
                        info.ScnMlStt = r.IsDBNull(0) ? "" : r.GetString(0);
                        info.ScnMlCnt = r.IsDBNull(1) ? 0 : r.GetInt32(1);
                        info.ScnMlAlw = r.IsDBNull(2) ? 0 : r.GetInt32(2);
                        info.UpdIdMlt = r.IsDBNull(3) ? "" : r.GetString(3);
                    }
                }

                // (d) Area/type guard (matches JSP)
                info.AreaAllowed = AreaTypeAllowed(info.BcTknTyp, req.AreaCode);

                info.Success = true;
                info.Message = "OK";
                return Ok(info);
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "token-info failed for token {Token}", req.TokenNum);
                return Problem("Unexpected error during token info fetch.");
            }
        }

        // -------------------- 2) CVV VALIDATE (1..3 attempts) --------------------
        [HttpPost("validate")]
        public async Task<ActionResult<CvvValidateResponse>> ValidateCvvAsync(
            [FromBody] CvvValidateRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.Attempt <= 0) req.Attempt = 1;

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            try
            {
                var master = await FetchMasterRowAsync(con, req.TokenNum, ct);
                if (!master.Found)
                {
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum, Found = false, RequiresCvv = false,
                        Valid = false, Locked = false, AttemptsLeft = 3, Message = "Token not found."
                    });
                }

                var stored = (master.NumCvvNo ?? "").Trim();
                var requires = !string.IsNullOrWhiteSpace(stored) && stored != "0";

                if (!requires)
                {
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum, Found = true, RequiresCvv = false,
                        Valid = true, Locked = false, AttemptsLeft = 3, Message = "Valid: CVV not required."
                    });
                }

                var provided = (req.Cvv ?? "").Trim();
                if (string.IsNullOrEmpty(provided))
                {
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum, Found = true, RequiresCvv = true, CvvLength = stored.Length,
                        Valid = false, Locked = false, AttemptsLeft = Math.Max(0, 3 - req.Attempt), Message = "CVV required."
                    });
                }

                var isMatch = string.Equals(provided, stored, StringComparison.Ordinal);
                var locked = !isMatch && req.Attempt >= 3;

                return Ok(new CvvValidateResponse
                {
                    TokenNum = req.TokenNum, Found = true, RequiresCvv = true, CvvLength = stored.Length,
                    Valid = isMatch, Locked = locked, AttemptsLeft = isMatch ? Math.Max(0, 3 - req.Attempt) : (locked ? 0 : 3 - req.Attempt),
                    Message = isMatch ? "Valid: CVV matched." : (locked ? "CVV failed 3 times; please rescan." : "Invalid CVV.")
                });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "validate failed for token {Token}", req.TokenNum);
                return Problem("Unexpected error during validation.");
            }
        }

        // -------------------- 3) SUBMIT (≈ MK_02014 end-to-end) --------------------
        [HttpPost("submit")]
        public async Task<ActionResult<SubmitTokensResponse>> SubmitAsync(
            [FromBody] SubmitTokensRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.TokenNums is null || req.TokenNums.Count == 0)
                return BadRequest(new { message = "No tokens to submit." });

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);
            await using var tx = (SqlTransaction)await con.BeginTransactionAsync(ct);

            // Collect per-token errors for easier debugging
            var tokenErrors = new List<string>();

            try
            {
                var docuNumb = string.IsNullOrWhiteSpace(req.DocuNumb)
                    ? $"TKN-{req.AreaCode}-{DateTime.UtcNow:yyyyMMddHHmmss}-{Random.Shared.Next(1000, 9999)}"
                    : req.DocuNumb;

                // Header stub
                await using (var hdr = new SqlCommand(@"
INSERT INTO cdtTokenRec (docuNumb, docuDate, tokenTyp, cdnDocTy, custCode, prodCode,
                         recptQty, basTknAm, handAmnt, scnDedAm, payblAmt,
                         statFlag, createId, createDt)
VALUES (@docu, CONVERT(date, GETDATE()), 'BC', 'CRN', @cust, 0,
        0, 0, 0, 0, 0, 'A', @login, GETDATE());", con, tx))
                {
                    hdr.Parameters.AddWithValue("@docu", docuNumb);
                    hdr.Parameters.AddWithValue("@cust", req.CustCode);
                    hdr.Parameters.AddWithValue("@login", req.LoginId);
                    await hdr.ExecuteNonQueryAsync(ct);
                }

                int rightEnt = 0, already = 0, expired = 0, invalid = 0;
                int prodCodeForHdr = 0;
                decimal basTknAm = 0, handAmnt = 0, payblAmt = 0, scnDedAm = 0;

                foreach (var token in req.TokenNums)
                {
                    try
                    {
                        // SP (positional) — exactly as JSP uses it
                        string bcTknTyp = "", dbActSts = "", exprFlag = "N";
                        int prodCode = 0;
                        decimal tokenVal = 0, handRate = 0, scnrDdRt = 0, tokEndVl = 0;

                        const string execSql = "EXEC bwlive.dbo.dppToknProc @p1, @p2, @p3;";
                        await using (var sp = new SqlCommand(execSql, con, tx) { CommandType = CommandType.Text })
                        {
                            sp.Parameters.AddWithValue("@p1", "jav01");
                            sp.Parameters.AddWithValue("@p2", token);
                            sp.Parameters.AddWithValue("@p3", 0);

                            await using var r = await sp.ExecuteReaderAsync(ct);
                            if (await r.ReadAsync(ct))
                            {
                                bcTknTyp = r.IsDBNull(0) ? "" : r.GetString(0);
                                tokenVal = SafeDecimal(r, 1);
                                handRate = SafeDecimal(r, 2);
                                scnrDdRt = SafeDecimal(r, 3);
                                tokEndVl = SafeDecimal(r, 4);
                                prodCode = r.IsDBNull(5) ? 0 : r.GetInt32(5);
                                // r.GetString(6) is updateId
                                dbActSts = r.IsDBNull(7) ? "" : r.GetString(7);
                                exprFlag = r.IsDBNull(8) ? "N" : r.GetString(8);
                            }
                        }

                        // Decide bucket like JSP
                        string tokenVld;
                        if (exprFlag == "Y")
                        {
                            tokenVld = "E"; expired++;
                        }
                        else if (dbActSts == "Z")
                        {
                            tokenVld = "Z"; already++;
                        }
                        else if (prodCode <= 0)
                        {
                            tokenVld = "N"; invalid++;
                        }
                        else
                        {
                            tokenVld = "Y";
                            basTknAm += tokenVal;
                            handAmnt += handRate;
                            payblAmt += tokEndVl;
                            scnDedAm += scnrDdRt;
                            prodCodeForHdr = prodCode;
                        }

                        // Detail row (always)
                        await using (var det = new SqlCommand(@"
INSERT INTO dptTokenRecDtl
  (docuNumb, tokenNum, tokenVld, exprFlag, toknStat, bcTknTyp,
   tokenVal, handRate, tokEndVl, prodCode, inflCode, statFlag,
   createId, createDt)
VALUES
  (@docu, @token, @vld, @expr, @stat, @typ,
   @tval, @hr, @endv, @prod, @infl, 'A',
   @login, GETDATE());", con, tx))
                        {
                            det.Parameters.AddWithValue("@docu", docuNumb);
                            det.Parameters.AddWithValue("@token", token);
                            det.Parameters.AddWithValue("@vld", tokenVld);
                            det.Parameters.AddWithValue("@expr", exprFlag);
                            det.Parameters.AddWithValue("@stat", dbActSts);
                            det.Parameters.AddWithValue("@typ", bcTknTyp);
                            det.Parameters.AddWithValue("@tval", tokenVal);
                            det.Parameters.AddWithValue("@hr", handRate);
                            det.Parameters.AddWithValue("@endv", tokEndVl);
                            det.Parameters.AddWithValue("@prod", prodCode);
                            det.Parameters.AddWithValue("@infl", req.InflCode ?? "INF00000");
                            det.Parameters.AddWithValue("@login", req.LoginId);
                            await det.ExecuteNonQueryAsync(ct);
                        }

                        // Master consume (only for tokenVld == 'Y'), with same validity window as JSP
                        if (tokenVld == "Y")
                        {
                            await using var up = new SqlCommand(@"
UPDATE dbo.dpmTokenNos
SET isActive = 'Z', updateId = @login, updateDt = GETDATE()
WHERE tokenNum = @token
  AND (CASE WHEN GETDATE() > dbo.dpfTknValDt(@bc, @area)
            THEN CAST(DATEDIFF(day, printgDt, GETDATE()) AS smallint)
            ELSE 1 END)
      <= validDay + dbo.dpfTknValDy(@bc, @area)
  AND isActive IN ('Y','Z');", con, tx);
                            up.Parameters.AddWithValue("@login", req.LoginId);
                            up.Parameters.AddWithValue("@token", token);
                            up.Parameters.AddWithValue("@bc", bcTknTyp);
                            up.Parameters.AddWithValue("@area", req.AreaCode);
                            await up.ExecuteNonQueryAsync(ct);

                            // Multi-scan counter (best-effort)
                            try
                            {
                                await using var up2 = new SqlCommand(@"
IF OBJECT_ID(N'dbo.dpmToknMlSc', N'U') IS NOT NULL
BEGIN
    UPDATE dbo.dpmToknMlSc
       SET scnMlCnt = scnMlCnt + 1,
           isActive = CASE WHEN scnMlCnt + 1 >= scnMlAlw THEN 'Z' ELSE 'Y' END,
           updateId = @login, updateDt = GETDATE()
     WHERE tokenNum = @token AND isActive='Y' AND scnMlCnt < scnMlAlw;
END", con, tx);
                                up2.Parameters.AddWithValue("@login", req.LoginId);
                                up2.Parameters.AddWithValue("@token", token);
                                await up2.ExecuteNonQueryAsync(ct);
                            }
                            catch (Exception ex)
                            {
                                _log.LogWarning(ex, "Multi-scan update skipped for token {Token}", token);
                            }

                            rightEnt++;
                        }
                    }
                    catch (Exception exTok)
                    {
                        tokenErrors.Add($"{token}: {exTok.Message}");
                        _log.LogError(exTok, "Token submit failed for {Token}", token);
                        invalid++; // count as invalid in the summary
                    }
                }

                // Header totals
                await using (var upd = new SqlCommand(@"
UPDATE cdtTokenRec
   SET recptQty = @qty,
       basTknAm = @bas,
       handAmnt = @hand,
       scnDedAm = @scn,
       payblAmt = @pay,
       prodCode = @prod,
       updateId = @login,
       updateDt = GETDATE()
 WHERE docuNumb = @docu;", con, tx))
                {
                    upd.Parameters.AddWithValue("@qty", rightEnt);
                    upd.Parameters.AddWithValue("@bas", basTknAm);
                    upd.Parameters.AddWithValue("@hand", handAmnt);
                    upd.Parameters.AddWithValue("@scn", scnDedAm);
                    upd.Parameters.AddWithValue("@pay", payblAmt);
                    upd.Parameters.AddWithValue("@prod", prodCodeForHdr);
                    upd.Parameters.AddWithValue("@login", req.LoginId);
                    upd.Parameters.AddWithValue("@docu", docuNumb);
                    await upd.ExecuteNonQueryAsync(ct);
                }

                // Scanner deduction ledger (optional)
                if (scnDedAm > 0)
                {
                    try
                    {
                        await using var ins = new SqlCommand(@"
IF OBJECT_ID(N'dbo.dptToknScnrDtl', N'U') IS NOT NULL
BEGIN
    INSERT INTO dptToknScnrDtl
      (docuNumb, docuDate, userCode, docuNarr, vouDrAmt, vouCrAmt,
       statFlag, createId, createDt)
    VALUES
      (@docu, CONVERT(date, GETDATE()), @cust,
       'Dedc. against Scanner Issued', 0, @cr,
       'N', @login, GETDATE());
END", con, tx);
                        ins.Parameters.AddWithValue("@docu", docuNumb);
                        ins.Parameters.AddWithValue("@cust", req.CustCode);
                        ins.Parameters.AddWithValue("@cr", scnDedAm);
                        ins.Parameters.AddWithValue("@login", req.LoginId);
                        await ins.ExecuteNonQueryAsync(ct);
                    }
                    catch (Exception ex)
                    {
                        _log.LogWarning(ex, "Scanner deduction ledger insert skipped.");
                    }
                }

                await tx.CommitAsync(ct);

                return Ok(new SubmitTokensResponse
                {
                    DocuNumb = docuNumb,
                    Right = rightEnt,
                    Already = already,
                    Expired = expired,
                    Invalid = invalid,
                    BasTknAm = basTknAm,
                    HandAmnt = handAmnt,
                    ScnDedAm = scnDedAm,
                    PayblAmt = payblAmt,
                    Message = $"Batch {docuNumb}: Right={rightEnt}, Already={already}, Expired={expired}, Invalid={invalid}, Payable={payblAmt}",
                    Errors = tokenErrors
                });
            }
            catch (Exception ex)
            {
                try { await tx.RollbackAsync(ct); } catch { /* ignore */ }
                _log.LogError(ex, "submit failed (rolled back) for cust {Cust}", req.CustCode);
                return Problem("Could not save tokens. Transaction rolled back.");
            }
        }

        // ======================= Helpers =======================

        private static decimal SafeDecimal(IDataRecord r, int ordinal)
        {
            if (r.IsDBNull(ordinal)) return 0m;
            var v = r.GetValue(ordinal);
            return v switch
            {
                decimal d => d,
                double dd => Convert.ToDecimal(dd),
                float ff => Convert.ToDecimal(ff),
                _ => Convert.ToDecimal(v)
            };
        }

        private static bool AreaTypeAllowed(string bcTknTyp, string areaCode)
        {
            if (string.IsNullOrWhiteSpace(areaCode)) return true;
            // JSP rules:
            // B1 allowed ONLY in EXE/EXN/EXR; other areas invalid
            // E1 allowed ONLY in EXB/EXC/EXG; other areas invalid
            var a = areaCode.ToUpperInvariant();
            var t = (bcTknTyp ?? "").ToUpperInvariant();
            if (t == "B1") return a == "EXE" || a == "EXN" || a == "EXR";
            if (t == "E1") return a == "EXB" || a == "EXC" || a == "EXG";
            return true;
        }

        private static async Task<TokenMasterRow> FetchMasterRowAsync(SqlConnection con, string tokenNum, CancellationToken ct)
        {
            const string sql = @"
SET NOCOUNT ON;
DECLARE @src int = 0;
IF OBJECT_ID(N'dbo.LY_dpmTokenNos', N'U') IS NOT NULL SET @src = 1;
ELSE IF OBJECT_ID(N'dbo.dpmTokenNos', N'U') IS NOT NULL SET @src = 2;
ELSE IF OBJECT_ID(N'dbo.dpaTokenNos', N'U') IS NOT NULL SET @src = 3;

IF (@src = 1)
BEGIN
    SELECT TOP 1
        tokenNum,
        isActive,
        CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
        ISNULL(updateId,'') AS upd,
        ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
    FROM dbo.LY_dpmTokenNos WITH (NOLOCK)
    WHERE tokenNum = @token;
    RETURN;
END
IF (@src = 2)
BEGIN
    SELECT TOP 1
        tokenNum,
        isActive,
        CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
        ISNULL(updateId,'') AS upd,
        ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
    FROM dbo.dpmTokenNos WITH (NOLOCK)
    WHERE tokenNum = @token;
    RETURN;
END
IF (@src = 3)
BEGIN
    SELECT TOP 1
        tokenNum,
        isActive,
        CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
        ISNULL(updateId,'') AS upd,
        ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
    FROM dbo.dpaTokenNos WITH (NOLOCK)
    WHERE tokenNum = @token;
    RETURN;
END

SELECT TOP 0 tokenNum = '', isActive = '', validDat = '', upd = '', numCvvNo = '';";
            await using var cmd = new SqlCommand(sql, con) { CommandTimeout = 30 };
            cmd.Parameters.AddWithValue("@token", tokenNum);

            await using var r = await cmd.ExecuteReaderAsync(ct);
            if (await r.ReadAsync(ct))
            {
                return new TokenMasterRow
                {
                    Found = true,
                    IsActive = r.IsDBNull(1) ? "" : r.GetString(1),
                    ValidDat = r.IsDBNull(2) ? "" : r.GetString(2),
                    UpdateId = r.IsDBNull(3) ? "" : r.GetString(3),
                    NumCvvNo = r.IsDBNull(4) ? "" : r.GetString(4)
                };
            }
            return new TokenMasterRow { Found = false };
        }

        private sealed class TokenMasterRow
        {
            public bool Found { get; set; }
            public string IsActive { get; set; } = "";
            public string ValidDat { get; set; } = "";
            public string UpdateId { get; set; } = "";
            public string? NumCvvNo { get; set; }
        }
    }

    // ---------------- DTOs ----------------
    public sealed class TokenInfoRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;
        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;
        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;
        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;
    }

    public sealed class TokenInfoResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
        public string TokenNum { get; set; } = "";
        public string AreaCode { get; set; } = "";
        public string CustCode { get; set; } = "";
        public string LoginId { get; set; } = "";

        public string IsActive { get; set; } = "";
        public string ValidDat { get; set; } = "";
        public string ScanndBy { get; set; } = "";

        public decimal TokenVal { get; set; }
        public decimal HandRate { get; set; }
        public decimal ScnrDdRt { get; set; }
        public decimal TokEndVl { get; set; }
        public decimal TokDspVl { get; set; }
        public decimal TokAmPay { get; set; }

        public string BcTknTyp { get; set; } = "";
        public string DbActSts { get; set; } = "";
        public string ExprFlag { get; set; } = "";

        public string NumCvvNo { get; set; } = "";
        public bool RequiresCvv { get; set; }

        public string UpdIdAct { get; set; } = "";
        public string UpdIdMlt { get; set; } = "";
        public string ScnMlStt { get; set; } = "";
        public int ScnMlCnt { get; set; }
        public int ScnMlAlw { get; set; }
        public int ProdCode { get; set; }
        public bool AreaAllowed { get; set; }
    }

    public sealed class CvvValidateRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;
        [StringLength(16)]
        public string? Cvv { get; set; }
        [Range(1, 3)]
        public int Attempt { get; set; } = 1;
    }

    public sealed class CvvValidateResponse
    {
        public string TokenNum { get; set; } = "";
        public bool Found { get; set; }
        public bool RequiresCvv { get; set; }
        public int? CvvLength { get; set; }
        public bool Valid { get; set; }
        public bool Locked { get; set; }
        public int AttemptsLeft { get; set; }
        public string Message { get; set; } = "";
    }

    public sealed class SubmitTokensRequest
    {
        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;
        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;
        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;
        [StringLength(16)]
        public string? InflCode { get; set; }
        [Required]
        public List<string> TokenNums { get; set; } = new();
        [StringLength(40)]
        public string? DocuNumb { get; set; }
    }

    public sealed class SubmitTokensResponse
    {
        public string DocuNumb { get; set; } = "";
        public int Right { get; set; }
        public int Already { get; set; }
        public int Expired { get; set; }
        public int Invalid { get; set; }
        public decimal BasTknAm { get; set; }
        public decimal HandAmnt { get; set; }
        public decimal ScnDedAm { get; set; }
        public decimal PayblAmt { get; set; }
        public string Message { get; set; } = "";
        public List<string> Errors { get; set; } = new();
    }
}
