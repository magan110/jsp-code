using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PainterController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public PainterController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("test")]
        public IActionResult TestEndpoint([FromBody] object request = null)
        {
            return Ok(new
            {
                success = true,
                message = "Test endpoint working perfectly",
                timestamp = DateTime.Now,
                receivedData = request ?? "No data received"
            });
        }

        [HttpGet("test")]
        public IActionResult TestGetEndpoint()
        {
            return Ok(new
            {
                success = true,
                message = "GET Test endpoint working perfectly",
                timestamp = DateTime.Now
            });
        }

        [HttpPost("register")]
        public IActionResult RegisterPainter([FromBody] PainterRegistrationRequest request = null)
        {
            try
            {
                // Handle null request gracefully
                if (request == null)
                {
                    request = new PainterRegistrationRequest();
                }

                // Insert painter registration with all optional fields
                var insertQuery = @"
                    INSERT INTO PainterRegistrations 
                    (firstnme, middlnme, lastname, mobileno, addresss, areaname, emirates, referenc,
                     profphot, emirfrnt, emirback, emiratid, holdernm, 
                     datebrth, national, companyd, issuedte, exprydte, occupatn,
                     acchldrn, ibannmbr, bankname, branchnm, bankaddr, chequebk, bankdocm,
                     createdt, isactive)
                    VALUES 
                    (@firstnme, @middlnme, @lastname, @mobileno, @addresss, @areaname, @emirates, @referenc,
                     @profphot, @emirfrnt, @emirback, @emiratid, @holdernm,
                     @datebrth, @national, @companyd, @issuedte, @exprydte, @occupatn,
                     @acchldrn, @ibannmbr, @bankname, @branchnm, @bankaddr, @chequebk, @bankdocm,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                // Parse dates safely - use null if parsing fails
                DateTime? dobParsed = SafeParseDate(request.DateOfBirth);
                DateTime? issueParsed = SafeParseDate(request.IssueDate);
                DateTime? expiryParsed = SafeParseDate(request.ExpiryDate);

                var parameters = new Dictionary<string, object>
                {
                    { "@firstnme", SafeString(request.FirstName) },
                    { "@middlnme", SafeStringOrNull(request.MiddleName) },
                    { "@lastname", SafeString(request.LastName) },
                    { "@mobileno", SafeString(request.MobileNumber) },
                    { "@addresss", SafeString(request.Address) },
                    { "@areaname", SafeString(request.Area) },
                    { "@emirates", SafeString(request.Emirates) },
                    { "@referenc", SafeString(request.Reference) },
                    { "@profphot", SafeStringOrNull(request.ProfilePhoto) },
                    { "@emirfrnt", SafeStringOrNull(request.EmiratesIdFront) },
                    { "@emirback", SafeStringOrNull(request.EmiratesIdBack) },
                    { "@emiratid", SafeString(request.EmiratesIdNumber) },
                    { "@holdernm", SafeString(request.IdHolderName) },
                    { "@datebrth", dobParsed ?? (object)DBNull.Value },
                    { "@national", SafeString(request.Nationality) },
                    { "@companyd", SafeStringOrNull(request.CompanyDetails) },
                    { "@issuedte", issueParsed ?? (object)DBNull.Value },
                    { "@exprydte", expiryParsed ?? (object)DBNull.Value },
                    { "@occupatn", SafeStringOrNull(request.Occupation) },
                    { "@acchldrn", SafeStringOrNull(request.AccountHolderName) },
                    { "@ibannmbr", SafeStringOrNull(request.IbanNumber) },
                    { "@bankname", SafeStringOrNull(request.BankName) },
                    { "@branchnm", SafeStringOrNull(request.BranchName) },
                    { "@bankaddr", SafeStringOrNull(request.BankAddress) },
                    { "@chequebk", SafeStringOrNull(request.ChequeBook) },
                    { "@bankdocm", SafeStringOrNull(request.BankDocument) }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);
                
                var painterId = result?.FirstOrDefault()?.Values?.FirstOrDefault()?.ToString() ?? "0";
                
                return Ok(new
                {
                    success = true,
                    message = "Painter registered successfully",
                    painterId = painterId,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                // Even if database fails, return success with error details
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("list")]
        public IActionResult GetPainters([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize)); // Limit pageSize

                var searchCondition = string.IsNullOrEmpty(search) ? "" : 
                    "AND (firstnme LIKE @Search OR lastname LIKE @Search OR mobileno LIKE @Search OR emiratid LIKE @Search)";

                var query = $@"
                    SELECT paintrid, firstnme, middlnme, lastname, mobileno, areaname, emirates, 
                           referenc, emiratid, national, createdt, isactive
                    FROM PainterRegistrations 
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var painters = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount 
                    FROM PainterRegistrations 
                    WHERE isactive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCount.ToString(), out int total);

                return Ok(new
                {
                    success = true,
                    data = painters,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve painters",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("{painterId}")]
        public IActionResult GetPainter(int painterId = 0)
        {
            try
            {
                if (painterId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid painter ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM PainterRegistrations 
                    WHERE paintrid = @paintrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@paintrid", painterId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Painter not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve painter",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPut("{painterId}")]
        public IActionResult UpdatePainter(int painterId = 0, [FromBody] PainterUpdateRequest request = null)
        {
            try
            {
                if (painterId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid painter ID",
                        timestamp = DateTime.Now
                    });
                }

                if (request == null)
                {
                    request = new PainterUpdateRequest();
                }

                // Check if painter exists
                var checkQuery = "SELECT COUNT(*) as Count FROM PainterRegistrations WHERE paintrid = @paintrid AND isactive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@paintrid", painterId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                var count = checkResult?.FirstOrDefault()?["Count"]?.ToString() ?? "0";
                if (count == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Painter not found",
                        timestamp = DateTime.Now
                    });
                }

                // Update painter
                var updateQuery = @"
                    UPDATE PainterRegistrations 
                    SET firstnme = @firstnme, middlnme = @middlnme, lastname = @lastname,
                        mobileno = @mobileno, addresss = @addresss, areaname = @areaname, emirates = @emirates,
                        referenc = @referenc, national = @national, companyd = @companyd,
                        occupatn = @occupatn, acchldrn = @acchldrn, ibannmbr = @ibannmbr,
                        bankname = @bankname, branchnm = @branchnm, bankaddr = @bankaddr,
                        updatedt = GETDATE()
                    WHERE paintrid = @paintrid";

                var parameters = new Dictionary<string, object>
                {
                    { "@paintrid", painterId },
                    { "@firstnme", SafeString(request.FirstName) },
                    { "@middlnme", SafeStringOrNull(request.MiddleName) },
                    { "@lastname", SafeString(request.LastName) },
                    { "@mobileno", SafeString(request.MobileNumber) },
                    { "@addresss", SafeString(request.Address) },
                    { "@areaname", SafeString(request.Area) },
                    { "@emirates", SafeString(request.Emirates) },
                    { "@referenc", SafeString(request.Reference) },
                    { "@national", SafeString(request.Nationality) },
                    { "@companyd", SafeStringOrNull(request.CompanyDetails) },
                    { "@occupatn", SafeStringOrNull(request.Occupation) },
                    { "@acchldrn", SafeStringOrNull(request.AccountHolderName) },
                    { "@ibannmbr", SafeStringOrNull(request.IbanNumber) },
                    { "@bankname", SafeStringOrNull(request.BankName) },
                    { "@branchnm", SafeStringOrNull(request.BranchName) },
                    { "@bankaddr", SafeStringOrNull(request.BankAddress) }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Painter updated successfully",
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpDelete("{painterId}")]
        public IActionResult DeletePainter(int painterId = 0)
        {
            try
            {
                if (painterId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid painter ID",
                        timestamp = DateTime.Now
                    });
                }

                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE PainterRegistrations 
                    SET isactive = 'N', updatedt = GETDATE() 
                    WHERE paintrid = @paintrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@paintrid", painterId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = rowsAffected > 0 ? "Painter deleted successfully" : "Painter not found or already deleted",
                    rowsAffected = rowsAffected,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPost("upload-document")]
        public IActionResult UploadDocument([FromForm] DocumentUploadRequest request = null)
        {
            try
            {
                if (request?.File == null || request.File.Length == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "No file provided",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file type
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".pdf" };
                var fileExtension = Path.GetExtension(request.File.FileName)?.ToLowerInvariant() ?? "";
                
                if (!allowedExtensions.Contains(fileExtension))
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid file type. Only JPG, PNG, and PDF files are allowed.",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file size (10MB limit)
                if (request.File.Length > 10 * 1024 * 1024)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "File size cannot exceed 10MB",
                        timestamp = DateTime.Now
                    });
                }

                // Generate unique filename
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var uploadsPath = Path.Combine(Directory.GetCurrentDirectory(), "uploads", "painter-documents");
                
                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    request.File.CopyTo(stream);
                }

                return Ok(new
                {
                    success = true,
                    message = "File uploaded successfully",
                    fileName = fileName,
                    filePath = $"/uploads/painter-documents/{fileName}",
                    documentType = SafeString(request.DocumentType),
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Upload completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("emirates-list")]
        public IActionResult GetEmiratesList()
        {
            var emirates = new[]
            {
                "Dubai",
                "Abu Dhabi",
                "Sharjah",
                "Ajman",
                "Umm Al Quwain",
                "Ras Al Khaimah",
                "Fujairah"
            };

            return Ok(new
            {
                success = true,
                data = emirates,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("reference-list")]
        public IActionResult GetReferenceList()
        {
            var references = new[]
            {
                "Employee",
                "Retailer",
                "Distributor",
                "Salesman"
            };

            return Ok(new
            {
                success = true,
                data = references,
                timestamp = DateTime.Now
            });
        }

        // Helper methods for safe data handling
        private static string SafeString(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? "" : input.Trim();
        }

        private static object SafeStringOrNull(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? (object)DBNull.Value : input.Trim();
        }

        private static DateTime? SafeParseDate(string dateString)
        {
            if (string.IsNullOrWhiteSpace(dateString))
                return null;

            // Try multiple date formats
            var formats = new[]
            {
                "yyyy-MM-dd",
                "MM/dd/yyyy",
                "dd/MM/yyyy",
                "yyyy/MM/dd",
                "MM-dd-yyyy",
                "dd-MM-yyyy"
            };

            foreach (var format in formats)
            {
                if (DateTime.TryParseExact(dateString, format, null, System.Globalization.DateTimeStyles.None, out DateTime result))
                {
                    return result;
                }
            }

            // Fallback to general parsing
            if (DateTime.TryParse(dateString, out DateTime generalResult))
            {
                return generalResult;
            }

            return null;
        }
    }

    // Request Models - All fields optional and flexible
    public class PainterRegistrationRequest
    {
        public string FirstName { get; set; } = "";
        public string MiddleName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string MobileNumber { get; set; } = "";
        public string Address { get; set; } = "";
        public string Area { get; set; } = "";
        public string Emirates { get; set; } = "";
        public string Reference { get; set; } = "";
        public string ProfilePhoto { get; set; } = "";
        public string EmiratesIdFront { get; set; } = "";
        public string EmiratesIdBack { get; set; } = "";
        public string EmiratesIdNumber { get; set; } = "";
        public string IdHolderName { get; set; } = "";
        public string DateOfBirth { get; set; } = "";
        public string Nationality { get; set; } = "";
        public string CompanyDetails { get; set; } = "";
        public string IssueDate { get; set; } = "";
        public string ExpiryDate { get; set; } = "";
        public string Occupation { get; set; } = "";
        public string AccountHolderName { get; set; } = "";
        public string IbanNumber { get; set; } = "";
        public string BankName { get; set; } = "";
        public string BranchName { get; set; } = "";
        public string BankAddress { get; set; } = "";
        public string ChequeBook { get; set; } = "";
        public string BankDocument { get; set; } = "";
    }

    public class PainterUpdateRequest
    {
        public string FirstName { get; set; } = "";
        public string MiddleName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string MobileNumber { get; set; } = "";
        public string Address { get; set; } = "";
        public string Area { get; set; } = "";
        public string Emirates { get; set; } = "";
        public string Reference { get; set; } = "";
        public string Nationality { get; set; } = "";
        public string CompanyDetails { get; set; } = "";
        public string Occupation { get; set; } = "";
        public string AccountHolderName { get; set; } = "";
        public string IbanNumber { get; set; } = "";
        public string BankName { get; set; } = "";
        public string BranchName { get; set; } = "";
        public string BankAddress { get; set; } = "";
    }

    public class DocumentUploadRequest
    {
        public IFormFile File { get; set; }
        public string DocumentType { get; set; } = "";
    }
}
