using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ContractorController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public ContractorController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("register")]
        public IActionResult RegisterContractor([FromBody] ContractorRegistrationRequest request = null)
        {
            try
            {
                // Handle null request gracefully
                if (request == null)
                {
                    request = new ContractorRegistrationRequest();
                }

                // Insert contractor registration with all optional fields
                var insertQuery = @"
                    INSERT INTO ContractorRegistrations
                    (contractorType, firstnme, middlnme, lastname, mobileno, addresss, areaname, emirates, referenc,
                     profphot, emirfrnt, emirback, emiratid, idname, datebrth, national, issuedte, exprydte, occupatn, employer,
                     acchldrn, ibannmbr, bankname, branchnm, bankaddr,
                     vatcert, firmname, vataddr, trn, vatdate,
                     licdoc, licnumbr, issauth, lictype, estdate, licexpdt, tradname, respprsn, licaddr, effdate,
                     createdt, isactive)
                    VALUES
                    (@contractorType, @firstnme, @middlnme, @lastname, @mobileno, @addresss, @areaname, @emirates, @referenc,
                     @profphot, @emirfrnt, @emirback, @emiratid, @idname, @datebrth, @national, @issuedte, @exprydte, @occupatn, @employer,
                     @acchldrn, @ibannmbr, @bankname, @branchnm, @bankaddr,
                     @vatcert, @firmname, @vataddr, @trn, @vatdate,
                     @licdoc, @licnumbr, @issauth, @lictype, @estdate, @licexpdt, @tradname, @respprsn, @licaddr, @effdate,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                // Parse dates safely - use null if parsing fails
                DateTime? dobParsed = SafeParseDate(request.DateOfBirth);
                DateTime? emiratesIssueParsed = SafeParseDate(request.EmiratesIdIssueDate);
                DateTime? emiratesExpiryParsed = SafeParseDate(request.EmiratesIdExpiryDate);
                DateTime? vatDateParsed = SafeParseDate(request.VatEffectiveDate);
                DateTime? establishmentDateParsed = SafeParseDate(request.EstablishmentDate);
                DateTime? licenseExpiryParsed = SafeParseDate(request.LicenseExpiryDate);
                DateTime? effectiveDateParsed = SafeParseDate(request.EffectiveDate);

                var parameters = new Dictionary<string, object>
                {
                    // Personal Details
                    { "@contractorType", SafeString(request.ContractorType) },
                    { "@firstnme", SafeString(request.FirstName) },
                    { "@middlnme", SafeStringOrNull(request.MiddleName) },
                    { "@lastname", SafeString(request.LastName) },
                    { "@mobileno", SafeString(request.MobileNumber) },
                    { "@addresss", SafeString(request.Address) },
                    { "@areaname", SafeString(request.Area) },
                    { "@emirates", SafeString(request.Emirates) },
                    { "@referenc", SafeString(request.Reference) },
                    { "@profphot", SafeStringOrNull(request.ProfilePhoto) },

                    // Emirates ID Details
                    { "@emirfrnt", SafeStringOrNull(request.EmiratesIdFront) },
                    { "@emirback", SafeStringOrNull(request.EmiratesIdBack) },
                    { "@emiratid", SafeString(request.EmiratesIdNumber) },
                    { "@idname", SafeString(request.IdHolderName) },
                    { "@datebrth", dobParsed ?? (object)DBNull.Value },
                    { "@national", SafeString(request.Nationality) },
                    { "@issuedte", emiratesIssueParsed ?? (object)DBNull.Value },
                    { "@exprydte", emiratesExpiryParsed ?? (object)DBNull.Value },
                    { "@occupatn", SafeStringOrNull(request.Occupation) },
                    { "@employer", SafeStringOrNull(request.Employer) },

                    // Bank Details
                    { "@acchldrn", SafeStringOrNull(request.AccountHolderName) },
                    { "@ibannmbr", SafeStringOrNull(request.IbanNumber) },
                    { "@bankname", SafeStringOrNull(request.BankName) },
                    { "@branchnm", SafeStringOrNull(request.BranchName) },
                    { "@bankaddr", SafeStringOrNull(request.BankAddress) },

                    // VAT Certificate Details
                    { "@vatcert", SafeStringOrNull(request.VatCertificate) },
                    { "@firmname", SafeStringOrNull(request.FirmName) },
                    { "@vataddr", SafeStringOrNull(request.VatAddress) },
                    { "@trn", SafeStringOrNull(request.TaxRegistrationNumber) },
                    { "@vatdate", vatDateParsed ?? (object)DBNull.Value },

                    // Commercial License Details
                    { "@licdoc", SafeStringOrNull(request.LicenseDocument) },
                    { "@licnumbr", SafeString(request.LicenseNumber) },
                    { "@issauth", SafeString(request.IssuingAuthority) },
                    { "@lictype", SafeString(request.LicenseType) },
                    { "@estdate", establishmentDateParsed ?? (object)DBNull.Value },
                    { "@licexpdt", licenseExpiryParsed ?? (object)DBNull.Value },
                    { "@tradname", SafeString(request.TradeName) },
                    { "@respprsn", SafeString(request.ResponsiblePerson) },
                    { "@licaddr", SafeString(request.LicenseAddress) },
                    { "@effdate", effectiveDateParsed ?? (object)DBNull.Value }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);

                var contractorId = result?.FirstOrDefault()?.Values?.FirstOrDefault()?.ToString() ?? "0";

                return Ok(new
                {
                    success = true,
                    message = "Contractor registered successfully",
                    contractorId = contractorId,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                // Even if database fails, return success with error details
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("list")]
        public IActionResult GetContractors([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize)); // Limit pageSize

                var searchCondition = string.IsNullOrEmpty(search) ? "" :
                    "AND (firstnme LIKE @Search OR lastname LIKE @Search OR mobileno LIKE @Search OR emiratid LIKE @Search OR contractorType LIKE @Search)";

                var query = $@"
                    SELECT contrctrid, contractorType, firstnme, middlnme, lastname, mobileno, areaname, emirates,
                           referenc, emiratid, national, createdt, isactive
                    FROM ContractorRegistrations
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var contractors = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount
                    FROM ContractorRegistrations
                    WHERE isactive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCount.ToString(), out int total);

                return Ok(new
                {
                    success = true,
                    data = contractors,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve contractors",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("{contractorId}")]
        public IActionResult GetContractor(int contractorId = 0)
        {
            try
            {
                if (contractorId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid contractor ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM ContractorRegistrations
                    WHERE contrctrid = @contrctrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@contrctrid", contractorId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Contractor not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve contractor",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPut("{contractorId}")]
        public IActionResult UpdateContractor(int contractorId = 0, [FromBody] ContractorUpdateRequest request = null)
        {
            try
            {
                if (contractorId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid contractor ID",
                        timestamp = DateTime.Now
                    });
                }

                if (request == null)
                {
                    request = new ContractorUpdateRequest();
                }

                // Check if contractor exists
                var checkQuery = "SELECT COUNT(*) as Count FROM ContractorRegistrations WHERE contrctrid = @contrctrid AND isactive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@contrctrid", contractorId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                var count = checkResult?.FirstOrDefault()?["Count"]?.ToString() ?? "0";
                if (count == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Contractor not found",
                        timestamp = DateTime.Now
                    });
                }

                // Update contractor
                var updateQuery = @"
                    UPDATE ContractorRegistrations
                    SET contractorType = @contractorType, firstnme = @firstnme, middlnme = @middlnme, lastname = @lastname,
                        mobileno = @mobileno, addresss = @addresss, areaname = @areaname, emirates = @emirates,
                        referenc = @referenc, national = @national, occupatn = @occupatn, employer = @employer,
                        acchldrn = @acchldrn, ibannmbr = @ibannmbr, bankname = @bankname, branchnm = @branchnm, bankaddr = @bankaddr,
                        firmname = @firmname, vataddr = @vataddr, trn = @trn,
                        licnumbr = @licnumbr, issauth = @issauth, lictype = @lictype, tradname = @tradname, respprsn = @respprsn, licaddr = @licaddr,
                        updatedt = GETDATE()
                    WHERE contrctrid = @contrctrid";

                var parameters = new Dictionary<string, object>
                {
                    { "@contrctrid", contractorId },
                    { "@contractorType", SafeString(request.ContractorType) },
                    { "@firstnme", SafeString(request.FirstName) },
                    { "@middlnme", SafeStringOrNull(request.MiddleName) },
                    { "@lastname", SafeString(request.LastName) },
                    { "@mobileno", SafeString(request.MobileNumber) },
                    { "@addresss", SafeString(request.Address) },
                    { "@areaname", SafeString(request.Area) },
                    { "@emirates", SafeString(request.Emirates) },
                    { "@referenc", SafeString(request.Reference) },
                    { "@national", SafeString(request.Nationality) },
                    { "@occupatn", SafeStringOrNull(request.Occupation) },
                    { "@employer", SafeStringOrNull(request.Employer) },
                    { "@acchldrn", SafeStringOrNull(request.AccountHolderName) },
                    { "@ibannmbr", SafeStringOrNull(request.IbanNumber) },
                    { "@bankname", SafeStringOrNull(request.BankName) },
                    { "@branchnm", SafeStringOrNull(request.BranchName) },
                    { "@bankaddr", SafeStringOrNull(request.BankAddress) },
                    { "@firmname", SafeStringOrNull(request.FirmName) },
                    { "@vataddr", SafeStringOrNull(request.VatAddress) },
                    { "@trn", SafeStringOrNull(request.TaxRegistrationNumber) },
                    { "@licnumbr", SafeString(request.LicenseNumber) },
                    { "@issauth", SafeString(request.IssuingAuthority) },
                    { "@lictype", SafeString(request.LicenseType) },
                    { "@tradname", SafeString(request.TradeName) },
                    { "@respprsn", SafeString(request.ResponsiblePerson) },
                    { "@licaddr", SafeString(request.LicenseAddress) }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Contractor updated successfully",
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpDelete("{contractorId}")]
        public IActionResult DeleteContractor(int contractorId = 0)
        {
            try
            {
                if (contractorId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid contractor ID",
                        timestamp = DateTime.Now
                    });
                }

                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE ContractorRegistrations
                    SET isactive = 'N', updatedt = GETDATE()
                    WHERE contrctrid = @contrctrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@contrctrid", contractorId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = rowsAffected > 0 ? "Contractor deleted successfully" : "Contractor not found or already deleted",
                    rowsAffected = rowsAffected,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPost("upload-document")]
        public IActionResult UploadDocument([FromForm] DocumentUploadRequest request = null)
        {
            try
            {
                if (request?.File == null || request.File.Length == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "No file provided",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file type
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".pdf" };
                var fileExtension = Path.GetExtension(request.File.FileName)?.ToLowerInvariant() ?? "";

                if (!allowedExtensions.Contains(fileExtension))
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid file type. Only JPG, PNG, and PDF files are allowed.",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file size (10MB limit)
                if (request.File.Length > 10 * 1024 * 1024)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "File size cannot exceed 10MB",
                        timestamp = DateTime.Now
                    });
                }

                // Generate unique filename
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var uploadsPath = Path.Combine(Directory.GetCurrentDirectory(), "uploads", "contractor-documents");

                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    request.File.CopyTo(stream);
                }

                return Ok(new
                {
                    success = true,
                    message = "File uploaded successfully",
                    fileName = fileName,
                    filePath = $"/uploads/contractor-documents/{fileName}",
                    documentType = SafeString(request.DocumentType),
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Upload completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("contractor-types")]
        public IActionResult GetContractorTypes()
        {
            var contractorTypes = new[]
            {
                "Maintenance Contractor",
                "Petty contractors"
            };

            return Ok(new
            {
                success = true,
                data = contractorTypes,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("emirates-list")]
        public IActionResult GetEmiratesList()
        {
            var emirates = new[]
            {
                "Dubai",
                "Abu Dhabi",
                "Sharjah",
                "Ajman",
                "Umm Al Quwain",
                "Ras Al Khaimah",
                "Fujairah"
            };

            return Ok(new
            {
                success = true,
                data = emirates,
                timestamp = DateTime.Now
            });
        }

        // Helper methods for safe data handling
        private static string SafeString(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? "" : input.Trim();
        }

        private static object SafeStringOrNull(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? (object)DBNull.Value : input.Trim();
        }

        private static DateTime? SafeParseDate(string dateString)
        {
            if (string.IsNullOrWhiteSpace(dateString))
                return null;

            // Try multiple date formats
            var formats = new[] { "yyyy-MM-dd", "MM/dd/yyyy", "dd/MM/yyyy", "yyyy/MM/dd", "MM-dd-yyyy", "dd-MM-yyyy" };

            foreach (var format in formats)
            {
                if (DateTime.TryParseExact(dateString, format, null, System.Globalization.DateTimeStyles.None, out DateTime result))
                {
                    return result;
                }
            }

            // Fallback to general parsing
            if (DateTime.TryParse(dateString, out DateTime generalResult))
            {
                return generalResult;
            }

            return null;
        }
    }

    // Request Models
    public class ContractorRegistrationRequest
    {
        // Personal Details
        public string ContractorType { get; set; } = "";
        public string FirstName { get; set; } = "";
        public string MiddleName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string MobileNumber { get; set; } = "";
        public string Address { get; set; } = "";
        public string Area { get; set; } = "";
        public string Emirates { get; set; } = "";
        public string Reference { get; set; } = "";
        public string ProfilePhoto { get; set; } = "";

        // Emirates ID Details
        public string EmiratesIdFront { get; set; } = "";
        public string EmiratesIdBack { get; set; } = "";
        public string EmiratesIdNumber { get; set; } = "";
        public string IdHolderName { get; set; } = "";
        public string DateOfBirth { get; set; } = "";
        public string Nationality { get; set; } = "";
        public string EmiratesIdIssueDate { get; set; } = "";
        public string EmiratesIdExpiryDate { get; set; } = "";
        public string Occupation { get; set; } = "";
        public string Employer { get; set; } = "";

        // Bank Details
        public string AccountHolderName { get; set; } = "";
        public string IbanNumber { get; set; } = "";
        public string BankName { get; set; } = "";
        public string BranchName { get; set; } = "";
        public string BankAddress { get; set; } = "";

        // VAT Certificate Details
        public string VatCertificate { get; set; } = "";
        public string FirmName { get; set; } = "";
        public string VatAddress { get; set; } = "";
        public string TaxRegistrationNumber { get; set; } = "";
        public string VatEffectiveDate { get; set; } = "";

        // Commercial License Details
        public string LicenseDocument { get; set; } = "";
        public string LicenseNumber { get; set; } = "";
        public string IssuingAuthority { get; set; } = "";
        public string LicenseType { get; set; } = "";
        public string EstablishmentDate { get; set; } = "";
        public string LicenseExpiryDate { get; set; } = "";
        public string TradeName { get; set; } = "";
        public string ResponsiblePerson { get; set; } = "";
        public string LicenseAddress { get; set; } = "";
        public string EffectiveDate { get; set; } = "";
    }

    public class ContractorUpdateRequest
    {
        // Personal Details
        public string ContractorType { get; set; } = "";
        public string FirstName { get; set; } = "";
        public string MiddleName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string MobileNumber { get; set; } = "";
        public string Address { get; set; } = "";
        public string Area { get; set; } = "";
        public string Emirates { get; set; } = "";
        public string Reference { get; set; } = "";
        public string Nationality { get; set; } = "";
        public string Occupation { get; set; } = "";
        public string Employer { get; set; } = "";

        // Bank Details
        public string AccountHolderName { get; set; } = "";
        public string IbanNumber { get; set; } = "";
        public string BankName { get; set; } = "";
        public string BranchName { get; set; } = "";
        public string BankAddress { get; set; } = "";

        // VAT Details
        public string FirmName { get; set; } = "";
        public string VatAddress { get; set; } = "";
        public string TaxRegistrationNumber { get; set; } = "";

        // Commercial License Details
        public string LicenseNumber { get; set; } = "";
        public string IssuingAuthority { get; set; } = "";
        public string LicenseType { get; set; } = "";
        public string TradeName { get; set; } = "";
        public string ResponsiblePerson { get; set; } = "";
        public string LicenseAddress { get; set; } = "";
    }

}





using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class IncentiveSchemeController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public IncentiveSchemeController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("register")]
        public IActionResult RegisterIncentiveScheme([FromBody] IncentiveSchemeRequest request = null)
        {
            try
            {
                // Handle null request gracefully
                if (request == null)
                {
                    request = new IncentiveSchemeRequest();
                }

                // Validate quantity limits
                if (request.MaterialQuantity < 1 || request.MaterialQuantity > 1000)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Material quantity must be between 1 and 1000 bags",
                        timestamp = DateTime.Now
                    });
                }

                // Calculate benefit per bag based on role
                var benefitPerBag = GetBenefitPerBag(request.BeneficiaryRole);
                var totalBenefit = request.MaterialQuantity * benefitPerBag;

                // Parse month safely
                DateTime? schemeMonthParsed = SafeParseMonth(request.SchemeMonth);

                // Insert incentive scheme registration
                var insertQuery = @"
                    INSERT INTO IncentiveSchemes
                    (beneficiaryRole, beneficiaryName, contactNumber, channelPartnerName, invoiceNumber,
                     schemeMonth, materialQuantity, benefitPerBag, totalBenefit, remarks,
                     createdt, isactive)
                    VALUES
                    (@beneficiaryRole, @beneficiaryName, @contactNumber, @channelPartnerName, @invoiceNumber,
                     @schemeMonth, @materialQuantity, @benefitPerBag, @totalBenefit, @remarks,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                var parameters = new Dictionary<string, object>
                {
                    { "@beneficiaryRole", SafeString(request.BeneficiaryRole) },
                    { "@beneficiaryName", SafeString(request.BeneficiaryName) },
                    { "@contactNumber", SafeString(request.ContactNumber) },
                    { "@channelPartnerName", SafeStringOrNull(request.ChannelPartnerName) },
                    { "@invoiceNumber", SafeString(request.InvoiceNumber) },
                    { "@schemeMonth", schemeMonthParsed ?? (object)DBNull.Value },
                    { "@materialQuantity", request.MaterialQuantity },
                    { "@benefitPerBag", benefitPerBag },
                    { "@totalBenefit", totalBenefit },
                    { "@remarks", SafeStringOrNull(request.Remarks) }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);

                var schemeId = result?.FirstOrDefault()?.Values?.FirstOrDefault()?.ToString() ?? "0";

                // Check for high quantity alert
                var highQuantityAlert = request.MaterialQuantity > 500;

                return Ok(new
                {
                    success = true,
                    message = "Incentive scheme registered successfully",
                    schemeId = schemeId,
                    benefitDetails = new
                    {
                        benefitPerBag = $"{benefitPerBag} AED/bag",
                        totalBenefit = $"{totalBenefit} AED",
                        materialQuantity = request.MaterialQuantity
                    },
                    alerts = highQuantityAlert ? new[] { "High quantity entry detected (>500 bags). Please verify the entry." } : new string[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                // Even if database fails, return success with error details
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("list")]
        public IActionResult GetIncentiveSchemes([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize)); // Limit pageSize

                var searchCondition = string.IsNullOrEmpty(search) ? "" :
                    "AND (beneficiaryName LIKE @Search OR beneficiaryRole LIKE @Search OR channelPartnerName LIKE @Search OR invoiceNumber LIKE @Search)";

                var query = $@"
                    SELECT incsid, beneficiaryRole, beneficiaryName, contactNumber, channelPartnerName, invoiceNumber,
                           schemeMonth, materialQuantity, benefitPerBag, totalBenefit, remarks,
                           createdt, isactive
                    FROM IncentiveSchemes
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var schemes = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount
                    FROM IncentiveSchemes
                    WHERE isactive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCount.ToString(), out int total);

                return Ok(new
                {
                    success = true,
                    data = schemes,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve incentive schemes",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("{schemeId}")]
        public IActionResult GetIncentiveScheme(int schemeId = 0)
        {
            try
            {
                if (schemeId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid scheme ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM IncentiveSchemes
                    WHERE incsid = @incsid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@incsid", schemeId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Incentive scheme not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve incentive scheme",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPut("{schemeId}")]
        public IActionResult UpdateIncentiveScheme(int schemeId = 0, [FromBody] IncentiveSchemeUpdateRequest request = null)
        {
            try
            {
                if (schemeId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid scheme ID",
                        timestamp = DateTime.Now
                    });
                }

                if (request == null)
                {
                    request = new IncentiveSchemeUpdateRequest();
                }

                // Validate quantity limits
                if (request.MaterialQuantity < 1 || request.MaterialQuantity > 1000)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Material quantity must be between 1 and 1000 bags",
                        timestamp = DateTime.Now
                    });
                }

                // Check if scheme exists
                var checkQuery = "SELECT COUNT(*) as Count FROM IncentiveSchemes WHERE incsid = @incsid AND isactive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@incsid", schemeId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                var count = checkResult?.FirstOrDefault()?["Count"]?.ToString() ?? "0";
                if (count == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Incentive scheme not found",
                        timestamp = DateTime.Now
                    });
                }

                // Calculate benefit per bag based on role
                var benefitPerBag = GetBenefitPerBag(request.BeneficiaryRole);
                var totalBenefit = request.MaterialQuantity * benefitPerBag;

                // Parse month safely
                DateTime? schemeMonthParsed = SafeParseMonth(request.SchemeMonth);

                // Update incentive scheme
                var updateQuery = @"
                    UPDATE IncentiveSchemes
                    SET beneficiaryRole = @beneficiaryRole, beneficiaryName = @beneficiaryName,
                        contactNumber = @contactNumber, channelPartnerName = @channelPartnerName,
                        invoiceNumber = @invoiceNumber, schemeMonth = @schemeMonth,
                        materialQuantity = @materialQuantity, benefitPerBag = @benefitPerBag,
                        totalBenefit = @totalBenefit, remarks = @remarks,
                        updatedt = GETDATE()
                    WHERE incsid = @incsid";

                var parameters = new Dictionary<string, object>
                {
                    { "@incsid", schemeId },
                    { "@beneficiaryRole", SafeString(request.BeneficiaryRole) },
                    { "@beneficiaryName", SafeString(request.BeneficiaryName) },
                    { "@contactNumber", SafeString(request.ContactNumber) },
                    { "@channelPartnerName", SafeStringOrNull(request.ChannelPartnerName) },
                    { "@invoiceNumber", SafeString(request.InvoiceNumber) },
                    { "@schemeMonth", schemeMonthParsed ?? (object)DBNull.Value },
                    { "@materialQuantity", request.MaterialQuantity },
                    { "@benefitPerBag", benefitPerBag },
                    { "@totalBenefit", totalBenefit },
                    { "@remarks", SafeStringOrNull(request.Remarks) }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                // Check for high quantity alert
                var highQuantityAlert = request.MaterialQuantity > 500;

                return Ok(new
                {
                    success = true,
                    message = "Incentive scheme updated successfully",
                    benefitDetails = new
                    {
                        benefitPerBag = $"{benefitPerBag} AED/bag",
                        totalBenefit = $"{totalBenefit} AED",
                        materialQuantity = request.MaterialQuantity
                    },
                    alerts = highQuantityAlert ? new[] { "High quantity entry detected (>500 bags). Please verify the entry." } : new string[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpDelete("{schemeId}")]
        public IActionResult DeleteIncentiveScheme(int schemeId = 0)
        {
            try
            {
                if (schemeId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid scheme ID",
                        timestamp = DateTime.Now
                    });
                }

                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE IncentiveSchemes
                    SET isactive = 'N', updatedt = GETDATE()
                    WHERE incsid = @incsid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@incsid", schemeId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = rowsAffected > 0 ? "Incentive scheme deleted successfully" : "Incentive scheme not found or already deleted",
                    rowsAffected = rowsAffected,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("beneficiary-roles")]
        public IActionResult GetBeneficiaryRoles()
        {
            var roles = new[]
            {
                "Retailer",
                "Purchase Manager",
                "Salesman",
                "Contractor/Painter"
            };

            return Ok(new
            {
                success = true,
                data = roles,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("benefit-calculator/{role}/{quantity}")]
        public IActionResult CalculateBenefit(string role, int quantity)
        {
            try
            {
                if (quantity < 1 || quantity > 1000)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Quantity must be between 1 and 1000 bags",
                        timestamp = DateTime.Now
                    });
                }

                var benefitPerBag = GetBenefitPerBag(role);
                var totalBenefit = quantity * benefitPerBag;
                var highQuantityAlert = quantity > 500;

                return Ok(new
                {
                    success = true,
                    data = new
                    {
                        role = role,
                        quantity = quantity,
                        benefitPerBag = $"{benefitPerBag} AED/bag",
                        totalBenefit = $"{totalBenefit} AED"
                    },
                    alerts = highQuantityAlert ? new[] { "High quantity entry detected (>500 bags). Please verify the entry." } : new string[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to calculate benefit",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        // Helper method to get benefit per bag based on role
        private decimal GetBenefitPerBag(string role)
        {
            var benefitMap = new Dictionary<string, decimal>
            {
                { "Retailer", 1.0m },
                { "Purchase Manager", 0.5m },
                { "Salesman", 1.0m },
                { "Contractor/Painter", 1.0m }
            };

            return benefitMap.ContainsKey(role) ? benefitMap[role] : 0.0m;
        }

        // Helper method to parse month string (MMMM yyyy format)
        private DateTime? SafeParseMonth(string monthString)
        {
            if (string.IsNullOrWhiteSpace(monthString))
                return null;

            try
            {
                // Try parsing "MMMM yyyy" format (e.g., "January 2024")
                var formats = new[] { "MMMM yyyy", "MMM yyyy", "MM/yyyy", "M/yyyy" };
                foreach (var format in formats)
                {
                    if (DateTime.TryParseExact(monthString, format, null, System.Globalization.DateTimeStyles.None, out DateTime result))
                    {
                        return result;
                    }
                }

                // Fallback to general parsing
                if (DateTime.TryParse(monthString, out DateTime generalResult))
                {
                    return generalResult;
                }
            }
            catch
            {
                // Ignore parsing errors
            }

            return null;
        }

        // Helper methods for safe data handling
        private static string SafeString(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? "" : input.Trim();
        }

        private static object SafeStringOrNull(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? (object)DBNull.Value : input.Trim();
        }
    }

    // Request Models
    public class IncentiveSchemeRequest
    {
        // Beneficiary Type
        public string BeneficiaryRole { get; set; } = "";

        // Exchange Details
        public string BeneficiaryName { get; set; } = "";
        public string ContactNumber { get; set; } = "";
        public string ChannelPartnerName { get; set; } = "";
        public string InvoiceNumber { get; set; } = "";
        public string SchemeMonth { get; set; } = "";
        public int MaterialQuantity { get; set; } = 0;
        public string Remarks { get; set; } = "";
    }

    public class IncentiveSchemeUpdateRequest
    {
        // Beneficiary Type
        public string BeneficiaryRole { get; set; } = "";

        // Exchange Details
        public string BeneficiaryName { get; set; } = "";
        public string ContactNumber { get; set; } = "";
        public string ChannelPartnerName { get; set; } = "";
        public string InvoiceNumber { get; set; } = "";
        public string SchemeMonth { get; set; } = "";
        public int MaterialQuantity { get; set; } = 0;
        public string Remarks { get; set; } = "";
    }
}












using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductEntryController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public ProductEntryController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("register")]
        public IActionResult RegisterProductEntry([FromBody] ProductEntryRequest request = null)
        {
            try
            {
                // Handle null request gracefully
                if (request == null)
                {
                    request = new ProductEntryRequest();
                }

                // Parse dates safely
                DateTime? targetDateParsed = SafeParseDate(request.TargetDate);
                DateTime? samplingDateParsed = SafeParseDate(request.SamplingDate);

                // Insert product entry registration
                var insertQuery = @"
                    INSERT INTO ProductEntries
                    (area, cityDistrict, pinCode, customerName, contractorName, mobile, address, siteType,
                     sampleReceiver, targetDate, remarks, region, latitude, longitude,
                     samplingDate, product, expectedOrder, sampleType, samplePhoto,
                     createdt, isactive)
                    VALUES
                    (@area, @cityDistrict, @pinCode, @customerName, @contractorName, @mobile, @address, @siteType,
                     @sampleReceiver, @targetDate, @remarks, @region, @latitude, @longitude,
                     @samplingDate, @product, @expectedOrder, @sampleType, @samplePhoto,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                var parameters = new Dictionary<string, object>
                {
                    // Site Details
                    { "@area", SafeString(request.Area) },
                    { "@cityDistrict", SafeString(request.CityDistrict) },
                    { "@pinCode", SafeString(request.PinCode) },
                    { "@customerName", SafeString(request.CustomerName) },
                    { "@contractorName", SafeString(request.ContractorName) },
                    { "@mobile", SafeString(request.Mobile) },
                    { "@address", SafeString(request.Address) },
                    { "@siteType", SafeString(request.SiteType) },
                    { "@sampleReceiver", SafeString(request.SampleReceiver) },
                    { "@targetDate", targetDateParsed ?? (object)DBNull.Value },
                    { "@remarks", SafeString(request.Remarks) },
                    { "@region", SafeString(request.Region) },
                    { "@latitude", SafeStringOrNull(request.Latitude) },
                    { "@longitude", SafeStringOrNull(request.Longitude) },

                    // Sampling Details
                    { "@samplingDate", samplingDateParsed ?? (object)DBNull.Value },
                    { "@product", SafeStringOrNull(request.Product) },
                    { "@expectedOrder", SafeStringOrNull(request.ExpectedOrder) },
                    { "@sampleType", SafeStringOrNull(request.SampleType) },
                    { "@samplePhoto", SafeStringOrNull(request.SamplePhoto) }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);

                var entryId = result?.FirstOrDefault()?.Values?.FirstOrDefault()?.ToString() ?? "0";

                return Ok(new
                {
                    success = true,
                    message = "Product entry registered successfully",
                    entryId = entryId,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                // Even if database fails, return success with error details
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("list")]
        public IActionResult GetProductEntries([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize)); // Limit pageSize

                var searchCondition = string.IsNullOrEmpty(search) ? "" :
                    "AND (customerName LIKE @Search OR contractorName LIKE @Search OR mobile LIKE @Search OR area LIKE @Search OR product LIKE @Search)";

                var query = $@"
                    SELECT entryid, area, cityDistrict, pinCode, customerName, contractorName, mobile, address,
                           siteType, sampleReceiver, targetDate, remarks, region, latitude, longitude,
                           samplingDate, product, expectedOrder, sampleType,
                           createdt, isactive
                    FROM ProductEntries
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var entries = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount
                    FROM ProductEntries
                    WHERE isactive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCount.ToString(), out int total);

                return Ok(new
                {
                    success = true,
                    data = entries,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve product entries",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("{entryId}")]
        public IActionResult GetProductEntry(int entryId = 0)
        {
            try
            {
                if (entryId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid entry ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM ProductEntries
                    WHERE entryid = @entryid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@entryid", entryId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Product entry not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve product entry",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPut("{entryId}")]
        public IActionResult UpdateProductEntry(int entryId = 0, [FromBody] ProductEntryUpdateRequest request = null)
        {
            try
            {
                if (entryId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid entry ID",
                        timestamp = DateTime.Now
                    });
                }

                if (request == null)
                {
                    request = new ProductEntryUpdateRequest();
                }

                // Check if entry exists
                var checkQuery = "SELECT COUNT(*) as Count FROM ProductEntries WHERE entryid = @entryid AND isactive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@entryid", entryId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                var count = checkResult?.FirstOrDefault()?["Count"]?.ToString() ?? "0";
                if (count == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Product entry not found",
                        timestamp = DateTime.Now
                    });
                }

                // Parse dates safely
                DateTime? targetDateParsed = SafeParseDate(request.TargetDate);
                DateTime? samplingDateParsed = SafeParseDate(request.SamplingDate);

                // Update product entry
                var updateQuery = @"
                    UPDATE ProductEntries
                    SET area = @area, cityDistrict = @cityDistrict, pinCode = @pinCode,
                        customerName = @customerName, contractorName = @contractorName, mobile = @mobile,
                        address = @address, siteType = @siteType, sampleReceiver = @sampleReceiver,
                        targetDate = @targetDate, remarks = @remarks, region = @region,
                        latitude = @latitude, longitude = @longitude, samplingDate = @samplingDate,
                        product = @product, expectedOrder = @expectedOrder, sampleType = @sampleType,
                        updatedt = GETDATE()
                    WHERE entryid = @entryid";

                var parameters = new Dictionary<string, object>
                {
                    { "@entryid", entryId },
                    { "@area", SafeString(request.Area) },
                    { "@cityDistrict", SafeString(request.CityDistrict) },
                    { "@pinCode", SafeString(request.PinCode) },
                    { "@customerName", SafeString(request.CustomerName) },
                    { "@contractorName", SafeString(request.ContractorName) },
                    { "@mobile", SafeString(request.Mobile) },
                    { "@address", SafeString(request.Address) },
                    { "@siteType", SafeString(request.SiteType) },
                    { "@sampleReceiver", SafeString(request.SampleReceiver) },
                    { "@targetDate", targetDateParsed ?? (object)DBNull.Value },
                    { "@remarks", SafeString(request.Remarks) },
                    { "@region", SafeString(request.Region) },
                    { "@latitude", SafeStringOrNull(request.Latitude) },
                    { "@longitude", SafeStringOrNull(request.Longitude) },
                    { "@samplingDate", samplingDateParsed ?? (object)DBNull.Value },
                    { "@product", SafeStringOrNull(request.Product) },
                    { "@expectedOrder", SafeStringOrNull(request.ExpectedOrder) },
                    { "@sampleType", SafeStringOrNull(request.SampleType) }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Product entry updated successfully",
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpDelete("{entryId}")]
        public IActionResult DeleteProductEntry(int entryId = 0)
        {
            try
            {
                if (entryId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid entry ID",
                        timestamp = DateTime.Now
                    });
                }

                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE ProductEntries
                    SET isactive = 'N', updatedt = GETDATE()
                    WHERE entryid = @entryid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@entryid", entryId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = rowsAffected > 0 ? "Product entry deleted successfully" : "Product entry not found or already deleted",
                    rowsAffected = rowsAffected,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPost("upload-sample-photo")]
        public IActionResult UploadSamplePhoto([FromForm] DocumentUploadRequest request = null)
        {
            try
            {
                if (request?.File == null || request.File.Length == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "No file provided",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file type (images only for sample photos)
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
                var fileExtension = Path.GetExtension(request.File.FileName)?.ToLowerInvariant() ?? "";

                if (!allowedExtensions.Contains(fileExtension))
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid file type. Only JPG and PNG files are allowed for sample photos.",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file size (5MB limit for sample photos)
                if (request.File.Length > 5 * 1024 * 1024)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "File size cannot exceed 5MB",
                        timestamp = DateTime.Now
                    });
                }

                // Generate unique filename
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var uploadsPath = Path.Combine(Directory.GetCurrentDirectory(), "uploads", "sample-photos");

                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    request.File.CopyTo(stream);
                }

                return Ok(new
                {
                    success = true,
                    message = "Sample photo uploaded successfully",
                    fileName = fileName,
                    filePath = $"/uploads/sample-photos/{fileName}",
                    documentType = SafeString(request.DocumentType),
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Upload completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("areas")]
        public IActionResult GetAreas()
        {
            var areas = new[]
            {
                "Area 1",
                "Area 2",
                "Area 3"
            };

            return Ok(new
            {
                success = true,
                data = areas,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("cities-districts")]
        public IActionResult GetCitiesDistricts()
        {
            var citiesDistricts = new[]
            {
                "City 1",
                "City 2",
                "City 3"
            };

            return Ok(new
            {
                success = true,
                data = citiesDistricts,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("site-types")]
        public IActionResult GetSiteTypes()
        {
            var siteTypes = new[]
            {
                "Type 1",
                "Type 2",
                "Type 3"
            };

            return Ok(new
            {
                success = true,
                data = siteTypes,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("sample-receivers")]
        public IActionResult GetSampleReceivers()
        {
            var receivers = new[]
            {
                "Person 1",
                "Person 2",
                "Person 3"
            };

            return Ok(new
            {
                success = true,
                data = receivers,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("regions")]
        public IActionResult GetRegions()
        {
            var regions = new[]
            {
                "Region 1",
                "Region 2",
                "Region 3"
            };

            return Ok(new
            {
                success = true,
                data = regions,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("products")]
        public IActionResult GetProducts()
        {
            var products = new[]
            {
                "Product 1",
                "Product 2",
                "Product 3"
            };

            return Ok(new
            {
                success = true,
                data = products,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("sample-types")]
        public IActionResult GetSampleTypes()
        {
            var sampleTypes = new[]
            {
                "Type A",
                "Type B",
                "Type C"
            };

            return Ok(new
            {
                success = true,
                data = sampleTypes,
                timestamp = DateTime.Now
            });
        }

        // Helper methods for safe data handling
        private static string SafeString(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? "" : input.Trim();
        }

        private static object SafeStringOrNull(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? (object)DBNull.Value : input.Trim();
        }

        private static DateTime? SafeParseDate(string dateString)
        {
            if (string.IsNullOrWhiteSpace(dateString))
                return null;

            // Try multiple date formats
            var formats = new[] { "yyyy-MM-dd", "MM/dd/yyyy", "dd/MM/yyyy", "yyyy/MM/dd", "MM-dd-yyyy", "dd-MM-yyyy" };

            foreach (var format in formats)
            {
                if (DateTime.TryParseExact(dateString, format, null, System.Globalization.DateTimeStyles.None, out DateTime result))
                {
                    return result;
                }
            }

            // Fallback to general parsing
            if (DateTime.TryParse(dateString, out DateTime generalResult))
            {
                return generalResult;
            }

            return null;
        }
    }

    // Request Models
    public class ProductEntryRequest
    {
        // Site Details
        public string Area { get; set; } = "";
        public string CityDistrict { get; set; } = "";
        public string PinCode { get; set; } = "";
        public string CustomerName { get; set; } = "";
        public string ContractorName { get; set; } = "";
        public string Mobile { get; set; } = "";
        public string Address { get; set; } = "";
        public string SiteType { get; set; } = "";
        public string SampleReceiver { get; set; } = "";
        public string TargetDate { get; set; } = "";
        public string Remarks { get; set; } = "";
        public string Region { get; set; } = "";
        public string Latitude { get; set; } = "";
        public string Longitude { get; set; } = "";

        // Sampling Details
        public string SamplingDate { get; set; } = "";
        public string Product { get; set; } = "";
        public string ExpectedOrder { get; set; } = "";
        public string SampleType { get; set; } = "";
        public string SamplePhoto { get; set; } = "";
    }

    public class ProductEntryUpdateRequest
    {
        // Site Details
        public string Area { get; set; } = "";
        public string CityDistrict { get; set; } = "";
        public string PinCode { get; set; } = "";
        public string CustomerName { get; set; } = "";
        public string ContractorName { get; set; } = "";
        public string Mobile { get; set; } = "";
        public string Address { get; set; } = "";
        public string SiteType { get; set; } = "";
        public string SampleReceiver { get; set; } = "";
        public string TargetDate { get; set; } = "";
        public string Remarks { get; set; } = "";
        public string Region { get; set; } = "";
        public string Latitude { get; set; } = "";
        public string Longitude { get; set; } = "";

        // Sampling Details
        public string SamplingDate { get; set; } = "";
        public string Product { get; set; } = "";
        public string ExpectedOrder { get; set; } = "";
        public string SampleType { get; set; } = "";
    }
}








using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RetailerController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public RetailerController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("register")]
        public IActionResult RegisterRetailer([FromBody] RetailerRegistrationRequest request = null)
        {
            try
            {
                // Handle null request gracefully
                if (request == null)
                {
                    request = new RetailerRegistrationRequest();
                }

                // Generate retail code based on category
                var retailCode = GetRetailCode(request.RetailerCategory);

                // Insert retailer registration with all optional fields
                var insertQuery = @"
                    INSERT INTO RetailerRegistrations
                    (processType, retailerCategory, retailCode, area, district, registerWith, gstNumber, panNumber,
                     firmName, mobile, officeTelephone, email, address1, address2, address3,
                     stockistCode, tallyRetailerCode, concernEmployee, schemeRequired, aadharCardNo, proprietorName,
                     retailerProfileImage, panGstImage, aadharImage,
                     createdt, isactive)
                    VALUES
                    (@processType, @retailerCategory, @retailCode, @area, @district, @registerWith, @gstNumber, @panNumber,
                     @firmName, @mobile, @officeTelephone, @email, @address1, @address2, @address3,
                     @stockistCode, @tallyRetailerCode, @concernEmployee, @schemeRequired, @aadharCardNo, @proprietorName,
                     @retailerProfileImage, @panGstImage, @aadharImage,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                var parameters = new Dictionary<string, object>
                {
                    // Basic Details
                    { "@processType", SafeString(request.ProcessType) },
                    { "@retailerCategory", SafeString(request.RetailerCategory) },
                    { "@retailCode", retailCode },
                    { "@area", SafeString(request.Area) },
                    { "@district", SafeString(request.District) },
                    { "@registerWith", SafeString(request.RegisterWith) },
                    { "@gstNumber", SafeStringOrNull(request.GstNumber) },
                    { "@panNumber", SafeStringOrNull(request.PanNumber) },
                    { "@firmName", SafeStringOrNull(request.FirmName) },
                    { "@mobile", SafeString(request.Mobile) },
                    { "@officeTelephone", SafeStringOrNull(request.OfficeTelephone) },
                    { "@email", SafeStringOrNull(request.Email) },
                    { "@address1", SafeString(request.Address1) },
                    { "@address2", SafeStringOrNull(request.Address2) },
                    { "@address3", SafeStringOrNull(request.Address3) },

                    // Contact Details
                    { "@stockistCode", SafeString(request.StockistCode ?? "4401S711") },
                    { "@tallyRetailerCode", SafeStringOrNull(request.TallyRetailerCode) },
                    { "@concernEmployee", SafeStringOrNull(request.ConcernEmployee) },
                    { "@schemeRequired", SafeStringOrNull(request.SchemeRequired) },
                    { "@aadharCardNo", SafeStringOrNull(request.AadharCardNo) },
                    { "@proprietorName", SafeStringOrNull(request.ProprietorName) },

                    // File uploads
                    { "@retailerProfileImage", SafeStringOrNull(request.RetailerProfileImage) },
                    { "@panGstImage", SafeStringOrNull(request.PanGstImage) },
                    { "@aadharImage", SafeStringOrNull(request.AadharImage) }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);

                var retailerId = result?.FirstOrDefault()?.Values?.FirstOrDefault()?.ToString() ?? "0";

                return Ok(new
                {
                    success = true,
                    message = "Retailer registered successfully",
                    retailerId = retailerId,
                    retailCode = retailCode,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                // Even if database fails, return success with error details
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("list")]
        public IActionResult GetRetailers([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize)); // Limit pageSize

                var searchCondition = string.IsNullOrEmpty(search) ? "" :
                    "AND (firmName LIKE @Search OR mobile LIKE @Search OR gstNumber LIKE @Search OR panNumber LIKE @Search OR retailerCategory LIKE @Search)";

                var query = $@"
                    SELECT rtlrid, processType, retailerCategory, retailCode, area, district, registerWith,
                           gstNumber, panNumber, firmName, mobile, email, address1,
                           stockistCode, tallyRetailerCode, concernEmployee, schemeRequired,
                           createdt, isactive
                    FROM RetailerRegistrations
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var retailers = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount
                    FROM RetailerRegistrations
                    WHERE isactive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCount.ToString(), out int total);

                return Ok(new
                {
                    success = true,
                    data = retailers,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve retailers",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("{retailerId}")]
        public IActionResult GetRetailer(int retailerId = 0)
        {
            try
            {
                if (retailerId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid retailer ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM RetailerRegistrations
                    WHERE rtlrid = @rtlrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@rtlrid", retailerId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Retailer not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve retailer",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPut("{retailerId}")]
        public IActionResult UpdateRetailer(int retailerId = 0, [FromBody] RetailerUpdateRequest request = null)
        {
            try
            {
                if (retailerId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid retailer ID",
                        timestamp = DateTime.Now
                    });
                }

                if (request == null)
                {
                    request = new RetailerUpdateRequest();
                }

                // Check if retailer exists
                var checkQuery = "SELECT COUNT(*) as Count FROM RetailerRegistrations WHERE rtlrid = @rtlrid AND isactive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@rtlrid", retailerId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                var count = checkResult?.FirstOrDefault()?["Count"]?.ToString() ?? "0";
                if (count == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Retailer not found",
                        timestamp = DateTime.Now
                    });
                }

                // Update retailer
                var updateQuery = @"
                    UPDATE RetailerRegistrations
                    SET processType = @processType, retailerCategory = @retailerCategory, area = @area, district = @district,
                        registerWith = @registerWith, gstNumber = @gstNumber, panNumber = @panNumber, firmName = @firmName,
                        mobile = @mobile, officeTelephone = @officeTelephone, email = @email,
                        address1 = @address1, address2 = @address2, address3 = @address3,
                        tallyRetailerCode = @tallyRetailerCode, concernEmployee = @concernEmployee,
                        schemeRequired = @schemeRequired, aadharCardNo = @aadharCardNo, proprietorName = @proprietorName,
                        updatedt = GETDATE()
                    WHERE rtlrid = @rtlrid";

                var parameters = new Dictionary<string, object>
                {
                    { "@rtlrid", retailerId },
                    { "@processType", SafeString(request.ProcessType) },
                    { "@retailerCategory", SafeString(request.RetailerCategory) },
                    { "@area", SafeString(request.Area) },
                    { "@district", SafeString(request.District) },
                    { "@registerWith", SafeString(request.RegisterWith) },
                    { "@gstNumber", SafeStringOrNull(request.GstNumber) },
                    { "@panNumber", SafeStringOrNull(request.PanNumber) },
                    { "@firmName", SafeStringOrNull(request.FirmName) },
                    { "@mobile", SafeString(request.Mobile) },
                    { "@officeTelephone", SafeStringOrNull(request.OfficeTelephone) },
                    { "@email", SafeStringOrNull(request.Email) },
                    { "@address1", SafeString(request.Address1) },
                    { "@address2", SafeStringOrNull(request.Address2) },
                    { "@address3", SafeStringOrNull(request.Address3) },
                    { "@tallyRetailerCode", SafeStringOrNull(request.TallyRetailerCode) },
                    { "@concernEmployee", SafeStringOrNull(request.ConcernEmployee) },
                    { "@schemeRequired", SafeStringOrNull(request.SchemeRequired) },
                    { "@aadharCardNo", SafeStringOrNull(request.AadharCardNo) },
                    { "@proprietorName", SafeStringOrNull(request.ProprietorName) }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Retailer updated successfully",
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpDelete("{retailerId}")]
        public IActionResult DeleteRetailer(int retailerId = 0)
        {
            try
            {
                if (retailerId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid retailer ID",
                        timestamp = DateTime.Now
                    });
                }

                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE RetailerRegistrations
                    SET isactive = 'N', updatedt = GETDATE()
                    WHERE rtlrid = @rtlrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@rtlrid", retailerId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = rowsAffected > 0 ? "Retailer deleted successfully" : "Retailer not found or already deleted",
                    rowsAffected = rowsAffected,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPost("upload-document")]
        public IActionResult UploadDocument([FromForm] DocumentUploadRequest request = null)
        {
            try
            {
                if (request?.File == null || request.File.Length == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "No file provided",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file type
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".pdf" };
                var fileExtension = Path.GetExtension(request.File.FileName)?.ToLowerInvariant() ?? "";

                if (!allowedExtensions.Contains(fileExtension))
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid file type. Only JPG, PNG, and PDF files are allowed.",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file size (5MB limit for retailer documents)
                if (request.File.Length > 5 * 1024 * 1024)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "File size cannot exceed 5MB",
                        timestamp = DateTime.Now
                    });
                }

                // Generate unique filename
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var uploadsPath = Path.Combine(Directory.GetCurrentDirectory(), "uploads", "retailer-documents");

                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    request.File.CopyTo(stream);
                }

                return Ok(new
                {
                    success = true,
                    message = "File uploaded successfully",
                    fileName = fileName,
                    filePath = $"/uploads/retailer-documents/{fileName}",
                    documentType = SafeString(request.DocumentType),
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Upload completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("process-types")]
        public IActionResult GetProcessTypes()
        {
            var processTypes = new[]
            {
                "Add",
                "Update"
            };

            return Ok(new
            {
                success = true,
                data = processTypes,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("retailer-categories")]
        public IActionResult GetRetailerCategories()
        {
            var categories = new[]
            {
                "Urban",
                "Rural",
                "Direct Dealer"
            };

            return Ok(new
            {
                success = true,
                data = categories,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("register-options")]
        public IActionResult GetRegisterOptions()
        {
            var options = new[]
            {
                "GST",
                "PAN"
            };

            return Ok(new
            {
                success = true,
                data = options,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("scheme-options")]
        public IActionResult GetSchemeOptions()
        {
            var options = new[]
            {
                "Yes",
                "No"
            };

            return Ok(new
            {
                success = true,
                data = options,
                timestamp = DateTime.Now
            });
        }

        // Helper method to get retail code based on category
        private string GetRetailCode(string category)
        {
            var categoryMap = new Dictionary<string, string>
            {
                { "Urban", "URB" },
                { "Rural", "RUR" },
                { "Direct Dealer", "DDR" }
            };

            return categoryMap.ContainsKey(category) ? categoryMap[category] : "";
        }

        // Helper methods for safe data handling
        private static string SafeString(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? "" : input.Trim();
        }

        private static object SafeStringOrNull(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? (object)DBNull.Value : input.Trim();
        }
    }

    // Request Models
    public class RetailerRegistrationRequest
    {
        // Basic Details
        public string ProcessType { get; set; } = "";
        public string RetailerCategory { get; set; } = "";
        public string Area { get; set; } = "";
        public string District { get; set; } = "";
        public string RegisterWith { get; set; } = "";
        public string GstNumber { get; set; } = "";
        public string PanNumber { get; set; } = "";
        public string FirmName { get; set; } = "";
        public string Mobile { get; set; } = "";
        public string OfficeTelephone { get; set; } = "";
        public string Email { get; set; } = "";
        public string Address1 { get; set; } = "";
        public string Address2 { get; set; } = "";
        public string Address3 { get; set; } = "";

        // Contact Details
        public string StockistCode { get; set; } = "4401S711";
        public string TallyRetailerCode { get; set; } = "";
        public string ConcernEmployee { get; set; } = "";
        public string SchemeRequired { get; set; } = "";
        public string AadharCardNo { get; set; } = "";
        public string ProprietorName { get; set; } = "";

        // File uploads
        public string RetailerProfileImage { get; set; } = "";
        public string PanGstImage { get; set; } = "";
        public string AadharImage { get; set; } = "";
    }

    public class RetailerUpdateRequest
    {
        // Basic Details
        public string ProcessType { get; set; } = "";
        public string RetailerCategory { get; set; } = "";
        public string Area { get; set; } = "";
        public string District { get; set; } = "";
        public string RegisterWith { get; set; } = "";
        public string GstNumber { get; set; } = "";
        public string PanNumber { get; set; } = "";
        public string FirmName { get; set; } = "";
        public string Mobile { get; set; } = "";
        public string OfficeTelephone { get; set; } = "";
        public string Email { get; set; } = "";
        public string Address1 { get; set; } = "";
        public string Address2 { get; set; } = "";
        public string Address3 { get; set; } = "";

        // Contact Details
        public string TallyRetailerCode { get; set; } = "";
        public string ConcernEmployee { get; set; } = "";
        public string SchemeRequired { get; set; } = "";
        public string AadharCardNo { get; set; } = "";
        public string ProprietorName { get; set; } = "";
    }
}










using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SampleDistributionController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public SampleDistributionController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("register")]
        public IActionResult RegisterSampleDistribution([FromBody] SampleDistributionRequest request = null)
        {
            try
            {
                // Handle null request gracefully
                if (request == null)
                {
                    request = new SampleDistributionRequest();
                }

                // Validate material quantity
                if (request.MaterialQuantity <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Material quantity must be greater than 0",
                        timestamp = DateTime.Now
                    });
                }

                // Parse distribution date safely
                DateTime? distributionDateParsed = SafeParseDate(request.DistributionDate);

                // Insert sample distribution registration
                var insertQuery = @"
                    INSERT INTO SampleDistributions
                    (emiratesId, area, retailerName, retailerCode, concernDistributor,
                     painterName, painterMobile, skuSize, materialQuantity, distributionDate,
                     createdt, isactive)
                    VALUES
                    (@emiratesId, @area, @retailerName, @retailerCode, @concernDistributor,
                     @painterName, @painterMobile, @skuSize, @materialQuantity, @distributionDate,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                var parameters = new Dictionary<string, object>
                {
                    // Retailer Details
                    { "@emiratesId", SafeString(request.EmiratesId) },
                    { "@area", SafeString(request.Area) },
                    { "@retailerName", SafeString(request.RetailerName) },
                    { "@retailerCode", SafeString(request.RetailerCode) },
                    { "@concernDistributor", SafeString(request.ConcernDistributor) },

                    // Distribution Details
                    { "@painterName", SafeString(request.PainterName) },
                    { "@painterMobile", SafeString(request.PainterMobile) },
                    { "@skuSize", SafeString(request.SkuSize) },
                    { "@materialQuantity", request.MaterialQuantity },
                    { "@distributionDate", distributionDateParsed ?? (object)DBNull.Value }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);

                var distributionId = result?.FirstOrDefault()?.Values?.FirstOrDefault()?.ToString() ?? "0";

                return Ok(new
                {
                    success = true,
                    message = "Sample distribution registered successfully",
                    distributionId = distributionId,
                    distributionDetails = new
                    {
                        materialQuantity = $"{request.MaterialQuantity} Kg",
                        skuSize = request.SkuSize
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                // Even if database fails, return success with error details
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("list")]
        public IActionResult GetSampleDistributions([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize)); // Limit pageSize

                var searchCondition = string.IsNullOrEmpty(search) ? "" :
                    "AND (retailerName LIKE @Search OR painterName LIKE @Search OR retailerCode LIKE @Search OR emiratesId LIKE @Search)";

                var query = $@"
                    SELECT distid, emiratesId, area, retailerName, retailerCode, concernDistributor,
                           painterName, painterMobile, skuSize, materialQuantity, distributionDate,
                           createdt, isactive
                    FROM SampleDistributions
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var distributions = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount
                    FROM SampleDistributions
                    WHERE isactive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCount.ToString(), out int total);

                return Ok(new
                {
                    success = true,
                    data = distributions,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve sample distributions",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("{distributionId}")]
        public IActionResult GetSampleDistribution(int distributionId = 0)
        {
            try
            {
                if (distributionId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid distribution ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM SampleDistributions
                    WHERE distid = @distid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@distid", distributionId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Sample distribution not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve sample distribution",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPut("{distributionId}")]
        public IActionResult UpdateSampleDistribution(int distributionId = 0, [FromBody] SampleDistributionUpdateRequest request = null)
        {
            try
            {
                if (distributionId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid distribution ID",
                        timestamp = DateTime.Now
                    });
                }

                if (request == null)
                {
                    request = new SampleDistributionUpdateRequest();
                }

                // Validate material quantity
                if (request.MaterialQuantity <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Material quantity must be greater than 0",
                        timestamp = DateTime.Now
                    });
                }

                // Check if distribution exists
                var checkQuery = "SELECT COUNT(*) as Count FROM SampleDistributions WHERE distid = @distid AND isactive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@distid", distributionId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                var count = checkResult?.FirstOrDefault()?["Count"]?.ToString() ?? "0";
                if (count == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Sample distribution not found",
                        timestamp = DateTime.Now
                    });
                }

                // Parse distribution date safely
                DateTime? distributionDateParsed = SafeParseDate(request.DistributionDate);

                // Update sample distribution
                var updateQuery = @"
                    UPDATE SampleDistributions
                    SET emiratesId = @emiratesId, area = @area, retailerName = @retailerName,
                        retailerCode = @retailerCode, concernDistributor = @concernDistributor,
                        painterName = @painterName, painterMobile = @painterMobile,
                        skuSize = @skuSize, materialQuantity = @materialQuantity,
                        distributionDate = @distributionDate, updatedt = GETDATE()
                    WHERE distid = @distid";

                var parameters = new Dictionary<string, object>
                {
                    { "@distid", distributionId },
                    { "@emiratesId", SafeString(request.EmiratesId) },
                    { "@area", SafeString(request.Area) },
                    { "@retailerName", SafeString(request.RetailerName) },
                    { "@retailerCode", SafeString(request.RetailerCode) },
                    { "@concernDistributor", SafeString(request.ConcernDistributor) },
                    { "@painterName", SafeString(request.PainterName) },
                    { "@painterMobile", SafeString(request.PainterMobile) },
                    { "@skuSize", SafeString(request.SkuSize) },
                    { "@materialQuantity", request.MaterialQuantity },
                    { "@distributionDate", distributionDateParsed ?? (object)DBNull.Value }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Sample distribution updated successfully",
                    distributionDetails = new
                    {
                        materialQuantity = $"{request.MaterialQuantity} Kg",
                        skuSize = request.SkuSize
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpDelete("{distributionId}")]
        public IActionResult DeleteSampleDistribution(int distributionId = 0)
        {
            try
            {
                if (distributionId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid distribution ID",
                        timestamp = DateTime.Now
                    });
                }

                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE SampleDistributions
                    SET isactive = 'N', updatedt = GETDATE()
                    WHERE distid = @distid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@distid", distributionId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = rowsAffected > 0 ? "Sample distribution deleted successfully" : "Sample distribution not found or already deleted",
                    rowsAffected = rowsAffected,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("areas")]
        public IActionResult GetAreas()
        {
            var areas = new[]
            {
                "Area 1",
                "Area 2",
                "Area 3"
            };

            return Ok(new
            {
                success = true,
                data = areas,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("sku-sizes")]
        public IActionResult GetSkuSizes()
        {
            var skuSizes = new[]
            {
                "1 Kg",
                "5 Kg"
            };

            return Ok(new
            {
                success = true,
                data = skuSizes,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("distribution-summary")]
        public IActionResult GetDistributionSummary([FromQuery] string? startDate = null, [FromQuery] string? endDate = null)
        {
            try
            {
                var dateCondition = "";
                var parameters = new Dictionary<string, object>();

                if (!string.IsNullOrEmpty(startDate) && !string.IsNullOrEmpty(endDate))
                {
                    dateCondition = "AND distributionDate BETWEEN @StartDate AND @EndDate";
                    parameters.Add("@StartDate", startDate);
                    parameters.Add("@EndDate", endDate);
                }

                var query = $@"
                    SELECT
                        COUNT(*) as TotalDistributions,
                        SUM(materialQuantity) as TotalQuantity,
                        AVG(materialQuantity) as AverageQuantity,
                        COUNT(DISTINCT retailerCode) as UniqueRetailers,
                        COUNT(DISTINCT painterName) as UniquePainters
                    FROM SampleDistributions
                    WHERE isactive = 'Y' {dateCondition}";

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = true,
                        data = new
                        {
                            totalDistributions = 0,
                            totalQuantity = 0.0,
                            averageQuantity = 0.0,
                            uniqueRetailers = 0,
                            uniquePainters = 0
                        },
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to get distribution summary",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        // Helper methods for safe data handling
        private static string SafeString(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? "" : input.Trim();
        }

        private static DateTime? SafeParseDate(string dateString)
        {
            if (string.IsNullOrWhiteSpace(dateString))
                return null;

            // Try multiple date formats
            var formats = new[] { "yyyy-MM-dd", "MM/dd/yyyy", "dd/MM/yyyy", "yyyy/MM/dd", "MM-dd-yyyy", "dd-MM-yyyy" };

            foreach (var format in formats)
            {
                if (DateTime.TryParseExact(dateString, format, null, System.Globalization.DateTimeStyles.None, out DateTime result))
                {
                    return result;
                }
            }

            // Fallback to general parsing
            if (DateTime.TryParse(dateString, out DateTime generalResult))
            {
                return generalResult;
            }

            return null;
        }
    }

    // Request Models
    public class SampleDistributionRequest
    {
        // Retailer Details
        public string EmiratesId { get; set; } = "";
        public string Area { get; set; } = "";
        public string RetailerName { get; set; } = "";
        public string RetailerCode { get; set; } = "";
        public string ConcernDistributor { get; set; } = "";

        // Distribution Details
        public string PainterName { get; set; } = "";
        public string PainterMobile { get; set; } = "";
        public string SkuSize { get; set; } = "";
        public decimal MaterialQuantity { get; set; } = 0;
        public string DistributionDate { get; set; } = "";
    }

    public class SampleDistributionUpdateRequest
    {
        // Retailer Details
        public string EmiratesId { get; set; } = "";
        public string Area { get; set; } = "";
        public string RetailerName { get; set; } = "";
        public string RetailerCode { get; set; } = "";
        public string ConcernDistributor { get; set; } = "";

        // Distribution Details
        public string PainterName { get; set; } = "";
        public string PainterMobile { get; set; } = "";
        public string SkuSize { get; set; } = "";
        public decimal MaterialQuantity { get; set; } = 0;
        public string DistributionDate { get; set; } = "";
    }
}










using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SamplingDriveController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public SamplingDriveController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("register")]
        public IActionResult RegisterSamplingDrive([FromBody] SamplingDriveRequest request = null)
        {
            try
            {
                // Handle null request gracefully
                if (request == null)
                {
                    request = new SamplingDriveRequest();
                }

                // Validate quantities
                if (request.MaterialQtyDistributed <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Material quantity distributed must be greater than 0",
                        timestamp = DateTime.Now
                    });
                }

                if (request.MissedQuantity < 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Missed quantity cannot be negative",
                        timestamp = DateTime.Now
                    });
                }

                // Auto-calculate reimbursement amount if not provided
                if (request.ReimbursementAmount == 0 && !string.IsNullOrEmpty(request.ReimbursementMode))
                {
                    request.ReimbursementAmount = GetReimbursementAmount(request.ReimbursementMode);
                }

                // Parse distribution date safely
                DateTime? distributionDateParsed = SafeParseDate(request.DistributionDate);

                // Insert sampling drive registration
                var insertQuery = @"
                    INSERT INTO SamplingDrives
                    (retailer, retailerCode, concernDistributor, area, distributionDate,
                     painterName, contactNumber, skuSize, materialQtyDistributed, missedQuantity,
                     samplePhoto, reimbursementMode, reimbursementAmount,
                     createdt, isactive)
                    VALUES
                    (@retailer, @retailerCode, @concernDistributor, @area, @distributionDate,
                     @painterName, @contactNumber, @skuSize, @materialQtyDistributed, @missedQuantity,
                     @samplePhoto, @reimbursementMode, @reimbursementAmount,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                var parameters = new Dictionary<string, object>
                {
                    // Sample Material Distribution
                    { "@retailer", SafeString(request.Retailer) },
                    { "@retailerCode", SafeString(request.RetailerCode) },
                    { "@concernDistributor", SafeString(request.ConcernDistributor) },
                    { "@area", SafeString(request.Area) },
                    { "@distributionDate", distributionDateParsed ?? (object)DBNull.Value },

                    // Execution Details
                    { "@painterName", SafeString(request.PainterName) },
                    { "@contactNumber", SafeString(request.ContactNumber) },
                    { "@skuSize", SafeString(request.SkuSize) },
                    { "@materialQtyDistributed", request.MaterialQtyDistributed },
                    { "@missedQuantity", request.MissedQuantity },

                    // Sample Proof
                    { "@samplePhoto", SafeStringOrNull(request.SamplePhoto) },

                    // Reimbursement
                    { "@reimbursementMode", SafeStringOrNull(request.ReimbursementMode) },
                    { "@reimbursementAmount", request.ReimbursementAmount }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);

                var driveId = result?.FirstOrDefault()?.Values?.FirstOrDefault()?.ToString() ?? "0";

                return Ok(new
                {
                    success = true,
                    message = "Sampling drive registered successfully",
                    driveId = driveId,
                    distributionDetails = new
                    {
                        materialQtyDistributed = $"{request.MaterialQtyDistributed} Kg",
                        missedQuantity = $"{request.MissedQuantity} Kg",
                        reimbursementAmount = $"{request.ReimbursementAmount} AED"
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                // Even if database fails, return success with error details
                return Ok(new
                {
                    success = false,
                    message = "Registration completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("list")]
        public IActionResult GetSamplingDrives([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = Math.Max(0, (page - 1) * Math.Max(1, pageSize));
                pageSize = Math.Max(1, Math.Min(100, pageSize)); // Limit pageSize

                var searchCondition = string.IsNullOrEmpty(search) ? "" :
                    "AND (retailer LIKE @Search OR painterName LIKE @Search OR retailerCode LIKE @Search OR area LIKE @Search)";

                var query = $@"
                    SELECT driveid, retailer, retailerCode, concernDistributor, area, distributionDate,
                           painterName, contactNumber, skuSize, materialQtyDistributed, missedQuantity,
                           reimbursementMode, reimbursementAmount,
                           createdt, isactive
                    FROM SamplingDrives
                    WHERE isactive = 'Y' {searchCondition}
                    ORDER BY createdt DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var drives = _dbHelper.WebSessBean(query, parameters) ?? new List<Dictionary<string, object>>();

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount
                    FROM SamplingDrives
                    WHERE isactive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = countResult?.FirstOrDefault()?["TotalCount"]?.ToString() ?? "0";
                int.TryParse(totalCount.ToString(), out int total);

                return Ok(new
                {
                    success = true,
                    data = drives,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = total,
                        totalPages = (int)Math.Ceiling((double)total / pageSize)
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    data = new List<object>(),
                    message = "Failed to retrieve sampling drives",
                    error = ex.Message,
                    pagination = new { page = 1, pageSize = 10, totalCount = 0, totalPages = 0 },
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("{driveId}")]
        public IActionResult GetSamplingDrive(int driveId = 0)
        {
            try
            {
                if (driveId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid drive ID",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                var query = @"
                    SELECT * FROM SamplingDrives
                    WHERE driveid = @driveid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@driveid", driveId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Sampling drive not found",
                        data = (object)null,
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to retrieve sampling drive",
                    error = ex.Message,
                    data = (object)null,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPut("{driveId}")]
        public IActionResult UpdateSamplingDrive(int driveId = 0, [FromBody] SamplingDriveUpdateRequest request = null)
        {
            try
            {
                if (driveId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid drive ID",
                        timestamp = DateTime.Now
                    });
                }

                if (request == null)
                {
                    request = new SamplingDriveUpdateRequest();
                }

                // Validate quantities
                if (request.MaterialQtyDistributed <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Material quantity distributed must be greater than 0",
                        timestamp = DateTime.Now
                    });
                }

                if (request.MissedQuantity < 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Missed quantity cannot be negative",
                        timestamp = DateTime.Now
                    });
                }

                // Check if drive exists
                var checkQuery = "SELECT COUNT(*) as Count FROM SamplingDrives WHERE driveid = @driveid AND isactive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@driveid", driveId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                var count = checkResult?.FirstOrDefault()?["Count"]?.ToString() ?? "0";
                if (count == "0")
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Sampling drive not found",
                        timestamp = DateTime.Now
                    });
                }

                // Auto-calculate reimbursement amount if not provided
                if (request.ReimbursementAmount == 0 && !string.IsNullOrEmpty(request.ReimbursementMode))
                {
                    request.ReimbursementAmount = GetReimbursementAmount(request.ReimbursementMode);
                }

                // Parse distribution date safely
                DateTime? distributionDateParsed = SafeParseDate(request.DistributionDate);

                // Update sampling drive
                var updateQuery = @"
                    UPDATE SamplingDrives
                    SET retailer = @retailer, retailerCode = @retailerCode, concernDistributor = @concernDistributor,
                        area = @area, distributionDate = @distributionDate, painterName = @painterName,
                        contactNumber = @contactNumber, skuSize = @skuSize, materialQtyDistributed = @materialQtyDistributed,
                        missedQuantity = @missedQuantity, reimbursementMode = @reimbursementMode,
                        reimbursementAmount = @reimbursementAmount, updatedt = GETDATE()
                    WHERE driveid = @driveid";

                var parameters = new Dictionary<string, object>
                {
                    { "@driveid", driveId },
                    { "@retailer", SafeString(request.Retailer) },
                    { "@retailerCode", SafeString(request.RetailerCode) },
                    { "@concernDistributor", SafeString(request.ConcernDistributor) },
                    { "@area", SafeString(request.Area) },
                    { "@distributionDate", distributionDateParsed ?? (object)DBNull.Value },
                    { "@painterName", SafeString(request.PainterName) },
                    { "@contactNumber", SafeString(request.ContactNumber) },
                    { "@skuSize", SafeString(request.SkuSize) },
                    { "@materialQtyDistributed", request.MaterialQtyDistributed },
                    { "@missedQuantity", request.MissedQuantity },
                    { "@reimbursementMode", SafeStringOrNull(request.ReimbursementMode) },
                    { "@reimbursementAmount", request.ReimbursementAmount }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Sampling drive updated successfully",
                    distributionDetails = new
                    {
                        materialQtyDistributed = $"{request.MaterialQtyDistributed} Kg",
                        missedQuantity = $"{request.MissedQuantity} Kg",
                        reimbursementAmount = $"{request.ReimbursementAmount} AED"
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Update completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpDelete("{driveId}")]
        public IActionResult DeleteSamplingDrive(int driveId = 0)
        {
            try
            {
                if (driveId <= 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid drive ID",
                        timestamp = DateTime.Now
                    });
                }

                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE SamplingDrives
                    SET isactive = 'N', updatedt = GETDATE()
                    WHERE driveid = @driveid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@driveid", driveId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = rowsAffected > 0 ? "Sampling drive deleted successfully" : "Sampling drive not found or already deleted",
                    rowsAffected = rowsAffected,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Delete completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpPost("upload-sample-photo")]
        public IActionResult UploadSamplePhoto([FromForm] DocumentUploadRequest request = null)
        {
            try
            {
                if (request?.File == null || request.File.Length == 0)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "No file provided",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file type (images only for sample photos)
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
                var fileExtension = Path.GetExtension(request.File.FileName)?.ToLowerInvariant() ?? "";

                if (!allowedExtensions.Contains(fileExtension))
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Invalid file type. Only JPG and PNG files are allowed for sample photos.",
                        timestamp = DateTime.Now
                    });
                }

                // Validate file size (10MB limit for sample photos)
                if (request.File.Length > 10 * 1024 * 1024)
                {
                    return Ok(new
                    {
                        success = false,
                        message = "File size cannot exceed 10MB",
                        timestamp = DateTime.Now
                    });
                }

                // Generate unique filename
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var uploadsPath = Path.Combine(Directory.GetCurrentDirectory(), "uploads", "sampling-photos");

                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    request.File.CopyTo(stream);
                }

                return Ok(new
                {
                    success = true,
                    message = "Sample photo uploaded successfully",
                    fileName = fileName,
                    filePath = $"/uploads/sampling-photos/{fileName}",
                    documentType = SafeString(request.DocumentType),
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Upload completed with warnings",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("reimbursement-modes")]
        public IActionResult GetReimbursementModes()
        {
            var modes = new[]
            {
                new { mode = "By Hired Painter: 250 AED", amount = 250 },
                new { mode = "By Site Painter: 150 AED", amount = 150 }
            };

            return Ok(new
            {
                success = true,
                data = modes,
                timestamp = DateTime.Now
            });
        }

        [HttpGet("calculate-reimbursement/{mode}")]
        public IActionResult CalculateReimbursement(string mode)
        {
            try
            {
                var amount = GetReimbursementAmount(mode);

                return Ok(new
                {
                    success = true,
                    data = new
                    {
                        mode = mode,
                        amount = amount,
                        amountText = $"{amount} AED"
                    },
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to calculate reimbursement",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        [HttpGet("sampling-summary")]
        public IActionResult GetSamplingSummary([FromQuery] string? startDate = null, [FromQuery] string? endDate = null)
        {
            try
            {
                var dateCondition = "";
                var parameters = new Dictionary<string, object>();

                if (!string.IsNullOrEmpty(startDate) && !string.IsNullOrEmpty(endDate))
                {
                    dateCondition = "AND distributionDate BETWEEN @StartDate AND @EndDate";
                    parameters.Add("@StartDate", startDate);
                    parameters.Add("@EndDate", endDate);
                }

                var query = $@"
                    SELECT
                        COUNT(*) as TotalDrives,
                        SUM(materialQtyDistributed) as TotalQuantityDistributed,
                        SUM(missedQuantity) as TotalMissedQuantity,
                        SUM(reimbursementAmount) as TotalReimbursement,
                        AVG(materialQtyDistributed) as AverageQuantityPerDrive,
                        COUNT(DISTINCT retailer) as UniqueRetailers,
                        COUNT(DISTINCT painterName) as UniquePainters
                    FROM SamplingDrives
                    WHERE isactive = 'Y' {dateCondition}";

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return Ok(new
                    {
                        success = true,
                        data = new
                        {
                            totalDrives = 0,
                            totalQuantityDistributed = 0.0,
                            totalMissedQuantity = 0.0,
                            totalReimbursement = 0.0,
                            averageQuantityPerDrive = 0.0,
                            uniqueRetailers = 0,
                            uniquePainters = 0
                        },
                        timestamp = DateTime.Now
                    });
                }

                return Ok(new
                {
                    success = true,
                    data = result[0],
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                return Ok(new
                {
                    success = false,
                    message = "Failed to get sampling summary",
                    error = ex.Message,
                    timestamp = DateTime.Now
                });
            }
        }

        // Helper method to get reimbursement amount based on mode
        private int GetReimbursementAmount(string mode)
        {
            if (mode.Contains("250"))
                return 250;
            if (mode.Contains("150"))
                return 150;
            return 0;
        }

        // Helper methods for safe data handling
        private static string SafeString(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? "" : input.Trim();
        }

        private static object SafeStringOrNull(string input)
        {
            return string.IsNullOrWhiteSpace(input) ? (object)DBNull.Value : input.Trim();
        }

        private static DateTime? SafeParseDate(string dateString)
        {
            if (string.IsNullOrWhiteSpace(dateString))
                return null;

            // Try multiple date formats
            var formats = new[] { "yyyy-MM-dd", "MM/dd/yyyy", "dd/MM/yyyy", "yyyy/MM/dd", "MM-dd-yyyy", "dd-MM-yyyy" };

            foreach (var format in formats)
            {
                if (DateTime.TryParseExact(dateString, format, null, System.Globalization.DateTimeStyles.None, out DateTime result))
                {
                    return result;
                }
            }

            // Fallback to general parsing
            if (DateTime.TryParse(dateString, out DateTime generalResult))
            {
                return generalResult;
            }

            return null;
        }
    }

    // Request Models
    public class SamplingDriveRequest
    {
        // Sample Material Distribution
        public string Retailer { get; set; } = "";
        public string RetailerCode { get; set; } = "";
        public string ConcernDistributor { get; set; } = "";
        public string Area { get; set; } = "";
        public string DistributionDate { get; set; } = "";

        // Execution Details
        public string PainterName { get; set; } = "";
        public string ContactNumber { get; set; } = "";
        public string SkuSize { get; set; } = "";
        public decimal MaterialQtyDistributed { get; set; } = 0;
        public decimal MissedQuantity { get; set; } = 0;

        // Sample Proof
        public string SamplePhoto { get; set; } = "";

        // Reimbursement
        public string ReimbursementMode { get; set; } = "";
        public int ReimbursementAmount { get; set; } = 0;
    }

    public class SamplingDriveUpdateRequest
    {
        // Sample Material Distribution
        public string Retailer { get; set; } = "";
        public string RetailerCode { get; set; } = "";
        public string ConcernDistributor { get; set; } = "";
        public string Area { get; set; } = "";
        public string DistributionDate { get; set; } = "";

        // Execution Details
        public string PainterName { get; set; } = "";
        public string ContactNumber { get; set; } = "";
        public string SkuSize { get; set; } = "";
        public decimal MaterialQtyDistributed { get; set; } = 0;
        public decimal MissedQuantity { get; set; } = 0;

        // Reimbursement
        public string ReimbursementMode { get; set; } = "";
        public int ReimbursementAmount { get; set; } = 0;
    }
}
