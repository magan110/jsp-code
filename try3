// Controllers/TokenScanController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TokenScanController : ControllerBase
    {
        private readonly IConfiguration _cfg;
        private readonly ILogger<TokenScanController> _log;

        public TokenScanController(IConfiguration cfg, ILogger<TokenScanController> log)
        {
            _cfg = cfg;
            _log = log;
        }

        // Optional: mirrors the mobile check in your JSP (update value as needed)
        [HttpGet("min-app-version")]
        public ActionResult<object> GetMinAppVersion() => Ok(new { android = "1.48" });

        // --------------------------------------------------------------------
        // VALIDATE (slim): ONLY checks token existence and whether CVV is required
        // --------------------------------------------------------------------
        [HttpPost("validate")]
        public async Task<ActionResult<ValidateTokenResponse>> ValidateAsync(
            [FromBody] ValidateTokenRequest req,
            CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);

            await using var con = new SqlConnection(_cfg.GetConnectionString("DefaultConnection"));
            await con.OpenAsync(ct);

            const string sql = @"
                ;with U as (
                    select tokenNum, numCvvNo
                    from dpmTokenNos with (nolock)
                    where tokenNum = @token

                    union all

                    select tokenNum, numCvvNo
                    from dpaTokenNos with (nolock)
                    where tokenNum = @token
                )
                select top 1
                    tokenNum,
                    isnull(ltrim(rtrim(cast(numCvvNo as nvarchar(16)))),'') as numCvvNo
                from U";

            try
            {
                await using var cmd = new SqlCommand(sql, con);
                cmd.Parameters.AddWithValue("@token", req.TokenNum);

                await using var rdr = await cmd.ExecuteReaderAsync(ct);
                if (!await rdr.ReadAsync(ct))
                {
                    return Ok(new ValidateTokenResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = false,
                        RequiresCvv = false,
                        CvvLength = null
                    });
                }

                var cvvRaw = rdr.IsDBNull(1) ? "" : rdr.GetString(1);
                var requires = !string.IsNullOrWhiteSpace(cvvRaw);

                return Ok(new ValidateTokenResponse
                {
                    TokenNum = req.TokenNum,
                    Found = true,
                    RequiresCvv = requires,
                    CvvLength = requires ? cvvRaw.Length : (int?)null
                });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "Validate failed for token {Token}", req.TokenNum);
                return Problem("Unexpected error during validation.");
            }
        }

        // --------------------------------------------------------------------
        // SUBMIT: batch-save tokens (kept practical to match your JSP flow)
        // You can remove this if you only want the validate endpoint.
        // --------------------------------------------------------------------
        [HttpPost("submit")]
        public async Task<ActionResult<SubmitTokensResponse>> SubmitAsync(
            [FromBody] SubmitTokensRequest req,
            CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.TokenNums == null || req.TokenNums.Count == 0)
                return BadRequest(new { message = "No tokens to submit." });

            await using var con = new SqlConnection(_cfg.GetConnectionString("DefaultConnection"));
            await con.OpenAsync(ct);
            await using var tx = await con.BeginTransactionAsync(ct);

            try
            {
                // If you already have a DB doc number generator, replace this with that call.
                var docuNumb = string.IsNullOrWhiteSpace(req.DocuNumb)
                    ? $"TKN-{req.AreaCode}-{DateTime.UtcNow:yyyyMMddHHmmss}-{Random.Shared.Next(1000, 9999)}"
                    : req.DocuNumb;

                // Header placeholder (cdtTokenRec)
                await using (var hdr = new SqlCommand(@"
                    insert into cdtTokenRec (docuNumb, docuDate, tokenTyp, cdnDocTy, custCode, prodCode,
                                              recptQty, basTknAm, handAmnt, scnDedAm, payblAmt,
                                              statFlag, createId, createDt)
                    values (@docuNumb, convert(date, getdate()), 'BC', 'CRN', @custCode, 0,
                            0, 0, 0, 0, 0, 'A', @loginId, getdate());", con, (SqlTransaction)tx))
                {
                    hdr.Parameters.AddWithValue("@docuNumb", docuNumb);
                    hdr.Parameters.AddWithValue("@custCode", req.CustCode);
                    hdr.Parameters.AddWithValue("@loginId", req.LoginId);
                    await hdr.ExecuteNonQueryAsync(ct);
                }

                int rightEnt = 0, already = 0, expired = 0, invalid = 0;
                int prodCodeForHdr = 0;
                decimal basTknAm = 0, handAmnt = 0, payblAmt = 0, scnDedAm = 0;

                foreach (var token in req.TokenNums)
                {
                    // Reuse the same stored proc the JSP used
                    string bcTknTyp = "", dbActSts = "", exprFlag = "";
                    int prodCode = 0;
                    decimal tokenVal = 0, handRate = 0, scnrDdRt = 0, tokEndVl = 0;

                    await using (var cmd = new SqlCommand("bwlive.dbo.dppToknProc", con, (SqlTransaction)tx))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@mode", "jav01");
                        cmd.Parameters.AddWithValue("@tokenNum", token);
                        cmd.Parameters.AddWithValue("@dummy", 0);

                        await using var rdr = await cmd.ExecuteReaderAsync(ct);
                        if (await rdr.ReadAsync(ct))
                        {
                            // 0: bcTknTyp, 1: tokenVal, 2: handRate, 3: scnrDdRt, 4: tokEndVl,
                            // 5: prodCode, 6: updateId, 7: dbActSts, 8: exprFlag
                            bcTknTyp = rdr.IsDBNull(0) ? "" : rdr.GetString(0);
                            tokenVal = rdr.IsDBNull(1) ? 0m : SafeDecimal(rdr, 1);
                            handRate = rdr.IsDBNull(2) ? 0m : SafeDecimal(rdr, 2);
                            scnrDdRt = rdr.IsDBNull(3) ? 0m : SafeDecimal(rdr, 3);
                            tokEndVl = rdr.IsDBNull(4) ? 0m : SafeDecimal(rdr, 4);
                            prodCode = rdr.IsDBNull(5) ? 0 : rdr.GetInt32(5);
                            dbActSts = rdr.IsDBNull(7) ? "" : rdr.GetString(7);
                            exprFlag = rdr.IsDBNull(8) ? "" : rdr.GetString(8);
                        }
                    }

                    // Bucket into statuses (aligning with JSP semantics)
                    string tokenVld;
                    if (exprFlag == "Y")
                    {
                        tokenVld = "E"; expired++;
                    }
                    else if (dbActSts == "Z")
                    {
                        tokenVld = "Z"; already++;
                    }
                    else if (prodCode <= 0)
                    {
                        tokenVld = "N"; invalid++;
                    }
                    else
                    {
                        tokenVld = "Y"; rightEnt++;
                        basTknAm += tokenVal;
                        handAmnt += handRate;
                        payblAmt += tokEndVl;
                        scnDedAm += scnrDdRt;
                        prodCodeForHdr = prodCode;
                    }

                    // Detail row (dptTokenRecDtl)
                    await using (var det = new SqlCommand(@"
                        insert into dptTokenRecDtl
                          (docuNumb, tokenNum, tokenVld, exprFlag, toknStat, bcTknTyp,
                           tokenVal, handRate, tokEndVl, prodCode, inflCode, statFlag,
                           createId, createDt)
                        values
                          (@docuNumb, @tokenNum, @tokenVld, @exprFlag, @dbActSts, @bcTknTyp,
                           @tokenVal, @handRate, @tokEndVl, @prodCode, @inflCode, 'A',
                           @loginId, getdate());", con, (SqlTransaction)tx))
                    {
                        det.Parameters.AddWithValue("@docuNumb", docuNumb);
                        det.Parameters.AddWithValue("@tokenNum", token);
                        det.Parameters.AddWithValue("@tokenVld", tokenVld);
                        det.Parameters.AddWithValue("@exprFlag", exprFlag);
                        det.Parameters.AddWithValue("@dbActSts", dbActSts);
                        det.Parameters.AddWithValue("@bcTknTyp", bcTknTyp);
                        det.Parameters.AddWithValue("@tokenVal", tokenVal);
                        det.Parameters.AddWithValue("@handRate", handRate);
                        det.Parameters.AddWithValue("@tokEndVl", tokEndVl);
                        det.Parameters.AddWithValue("@prodCode", prodCode);
                        det.Parameters.AddWithValue("@inflCode", req.InflCode ?? "INF00000");
                        det.Parameters.AddWithValue("@loginId", req.LoginId);
                        await det.ExecuteNonQueryAsync(ct);
                    }

                    // Mark token scanned if valid (master)
                    if (tokenVld == "Y")
                    {
                        await using var up = new SqlCommand(@"
                            update dpmTokenNos
                               set isActive = 'Z',
                                   updateId = @loginId,
                                   updateDt = getdate()
                             where tokenNum = @tokenNum
                               and isActive in ('Y','Z');", con, (SqlTransaction)tx);
                        up.Parameters.AddWithValue("@loginId", req.LoginId);
                        up.Parameters.AddWithValue("@tokenNum", token);
                        await up.ExecuteNonQueryAsync(ct);
                    }
                }

                // Update header totals
                await using (var upd = new SqlCommand(@"
                    update cdtTokenRec
                       set recptQty = @qty,
                           basTknAm = @bas,
                           handAmnt = @hand,
                           scnDedAm = @scn,
                           payblAmt = @pay,
                           prodCode = @prod,
                           updateId = @loginId,
                           updateDt = getdate()
                     where docuNumb = @docuNumb;", con, (SqlTransaction)tx))
                {
                    upd.Parameters.AddWithValue("@qty", rightEnt);
                    upd.Parameters.AddWithValue("@bas", basTknAm);
                    upd.Parameters.AddWithValue("@hand", handAmnt);
                    upd.Parameters.AddWithValue("@scn", scnDedAm);
                    upd.Parameters.AddWithValue("@pay", payblAmt);
                    upd.Parameters.AddWithValue("@prod", prodCodeForHdr);
                    upd.Parameters.AddWithValue("@loginId", req.LoginId);
                    upd.Parameters.AddWithValue("@docuNumb", docuNumb);
                    await upd.ExecuteNonQueryAsync(ct);
                }

                await tx.CommitAsync(ct);

                return Ok(new SubmitTokensResponse
                {
                    DocuNumb = docuNumb,
                    Right = rightEnt,
                    Already = already,
                    Expired = expired,
                    Invalid = invalid,
                    BasTknAm = basTknAm,
                    HandAmnt = handAmnt,
                    ScnDedAm = scnDedAm,
                    PayblAmt = payblAmt,
                    Message = $"Batch: {docuNumb}. Right: {rightEnt}, Already: {already}, Expired: {expired}, Invalid: {invalid}. Payable: {payblAmt}"
                });
            }
            catch (Exception ex)
            {
                await tx.RollbackAsync(ct);
                _log.LogError(ex, "Error submitting token batch for {Cust}", req.CustCode);
                return Problem("Could not save tokens. Transaction rolled back.");
            }
        }

        // ------------------- helpers -------------------
        private static decimal SafeDecimal(IDataRecord r, int ordinal)
        {
            var v = r.GetValue(ordinal);
            if (v is decimal d) return d;
            if (v is double dd) return Convert.ToDecimal(dd);
            if (v is float ff) return Convert.ToDecimal(ff);
            return Convert.ToDecimal(v);
        }
    }

    // -------------------- DTOs -----------------------
    public sealed class ValidateTokenRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;
    }

    public sealed class ValidateTokenResponse
    {
        public string TokenNum { get; set; } = "";
        public bool Found { get; set; }
        public bool RequiresCvv { get; set; }
        public int? CvvLength { get; set; }
    }

    public sealed class SubmitTokensRequest
    {
        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;

        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;

        [StringLength(1)]
        public string? UserType { get; set; }  // optional (C/R/I) if you need TDS later

        [Required]
        public List<string> TokenNums { get; set; } = new();

        [StringLength(32)]
        public string? RandNumb { get; set; }  // optional session ticket

        [StringLength(40)]
        public string? DocuNumb { get; set; }  // optional inbound doc number

        [StringLength(16)]
        public string? InflCode { get; set; }  // optional influencer
    }

    public sealed class SubmitTokensResponse
    {
        public string DocuNumb { get; set; } = "";
        public int Right { get; set; }
        public int Already { get; set; }
        public int Expired { get; set; }
        public int Invalid { get; set; }

        public decimal BasTknAm { get; set; }
        public decimal HandAmnt { get; set; }
        public decimal ScnDedAm { get; set; }
        public decimal PayblAmt { get; set; }

        public string Message { get; set; } = "";
    }
}
