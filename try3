using Microsoft.AspNetCore.Mvc;
using sparshWebService.DataAccess;
using System.Text.Json.Serialization;

namespace sparshWebService.Controllers
{
    /// <summary>
    /// REST translation of legacy TokenRecd.jsp (token scanning & submission workflow).
    /// Endpoints: random key, TDS rate, token validation, bulk submit.
    /// Stored procedure names (MK_02004, MK_02014) are placeholders mirroring legacy codes; adjust to real database objects.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class TokenScanController : ControllerBase
    {
        private readonly DatabaseHelper _db;

        public TokenScanController(DatabaseHelper db)
        {
            _db = db;
        }

        [HttpGet("random-key")] 
        public IActionResult GetRandomKey()
        {
            try
            {
                const string sql = "SELECT RIGHT(NEWID(),16) AS RandomKey"; // SQL Server
                var rows = _db.WebSessBean(sql, new());
                var key = rows.FirstOrDefault()? ["RandomKey"]?.ToString() ?? string.Empty;
                return Ok(new { success = true, randomKey = key });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpGet("tds-rate/{custCode}")]
        public IActionResult GetTdsRate(string custCode)
        {
            if (string.IsNullOrWhiteSpace(custCode)) return BadRequest("custCode required");
            try
            {
                const string sql = @"SELECT dbo.dpfTokTdsRt(itxPanNo, kycVerFl) AS TokTdsRt, appRtlty FROM wcvAllCustm WITH (NOLOCK) WHERE appRtlcd = @cust";
                var rows = _db.WebSessBean(sql, new() { ["@cust"] = custCode });
                var row = rows.FirstOrDefault();
                if (row == null) return NotFound(new { success = false, message = "Customer not found" });
                double.TryParse(row["TokTdsRt"].ToString(), out var rate);
                return Ok(new { success = true, custCode, tdsRate = rate, retailerType = row["appRtlty"]?.ToString() });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpPost("validate-token")]
        public IActionResult ValidateToken([FromBody] TokenValidateRequest req)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            try
            {
                const string sql = "EXEC MK_02004 @TokenNum, @AreaCode, @CustCode, @RandKey"; // Placeholder
                var rows = _db.WebSessBean(sql, new()
                {
                    ["@TokenNum"] = req.TokenNumber,
                    ["@AreaCode"] = req.AreaCode,
                    ["@CustCode"] = req.CustCode,
                    ["@RandKey"] = req.RandomKey ?? string.Empty
                });
                if (rows.Count == 0)
                    return NotFound(new { success = false, message = "Token not found or invalid" });

                var r = rows.First();
                var result = new TokenValidationResult
                {
                    TokenId = r.GetValueOrDefault("tokenIdn")?.ToString(),
                    Status = r.GetValueOrDefault("isActive")?.ToString(),
                    ValidUntil = r.GetValueOrDefault("validDat")?.ToString(),
                    ScannedBy = r.GetValueOrDefault("scanndBy")?.ToString(),
                    TokenValue = ParseDouble(r.GetValueOrDefault("tokenVal")),
                    HandlingRate = ParseDouble(r.GetValueOrDefault("handRate")),
                    DiscountRate = ParseDouble(r.GetValueOrDefault("scnrDdRt")),
                    EndValue = ParseDouble(r.GetValueOrDefault("tokEndVl")),
                    DisplayValue = ParseDouble(r.GetValueOrDefault("tokDspVl")),
                    TokenType = r.GetValueOrDefault("bcTknTyp")?.ToString(),
                    ExpiredFlag = r.GetValueOrDefault("exprFlag")?.ToString(),
                    PinMasked = string.IsNullOrEmpty(r.GetValueOrDefault("numCvvNo")?.ToString()) ? null : "***",
                    Raw = r
                };
                result.AmountPayable = (result.DisplayValue ?? 0) + (result.HandlingRate ?? 0);
                return Ok(new { success = true, token = result });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpPost("submit")] 
        public IActionResult SubmitTokens([FromBody] TokenSubmitRequest req)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.Tokens == null || req.Tokens.Count == 0)
                return BadRequest("At least one token required");
            try
            {
                var tokenList = string.Join(',', req.Tokens.Distinct());
                const string sql = "EXEC MK_02014 @TokenList, @DocNumber, @AreaCode, @CustCode, @LoginId, @RandomKey, @UserType"; // Placeholder
                var rows = _db.WebSessBean(sql, new()
                {
                    ["@TokenList"] = tokenList,
                    ["@DocNumber"] = req.DocNumber,
                    ["@AreaCode"] = req.AreaCode,
                    ["@CustCode"] = req.CustCode,
                    ["@LoginId"] = req.LoginId ?? req.CustCode,
                    ["@RandomKey"] = req.RandomKey ?? string.Empty,
                    ["@UserType"] = req.UserType ?? string.Empty
                });
                double total = 0; int valid = 0, invalid = 0, expired = 0, already = 0;
                foreach (var r in rows)
                {
                    var status = r.GetValueOrDefault("isActive")?.ToString();
                    if (status == "Y") { valid++; total += (ParseDouble(r.GetValueOrDefault("tokDspVl")) ?? 0) + (ParseDouble(r.GetValueOrDefault("handRate")) ?? 0); }
                    else if (status == "E") expired++;
                    else if (status == "Z") already++;
                    else invalid++;
                }
                return Ok(new { success = true, tokensSubmitted = req.Tokens.Count, valid, invalid, expired, already, totalAmount = total, docNumber = req.DocNumber, dbRows = rows });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        private static double? ParseDouble(object? v) => v == null ? null : (double.TryParse(v.ToString(), out var d) ? d : null);
    }

    public class TokenValidateRequest
    {
        [JsonPropertyName("tokenNumber")] public string TokenNumber { get; set; } = string.Empty;
        [JsonPropertyName("areaCode")] public string AreaCode { get; set; } = string.Empty;
        [JsonPropertyName("custCode")] public string CustCode { get; set; } = string.Empty;
        [JsonPropertyName("randomKey")] public string? RandomKey { get; set; }
    }

    public class TokenSubmitRequest
    {
        [JsonPropertyName("tokens")] public List<string> Tokens { get; set; } = new();
        [JsonPropertyName("areaCode")] public string AreaCode { get; set; } = string.Empty;
        [JsonPropertyName("custCode")] public string CustCode { get; set; } = string.Empty;
        [JsonPropertyName("docNumber")] public string DocNumber { get; set; } = string.Empty;
        [JsonPropertyName("loginId")] public string? LoginId { get; set; }
        [JsonPropertyName("userType")] public string? UserType { get; set; }
        [JsonPropertyName("randomKey")] public string? RandomKey { get; set; }
    }

    public class TokenValidationResult
    {
        public string? TokenId { get; set; }
        public string? Status { get; set; }
        public string? ValidUntil { get; set; }
        public string? ScannedBy { get; set; }
        public double? TokenValue { get; set; }
        public double? HandlingRate { get; set; }
        public double? DiscountRate { get; set; }
        public double? EndValue { get; set; }
        public double? DisplayValue { get; set; }
        public double? AmountPayable { get; set; }
        public string? TokenType { get; set; }
        public string? ExpiredFlag { get; set; }
        public string? PinMasked { get; set; }
        public Dictionary<string, object> Raw { get; set; } = new();
    }
}

internal static class DictExtensions
{
    public static object? GetValueOrDefault(this Dictionary<string, object> dict, string key) => dict.TryGetValue(key, out var v) ? v : null;
}
