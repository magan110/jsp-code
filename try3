// Controllers/TokenScanController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Net.Http;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TokenScanController : ControllerBase
    {
        private readonly IConfiguration _cfg;
        private readonly ILogger<TokenScanController> _log;

        public TokenScanController(IConfiguration cfg, ILogger<TokenScanController> log)
        {
            _cfg = cfg;
            _log = log;
        }

        // --------------------------------------------------------------------
        // DOCUMENT NUMBER GENERATOR (JSP-like)
        // GET /api/tokenscan/doc-number?areaCode=EXB&docuType=TKN
        // --------------------------------------------------------------------
        [HttpGet("doc-number")]
        public async Task<ActionResult<DocNumberResponse>> GetDocumentNumberAsync(
            [FromQuery, Required, StringLength(10)] string areaCode,
            [FromQuery, StringLength(10)] string? docuType,
            CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);

            docuType = string.IsNullOrWhiteSpace(docuType) ? "TKN" : docuType.Trim();

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            try
            {
                var maxLen = await GetVarcharMaxLenAsync(con, "cdtTokenRec", "docuNumb", ct);
                var (docNo, source) = await GenerateDocumentNumberCoreAsync(con, areaCode.Trim(), docuType, maxLen, ct);

                return Ok(new DocNumberResponse
                {
                    DocuNumb = docNo,
                    Source = source,
                    MaxLen = maxLen,
                    Utc = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "doc-number generation failed for area {Area} type {Type}", areaCode, docuType);
                return Problem("Could not generate document number.");
            }
        }

        // --------------------------------------------------------------------
        // 1) TOKEN INFO  (â‰ˆ MK_02004)
        // --------------------------------------------------------------------
        [HttpPost("token-info")]
        public async Task<ActionResult<TokenInfoResponse>> GetTokenInfoAsync(
            [FromBody] TokenInfoRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            var info = new TokenInfoResponse
            {
                TokenNum = req.TokenNum,
                AreaCode = req.AreaCode,
                CustCode = req.CustCode,
                LoginId = req.LoginId
            };

            try
            {
                // (a) SP (if present)
                try
                {
                    await using var sp = new SqlCommand("bwlive.dbo.dppToknProc", con)
                    { CommandType = CommandType.StoredProcedure };
                    sp.Parameters.AddWithValue("@mode", "jav01");
                    sp.Parameters.AddWithValue("@tokenNum", req.TokenNum);
                    sp.Parameters.AddWithValue("@dummy", 0);

                    await using var r = await sp.ExecuteReaderAsync(ct);
                    if (await r.ReadAsync(ct))
                    {
                        info.BcTknTyp = r.IsDBNull(0) ? "" : r.GetString(0);
                        info.TokenVal = SafeDecimal(r, 1);
                        info.HandRate = SafeDecimal(r, 2);
                        info.ScnrDdRt = SafeDecimal(r, 3);
                        info.TokEndVl = SafeDecimal(r, 4);
                        info.ProdCode = r.IsDBNull(5) ? 0 : r.GetInt32(5);
                        info.UpdIdAct = r.IsDBNull(6) ? "" : r.GetString(6);
                        info.DbActSts = r.IsDBNull(7) ? "" : r.GetString(7);
                        info.ExprFlag = r.IsDBNull(8) ? "" : r.GetString(8);
                    }
                }
                catch (SqlException ex) when (ex.Number == 2812 /* SP missing */)
                {
                    _log.LogWarning(ex, "dppToknProc not found; proceeding without SP.");
                }

                // (b) Master row
                var master = await FetchMasterRowAsync(con, req.TokenNum, ct);
                if (!master.Found)
                    return Ok(new { found = false, message = "No record found for token." });

                info.IsActive = master.IsActive;
                info.ValidDat = master.ValidDat;
                info.ScanndBy = master.UpdateId;
                info.NumCvvNo = master.NumCvvNo ?? "";
                info.RequiresCvv = !string.IsNullOrWhiteSpace(info.NumCvvNo) && info.NumCvvNo != "0";

                // display/pay derived values
                if (info.TokDspVl == 0 && info.TokenVal > 0) info.TokDspVl = info.TokenVal;
                info.TokAmPay = info.TokDspVl + info.HandRate;

                // (c) Multi-scan allowance (table optional)
                const string sqlMult = @"
IF OBJECT_ID(N'dbo.dpmToknMlSc', N'U') IS NOT NULL
BEGIN
  SELECT TOP 1 isActive, scnMlCnt, scnMlAlw, ISNULL(updateId,'')
  FROM dbo.dpmToknMlSc WITH (NOLOCK)
  WHERE tokenNum = @token AND isActive='Y' AND scnMlCnt < scnMlAlw
  ORDER BY updateDt DESC;
END
ELSE
BEGIN
  SELECT TOP 0 isActive='', scnMlCnt=0, scnMlAlw=0, updateId='';
END";
                await using (var cmd = new SqlCommand(sqlMult, con))
                {
                    cmd.Parameters.AddWithValue("@token", req.TokenNum);
                    await using var r = await cmd.ExecuteReaderAsync(ct);
                    if (await r.ReadAsync(ct))
                    {
                        info.ScnMlStt = r.IsDBNull(0) ? "" : r.GetString(0);
                        info.ScnMlCnt = r.IsDBNull(1) ? 0 : r.GetInt32(1);
                        info.ScnMlAlw = r.IsDBNull(2) ? 0 : r.GetInt32(2);
                        info.UpdIdMlt = r.IsDBNull(3) ? "" : r.GetString(3);
                    }
                }

                // (d) Area/type rule (B1/E1)
                info.AreaAllowed = AreaTypeAllowed(info.BcTknTyp, req.AreaCode);

                info.Success = true;
                info.Message = "OK";
                return Ok(info);
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "token-info failed for token {Token}", req.TokenNum);
                return Problem("Unexpected error during token info fetch.");
            }
        }

        // --------------------------------------------------------------------
        // 2) CVV VALIDATE (3-attempt lock on client; server is stateless)
        // --------------------------------------------------------------------
        [HttpPost("validate")]
        public async Task<ActionResult<CvvValidateResponse>> ValidateCvvAsync(
            [FromBody] CvvValidateRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.Attempt <= 0) req.Attempt = 1;

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            try
            {
                var master = await FetchMasterRowAsync(con, req.TokenNum, ct);
                if (!master.Found)
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = false,
                        RequiresCvv = false,
                        Valid = false,
                        Locked = false,
                        AttemptsLeft = 3,
                        Message = "Token not found."
                    });

                var stored = (master.NumCvvNo ?? "").Trim();
                var requires = !string.IsNullOrWhiteSpace(stored) && stored != "0";
                if (!requires)
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = true,
                        RequiresCvv = false,
                        Valid = true,
                        Locked = false,
                        AttemptsLeft = 3,
                        Message = "Valid: CVV not required."
                    });

                var provided = (req.Cvv ?? "").Trim();
                if (string.IsNullOrEmpty(provided))
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = true,
                        RequiresCvv = true,
                        CvvLength = stored.Length,
                        Valid = false,
                        Locked = false,
                        AttemptsLeft = Math.Max(0, 3 - req.Attempt),
                        Message = "CVV required."
                    });

                var isMatch = string.Equals(provided, stored, StringComparison.Ordinal);
                if (isMatch)
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = true,
                        RequiresCvv = true,
                        CvvLength = stored.Length,
                        Valid = true,
                        Locked = false,
                        AttemptsLeft = Math.Max(0, 3 - req.Attempt),
                        Message = "Valid: CVV matched."
                    });

                var locked = req.Attempt >= 3;
                return Ok(new CvvValidateResponse
                {
                    TokenNum = req.TokenNum,
                    Found = true,
                    RequiresCvv = true,
                    CvvLength = stored.Length,
                    Valid = false,
                    Locked = locked,
                    AttemptsLeft = locked ? 0 : (3 - req.Attempt),
                    Message = locked ? "CVV failed 3 times; please rescan." : "Invalid CVV."
                });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "validate failed for token {Token}", req.TokenNum);
                return Problem("Unexpected error during validation.");
            }
        }

        // --------------------------------------------------------------------
        // 3) SUBMIT (â‰ˆ MK_02014) â€” uses /doc-number endpoint; no local generation
        // --------------------------------------------------------------------
        [HttpPost("submit")]
        public async Task<ActionResult<SubmitTokensResponse>> SubmitAsync(
            [FromBody] SubmitTokensRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.TokenNums is null || req.TokenNums.Count == 0)
                return BadRequest(new { message = "No tokens to submit." });

            // Resolve a doc number ONLY via the doc-number endpoint when not provided
            string docuNumb = (req.DocuNumb ?? "").Trim();
            if (string.IsNullOrWhiteSpace(docuNumb))
            {
                try
                {
                    var scheme = Request.Scheme;
                    var host = Request.Host.Value; // includes port
                    var url = $"{scheme}://{host}/api/tokenscan/doc-number?areaCode={Uri.EscapeDataString(req.AreaCode)}&docuType=TKN";

                    using var http = new HttpClient();
                    using var resp = await http.GetAsync(url, ct);
                    if (!resp.IsSuccessStatusCode)
                    {
                        _log.LogWarning("doc-number endpoint returned {Status} for {Url}", resp.StatusCode, url);
                        return Problem(statusCode: 503, title: "doc-number not available", detail: $"HTTP {(int)resp.StatusCode}: {resp.ReasonPhrase}");
                    }

                    var json = await resp.Content.ReadAsStringAsync();
                    var docResp = JsonSerializer.Deserialize<DocNumberResponse>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    if (docResp == null || string.IsNullOrWhiteSpace(docResp.DocuNumb))
                    {
                        _log.LogWarning("doc-number endpoint returned empty payload.");
                        return Problem(statusCode: 500, title: "doc-number returned empty");
                    }

                    docuNumb = docResp.DocuNumb.Trim();
                }
                catch (Exception ex)
                {
                    _log.LogError(ex, "Failed to obtain doc-number from endpoint");
                    return Problem("doc-number not available, cannot submit.");
                }
            }

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            // Create/ensure header first (like JSP does)
            try
            {
                await using (var hdr = new SqlCommand(@"
INSERT INTO cdtTokenRec
      (docuNumb, docuDate, tokenTyp, cdnDocTy, custCode, prodCode,
       recptQty, basTknAm, handAmnt, scnDedAm, payblAmt, statFlag, createId, createDt)
VALUES (@docu, CONVERT(date, GETDATE()), 'BC', 'CRN', @cust, 0,
        0, 0, 0, 0, 0, 'A', @login, GETDATE());", con))
                {
                    hdr.Parameters.AddWithValue("@docu", docuNumb);
                    hdr.Parameters.AddWithValue("@cust", req.CustCode);
                    hdr.Parameters.AddWithValue("@login", req.LoginId);
                    await hdr.ExecuteNonQueryAsync(ct);
                }
            }
            catch (SqlException ex) when (ex.Number == 2627 /* duplicate */ || ex.Number == 2601)
            {
                _log.LogInformation("Header {Doc} already exists; will update totals.", docuNumb);
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "Header insert failed for {Doc}", docuNumb);
                return Problem("Could not prepare header.");
            }

            int rightEnt = 0, already = 0, expired = 0, invalid = 0;
            int prodCodeForHdr = 0;
            decimal basTknAm = 0, handAmnt = 0, payblAmt = 0, scnDedAm = 0;

            foreach (var rawToken in req.TokenNums)
            {
                var token = (rawToken ?? string.Empty).Trim();
                if (string.IsNullOrEmpty(token)) continue;

                // Defaults
                string bcTknTyp = "", dbActSts = "", exprFlag = "";
                int prodCode = 0;
                decimal tokenVal = 0, handRate = 0, scnrDdRt = 0, tokEndVl = 0;

                // 3a) Price/flags via SP (if available)
                try
                {
                    await using var sp = new SqlCommand("bwlive.dbo.dppToknProc", con)
                    {
                        CommandType = CommandType.StoredProcedure
                    };
                    sp.Parameters.AddWithValue("@mode", "jav01");
                    sp.Parameters.AddWithValue("@tokenNum", token);
                    sp.Parameters.AddWithValue("@dummy", 0);

                    await using var r = await sp.ExecuteReaderAsync(ct);
                    if (await r.ReadAsync(ct))
                    {
                        bcTknTyp = r.IsDBNull(0) ? "" : r.GetString(0);
                        tokenVal = SafeDecimal(r, 1);
                        handRate = SafeDecimal(r, 2);
                        scnrDdRt = SafeDecimal(r, 3);
                        tokEndVl = SafeDecimal(r, 4);
                        prodCode = r.IsDBNull(5) ? 0 : r.GetInt32(5);
                        dbActSts = r.IsDBNull(7) ? "" : r.GetString(7);
                        exprFlag = r.IsDBNull(8) ? "" : r.GetString(8);
                    }
                }
                catch (SqlException ex) when (ex.Number == 2812)
                {
                    _log.LogWarning("dppToknProc missing; token {Tkn} will be marked invalid if master/price absent.", token);
                }
                catch (Exception ex)
                {
                    _log.LogWarning(ex, "SP error for token {Tkn}; continuing.", token);
                }

                // JSP-like bucketing
                string tokenVld;
                if (exprFlag == "Y")
                {
                    tokenVld = "E"; expired++;
                }
                else if (dbActSts == "Z")
                {
                    tokenVld = "Z"; already++;
                }
                else if (prodCode <= 0)
                {
                    tokenVld = "N"; invalid++;
                }
                else
                {
                    tokenVld = "Y"; rightEnt++;
                    basTknAm += tokenVal;
                    handAmnt += handRate;
                    payblAmt += tokEndVl;
                    scnDedAm += scnrDdRt;
                    prodCodeForHdr = prodCode;

                    // 3b) Mark master scanned (robust)
                    try
                    {
                        var (affected, table, current) = await UpdateMasterRowAsync(con, token, req.LoginId, ct);
                        if (affected == 0)
                        {
                            _log.LogWarning("No master row updated for token {Tkn}. Table={Table} CurrStatus={Curr}",
                                token, table ?? "(none)", current ?? "(unknown)");
                        }
                        else
                        {
                            _log.LogInformation("Master updated for {Tkn} in {Table} rows={Rows}", token, table, affected);
                        }
                    }
                    catch (Exception ex)
                    {
                        _log.LogWarning(ex, "Master update failed for token {Tkn}", token);
                    }

                    // 3c) Multi-scan counter (if table exists)
                    try
                    {
                        await using var up2 = new SqlCommand(@"
IF OBJECT_ID(N'dbo.dpmToknMlSc', N'U') IS NOT NULL
BEGIN
  UPDATE dbo.dpmToknMlSc
     SET scnMlCnt = scnMlCnt + 1,
         isActive = CASE WHEN scnMlCnt + 1 >= scnMlAlw THEN 'Z' ELSE 'Y' END,
         updateId = @login, updateDt = GETDATE()
   WHERE tokenNum = @token AND isActive='Y' AND scnMlCnt < scnMlAlw;
END", con);
                        up2.Parameters.AddWithValue("@login", req.LoginId);
                        up2.Parameters.AddWithValue("@token", token);
                        await up2.ExecuteNonQueryAsync(ct);
                    }
                    catch { /* ignore */ }
                }

                // 3d) Detail insert (always write what we evaluated)
                try
                {
                    await using var det = new SqlCommand(@"
INSERT INTO dptTokenRecDtl
  (docuNumb, tokenNum, tokenVld, exprFlag, toknStat, bcTknTyp,
   tokenVal, handRate, tokEndVl, prodCode, inflCode, statFlag,
   createId, createDt)
VALUES
  (@docu, @token, @vld, @expr, @stat, @typ,
   @tval, @hr, @endv, @prod, @infl, 'A',
   @login, GETDATE());", con);
                    det.Parameters.AddWithValue("@docu", docuNumb);
                    det.Parameters.AddWithValue("@token", token);
                    det.Parameters.AddWithValue("@vld", tokenVld);
                    det.Parameters.AddWithValue("@expr", exprFlag ?? "");
                    det.Parameters.AddWithValue("@stat", dbActSts ?? "");
                    det.Parameters.AddWithValue("@typ", bcTknTyp ?? "");
                    det.Parameters.AddWithValue("@tval", tokenVal);
                    det.Parameters.AddWithValue("@hr", handRate);
                    det.Parameters.AddWithValue("@endv", tokEndVl);
                    det.Parameters.AddWithValue("@prod", prodCode);
                    det.Parameters.AddWithValue("@infl", req.InflCode ?? "INF00000");
                    det.Parameters.AddWithValue("@login", req.LoginId);
                    await det.ExecuteNonQueryAsync(ct);
                }
                catch (Exception ex)
                {
                    _log.LogWarning(ex, "Detail insert failed for token {Tkn}", token);
                }
            }

            // 3e) Header totals (best-effort)
            try
            {
                await using var upd = new SqlCommand(@"
UPDATE cdtTokenRec
   SET recptQty = @qty,
       basTknAm = @bas,
       handAmnt = @hand,
       scnDedAm = @scn,
       payblAmt = @pay,
       prodCode = @prod,
       updateId = @login,
       updateDt = GETDATE()
 WHERE docuNumb = @docu;", con);
                upd.Parameters.AddWithValue("@qty", rightEnt);
                upd.Parameters.AddWithValue("@bas", basTknAm);
                upd.Parameters.AddWithValue("@hand", handAmnt);
                upd.Parameters.AddWithValue("@scn", scnDedAm);
                upd.Parameters.AddWithValue("@pay", payblAmt);
                upd.Parameters.AddWithValue("@prod", prodCodeForHdr);
                upd.Parameters.AddWithValue("@login", req.LoginId);
                upd.Parameters.AddWithValue("@docu", docuNumb);
                await upd.ExecuteNonQueryAsync(ct);
            }
            catch (Exception ex)
            {
                _log.LogWarning(ex, "Header totals update failed for {Doc}", docuNumb);
            }

            // 3f) Scanner deduction ledger (optional)
            if (scnDedAm > 0)
            {
                try
                {
                    await using var ins = new SqlCommand(@"
IF OBJECT_ID(N'dbo.dptToknScnrDtl', N'U') IS NOT NULL
BEGIN
  INSERT INTO dptToknScnrDtl
    (docuNumb, docuDate, userCode, docuNarr, vouDrAmt, vouCrAmt,
     statFlag, createId, createDt)
  VALUES
    (@docu, CONVERT(date, GETDATE()), @cust,
     'Dedc. against Scanner Issued', 0, @cr, 'N', @login, GETDATE());
END", con);
                    ins.Parameters.AddWithValue("@docu", docuNumb);
                    ins.Parameters.AddWithValue("@cust", req.CustCode);
                    ins.Parameters.AddWithValue("@cr", scnDedAm);
                    ins.Parameters.AddWithValue("@login", req.LoginId);
                    await ins.ExecuteNonQueryAsync(ct);
                }
                catch { /* ignore */ }
            }

            return Ok(new SubmitTokensResponse
            {
                DocuNumb = docuNumb,
                Right = rightEnt,
                Already = already,
                Expired = expired,
                Invalid = invalid,
                BasTknAm = basTknAm,
                HandAmnt = handAmnt,
                ScnDedAm = scnDedAm,
                PayblAmt = payblAmt,
                Message = $"Batch {docuNumb}: Right={rightEnt}, Already={already}, Expired={expired}, Invalid={invalid}, Payable={payblAmt}"
            });
        }

        // ======================= Helpers =======================
        private static decimal SafeDecimal(IDataRecord r, int ordinal)
        {
            if (r.IsDBNull(ordinal)) return 0m;
            var v = r.GetValue(ordinal);
            return v switch
            {
                decimal d => d,
                double dd => Convert.ToDecimal(dd),
                float ff => Convert.ToDecimal(ff),
                _ => Convert.ToDecimal(v)
            };
        }

        private static bool AreaTypeAllowed(string bcTknTyp, string areaCode)
        {
            if (string.IsNullOrWhiteSpace(bcTknTyp) || string.IsNullOrWhiteSpace(areaCode)) return true;
            var t = bcTknTyp.ToUpperInvariant();
            var a = areaCode.ToUpperInvariant();
            // B1 disallowed in EXE/EXN/EXR; E1 allowed only in EXB/EXC/EXG
            if (t == "B1" && (a == "EXE" || a == "EXN" || a == "EXR")) return false;
            if (t == "E1" && !(a == "EXB" || a == "EXC" || a == "EXG")) return false;
            return true;
        }

        private static async Task<TokenMasterRow> FetchMasterRowAsync(SqlConnection con, string tokenNum, CancellationToken ct)
        {
            const string sql = @"
SET NOCOUNT ON;
DECLARE @src int = 0;
IF OBJECT_ID(N'dbo.LY_dpmTokenNos', N'U') IS NOT NULL SET @src = 1;
ELSE IF OBJECT_ID(N'dbo.dpmTokenNos',  N'U') IS NOT NULL SET @src = 2;
ELSE IF OBJECT_ID(N'dbo.dpaTokenNos',  N'U') IS NOT NULL SET @src = 3;

IF (@src = 1)
BEGIN
  SELECT TOP 1 tokenNum, isActive,
    CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
    ISNULL(updateId,'') AS upd,
    ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
  FROM dbo.LY_dpmTokenNos WITH (NOLOCK) WHERE tokenNum = @token; RETURN;
END
IF (@src = 2)
BEGIN
  SELECT TOP 1 tokenNum, isActive,
    CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
    ISNULL(updateId,'') AS upd,
    ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
  FROM dbo.dpmTokenNos WITH (NOLOCK) WHERE tokenNum = @token; RETURN;
END
IF (@src = 3)
BEGIN
  SELECT TOP 1 tokenNum, isActive,
    CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
    ISNULL(updateId,'') AS upd,
    ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
  FROM dbo.dpaTokenNos WITH (NOLOCK) WHERE tokenNum = @token; RETURN;
END

SELECT TOP 0 tokenNum = '', isActive = '', validDat = '', upd = '', numCvvNo = '';";
            await using var cmd = new SqlCommand(sql, con) { CommandTimeout = 30 };
            cmd.Parameters.AddWithValue("@token", tokenNum);

            await using var r = await cmd.ExecuteReaderAsync(ct);
            if (await r.ReadAsync(ct))
            {
                return new TokenMasterRow
                {
                    Found = true,
                    IsActive = r.IsDBNull(1) ? "" : r.GetString(1),
                    ValidDat = r.IsDBNull(2) ? "" : r.GetString(2),
                    UpdateId = r.IsDBNull(3) ? "" : r.GetString(3),
                    NumCvvNo = r.IsDBNull(4) ? "" : r.GetString(4)
                };
            }
            return new TokenMasterRow { Found = false };
        }

        // ---- Robust updater for LY_dpmTokenNos / dpmTokenNos / dpaTokenNos ----
        private static async Task<(int affected, string? table, string? currentStatus)> UpdateMasterRowAsync(
            SqlConnection con, string token, string login, CancellationToken ct)
        {
            var tables = new[] { "dbo.LY_dpmTokenNos", "dbo.dpmTokenNos", "dbo.dpaTokenNos" };
            var tokenTrim = token.Trim();

            foreach (var tbl in tables)
            {
                // table exists?
                var existsSql = $"IF OBJECT_ID(N'{tbl}', N'U') IS NULL SELECT 0 ELSE SELECT 1;";
                await using (var existsCmd = new SqlCommand(existsSql, con))
                {
                    var exists = Convert.ToInt32(await existsCmd.ExecuteScalarAsync(ct)) == 1;
                    if (!exists) continue;
                }

                // preferred path: only when isActive Y/Z
                var updSql1 = $@"
UPDATE T WITH (ROWLOCK)
   SET isActive = 'Z', updateId = @login, updateDt = GETDATE()
  FROM {tbl} AS T
 WHERE (T.tokenNum = @token OR LTRIM(RTRIM(T.tokenNum)) = @tokenTrim)
   AND T.isActive IN ('Y','Z');

SELECT @@ROWCOUNT;";
                int affected1;
                await using (var upd1 = new SqlCommand(updSql1, con))
                {
                    upd1.Parameters.AddWithValue("@login", login);
                    upd1.Parameters.AddWithValue("@token", token);
                    upd1.Parameters.AddWithValue("@tokenTrim", tokenTrim);
                    var o = await upd1.ExecuteScalarAsync(ct);
                    affected1 = (o == null || o is DBNull) ? 0 : Convert.ToInt32(o);
                }
                if (affected1 > 0) return (affected1, tbl, null);

                // diagnose current status
                string? curr = null;
                var checkSql = $@"
SELECT TOP 1 isActive
  FROM {tbl} WITH (NOLOCK)
 WHERE (tokenNum = @token OR LTRIM(RTRIM(tokenNum)) = @tokenTrim);";
                await using (var chk = new SqlCommand(checkSql, con))
                {
                    chk.Parameters.AddWithValue("@token", token);
                    chk.Parameters.AddWithValue("@tokenTrim", tokenTrim);
                    var v = await chk.ExecuteScalarAsync(ct);
                    if (v != null && v != DBNull.Value) curr = Convert.ToString(v);
                }

                // fallback: if exists and not already Z, force to Z
                if (curr != null && !string.Equals(curr, "Z", StringComparison.OrdinalIgnoreCase))
                {
                    var updSql2 = $@"
UPDATE T WITH (ROWLOCK)
   SET isActive = 'Z', updateId = @login, updateDt = GETDATE()
  FROM {tbl} AS T
 WHERE (T.tokenNum = @token OR LTRIM(RTRIM(T.tokenNum)) = @tokenTrim)
   AND (T.isActive <> 'Z' OR T.isActive IS NULL);

SELECT @@ROWCOUNT;";
                    await using (var upd2 = new SqlCommand(updSql2, con))
                    {
                        upd2.Parameters.AddWithValue("@login", login);
                        upd2.Parameters.AddWithValue("@token", token);
                        upd2.Parameters.AddWithValue("@tokenTrim", tokenTrim);
                        var o2 = await upd2.ExecuteScalarAsync(ct);
                        var affected2 = (o2 == null || o2 is DBNull) ? 0 : Convert.ToInt32(o2);
                        if (affected2 > 0) return (affected2, tbl, curr);
                    }
                }

                // if we found a row but nothing changed (already Z), return diagnostics
                if (curr != null) return (0, tbl, curr);
            }

            return (0, null, null);
        }

        // ===== Document number helpers (used only by /doc-number) =====
        private static string Truncate(string s, int maxLen)
            => (maxLen > 0 && s.Length > maxLen) ? s.Substring(0, maxLen) : s;

        private static string MakeSafeDocNo(string areaCode, int maxLen)
        {
            var stamp = DateTime.UtcNow.ToString("yyMMdd-HHmmss");
            var rndHex = Random.Shared.Next(0x1000, 0xFFFF).ToString("X");
            var s = $"TKN-{areaCode}-{stamp}-{rndHex}";
            return Truncate(s, maxLen);
        }

        private static async Task<int> GetVarcharMaxLenAsync(SqlConnection con, string table, string column, CancellationToken ct)
        {
            const string q = @"
        SELECT CHARACTER_MAXIMUM_LENGTH
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA='dbo' AND TABLE_NAME=@t AND COLUMN_NAME=@c;";
            await using var cmd = new SqlCommand(q, con);
            cmd.Parameters.AddWithValue("@t", table);
            cmd.Parameters.AddWithValue("@c", column);
            var o = await cmd.ExecuteScalarAsync(ct);
            return (o == null || o is DBNull) ? -1 : Convert.ToInt32(o);
        }

        private static async Task<string?> TryGetDocNoFromFunctionAsync(
            SqlConnection con, string docuType, string areaCode, CancellationToken ct)
        {
            const string sql = @"
        IF OBJECT_ID(N'dbo.dpfGetDocumentNo', N'FN') IS NOT NULL
            SELECT docuNo = dbo.dpfGetDocumentNo(@typ, @ar);
        ELSE
            SELECT docuNo = NULL;";
            await using var cmd = new SqlCommand(sql, con);
            cmd.Parameters.AddWithValue("@typ", docuType);
            cmd.Parameters.AddWithValue("@ar", areaCode);
            var o = await cmd.ExecuteScalarAsync(ct);
            return (o == null || o is DBNull) ? null : Convert.ToString(o);
        }

        private static async Task<string?> TryGetDocNoFromProcAsync(
            SqlConnection con, string docuType, string areaCode, CancellationToken ct)
        {
            try
            {
                await using var cmd = new SqlCommand("dbo.dppGetDocumentNo", con)
                { CommandType = CommandType.StoredProcedure };
                cmd.Parameters.AddWithValue("@docuType", docuType);
                cmd.Parameters.AddWithValue("@areaCode", areaCode);
                var outP = new SqlParameter("@docuNumb", SqlDbType.NVarChar, 64)
                { Direction = ParameterDirection.Output };
                cmd.Parameters.Add(outP);

                await cmd.ExecuteNonQueryAsync(ct);
                return outP.Value is DBNull ? null : Convert.ToString(outP.Value);
            }
            catch (SqlException ex) when (ex.Number == 2812) // missing proc
            {
                return null;
            }
        }

        private static async Task<(string docNo, string source)> GenerateDocumentNumberCoreAsync(
            SqlConnection con, string areaCode, string docuType, int maxLen, CancellationToken ct)
        {
            var fromFn = await TryGetDocNoFromFunctionAsync(con, docuType, areaCode, ct);
            if (!string.IsNullOrWhiteSpace(fromFn))
                return (Truncate(fromFn!, maxLen), "function");

            var fromSp = await TryGetDocNoFromProcAsync(con, docuType, areaCode, ct);
            if (!string.IsNullOrWhiteSpace(fromSp))
                return (Truncate(fromSp!, maxLen), "procedure");

            return (MakeSafeDocNo(areaCode, maxLen > 0 ? maxLen : 40), "fallback");
        }

        // ======================= DTOs / Models =======================
        private sealed class TokenMasterRow
        {
            public bool Found { get; set; }
            public string IsActive { get; set; } = "";
            public string ValidDat { get; set; } = "";
            public string UpdateId { get; set; } = "";
            public string? NumCvvNo { get; set; }
        }
    }

    // ---------------- Requests / Responses ----------------

    public sealed class TokenInfoRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;

        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;

        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;
    }

    public sealed class TokenInfoResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";

        public string TokenNum { get; set; } = "";
        public string AreaCode { get; set; } = "";
        public string CustCode { get; set; } = "";
        public string LoginId { get; set; } = "";

        // master/SP data
        public string IsActive { get; set; } = "";  // Y/Z/E/...
        public string ValidDat { get; set; } = "";
        public string ScanndBy { get; set; } = "";

        public decimal TokenVal { get; set; }
        public decimal HandRate { get; set; }
        public decimal ScnrDdRt { get; set; }
        public decimal TokEndVl { get; set; }
        public decimal TokDspVl { get; set; }
        public decimal TokAmPay { get; set; }

        public string BcTknTyp { get; set; } = "";
        public string DbActSts { get; set; } = "";
        public string ExprFlag { get; set; } = "";

        public string NumCvvNo { get; set; } = "";
        public bool RequiresCvv { get; set; }

        // multi-scan flags
        public string UpdIdAct { get; set; } = "";
        public string UpdIdMlt { get; set; } = "";
        public string ScnMlStt { get; set; } = "";
        public int ScnMlCnt { get; set; }
        public int ScnMlAlw { get; set; }

        public int ProdCode { get; set; }
        public bool AreaAllowed { get; set; }
    }

    public sealed class CvvValidateRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;

        [StringLength(16)]
        public string? Cvv { get; set; }

        [Range(1, 3)]
        public int Attempt { get; set; } = 1;
    }

    public sealed class CvvValidateResponse
    {
        public string TokenNum { get; set; } = "";
        public bool Found { get; set; }
        public bool RequiresCvv { get; set; }
        public int? CvvLength { get; set; }
        public bool Valid { get; set; }
        public bool Locked { get; set; }
        public int AttemptsLeft { get; set; }
        public string Message { get; set; } = "";
    }

    public sealed class SubmitTokensRequest
    {
        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;

        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;

        [StringLength(16)]
        public string? InflCode { get; set; }

        [Required]
        public List<string> TokenNums { get; set; } = new();

        [StringLength(64)]
        public string? DocuNumb { get; set; }
    }

    public sealed class SubmitTokensResponse
    {
        public string DocuNumb { get; set; } = "";
        public int Right { get; set; }
        public int Already { get; set; }
        public int Expired { get; set; }
        public int Invalid { get; set; }
        public decimal BasTknAm { get; set; }
        public decimal HandAmnt { get; set; }
        public decimal ScnDedAm { get; set; }
        public decimal PayblAmt { get; set; }
        public string Message { get; set; } = "";
    }

    public sealed class DocNumberResponse
    {
        public string DocuNumb { get; set; } = "";
        public string Source { get; set; } = "";  // function | procedure | fallback
        public int MaxLen { get; set; }
        public DateTime Utc { get; set; }
    }
}
