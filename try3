// Controllers/TokenScanController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TokenScanController : ControllerBase
    {
        private readonly IConfiguration _cfg;
        private readonly ILogger<TokenScanController> _log;

        // You already have custom AuthenticationMiddleware in the pipeline;
        // this controller assumes requests are already authenticated there.
        public TokenScanController(IConfiguration cfg, ILogger<TokenScanController> log)
        {
            _cfg = cfg;
            _log = log;
        }

        // --- 0) Mobile app version gate (mirrors JSP's getBuildNumb >= 1.48) ---
        [HttpGet("min-app-version")]
        public ActionResult<object> GetMinAppVersion() => Ok(new { android = "1.48" });

        // --- 1) Validate a single token (MK_02004 equivalent) ---
        [HttpPost("validate")]
        public async Task<ActionResult<ValidateTokenResponse>> ValidateAsync(
            [FromBody] ValidateTokenRequest req,
            CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);

            await using var con = new SqlConnection(_cfg.GetConnectionString("DefaultConnection"));
            await con.OpenAsync(ct);

            // We follow the JSP logic:
            //   exec bwlive.dbo.dppToknProc 'jav01', @tokenNum, 0
            // + Multi-scan allowance (dpmToknMlSc)
            // + Current isActive/status (dpmTokenNos / dpaTokenNos)
            // All calls are parameterized.
            string procMode = "jav01";

            var res = new ValidateTokenResponse { TokenNum = req.TokenNum };

            try
            {
                // 1) Stored proc: core token info
                await using (var cmd = new SqlCommand("bwlive.dbo.dppToknProc", con))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@mode", procMode);
                    cmd.Parameters.AddWithValue("@tokenNum", req.TokenNum);
                    cmd.Parameters.AddWithValue("@dummy", 0);

                    await using var rdr = await cmd.ExecuteReaderAsync(ct);
                    if (await rdr.ReadAsync(ct))
                    {
                        // Order mirrors JSP:
                        // 0: bcTknTyp, 1: tokenVal, 2: handRate, 3: scnrDdRt, 4: tokEndVl,
                        // 5: prodCode, 6: updateId, 7: dbActSts, 8: exprFlag
                        res.BcTknTyp  = rdr.IsDBNull(0) ? ""  : rdr.GetString(0);
                        res.TokenVal  = rdr.IsDBNull(1) ? 0m : SafeDecimal(rdr, 1);
                        res.HandRate  = rdr.IsDBNull(2) ? 0m : SafeDecimal(rdr, 2);
                        res.ScnrDdRt  = rdr.IsDBNull(3) ? 0m : SafeDecimal(rdr, 3);
                        res.TokEndVl  = rdr.IsDBNull(4) ? 0m : SafeDecimal(rdr, 4);
                        res.ProdCode  = rdr.IsDBNull(5) ? 0   : rdr.GetInt32(5);
                        res.UpdIdAct  = rdr.IsDBNull(6) ? ""  : rdr.GetString(6);
                        res.DbActSts  = rdr.IsDBNull(7) ? ""  : rdr.GetString(7);
                        res.ExprFlag  = rdr.IsDBNull(8) ? ""  : rdr.GetString(8);
                    }
                    else
                    {
                        return NotFound(new { message = "No record found for token." });
                    }
                }

                // 2) Multi-scan allowance (if any)
                await using (var cmd = new SqlCommand(@"
                    select top 1 isActive, scnMlCnt, scnMlAlw, isnull(updateId,'')
                    from dpmToknMlSc with (nolock)
                    where tokenNum = @tokenNum and isActive='Y' and scnMlCnt < scnMlAlw
                    order by updateDt desc;", con))
                {
                    cmd.Parameters.AddWithValue("@tokenNum", req.TokenNum);
                    await using var rdr = await cmd.ExecuteReaderAsync(ct);
                    if (await rdr.ReadAsync(ct))
                    {
                        res.ScnMlStt = rdr.IsDBNull(0) ? ""  : rdr.GetString(0);
                        res.ScnMlCnt = rdr.IsDBNull(1) ? 0   : rdr.GetInt32(1);
                        res.ScnMlAlw = rdr.IsDBNull(2) ? 0   : rdr.GetInt32(2);
                        res.UpdIdMlt = rdr.IsDBNull(3) ? ""  : rdr.GetString(3);
                    }
                }

                // 3) Pull current token master status + validity date
                await using (var cmd = new SqlCommand(@"
                    ;with M as (
                        select tokenNum, isActive, printgDt, validDay, updateId, scanndBy = ''
                        from dpmTokenNos with (nolock) where tokenNum = @tokenNum
                        union all
                        select tokenNum, isActive, printgDt, validDay, updateId, scanndBy = ''
                        from dpaTokenNos with (nolock) where tokenNum = @tokenNum
                    )
                    select top 1
                        isActive,
                        -- If you have dpfTknValDy/dpfTknValDt functions, prefer them.
                        convert(char(11), dateadd(day, isnull(validDay,0), isnull(printgDt, getdate())), 100) as validDat,
                        isnull(updateId,'') as upd
                    from M;", con))
                {
                    cmd.Parameters.AddWithValue("@tokenNum", req.TokenNum);
                    await using var rdr = await cmd.ExecuteReaderAsync(ct);
                    if (await rdr.ReadAsync(ct))
                    {
                        res.IsActive = rdr.IsDBNull(0) ? "" : rdr.GetString(0);
                        res.ValidDat = rdr.IsDBNull(1) ? "" : rdr.GetString(1);
                        // Map updateId from master as "scanndBy" for parity with JSP display
                        res.ScanndBy = rdr.IsDBNull(2) ? "" : rdr.GetString(2);
                    }
                }

                // 4) Derived display value like JSP (tokDspVl = tokenVal ? or specific rule)
                res.TokDspVl = res.TokenVal;                 // tune if you have a different display calc
                res.TokAmPay = res.TokDspVl + res.HandRate;  // what UI shows per-row

                // 5) Optional PIN (3-digit) if your schema stores it
                // If you keep token-specific CVV/PIN in a table, fetch it here.
                await using (var cmd = new SqlCommand(@"
                    select top 1 numCvvNo
                    from dpmTokenNos with (nolock)
                    where tokenNum = @tokenNum;", con))
                {
                    cmd.Parameters.AddWithValue("@tokenNum", req.TokenNum);
                    var pin = await cmd.ExecuteScalarAsync(ct);
                    res.NumCvvNo = pin == null ? "" : Convert.ToString(pin);
                }

                // Area/type guard (client also checks this, but statically flag on server too)
                res.AreaAllowed = AreaTypeAllowed(res.BcTknTyp, req.AreaCode);

                // The exact 'isActive' semantics mirror JSP: 'Y'=OK, 'Z'=already, 'E'=expired, 'T'=theft, ''=unchecked
                res.Success = true;
                res.Message = "OK";
                return Ok(res);
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "Error validating token {Token}", req.TokenNum);
                return Problem("Unexpected error during validation.");
            }
        }

        // --- 2) Submit a batch (MK_02014 equivalent) ---
        [HttpPost("submit")]
        public async Task<ActionResult<SubmitTokensResponse>> SubmitAsync(
            [FromBody] SubmitTokensRequest req,
            CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.TokenNums == null || req.TokenNums.Count == 0)
                return BadRequest(new { message = "No tokens to submit." });

            await using var con = new SqlConnection(_cfg.GetConnectionString("DefaultConnection"));
            await con.OpenAsync(ct);
            await using var tx = await con.BeginTransactionAsync(ct);

            try
            {
                // Generate a batch doc no like JSP (replace this with your DB doc no generator if available)
                var docuNumb = string.IsNullOrWhiteSpace(req.DocuNumb)
                    ? $"TKN-{req.AreaCode}-{DateTime.UtcNow:yyyyMMddHHmmss}-{Random.Shared.Next(1000, 9999)}"
                    : req.DocuNumb;

                // Header placeholder (mirrors cdtTokenRec insert; update later with totals)
                await using (var hdr = new SqlCommand(@"
                    insert into cdtTokenRec (docuNumb, docuDate, tokenTyp, cdnDocTy, custCode, prodCode,
                                              recptQty, basTknAm, handAmnt, scnDedAm, payblAmt,
                                              statFlag, createId, createDt)
                    values (@docuNumb, convert(date, getdate()), 'BC', 'CRN', @custCode, 0,
                            0, 0, 0, 0, 0, 'A', @loginId, getdate());", con, (SqlTransaction)tx))
                {
                    hdr.Parameters.AddWithValue("@docuNumb", docuNumb);
                    hdr.Parameters.AddWithValue("@custCode", req.CustCode);
                    hdr.Parameters.AddWithValue("@loginId", req.LoginId);
                    await hdr.ExecuteNonQueryAsync(ct);
                }

                int rightEnt = 0, already = 0, expired = 0, invalid = 0;
                int prodCodeForHdr = 0;
                decimal basTknAm = 0, handAmnt = 0, payblAmt = 0, scnDedAm = 0;

                foreach (var token in req.TokenNums)
                {
                    // Reuse the validate proc to compute values in-transaction
                    string bcTknTyp = "", dbActSts = "", exprFlag = "";
                    int prodCode = 0;
                    decimal tokenVal = 0, handRate = 0, scnrDdRt = 0, tokEndVl = 0;

                    await using (var cmd = new SqlCommand("bwlive.dbo.dppToknProc", con, (SqlTransaction)tx))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@mode", "jav01");
                        cmd.Parameters.AddWithValue("@tokenNum", token);
                        cmd.Parameters.AddWithValue("@dummy", 0);

                        await using var rdr = await cmd.ExecuteReaderAsync(ct);
                        if (await rdr.ReadAsync(ct))
                        {
                            bcTknTyp = rdr.IsDBNull(0) ? "" : rdr.GetString(0);
                            tokenVal = rdr.IsDBNull(1) ? 0m : SafeDecimal(rdr, 1);
                            handRate = rdr.IsDBNull(2) ? 0m : SafeDecimal(rdr, 2);
                            scnrDdRt = rdr.IsDBNull(3) ? 0m : SafeDecimal(rdr, 3);
                            tokEndVl = rdr.IsDBNull(4) ? 0m : SafeDecimal(rdr, 4);
                            prodCode = rdr.IsDBNull(5) ? 0   : rdr.GetInt32(5);
                            dbActSts = rdr.IsDBNull(7) ? ""  : rdr.GetString(7);
                            exprFlag = rdr.IsDBNull(8) ? ""  : rdr.GetString(8);
                        }
                    }

                    // Decide status buckets like JSP
                    string tokenVld;
                    if (exprFlag == "Y")
                    {
                        tokenVld = "E"; expired++;
                    }
                    else if (dbActSts == "Z")
                    {
                        tokenVld = "Z"; already++;
                    }
                    else if (prodCode <= 0)
                    {
                        tokenVld = "N"; invalid++;
                    }
                    else
                    {
                        tokenVld = "Y"; rightEnt++;
                        basTknAm += tokenVal;
                        handAmnt += handRate;
                        payblAmt += tokEndVl;
                        scnDedAm += scnrDdRt;
                        prodCodeForHdr = prodCode; // last non-zero
                    }

                    // Detail row (mirrors dptTokenRecDtl)
                    await using (var det = new SqlCommand(@"
                        insert into dptTokenRecDtl
                          (docuNumb, tokenNum, tokenVld, exprFlag, toknStat, bcTknTyp,
                           tokenVal, handRate, tokEndVl, prodCode, inflCode, statFlag,
                           createId, createDt)
                        values
                          (@docuNumb, @tokenNum, @tokenVld, @exprFlag, @dbActSts, @bcTknTyp,
                           @tokenVal, @handRate, @tokEndVl, @prodCode, @inflCode, 'A',
                           @loginId, getdate());", con, (SqlTransaction)tx))
                    {
                        det.Parameters.AddWithValue("@docuNumb", docuNumb);
                        det.Parameters.AddWithValue("@tokenNum", token);
                        det.Parameters.AddWithValue("@tokenVld", tokenVld);
                        det.Parameters.AddWithValue("@exprFlag", exprFlag);
                        det.Parameters.AddWithValue("@dbActSts", dbActSts);
                        det.Parameters.AddWithValue("@bcTknTyp", bcTknTyp);
                        det.Parameters.AddWithValue("@tokenVal", tokenVal);
                        det.Parameters.AddWithValue("@handRate", handRate);
                        det.Parameters.AddWithValue("@tokEndVl", tokEndVl);
                        det.Parameters.AddWithValue("@prodCode", prodCode);
                        det.Parameters.AddWithValue("@inflCode", req.InflCode ?? "INF00000");
                        det.Parameters.AddWithValue("@loginId", req.LoginId);
                        await det.ExecuteNonQueryAsync(ct);
                    }

                    // Mark token scanned IF valid (aligns with JSP's guarded update)
                    if (tokenVld == "Y")
                    {
                        await using var up = new SqlCommand(@"
                            update dpmTokenNos
                               set isActive = 'Z',
                                   updateId = @loginId,
                                   updateDt = getdate()
                             where tokenNum = @tokenNum
                               and isActive in ('Y','Z');", con, (SqlTransaction)tx);
                        up.Parameters.AddWithValue("@loginId", req.LoginId);
                        up.Parameters.AddWithValue("@tokenNum", token);
                        await up.ExecuteNonQueryAsync(ct);
                    }
                }

                // Update header totals (cdtTokenRec)
                await using (var upd = new SqlCommand(@"
                    update cdtTokenRec
                       set recptQty = @qty,
                           basTknAm = @bas,
                           handAmnt = @hand,
                           scnDedAm = @scn,
                           payblAmt = @pay,
                           prodCode = @prod,
                           updateId = @loginId,
                           updateDt = getdate()
                     where docuNumb = @docuNumb;", con, (SqlTransaction)tx))
                {
                    upd.Parameters.AddWithValue("@qty", rightEnt);
                    upd.Parameters.AddWithValue("@bas", basTknAm);
                    upd.Parameters.AddWithValue("@hand", handAmnt);
                    upd.Parameters.AddWithValue("@scn", scnDedAm);
                    upd.Parameters.AddWithValue("@pay", payblAmt);
                    upd.Parameters.AddWithValue("@prod", prodCodeForHdr);
                    upd.Parameters.AddWithValue("@loginId", req.LoginId);
                    upd.Parameters.AddWithValue("@docuNumb", docuNumb);
                    await upd.ExecuteNonQueryAsync(ct);
                }

                await tx.CommitAsync(ct);

                var msg = $"Batch: {docuNumb}. Right: {rightEnt}, Already: {already}, Expired: {expired}, Invalid: {invalid}. Payable: {payblAmt}";

                return Ok(new SubmitTokensResponse
                {
                    DocuNumb = docuNumb,
                    Right = rightEnt,
                    Already = already,
                    Expired = expired,
                    Invalid = invalid,
                    BasTknAm = basTknAm,
                    HandAmnt = handAmnt,
                    ScnDedAm = scnDedAm,
                    PayblAmt = payblAmt,
                    Message = msg
                });
            }
            catch (Exception ex)
            {
                await tx.RollbackAsync(ct);
                _log.LogError(ex, "Error submitting token batch for {Cust}", req.CustCode);
                return Problem("Could not save tokens. Transaction rolled back.");
            }
        }

        // --- helpers ---
        private static decimal SafeDecimal(IDataRecord r, int ordinal)
        {
            // Handles sql money/decimal/double conversion safely
            var v = r.GetValue(ordinal);
            if (v is decimal d) return d;
            if (v is double dd) return Convert.ToDecimal(dd);
            if (v is float ff) return Convert.ToDecimal(ff);
            return Convert.ToDecimal(v);
        }

        private static bool AreaTypeAllowed(string bcTknTyp, string areaCode)
        {
            if (string.IsNullOrWhiteSpace(bcTknTyp) || string.IsNullOrWhiteSpace(areaCode)) return true;
            var a = areaCode.ToUpperInvariant();
            var t = bcTknTyp.ToUpperInvariant();

            // JSP rules:
            // - B1 (domestic?) not allowed in EXE/EXN/EXR
            // - E1 (export) only allowed in EXB/EXC/EXG
            if (t == "B1" && (a == "EXE" || a == "EXN" || a == "EXR")) return false;
            if (t == "E1" && !(a == "EXB" || a == "EXC" || a == "EXG")) return false;
            return true;
        }
    }

    // --- DTOs -----
    public sealed class ValidateTokenRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;

        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;

        // carried through from JSP for audit/dup-protection
        [StringLength(32)]
        public string? SessionId { get; set; }

        [StringLength(16)]
        public string? LoginId { get; set; }
    }

    public sealed class ValidateTokenResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";

        public string TokenNum { get; set; } = "";
        public string TokenIdn { get; set; } = "";     // optional (if you store it)
        public string IsActive { get; set; } = "";     // Y/Z/E/T/...
        public string ValidDat { get; set; } = "";     // e.g., "12 Jan 2026"
        public string ScanndBy { get; set; } = "";

        public decimal TokenVal { get; set; }
        public decimal HandRate { get; set; }
        public decimal ScnrDdRt { get; set; }
        public decimal TokEndVl { get; set; }
        public decimal TokDspVl { get; set; }          // display value
        public decimal TokAmPay { get; set; }          // TokDspVl + HandRate

        public string BcTknTyp { get; set; } = "";     // B1/E1/...
        public string DbActSts { get; set; } = "";
        public string ExprFlag { get; set; } = "";     // Y/N expired

        public string NumCvvNo { get; set; } = "";     // 3-digit pin (if any)
        public string UpdIdAct { get; set; } = "";     // from master
        public string UpdIdMlt { get; set; } = "";     // multiscan update id

        public string ScnMlStt { get; set; } = "";     // multi-scan status
        public int ScnMlCnt { get; set; }
        public int ScnMlAlw { get; set; }

        public int ProdCode { get; set; }
        public bool AreaAllowed { get; set; }
    }

    public sealed class SubmitTokensRequest
    {
        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;

        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;

        [StringLength(1)]
        public string? UserType { get; set; }          // C/R/I etc (if needed for TDS etc)

        [Required]
        public List<string> TokenNums { get; set; } = new();

        [StringLength(32)]
        public string? RandNumb { get; set; }          // session ticket from JSP

        [StringLength(40)]
        public string? DocuNumb { get; set; }          // optional inbound doc number

        [StringLength(16)]
        public string? InflCode { get; set; }          // if you attach influencer
    }

    public sealed class SubmitTokensResponse
    {
        public string DocuNumb { get; set; } = "";
        public int Right { get; set; }
        public int Already { get; set; }
        public int Expired { get; set; }
        public int Invalid { get; set; }

        public decimal BasTknAm { get; set; }
        public decimal HandAmnt { get; set; }
        public decimal ScnDedAm { get; set; }
        public decimal PayblAmt { get; set; }

        public string Message { get; set; } = "";
    }
}
