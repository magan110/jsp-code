using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using RAKControllers.DataAccess;
using System.ComponentModel.DataAnnotations;

namespace RAKControllers.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class PainterController : ControllerBase
    {
        private readonly DatabaseHelper _dbHelper;

        public PainterController(DatabaseHelper dbHelper)
        {
            _dbHelper = dbHelper;
        }

        [HttpPost("register")]
        public IActionResult RegisterPainter([FromBody] PainterRegistrationRequest request)
        {
            if (request == null)
            {
                return BadRequest("Request body is required.");
            }

            var validationResults = new List<ValidationResult>();
            var validationContext = new ValidationContext(request);
            bool isValid = Validator.TryValidateObject(request, validationContext, validationResults, true);

            if (!isValid)
            {
                return BadRequest(validationResults.Select(v => v.ErrorMessage));
            }

            try
            {
                // Insert painter registration
                var insertQuery = @"
                    INSERT INTO PainterRegistrations 
                    (FirstName, MiddleName, LastName, MobileNumber, Address, Area, Emirates, Reference,
                     ProfilePhoto, EmiratesIdFront, EmiratesIdBack, EmiratesIdNumber, IdHolderName, 
                     DateOfBirth, Nationality, CompanyDetails, IssueDate, ExpiryDate, Occupation,
                     AccountHolderName, IbanNumber, BankName, BranchName, BankAddress, ChequeBook, BankDocument,
                     CreatedDate, IsActive)
                    VALUES 
                    (@FirstName, @MiddleName, @LastName, @MobileNumber, @Address, @Area, @Emirates, @Reference,
                     @ProfilePhoto, @EmiratesIdFront, @EmiratesIdBack, @EmiratesIdNumber, @IdHolderName,
                     @DateOfBirth, @Nationality, @CompanyDetails, @IssueDate, @ExpiryDate, @Occupation,
                     @AccountHolderName, @IbanNumber, @BankName, @BranchName, @BankAddress, @ChequeBook, @BankDocument,
                     GETDATE(), 'Y');
                    SELECT SCOPE_IDENTITY();";

                var parameters = new Dictionary<string, object>
                {
                    { "@FirstName", request.FirstName },
                    { "@MiddleName", request.MiddleName ?? (object)DBNull.Value },
                    { "@LastName", request.LastName },
                    { "@MobileNumber", request.MobileNumber },
                    { "@Address", request.Address },
                    { "@Area", request.Area },
                    { "@Emirates", request.Emirates },
                    { "@Reference", request.Reference },
                    { "@ProfilePhoto", request.ProfilePhoto ?? (object)DBNull.Value },
                    { "@EmiratesIdFront", request.EmiratesIdFront ?? (object)DBNull.Value },
                    { "@EmiratesIdBack", request.EmiratesIdBack ?? (object)DBNull.Value },
                    { "@EmiratesIdNumber", request.EmiratesIdNumber },
                    { "@IdHolderName", request.IdHolderName },
                    { "@DateOfBirth", request.DateOfBirth },
                    { "@Nationality", request.Nationality },
                    { "@CompanyDetails", request.CompanyDetails ?? (object)DBNull.Value },
                    { "@IssueDate", request.IssueDate },
                    { "@ExpiryDate", request.ExpiryDate },
                    { "@Occupation", request.Occupation ?? (object)DBNull.Value },
                    { "@AccountHolderName", request.AccountHolderName ?? (object)DBNull.Value },
                    { "@IbanNumber", request.IbanNumber ?? (object)DBNull.Value },
                    { "@BankName", request.BankName ?? (object)DBNull.Value },
                    { "@BranchName", request.BranchName ?? (object)DBNull.Value },
                    { "@BankAddress", request.BankAddress ?? (object)DBNull.Value },
                    { "@ChequeBook", request.ChequeBook ?? (object)DBNull.Value },
                    { "@BankDocument", request.BankDocument ?? (object)DBNull.Value }
                };

                var result = _dbHelper.WebSessBean(insertQuery, parameters);
                
                if (result != null && result.Count > 0)
                {
                    var painterId = result[0].Values.FirstOrDefault()?.ToString();
                    return Ok(new
                    {
                        success = true,
                        message = "Painter registered successfully",
                        painterId = painterId
                    });
                }

                return StatusCode(500, "Failed to register painter");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("list")]
        public IActionResult GetPainters([FromQuery] int page = 1, [FromQuery] int pageSize = 10, [FromQuery] string search = "")
        {
            try
            {
                var offset = (page - 1) * pageSize;
                var searchCondition = string.IsNullOrEmpty(search) ? "" : 
                    "AND (FirstName LIKE @Search OR LastName LIKE @Search OR MobileNumber LIKE @Search OR EmiratesIdNumber LIKE @Search)";

                var query = $@"
                    SELECT PainterId, FirstName, MiddleName, LastName, MobileNumber, Area, Emirates, 
                           Reference, EmiratesIdNumber, Nationality, CreatedDate, IsActive
                    FROM PainterRegistrations 
                    WHERE IsActive = 'Y' {searchCondition}
                    ORDER BY CreatedDate DESC
                    OFFSET @Offset ROWS FETCH NEXT @PageSize ROWS ONLY";

                var parameters = new Dictionary<string, object>
                {
                    { "@Offset", offset },
                    { "@PageSize", pageSize }
                };

                if (!string.IsNullOrEmpty(search))
                {
                    parameters.Add("@Search", $"%{search}%");
                }

                var painters = _dbHelper.WebSessBean(query, parameters);

                // Get total count
                var countQuery = $@"
                    SELECT COUNT(*) as TotalCount 
                    FROM PainterRegistrations 
                    WHERE IsActive = 'Y' {searchCondition}";

                var countParams = new Dictionary<string, object>();
                if (!string.IsNullOrEmpty(search))
                {
                    countParams.Add("@Search", $"%{search}%");
                }

                var countResult = _dbHelper.WebSessBean(countQuery, countParams);
                var totalCount = Convert.ToInt32(countResult[0]["TotalCount"]);

                return Ok(new
                {
                    success = true,
                    data = painters,
                    pagination = new
                    {
                        page = page,
                        pageSize = pageSize,
                        totalCount = totalCount,
                        totalPages = (int)Math.Ceiling((double)totalCount / pageSize)
                    }
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("{painterId}")]
        public IActionResult GetPainter(int painterId)
        {
            try
            {
                var query = @"
                    SELECT * FROM PainterRegistrations 
                    WHERE paintrid = @paintrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@paintrid", painterId }
                };

                var result = _dbHelper.WebSessBean(query, parameters);

                if (result == null || result.Count == 0)
                {
                    return NotFound("Painter not found");
                }

                return Ok(new
                {
                    success = true,
                    data = result[0]
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPut("{painterId}")]
        public IActionResult UpdatePainter(int painterId, [FromBody] PainterUpdateRequest request)
        {
            if (request == null)
            {
                return BadRequest("Request body is required.");
            }

            try
            {
                // Check if painter exists
                var checkQuery = "SELECT COUNT(*) as Count FROM PainterRegistrations WHERE PainterId = @PainterId AND IsActive = 'Y'";
                var checkParams = new Dictionary<string, object> { { "@PainterId", painterId } };
                var checkResult = _dbHelper.WebSessBean(checkQuery, checkParams);

                if (Convert.ToInt32(checkResult[0]["Count"]) == 0)
                {
                    return NotFound("Painter not found");
                }

                // Update painter
                var updateQuery = @"
                    UPDATE PainterRegistrations 
                    SET FirstName = @FirstName, MiddleName = @MiddleName, LastName = @LastName,
                        MobileNumber = @MobileNumber, Address = @Address, Area = @Area, Emirates = @Emirates,
                        Reference = @Reference, Nationality = @Nationality, CompanyDetails = @CompanyDetails,
                        Occupation = @Occupation, AccountHolderName = @AccountHolderName, IbanNumber = @IbanNumber,
                        BankName = @BankName, BranchName = @BranchName, BankAddress = @BankAddress,
                        UpdatedDate = GETDATE()
                    WHERE PainterId = @PainterId";

                var parameters = new Dictionary<string, object>
                {
                    { "@PainterId", painterId },
                    { "@FirstName", request.FirstName },
                    { "@MiddleName", request.MiddleName ?? (object)DBNull.Value },
                    { "@LastName", request.LastName },
                    { "@MobileNumber", request.MobileNumber },
                    { "@Address", request.Address },
                    { "@Area", request.Area },
                    { "@Emirates", request.Emirates },
                    { "@Reference", request.Reference },
                    { "@Nationality", request.Nationality },
                    { "@CompanyDetails", request.CompanyDetails ?? (object)DBNull.Value },
                    { "@Occupation", request.Occupation ?? (object)DBNull.Value },
                    { "@AccountHolderName", request.AccountHolderName ?? (object)DBNull.Value },
                    { "@IbanNumber", request.IbanNumber ?? (object)DBNull.Value },
                    { "@BankName", request.BankName ?? (object)DBNull.Value },
                    { "@BranchName", request.BranchName ?? (object)DBNull.Value },
                    { "@BankAddress", request.BankAddress ?? (object)DBNull.Value }
                };

                _dbHelper.WebExecute(updateQuery, parameters);

                return Ok(new
                {
                    success = true,
                    message = "Painter updated successfully"
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpDelete("{painterId}")]
        public IActionResult DeletePainter(int painterId)
        {
            try
            {
                // Soft delete - set IsActive to 'N'
                var deleteQuery = @"
                    UPDATE PainterRegistrations 
                    SET isactive = 'N', updatedt = GETDATE() 
                    WHERE paintrid = @paintrid AND isactive = 'Y'";

                var parameters = new Dictionary<string, object>
                {
                    { "@paintrid", painterId }
                };

                var rowsAffected = _dbHelper.WebExecute(deleteQuery, parameters);

                if (rowsAffected == 0)
                {
                    return NotFound("Painter not found");
                }

                return Ok(new
                {
                    success = true,
                    message = "Painter deleted successfully"
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpPost("upload-document")]
        public IActionResult UploadDocument([FromForm] DocumentUploadRequest request)
        {
            if (request == null || request.File == null || request.File.Length == 0)
            {
                return BadRequest("File is required");
            }

            try
            {
                // Validate file type
                var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".pdf" };
                var fileExtension = Path.GetExtension(request.File.FileName).ToLowerInvariant();
                
                if (!allowedExtensions.Contains(fileExtension))
                {
                    return BadRequest("Invalid file type. Only JPG, PNG, and PDF files are allowed.");
                }

                // Validate file size (10MB limit)
                if (request.File.Length > 10 * 1024 * 1024)
                {
                    return BadRequest("File size cannot exceed 10MB");
                }

                // Generate unique filename
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var uploadsPath = Path.Combine(Directory.GetCurrentDirectory(), "uploads", "painter-documents");
                
                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    request.File.CopyTo(stream);
                }

                return Ok(new
                {
                    success = true,
                    message = "File uploaded successfully",
                    fileName = fileName,
                    filePath = $"/uploads/painter-documents/{fileName}",
                    documentType = request.DocumentType
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("emirates-list")]
        public IActionResult GetEmiratesList()
        {
            var emirates = new[]
            {
                "Dubai",
                "Abu Dhabi",
                "Sharjah",
                "Ajman",
                "Umm Al Quwain",
                "Ras Al Khaimah",
                "Fujairah"
            };

            return Ok(new
            {
                success = true,
                data = emirates
            });
        }

        [HttpGet("reference-list")]
        public IActionResult GetReferenceList()
        {
            var references = new[]
            {
                "Employee",
                "Retailer",
                "Distributor",
                "Salesman"
            };

            return Ok(new
            {
                success = true,
                data = references
            });
        }
    }

    // Request Models
    public class PainterRegistrationRequest
    {
        [Required]
        [StringLength(100)]
        public string FirstName { get; set; }

        [StringLength(100)]
        public string? MiddleName { get; set; }

        [Required]
        [StringLength(100)]
        public string LastName { get; set; }

        [Required]
        [Phone]
        [RegularExpression(@"^(50|52|54|55|56|58)\d{7}$", ErrorMessage = "Please enter a valid UAE mobile number")]
        public string MobileNumber { get; set; }

        [Required]
        [StringLength(500)]
        public string Address { get; set; }

        [Required]
        [StringLength(100)]
        public string Area { get; set; }

        [Required]
        [StringLength(50)]
        public string Emirates { get; set; }

        [Required]
        [StringLength(50)]
        public string Reference { get; set; }

        public string? ProfilePhoto { get; set; }

        public string? EmiratesIdFront { get; set; }

        public string? EmiratesIdBack { get; set; }

        [Required]
        [StringLength(20)]
        public string EmiratesIdNumber { get; set; }

        [Required]
        [StringLength(200)]
        public string IdHolderName { get; set; }

        [Required]
        public DateTime DateOfBirth { get; set; }

        [Required]
        [StringLength(100)]
        public string Nationality { get; set; }

        public string? CompanyDetails { get; set; }

        [Required]
        public DateTime IssueDate { get; set; }

        [Required]
        public DateTime ExpiryDate { get; set; }

        public string? Occupation { get; set; }

        // Bank Details (Optional)
        public string? AccountHolderName { get; set; }
        public string? IbanNumber { get; set; }
        public string? BankName { get; set; }
        public string? BranchName { get; set; }
        public string? BankAddress { get; set; }
        public string? ChequeBook { get; set; }
        public string? BankDocument { get; set; }
    }

    public class PainterUpdateRequest
    {
        [Required]
        [StringLength(100)]
        public string FirstName { get; set; }

        [StringLength(100)]
        public string? MiddleName { get; set; }

        [Required]
        [StringLength(100)]
        public string LastName { get; set; }

        [Required]
        [Phone]
        [RegularExpression(@"^(50|52|54|55|56|58)\d{7}$", ErrorMessage = "Please enter a valid UAE mobile number")]
        public string MobileNumber { get; set; }

        [Required]
        [StringLength(500)]
        public string Address { get; set; }

        [Required]
        [StringLength(100)]
        public string Area { get; set; }

        [Required]
        [StringLength(50)]
        public string Emirates { get; set; }

        [Required]
        [StringLength(50)]
        public string Reference { get; set; }

        [Required]
        [StringLength(100)]
        public string Nationality { get; set; }

        public string? CompanyDetails { get; set; }
        public string? Occupation { get; set; }

        // Bank Details (Optional)
        public string? AccountHolderName { get; set; }
        public string? IbanNumber { get; set; }
        public string? BankName { get; set; }
        public string? BranchName { get; set; }
        public string? BankAddress { get; set; }
    }

    public class DocumentUploadRequest
    {
        [Required]
        public IFormFile File { get; set; }

        [Required]
        [StringLength(50)]
        public string DocumentType { get; set; }
    }
}
