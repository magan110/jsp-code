// Controllers/TokenScanController.cs
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Net.Http;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class TokenScanController : ControllerBase
    {
        private readonly IConfiguration _cfg;
        private readonly ILogger<TokenScanController> _log;

        public TokenScanController(IConfiguration cfg, ILogger<TokenScanController> log)
        {
            _cfg = cfg;
            _log = log;
        }

        // --------------------------------------------------------------------
        // DOCUMENT NUMBER GENERATOR (JSP-like)
        // GET /api/tokenscan/doc-number?areaCode=EXB&docuType=TKN
        // --------------------------------------------------------------------
        [HttpGet("doc-number")]
        public async Task<ActionResult<DocNumberResponse>> GetDocumentNumberAsync(
            [FromQuery, Required, StringLength(10)] string areaCode,
            [FromQuery, StringLength(10)] string? docuType,
            CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);

            docuType = string.IsNullOrWhiteSpace(docuType) ? "TKN" : docuType.Trim();

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            try
            {
                var maxLen = await GetVarcharMaxLenAsync(con, "cdtTokenRec", "docuNumb", ct);
                var (docNo, source) = await GenerateDocumentNumberCoreAsync(con, areaCode.Trim(), docuType, maxLen, ct);

                return Ok(new DocNumberResponse
                {
                    DocuNumb = docNo,
                    Source = source,
                    MaxLen = maxLen,
                    Utc = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "doc-number generation failed for area {Area} type {Type}", areaCode, docuType);
                return Problem("Could not generate document number.");
            }
        }

        // --------------------------------------------------------------------
        // 1) TOKEN INFO  (â‰ˆ MK_02004)
        // --------------------------------------------------------------------
        [HttpPost("token-info")]
        public async Task<ActionResult<TokenInfoResponse>> GetTokenInfoAsync(
            [FromBody] TokenInfoRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            var info = new TokenInfoResponse
            {
                TokenNum = req.TokenNum,
                AreaCode = req.AreaCode,
                CustCode = req.CustCode,
                LoginId = req.LoginId
            };

            try
            {
                // (a) SP (if present)
                try
                {
                    await using var sp = new SqlCommand("bwlive.dbo.dppToknProc", con)
                    { CommandType = CommandType.StoredProcedure };
                    sp.Parameters.AddWithValue("@mode", "jav01");
                    sp.Parameters.AddWithValue("@tokenNum", req.TokenNum);
                    sp.Parameters.AddWithValue("@dummy", 0);

                    await using var r = await sp.ExecuteReaderAsync(ct);
                    if (await r.ReadAsync(ct))
                    {
                        info.BcTknTyp = r.IsDBNull(0) ? "" : r.GetString(0);
                        info.TokenVal = SafeDecimal(r, 1);
                        info.HandRate = SafeDecimal(r, 2);
                        info.ScnrDdRt = SafeDecimal(r, 3);
                        info.TokEndVl = SafeDecimal(r, 4);
                        info.ProdCode = r.IsDBNull(5) ? 0 : r.GetInt32(5);
                        info.UpdIdAct = r.IsDBNull(6) ? "" : r.GetString(6);
                        info.DbActSts = r.IsDBNull(7) ? "" : r.GetString(7);
                        info.ExprFlag = r.IsDBNull(8) ? "" : r.GetString(8);
                    }
                }
                catch (SqlException ex) when (ex.Number == 2812 /* SP missing */)
                {
                    _log.LogWarning(ex, "dppToknProc not found; proceeding without SP.");
                }

                // (b) Master row
                var master = await FetchMasterRowAsync(con, req.TokenNum, ct);
                if (!master.Found)
                    return Ok(new { found = false, message = "No record found for token." });

                info.IsActive = master.IsActive;
                info.ValidDat = master.ValidDat;
                info.ScanndBy = master.UpdateId;
                info.NumCvvNo = master.NumCvvNo ?? "";
                info.RequiresCvv = !string.IsNullOrWhiteSpace(info.NumCvvNo) && info.NumCvvNo != "0";

                // display/pay derived values
                if (info.TokDspVl == 0 && info.TokenVal > 0) info.TokDspVl = info.TokenVal;
                info.TokAmPay = info.TokDspVl + info.HandRate;

                // (c) Multi-scan allowance (table optional)
                const string sqlMult = @"
IF OBJECT_ID(N'dbo.dpmToknMlSc', N'U') IS NOT NULL
BEGIN
  SELECT TOP 1 isActive, scnMlCnt, scnMlAlw, ISNULL(updateId,'')
  FROM dbo.dpmToknMlSc WITH (NOLOCK)
  WHERE tokenNum = @token AND isActive='Y' AND scnMlCnt < scnMlAlw
  ORDER BY updateDt DESC;
END
ELSE
BEGIN
  SELECT TOP 0 isActive='', scnMlCnt=0, scnMlAlw=0, updateId='';
END";
                await using (var cmd = new SqlCommand(sqlMult, con))
                {
                    cmd.Parameters.AddWithValue("@token", req.TokenNum);
                    await using var r = await cmd.ExecuteReaderAsync(ct);
                    if (await r.ReadAsync(ct))
                    {
                        info.ScnMlStt = r.IsDBNull(0) ? "" : r.GetString(0);
                        info.ScnMlCnt = r.IsDBNull(1) ? 0 : r.GetInt32(1);
                        info.ScnMlAlw = r.IsDBNull(2) ? 0 : r.GetInt32(2);
                        info.UpdIdMlt = r.IsDBNull(3) ? "" : r.GetString(3);
                    }
                }

                // (d) Area/type rule (B1/E1)
                info.AreaAllowed = AreaTypeAllowed(info.BcTknTyp, req.AreaCode);

                info.Success = true;
                info.Message = "OK";
                return Ok(info);
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "token-info failed for token {Token}", req.TokenNum);
                return Problem("Unexpected error during token info fetch.");
            }
        }

        // --------------------------------------------------------------------
        // 2) CVV VALIDATE (3-attempt lock on client; server is stateless)
        // --------------------------------------------------------------------
        [HttpPost("validate")]
        public async Task<ActionResult<CvvValidateResponse>> ValidateCvvAsync(
            [FromBody] CvvValidateRequest req, CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.Attempt <= 0) req.Attempt = 1;

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            try
            {
                var master = await FetchMasterRowAsync(con, req.TokenNum, ct);
                if (!master.Found)
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = false,
                        RequiresCvv = false,
                        Valid = false,
                        Locked = false,
                        AttemptsLeft = 3,
                        Message = "Token not found."
                    });

                var stored = (master.NumCvvNo ?? "").Trim();
                var requires = !string.IsNullOrWhiteSpace(stored) && stored != "0";
                if (!requires)
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = true,
                        RequiresCvv = false,
                        Valid = true,
                        Locked = false,
                        AttemptsLeft = 3,
                        Message = "Valid: CVV not required."
                    });

                var provided = (req.Cvv ?? "").Trim();
                if (string.IsNullOrEmpty(provided))
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = true,
                        RequiresCvv = true,
                        CvvLength = stored.Length,
                        Valid = false,
                        Locked = false,
                        AttemptsLeft = Math.Max(0, 3 - req.Attempt),
                        Message = "CVV required."
                    });

                var isMatch = string.Equals(provided, stored, StringComparison.Ordinal);
                if (isMatch)
                    return Ok(new CvvValidateResponse
                    {
                        TokenNum = req.TokenNum,
                        Found = true,
                        RequiresCvv = true,
                        CvvLength = stored.Length,
                        Valid = true,
                        Locked = false,
                        AttemptsLeft = Math.Max(0, 3 - req.Attempt),
                        Message = "Valid: CVV matched."
                    });

                var locked = req.Attempt >= 3;
                return Ok(new CvvValidateResponse
                {
                    TokenNum = req.TokenNum,
                    Found = true,
                    RequiresCvv = true,
                    CvvLength = stored.Length,
                    Valid = false,
                    Locked = locked,
                    AttemptsLeft = locked ? 0 : (3 - req.Attempt),
                    Message = locked ? "CVV failed 3 times; please rescan." : "Invalid CVV."
                });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "validate failed for token {Token}", req.TokenNum);
                return Problem("Unexpected error during validation.");
            }
        }

        // --------------------------------------------------------------------
        // 3) SUBMIT (SIMPLE): flip LY_dpmTokenNos.isActive 'Y' -> 'Z' per token
        // --------------------------------------------------------------------
        [HttpPost("submit")]
        public async Task<ActionResult<SimpleSubmitResponse>> SubmitAsync(
            [FromBody] SubmitTokensRequest req,
            CancellationToken ct)
        {
            if (!ModelState.IsValid) return ValidationProblem(ModelState);
            if (req.TokenNums is null || req.TokenNums.Count == 0)
                return BadRequest(new { message = "No tokens provided." });

            await using var con = new SqlConnection(_cfg.GetConnectionString("bwlive"));
            await con.OpenAsync(ct);

            var results = new List<SimpleItemResult>();
            int updated = 0, alreadyZ = 0, notY = 0, notFound = 0;

            foreach (var raw in req.TokenNums)
            {
                var token = (raw ?? string.Empty).Trim();
                if (string.IsNullOrEmpty(token))
                {
                    results.Add(new SimpleItemResult { TokenNum = raw ?? "", Status = "BadToken" });
                    continue;
                }

                // Try to update when isActive is exactly 'Y'
                int rows;
                const string updateSql = @"
UPDATE T WITH (ROWLOCK)
   SET isActive = 'Z', updateId = @login, updateDt = GETDATE()
  FROM dbo.LY_dpmTokenNos AS T
 WHERE (T.tokenNum = @token OR LTRIM(RTRIM(T.tokenNum)) = @tokenTrim)
   AND ISNULL(T.isActive,'') = 'Y';
SELECT @@ROWCOUNT;";
                await using (var cmd = new SqlCommand(updateSql, con))
                {
                    cmd.Parameters.AddWithValue("@login", req.LoginId ?? "");
                    cmd.Parameters.AddWithValue("@token", token);
                    cmd.Parameters.AddWithValue("@tokenTrim", token);
                    var o = await cmd.ExecuteScalarAsync(ct);
                    rows = (o == null || o is DBNull) ? 0 : Convert.ToInt32(o);
                }

                if (rows > 0)
                {
                    updated += rows;
                    results.Add(new SimpleItemResult { TokenNum = token, Status = "Updated", CurrentIsActive = "Z" });
                    continue;
                }

                // No update â†’ check existence / current status
                string? curr = null;
                const string checkSql = @"
SELECT TOP 1 ISNULL(isActive,'')
  FROM dbo.LY_dpmTokenNos WITH (NOLOCK)
 WHERE (tokenNum = @token OR LTRIM(RTRIM(tokenNum)) = @tokenTrim);";
                await using (var chk = new SqlCommand(checkSql, con))
                {
                    chk.Parameters.AddWithValue("@token", token);
                    chk.Parameters.AddWithValue("@tokenTrim", token);
                    var v = await chk.ExecuteScalarAsync(ct);
                    if (v != null && v != DBNull.Value) curr = Convert.ToString(v);
                }

                if (curr == null)
                {
                    notFound++;
                    results.Add(new SimpleItemResult { TokenNum = token, Status = "NotFound" });
                }
                else if (string.Equals(curr, "Z", StringComparison.OrdinalIgnoreCase))
                {
                    alreadyZ++;
                    results.Add(new SimpleItemResult { TokenNum = token, Status = "AlreadyZ", CurrentIsActive = "Z" });
                }
                else
                {
                    notY++;
                    results.Add(new SimpleItemResult { TokenNum = token, Status = "NotY", CurrentIsActive = curr });
                }
            }

            var resp = new SimpleSubmitResponse
            {
                Updated = updated,
                AlreadyZ = alreadyZ,
                NotY = notY,
                NotFound = notFound,
                Results = results
            };

            return Ok(resp);
        }

        // ======================= Helpers =======================
        private static decimal SafeDecimal(IDataRecord r, int ordinal)
        {
            if (r.IsDBNull(ordinal)) return 0m;
            var v = r.GetValue(ordinal);
            return v switch
            {
                decimal d => d,
                double dd => Convert.ToDecimal(dd),
                float ff => Convert.ToDecimal(ff),
                _ => Convert.ToDecimal(v)
            };
        }

        private static bool AreaTypeAllowed(string bcTknTyp, string areaCode)
        {
            if (string.IsNullOrWhiteSpace(bcTknTyp) || string.IsNullOrWhiteSpace(areaCode)) return true;
            var t = bcTknTyp.ToUpperInvariant();
            var a = areaCode.ToUpperInvariant();
            if (t == "B1" && (a == "EXE" || a == "EXN" || a == "EXR")) return false;
            if (t == "E1" && !(a == "EXB" || a == "EXC" || a == "EXG")) return false;
            return true;
        }

        private static async Task<TokenMasterRow> FetchMasterRowAsync(SqlConnection con, string tokenNum, CancellationToken ct)
        {
            const string sql = @"
SET NOCOUNT ON;
DECLARE @src int = 0;
IF OBJECT_ID(N'dbo.LY_dpmTokenNos', N'U') IS NOT NULL SET @src = 1;
ELSE IF OBJECT_ID(N'dbo.dpmTokenNos',  N'U') IS NOT NULL SET @src = 2;
ELSE IF OBJECT_ID(N'dbo.dpaTokenNos',  N'U') IS NOT NULL SET @src = 3;

IF (@src = 1)
BEGIN
  SELECT TOP 1 tokenNum, isActive,
    CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
    ISNULL(updateId,'') AS upd,
    ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
  FROM dbo.LY_dpmTokenNos WITH (NOLOCK) WHERE tokenNum = @token; RETURN;
END
IF (@src = 2)
BEGIN
  SELECT TOP 1 tokenNum, isActive,
    CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
    ISNULL(updateId,'') AS upd,
    ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
  FROM dbo.dpmTokenNos WITH (NOLOCK) WHERE tokenNum = @token; RETURN;
END
IF (@src = 3)
BEGIN
  SELECT TOP 1 tokenNum, isActive,
    CONVERT(char(11), DATEADD(day, ISNULL(validDay,0), ISNULL(printgDt, GETDATE())), 100) AS validDat,
    ISNULL(updateId,'') AS upd,
    ISNULL(LTRIM(RTRIM(CAST(numCvvNo AS nvarchar(16)))),'') AS numCvvNo
  FROM dbo.dpaTokenNos WITH (NOLOCK) WHERE tokenNum = @token; RETURN;
END

SELECT TOP 0 tokenNum = '', isActive = '', validDat = '', upd = '', numCvvNo = '';";
            await using var cmd = new SqlCommand(sql, con) { CommandTimeout = 30 };
            cmd.Parameters.AddWithValue("@token", tokenNum);

            await using var r = await cmd.ExecuteReaderAsync(ct);
            if (await r.ReadAsync(ct))
            {
                return new TokenMasterRow
                {
                    Found = true,
                    IsActive = r.IsDBNull(1) ? "" : r.GetString(1),
                    ValidDat = r.IsDBNull(2) ? "" : r.GetString(2),
                    UpdateId = r.IsDBNull(3) ? "" : r.GetString(3),
                    NumCvvNo = r.IsDBNull(4) ? "" : r.GetString(4)
                };
            }
            return new TokenMasterRow { Found = false };
        }

        // ===== Document number helpers (used only by /doc-number) =====
        private static string Truncate(string s, int maxLen)
            => (maxLen > 0 && s.Length > maxLen) ? s.Substring(0, maxLen) : s;

        private static string MakeSafeDocNo(string areaCode, int maxLen)
        {
            var stamp = DateTime.UtcNow.ToString("yyMMdd-HHmmss");
            var rndHex = Random.Shared.Next(0x1000, 0xFFFF).ToString("X");
            var s = $"TKN-{areaCode}-{stamp}-{rndHex}";
            return Truncate(s, maxLen);
        }

        private static async Task<int> GetVarcharMaxLenAsync(SqlConnection con, string table, string column, CancellationToken ct)
        {
            const string q = @"
        SELECT CHARACTER_MAXIMUM_LENGTH
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA='dbo' AND TABLE_NAME=@t AND COLUMN_NAME=@c;";
            await using var cmd = new SqlCommand(q, con);
            cmd.Parameters.AddWithValue("@t", table);
            cmd.Parameters.AddWithValue("@c", column);
            var o = await cmd.ExecuteScalarAsync(ct);
            return (o == null || o is DBNull) ? -1 : Convert.ToInt32(o);
        }

        private static async Task<string?> TryGetDocNoFromFunctionAsync(
            SqlConnection con, string docuType, string areaCode, CancellationToken ct)
        {
            const string sql = @"
        IF OBJECT_ID(N'dbo.dpfGetDocumentNo', N'FN') IS NOT NULL
            SELECT docuNo = dbo.dpfGetDocumentNo(@typ, @ar);
        ELSE
            SELECT docuNo = NULL;";
            await using var cmd = new SqlCommand(sql, con);
            cmd.Parameters.AddWithValue("@typ", docuType);
            cmd.Parameters.AddWithValue("@ar", areaCode);
            var o = await cmd.ExecuteScalarAsync(ct);
            return (o == null || o is DBNull) ? null : Convert.ToString(o);
        }

        private static async Task<string?> TryGetDocNoFromProcAsync(
            SqlConnection con, string docuType, string areaCode, CancellationToken ct)
        {
            try
            {
                await using var cmd = new SqlCommand("dbo.dppGetDocumentNo", con)
                { CommandType = CommandType.StoredProcedure };
                cmd.Parameters.AddWithValue("@docuType", docuType);
                cmd.Parameters.AddWithValue("@areaCode", areaCode);
                var outP = new SqlParameter("@docuNumb", SqlDbType.NVarChar, 64)
                { Direction = ParameterDirection.Output };
                cmd.Parameters.Add(outP);

                await cmd.ExecuteNonQueryAsync(ct);
                return outP.Value is DBNull ? null : Convert.ToString(outP.Value);
            }
            catch (SqlException ex) when (ex.Number == 2812) // missing proc
            {
                return null;
            }
        }

        private static async Task<(string docNo, string source)> GenerateDocumentNumberCoreAsync(
            SqlConnection con, string areaCode, string docuType, int maxLen, CancellationToken ct)
        {
            var fromFn = await TryGetDocNoFromFunctionAsync(con, docuType, areaCode, ct);
            if (!string.IsNullOrWhiteSpace(fromFn))
                return (Truncate(fromFn!, maxLen), "function");

            var fromSp = await TryGetDocNoFromProcAsync(con, docuType, areaCode, ct);
            if (!string.IsNullOrWhiteSpace(fromSp))
                return (Truncate(fromSp!, maxLen), "procedure");

            return (MakeSafeDocNo(areaCode, maxLen > 0 ? maxLen : 40), "fallback");
        }

        // ======================= DTOs / Models =======================
        private sealed class TokenMasterRow
        {
            public bool Found { get; set; }
            public string IsActive { get; set; } = "";
            public string ValidDat { get; set; } = "";
            public string UpdateId { get; set; } = "";
            public string? NumCvvNo { get; set; }
        }
    }

    // ---------------- Requests / Responses ----------------

    public sealed class TokenInfoRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;

        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;

        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;
    }

    public sealed class TokenInfoResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";

        public string TokenNum { get; set; } = "";
        public string AreaCode { get; set; } = "";
        public string CustCode { get; set; } = "";
        public string LoginId { get; set; } = "";

        // master/SP data
        public string IsActive { get; set; } = "";  // Y/Z/E/...
        public string ValidDat { get; set; } = "";
        public string ScanndBy { get; set; } = "";

        public decimal TokenVal { get; set; }
        public decimal HandRate { get; set; }
        public decimal ScnrDdRt { get; set; }
        public decimal TokEndVl { get; set; }
        public decimal TokDspVl { get; set; }
        public decimal TokAmPay { get; set; }

        public string BcTknTyp { get; set; } = "";
        public string DbActSts { get; set; } = "";
        public string ExprFlag { get; set; } = "";

        public string NumCvvNo { get; set; } = "";
        public bool RequiresCvv { get; set; }

        // multi-scan flags
        public string UpdIdAct { get; set; } = "";
        public string UpdIdMlt { get; set; } = "";
        public string ScnMlStt { get; set; } = "";
        public int ScnMlCnt { get; set; }
        public int ScnMlAlw { get; set; }

        public int ProdCode { get; set; }
        public bool AreaAllowed { get; set; }
    }

    public sealed class CvvValidateRequest
    {
        [Required, StringLength(20)]
        public string TokenNum { get; set; } = default!;

        [StringLength(16)]
        public string? Cvv { get; set; }

        [Range(1, 3)]
        public int Attempt { get; set; } = 1;
    }

    public sealed class CvvValidateResponse
    {
        public string TokenNum { get; set; } = "";
        public bool Found { get; set; }
        public bool RequiresCvv { get; set; }
        public int? CvvLength { get; set; }
        public bool Valid { get; set; }
        public bool Locked { get; set; }
        public int AttemptsLeft { get; set; }
        public string Message { get; set; } = "";
    }

    // Request body for simple submit (we only use LoginId + TokenNums)
    public sealed class SubmitTokensRequest
    {
        [Required, StringLength(10)]
        public string AreaCode { get; set; } = default!;   // unused by simple submit, kept for compatibility

        [Required, StringLength(12)]
        public string CustCode { get; set; } = default!;   // unused by simple submit, kept for compatibility

        [Required, StringLength(16)]
        public string LoginId { get; set; } = default!;

        [StringLength(16)]
        public string? InflCode { get; set; }              // unused

        [Required]
        public List<string> TokenNums { get; set; } = new();

        [StringLength(64)]
        public string? DocuNumb { get; set; }              // unused
    }

    public sealed class SimpleItemResult
    {
        public string TokenNum { get; set; } = "";
        // Updated | AlreadyZ | NotY | NotFound | BadToken
        public string Status { get; set; } = "";
        public string? CurrentIsActive { get; set; }
    }

    public sealed class SimpleSubmitResponse
    {
        public int Updated { get; set; }
        public int AlreadyZ { get; set; }
        public int NotY { get; set; }
        public int NotFound { get; set; }
        public List<SimpleItemResult> Results { get; set; } = new();
    }

    public sealed class DocNumberResponse
    {
        public string DocuNumb { get; set; } = "";
        public string Source { get; set; } = "";  // function | procedure | fallback
        public int MaxLen { get; set; }
        public DateTime Utc { get; set; }
    }
}
