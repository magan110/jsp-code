import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';
import '../../../core/services/auth_service.dart';
import '../../../core/services/storage_service.dart';

class LoginWithPasswordScreen extends StatefulWidget {
  const LoginWithPasswordScreen({super.key});

  @override
  State<LoginWithPasswordScreen> createState() =>
      _LoginWithPasswordScreenState();
}

class _LoginWithPasswordScreenState extends State<LoginWithPasswordScreen>
    with SingleTickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  final _userIdController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _isLoading = false;
  final bool _isDarkMode = false;
  bool _rememberMe = false;

  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _animationController.forward();
    _loadSavedCredentials();
  }

  Future<void> _loadSavedCredentials() async {
    final rememberMe = await StorageService.getRememberMe();
    if (rememberMe) {
      final savedUserId = await StorageService.getUserId();
      if (savedUserId != null) {
        setState(() {
          _userIdController.text = savedUserId;
          _rememberMe = true;
        });
      }
    }
  }

  void _initializeAnimations() {
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1000),
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );

    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _animationController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );

    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
  }

  @override
  void dispose() {
    _userIdController.dispose();
    _passwordController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _handleLogin() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      // Trim input values to remove any whitespace
      final userID = _userIdController.text.trim();
      final password = _passwordController.text.trim();

      // Use new AuthService.authenticateUser method
      final result = await AuthService.authenticateUser(
        userID: userID,
        password: password,
      );

      if (mounted) {
        setState(() {
          _isLoading = false;
        });

        if (result['success'] == true) {
          final loginResponse = result['data'];
          final userData = loginResponse.data;

          // Save credentials if remember me is checked
          if (_rememberMe) {
            await StorageService.saveUserId(userID);
            await StorageService.saveRememberMe(true);
          } else {
            await StorageService.saveRememberMe(false);
          }

          // Set user data in AuthManager
          AuthManager.setUser(userData);

          // Navigate based on user roles and pages
          _navigateBasedOnRole(userData);
        } else {
          final errorMessage =
              result['error'] ?? 'Login failed. Please try again.';
          _showErrorSnackBar(errorMessage);
        }
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        _showErrorSnackBar(
          'Network error. Please check your connection and try again.',
        );
      }
    }
  }

  void _navigateBasedOnRole(userData) {
    // Check user's pages to determine which screen to navigate to
    final userPages = userData.pages as List<String>;
    final userRoles = userData.roles as List<String>;

    // Navigate to the appropriate screen based on user's access
    if (userPages.contains('DASHBOARD') || userRoles.contains('ADMIN')) {
      context.go('/dashboard');
    } else if (userPages.contains('QUALITY_CONTROL') ||
        userRoles.contains('QC_MANAGER')) {
      context.go('/approval-dashboard');
    } else if (userPages.contains('PRODUCTS') ||
        userRoles.contains('PRODUCT_MANAGER')) {
      context.go('/new-product-entry');
    } else if (userPages.contains('REGISTRATION') ||
        userRoles.contains('REGISTRAR')) {
      context.go('/registration-type');
    } else {
      // Default to main dashboard/home if no specific role matches
      context.go('/home');
    }
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = _isDarkMode;

    SystemChrome.setSystemUIOverlayStyle(
      SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: isDark ? Brightness.light : Brightness.dark,
        statusBarBrightness: isDark ? Brightness.dark : Brightness.light,
      ),
    );

    return Scaffold(
      backgroundColor: isDark ? const Color(0xFF0A0A0A) : Colors.white,
      body: LayoutBuilder(
        builder: (context, constraints) {
          final isMobile = constraints.maxWidth < 600;
          final isTablet =
              constraints.maxWidth >= 600 && constraints.maxWidth < 1200;
          final isDesktop = constraints.maxWidth >= 1200;

          return Container(
            width: double.infinity,
            height: double.infinity,
            decoration: BoxDecoration(
              gradient: isDark
                  ? const LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        Color(0xFF0A0A0A),
                        Color(0xFF1A1A2E),
                        Color(0xFF16213E),
                      ],
                    )
                  : const LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        Color(0xFFf8f9ff),
                        Color(0xFFe3f2fd),
                        Color(0xFFffffff),
                      ],
                    ),
            ),
            child: Stack(
              children: [
                if (Navigator.of(context).canPop())
                  const Positioned(
                    top: 50,
                    left: 20,
                    child: CustomBackButton(),
                  ),
                isMobile
                    ? _buildMobileLayout(isDark)
                    : _buildWebLayout(isDark, isTablet, isDesktop),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildAnimatedLogo() {
    return TweenAnimationBuilder<double>(
      tween: Tween<double>(begin: 0, end: 1),
      duration: const Duration(milliseconds: 600),
      curve: Curves.easeOutCubic,
      builder: (context, value, child) {
        return Transform.scale(
          scale: 0.8 + (0.2 * value),
          child: Container(
            height: 120,
            width: 120,
            decoration: BoxDecoration(
              color: Colors.white,
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: Colors.blue.withOpacity(0.2),
                  blurRadius: 15,
                  spreadRadius: 3,
                ),
              ],
            ),
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: ClipOval(
                child: Image.asset(
                  'assets/images/rak_logo.jpg',
                  fit: BoxFit.contain,
                  errorBuilder: (context, error, stackTrace) {
                    // Fallback with RAK text logo if image fails to load
                    return Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [Colors.blue.shade700, Colors.blue.shade500],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        shape: BoxShape.circle,
                      ),
                      child: const Center(
                        child: Text(
                          'RAK',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 2,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildMobileLayout(bool isDark) {
    return Center(
      child: SingleChildScrollView(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: ScaleTransition(
              scale: _scaleAnimation,
              child: Container(
                constraints: const BoxConstraints(maxWidth: 420),
                margin: const EdgeInsets.symmetric(horizontal: 24),
                child: Card(
                  elevation: isDark ? 0 : 24,
                  shadowColor: isDark
                      ? Colors.transparent
                      : Colors.blue.withOpacity(0.15),
                  color: isDark
                      ? const Color(0xFF1E1E1E).withOpacity(0.95)
                      : Colors.white.withOpacity(0.98),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(28),
                    side: isDark
                        ? BorderSide(
                            color: Colors.white.withOpacity(0.1),
                            width: 1,
                          )
                        : BorderSide.none,
                  ),
                  child: AnimatedContainer(
                    duration: const Duration(milliseconds: 300),
                    padding: const EdgeInsets.all(40),
                    child: _buildLoginForm(isDark),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildWebLayout(bool isDark, bool isTablet, bool isDesktop) {
    return Row(
      children: [
        // Left side - Branding/Info
        Expanded(
          flex: isDesktop ? 3 : 2,
          child: Container(
            padding: EdgeInsets.all(isDesktop ? 80 : 60),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildAnimatedLogo(),
                SizedBox(height: isDesktop ? 40 : 32),
                Text(
                  'Welcome Back',
                  style: TextStyle(
                    fontSize: isDesktop ? 48 : 36,
                    fontWeight: FontWeight.bold,
                    color: isDark ? Colors.white : Colors.blue.shade800,
                  ),
                ),
                SizedBox(height: isDesktop ? 20 : 16),
                Text(
                  'Sign in to access your RAK account and manage your registrations.',
                  style: TextStyle(
                    fontSize: isDesktop ? 18 : 16,
                    color: isDark ? Colors.grey.shade300 : Colors.grey.shade600,
                    height: 1.5,
                  ),
                ),
              ],
            ),
          ),
        ),
        // Right side - Login Form
        Expanded(
          flex: isDesktop ? 2 : 3,
          child: Container(
            height: double.infinity,
            decoration: BoxDecoration(
              color: isDark
                  ? const Color(0xFF1E1E1E).withOpacity(0.95)
                  : Colors.white.withOpacity(0.98),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(isDark ? 0.3 : 0.1),
                  blurRadius: 20,
                  offset: const Offset(-5, 0),
                ),
              ],
            ),
            child: Center(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(isDesktop ? 60 : 40),
                child: FadeTransition(
                  opacity: _fadeAnimation,
                  child: SlideTransition(
                    position: _slideAnimation,
                    child: Container(
                      constraints: const BoxConstraints(maxWidth: 400),
                      child: _buildLoginForm(isDark),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildLoginForm(bool isDark) {
    return Form(
      key: _formKey,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildAnimatedTitle(),
          const SizedBox(height: 32),
          ModernTextField(
            controller: _userIdController,
            labelText: 'User ID',
            hintText: 'Enter your user ID',
            keyboardType: TextInputType.text,
            isDark: isDark,
            prefixIcon: Icons.person_outline,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your user ID';
              }
              return null;
            },
            delay: const Duration(milliseconds: 300),
          ),
          const SizedBox(height: 24),
          ModernPasswordField(
            controller: _passwordController,
            labelText: 'Password',
            hintText: 'Enter your password',
            isDark: isDark,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter your password';
              }
              if (value.length < 6) {
                return 'Password must be at least 6 characters';
              }
              return null;
            },
            delay: const Duration(milliseconds: 450),
          ),
          const SizedBox(height: 16),
          _buildRememberMeSection(),
          const SizedBox(height: 32),
          ModernButton(
            text: 'Sign In',
            isLoading: _isLoading,
            onPressed: _handleLogin,
            isPrimary: true,
            isDark: isDark,
            delay: const Duration(milliseconds: 600),
          ),
          const SizedBox(height: 16),
          ModernButton(
            text: 'Sign Up',
            isLoading: false,
            onPressed: () {
              context.push('/registration-type');
            },
            isPrimary: false,
            isDark: isDark,
            delay: const Duration(milliseconds: 750),
          ),
        ],
      ),
    );
  }

  Widget _buildAnimatedTitle() {
    return TweenAnimationBuilder<double>(
      tween: Tween<double>(begin: 0, end: 1),
      duration: const Duration(milliseconds: 600),
      curve: Curves.easeOut,
      builder: (context, value, child) {
        return Opacity(
          opacity: value,
          child: Transform.translate(
            offset: Offset(0, 20 * (1 - value)),
            child: child,
          ),
        );
      },
      child: Text(
        'Login',
        style: AppTheme.headline.copyWith(color: Colors.blue),
      ),
    );
  }

  Widget _buildRememberMeSection() {
    return TweenAnimationBuilder<double>(
      tween: Tween<double>(begin: 0, end: 1),
      duration: const Duration(milliseconds: 600),
      builder: (context, value, child) {
        return Opacity(
          opacity: value,
          child: Row(
            children: [
              SizedBox(
                width: 24,
                height: 24,
                child: Checkbox(
                  value: _rememberMe,
                  onChanged: (value) {
                    setState(() {
                      _rememberMe = value ?? false;
                    });
                  },
                  activeColor: Colors.blue,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(4),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Text(
                'Remember me',
                style: TextStyle(
                  fontSize: 14,
                  color: _isDarkMode
                      ? Colors.grey.shade300
                      : Colors.grey.shade600,
                ),
              ),
              const Spacer(),
              TextButton(
                onPressed: () {
                  // Implement forgot password
                  _showErrorSnackBar('Forgot password will be implemented');
                },
                child: Text(
                  'Forgot Password?',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.blue.shade600,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}

class AnimatedPasswordField extends StatefulWidget {
  final TextEditingController controller;
  final String labelText;
  final String? hintText;
  final String? Function(String?)? validator;
  final Duration delay;

  const AnimatedPasswordField({
    super.key,
    required this.controller,
    required this.labelText,
    this.hintText,
    this.validator,
    required this.delay,
  });

  @override
  State<AnimatedPasswordField> createState() => _AnimatedPasswordFieldState();
}

class _AnimatedPasswordFieldState extends State<AnimatedPasswordField> {
  bool _isVisible = false;
  bool _obscureText = true;

  @override
  void initState() {
    super.initState();
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          _isVisible = true;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _isVisible ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 500),
      curve: Curves.easeOut,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        transform: Matrix4.translationValues(_isVisible ? 0 : 20, 0, 0),
        child: TextFormField(
          controller: widget.controller,
          obscureText: _obscureText,
          decoration: InputDecoration(
            labelText: widget.labelText,
            hintText: widget.hintText,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide.none,
            ),
            filled: true,
            fillColor: Colors.grey.shade100,
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.blue, width: 2),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 16,
              vertical: 16,
            ),
            suffixIcon: IconButton(
              icon: Icon(
                _obscureText ? Icons.visibility : Icons.visibility_off,
                color: Colors.grey,
              ),
              onPressed: () {
                setState(() {
                  _obscureText = !_obscureText;
                });
              },
            ),
          ),
          validator: widget.validator,
        ),
      ),
    );
  }
}

// Custom animated text field
class AnimatedTextField extends StatefulWidget {
  final TextEditingController controller;
  final String labelText;
  final String? hintText;
  final String? prefixText;
  final TextInputType keyboardType;
  final String? Function(String?)? validator;
  final Duration delay;

  const AnimatedTextField({
    super.key,
    required this.controller,
    required this.labelText,
    this.hintText,
    this.prefixText,
    required this.keyboardType,
    this.validator,
    required this.delay,
  });

  @override
  State<AnimatedTextField> createState() => _AnimatedTextFieldState();
}

class _AnimatedTextFieldState extends State<AnimatedTextField> {
  bool _isVisible = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          _isVisible = true;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _isVisible ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 500),
      curve: Curves.easeOut,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        transform: Matrix4.translationValues(_isVisible ? 0 : 20, 0, 0),
        child: TextFormField(
          controller: widget.controller,
          decoration: InputDecoration(
            labelText: widget.labelText,
            hintText: widget.hintText,
            prefixText: widget.prefixText,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide.none,
            ),
            filled: true,
            fillColor: Colors.grey.shade100,
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12),
              borderSide: const BorderSide(color: Colors.blue, width: 2),
            ),
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 16,
              vertical: 16,
            ),
          ),
          keyboardType: widget.keyboardType,
          validator: widget.validator,
        ),
      ),
    );
  }
}

// Custom animated button
class AnimatedButton extends StatefulWidget {
  final String text;
  final bool isLoading;
  final VoidCallback onPressed;
  final Duration delay;
  final Color? textColor;

  const AnimatedButton({
    super.key,
    required this.text,
    required this.isLoading,
    required this.onPressed,
    required this.delay,
    this.textColor,
  });

  @override
  State<AnimatedButton> createState() => _AnimatedButtonState();
}

class _AnimatedButtonState extends State<AnimatedButton> {
  bool _isVisible = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          _isVisible = true;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _isVisible ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 500),
      curve: Curves.easeOut,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        transform: Matrix4.translationValues(_isVisible ? 0 : 20, 0, 0),
        child: SizedBox(
          width: double.infinity,
          height: 56,
          child: ElevatedButton(
            onPressed: widget.isLoading ? null : widget.onPressed,
            style: ElevatedButton.styleFrom(
              elevation: 8,
              shadowColor: Colors.blue.withOpacity(0.3),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(16),
              ),
              backgroundColor: Colors.blue,
              foregroundColor: widget.textColor ?? Colors.white,
            ),
            child: widget.isLoading
                ? const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(width: 16),
                      Text('Please wait...'),
                    ],
                  )
                : Text(
                    widget.text,
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: widget.textColor ?? Colors.white,
                    ),
                  ),
          ),
        ),
      ),
    );
  }
}

// Modern TextField Component
class ModernTextField extends StatefulWidget {
  final TextEditingController controller;
  final String labelText;
  final String? hintText;
  final TextInputType keyboardType;
  final String? Function(String?)? validator;
  final Duration delay;
  final bool isDark;
  final IconData? prefixIcon;

  const ModernTextField({
    super.key,
    required this.controller,
    required this.labelText,
    this.hintText,
    required this.keyboardType,
    this.validator,
    required this.delay,
    required this.isDark,
    this.prefixIcon,
  });

  @override
  State<ModernTextField> createState() => _ModernTextFieldState();
}

class _ModernTextFieldState extends State<ModernTextField> {
  bool _isVisible = false;
  bool _isFocused = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          _isVisible = true;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _isVisible ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 500),
      curve: Curves.easeOut,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        transform: Matrix4.translationValues(_isVisible ? 0 : 20, 0, 0),
        child: Focus(
          onFocusChange: (focused) {
            setState(() {
              _isFocused = focused;
            });
          },
          child: TextFormField(
            controller: widget.controller,
            keyboardType: widget.keyboardType,
            style: TextStyle(
              fontSize: 16,
              color: widget.isDark ? Colors.white : Colors.black87,
            ),
            decoration: InputDecoration(
              labelText: widget.labelText,
              hintText: widget.hintText,
              prefixIcon: widget.prefixIcon != null
                  ? Icon(
                      widget.prefixIcon,
                      color: _isFocused
                          ? Colors.blue
                          : (widget.isDark
                                ? Colors.grey.shade400
                                : Colors.grey.shade600),
                    )
                  : null,
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(
                  color: widget.isDark
                      ? Colors.grey.shade600
                      : Colors.grey.shade300,
                ),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(
                  color: widget.isDark
                      ? Colors.grey.shade600
                      : Colors.grey.shade300,
                ),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: const BorderSide(color: Colors.blue, width: 2),
              ),
              errorBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: const BorderSide(color: Colors.red, width: 1),
              ),
              focusedErrorBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: const BorderSide(color: Colors.red, width: 2),
              ),
              filled: true,
              fillColor: widget.isDark
                  ? Colors.grey.shade800.withOpacity(0.3)
                  : Colors.grey.shade50,
              labelStyle: TextStyle(
                color: _isFocused
                    ? Colors.blue
                    : (widget.isDark
                          ? Colors.grey.shade400
                          : Colors.grey.shade600),
              ),
              hintStyle: TextStyle(
                color: widget.isDark
                    ? Colors.grey.shade500
                    : Colors.grey.shade400,
              ),
              contentPadding: const EdgeInsets.symmetric(
                horizontal: 20,
                vertical: 20,
              ),
            ),
            validator: widget.validator,
          ),
        ),
      ),
    );
  }
}

// Modern Password Field Component
class ModernPasswordField extends StatefulWidget {
  final TextEditingController controller;
  final String labelText;
  final String? hintText;
  final String? Function(String?)? validator;
  final Duration delay;
  final bool isDark;

  const ModernPasswordField({
    super.key,
    required this.controller,
    required this.labelText,
    this.hintText,
    this.validator,
    required this.delay,
    required this.isDark,
  });

  @override
  State<ModernPasswordField> createState() => _ModernPasswordFieldState();
}

class _ModernPasswordFieldState extends State<ModernPasswordField> {
  bool _isVisible = false;
  bool _obscureText = true;
  bool _isFocused = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          _isVisible = true;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _isVisible ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 500),
      curve: Curves.easeOut,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        transform: Matrix4.translationValues(_isVisible ? 0 : 20, 0, 0),
        child: Focus(
          onFocusChange: (focused) {
            setState(() {
              _isFocused = focused;
            });
          },
          child: TextFormField(
            controller: widget.controller,
            obscureText: _obscureText,
            style: TextStyle(
              fontSize: 16,
              color: widget.isDark ? Colors.white : Colors.black87,
            ),
            decoration: InputDecoration(
              labelText: widget.labelText,
              hintText: widget.hintText,
              prefixIcon: Icon(
                Icons.lock_outline,
                color: _isFocused
                    ? Colors.blue
                    : (widget.isDark
                          ? Colors.grey.shade400
                          : Colors.grey.shade600),
              ),
              suffixIcon: IconButton(
                icon: AnimatedSwitcher(
                  duration: const Duration(milliseconds: 200),
                  child: Icon(
                    _obscureText
                        ? Icons.visibility_outlined
                        : Icons.visibility_off_outlined,
                    key: ValueKey(_obscureText),
                    color: widget.isDark
                        ? Colors.grey.shade400
                        : Colors.grey.shade600,
                  ),
                ),
                onPressed: () {
                  setState(() {
                    _obscureText = !_obscureText;
                  });
                },
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(
                  color: widget.isDark
                      ? Colors.grey.shade600
                      : Colors.grey.shade300,
                ),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: BorderSide(
                  color: widget.isDark
                      ? Colors.grey.shade600
                      : Colors.grey.shade300,
                ),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: const BorderSide(color: Colors.blue, width: 2),
              ),
              errorBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: const BorderSide(color: Colors.red, width: 1),
              ),
              focusedErrorBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(16),
                borderSide: const BorderSide(color: Colors.red, width: 2),
              ),
              filled: true,
              fillColor: widget.isDark
                  ? Colors.grey.shade800.withOpacity(0.3)
                  : Colors.grey.shade50,
              labelStyle: TextStyle(
                color: _isFocused
                    ? Colors.blue
                    : (widget.isDark
                          ? Colors.grey.shade400
                          : Colors.grey.shade600),
              ),
              hintStyle: TextStyle(
                color: widget.isDark
                    ? Colors.grey.shade500
                    : Colors.grey.shade400,
              ),
              contentPadding: const EdgeInsets.symmetric(
                horizontal: 20,
                vertical: 20,
              ),
            ),
            validator: widget.validator,
          ),
        ),
      ),
    );
  }
}

// Modern Button Component
class ModernButton extends StatefulWidget {
  final String text;
  final bool isLoading;
  final VoidCallback onPressed;
  final Duration delay;
  final bool isPrimary;
  final bool isDark;

  const ModernButton({
    super.key,
    required this.text,
    required this.isLoading,
    required this.onPressed,
    required this.delay,
    required this.isPrimary,
    required this.isDark,
  });

  @override
  State<ModernButton> createState() => _ModernButtonState();
}

class _ModernButtonState extends State<ModernButton> {
  bool _isVisible = false;
  bool _isHovered = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          _isVisible = true;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _isVisible ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 500),
      curve: Curves.easeOut,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        transform: Matrix4.translationValues(_isVisible ? 0 : 20, 0, 0),
        child: SizedBox(
          width: double.infinity,
          height: 56,
          child: widget.isPrimary
              ? ElevatedButton(
                  onPressed: widget.isLoading ? null : widget.onPressed,
                  style:
                      ElevatedButton.styleFrom(
                        elevation: _isHovered ? 12 : 6,
                        shadowColor: Colors.blue.withOpacity(0.3),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16),
                        ),
                        backgroundColor: Colors.blue,
                        foregroundColor: Colors.white,
                      ).copyWith(
                        backgroundColor: WidgetStateProperty.resolveWith((
                          states,
                        ) {
                          if (states.contains(WidgetState.disabled)) {
                            return Colors.grey.shade400;
                          }
                          return Colors.blue;
                        }),
                      ),
                  onHover: (hovering) {
                    setState(() {
                      _isHovered = hovering;
                    });
                  },
                  child: widget.isLoading
                      ? const Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                color: Colors.white,
                              ),
                            ),
                            SizedBox(width: 16),
                            Text('Signing in...'),
                          ],
                        )
                      : Text(
                          widget.text,
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            letterSpacing: 0.5,
                          ),
                        ),
                )
              : OutlinedButton(
                  onPressed: widget.onPressed,
                  style: OutlinedButton.styleFrom(
                    side: BorderSide(
                      color: widget.isDark
                          ? Colors.grey.shade600
                          : Colors.grey.shade300,
                      width: 1.5,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    backgroundColor: _isHovered
                        ? (widget.isDark
                              ? Colors.grey.shade800.withOpacity(0.5)
                              : Colors.grey.shade50)
                        : null,
                  ),
                  onHover: (hovering) {
                    setState(() {
                      _isHovered = hovering;
                    });
                  },
                  child: Text(
                    widget.text,
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w500,
                      color: widget.isDark
                          ? Colors.grey.shade300
                          : Colors.grey.shade700,
                      letterSpacing: 0.5,
                    ),
                  ),
                ),
        ),
      ),
    );
  }
}

// Custom animated outline button
class AnimatedOutlineButton extends StatefulWidget {
  final String text;
  final VoidCallback onPressed;
  final Duration delay;

  const AnimatedOutlineButton({
    super.key,
    required this.text,
    required this.onPressed,
    required this.delay,
  });

  @override
  State<AnimatedOutlineButton> createState() => _AnimatedOutlineButtonState();
}

class _AnimatedOutlineButtonState extends State<AnimatedOutlineButton> {
  bool _isVisible = false;
  bool _isHovered = false;

  @override
  void initState() {
    super.initState();
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          _isVisible = true;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _isVisible ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 500),
      curve: Curves.easeOut,
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        transform: Matrix4.translationValues(_isVisible ? 0 : 20, 0, 0),
        child: MouseRegion(
          onEnter: (_) => setState(() => _isHovered = true),
          onExit: (_) => setState(() => _isHovered = false),
          child: OutlinedButton(
            onPressed: widget.onPressed,
            style: OutlinedButton.styleFrom(
              side: BorderSide(
                color: _isHovered ? Colors.blue : Colors.grey.shade400,
                width: 1.5,
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              backgroundColor: _isHovered
                  ? Colors.blue.withOpacity(0.05)
                  : null,
            ),
            child: Text(
              widget.text,
              style: TextStyle(
                fontSize: 14,
                color: _isHovered ? Colors.blue : Colors.grey.shade700,
              ),
            ),
          ),
        ),
      ),
    );
  }
}


























import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import 'package:go_router/go_router.dart';
import '../../../core/services/contractor_service.dart';
import '../../../core/models/contractor_models.dart';
import '../../../core/theme/theme.dart';
import '../../../core/widgets/custom_back_button.dart';
import '../../../core/widgets/modern_dropdown.dart';
import '../../../core/widgets/file_upload_widget.dart';
import '../../../core/services/trade_license_ocr_service.dart';
import '../../../core/services/vat_registration_ocr_service.dart';
import '../../../core/services/bank_details_ocr_service.dart';
import '../../../core/services/auth_service.dart';
import '../../../core/models/auth_models.dart';
import '../../../core/navigation/app_router.dart';

class ContractorRegistrationScreen extends StatefulWidget {
  const ContractorRegistrationScreen({super.key});

  @override
  State<ContractorRegistrationScreen> createState() =>
      _ContractorRegistrationScreenState();
}

class _ContractorRegistrationScreenState
    extends State<ContractorRegistrationScreen>
    with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  // Personal
  final _contractorTypeController = TextEditingController();
  final _firstNameController = TextEditingController();
  final _middleNameController = TextEditingController();
  final _lastNameController = TextEditingController();
  final _mobileController = TextEditingController();
  final _addressController = TextEditingController();
  final _emiratesController = TextEditingController();
  // Contractor Certificate
  String? _contractorCertificatePath;
  // Bank
  final _accountHolderController = TextEditingController();
  final _ibanController = TextEditingController();
  final _bankNameController = TextEditingController();
  final _branchNameController = TextEditingController();
  final _bankAddressController = TextEditingController();
  String? _bankDocumentPath;
  // VAT
  final _firmNameController = TextEditingController();
  final _vatAddressController = TextEditingController();
  final _trnController = TextEditingController();
  final _vatDateController = TextEditingController();
  // License
  final _licenseNumberController = TextEditingController();
  final _issuingAuthorityController = TextEditingController();
  final _licenseTypeController = TextEditingController();
  final _establishmentDateController = TextEditingController();
  final _licenseExpiryDateController = TextEditingController();
  final _tradeNameController = TextEditingController();
  final _responsiblePersonController = TextEditingController();
  final _licenseAddressController = TextEditingController();
  final _effectiveDateController = TextEditingController();
  bool _isSubmitting = false;
  final bool _showVatTooltip = false;

  // Section-specific OCR processing state
  // Commercial License OCR
  bool _isProcessingLicenseOCR = false;
  String? _licenseOcrError;
  String _licenseOcrCurrentStep = '';
  double _licenseOcrProgress = 0.0;
  int _licenseEstimatedTimeLeft = 0;
  Timer? _licenseProgressTimer;
  DateTime? _licenseOcrStartTime;

  // VAT Certificate OCR
  bool _isProcessingVatOCR = false;
  String? _vatOcrError;
  String _vatOcrCurrentStep = '';
  double _vatOcrProgress = 0.0;
  int _vatEstimatedTimeLeft = 0;
  Timer? _vatProgressTimer;
  DateTime? _vatOcrStartTime;

  // Bank Document OCR
  bool _isProcessingBankOCR = false;
  String? _bankOcrError;
  String _bankOcrCurrentStep = '';
  double _bankOcrProgress = 0.0;
  int _bankEstimatedTimeLeft = 0;
  Timer? _bankProgressTimer;
  DateTime? _bankOcrStartTime;

  // VAT and License document paths
  String? _vatCertificatePath;
  String? _licenseDocumentPath;
  String? _photographPath;

  // API dropdown data
  List<String> _contractorTypes = [];
  List<EmirateItem> _emirates = [];
  EmirateItem? _selectedEmirate;
  bool _isLoadingDropdowns = true;
  late AnimationController _mainController;
  late AnimationController _fabController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _fabController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.0, 0.5, curve: Curves.easeOut),
      ),
    );
    _slideAnimation =
        Tween<Offset>(begin: const Offset(0, 0.3), end: Offset.zero).animate(
          CurvedAnimation(
            parent: _mainController,
            curve: const Interval(0.2, 0.7, curve: Curves.easeOutCubic),
          ),
        );
    _scaleAnimation = Tween<double>(begin: 0.95, end: 1.0).animate(
      CurvedAnimation(
        parent: _mainController,
        curve: const Interval(0.3, 0.8, curve: Curves.easeOutCubic),
      ),
    );
    _mainController.forward();
    _fabController.forward();
    _loadDropdownData();
  }

  Future<void> _loadDropdownData() async {
    try {
      final contractorTypes = await ContractorService.getContractorTypes();
      final emirates = await ContractorService.getEmiratesList();
      setState(() {
        _contractorTypes = contractorTypes;
        _emirates = emirates;
        _isLoadingDropdowns = false;
      });
    } catch (_) {
      setState(() {
        _contractorTypes = const [
          'Maintenance Contractor',
          'Petty contractors',
        ];
        _emirates = [
          EmirateItem(code: 'DUB', desc: 'Dubai'),
          EmirateItem(code: 'ABD', desc: 'Abu Dhabi'),
          EmirateItem(code: 'SHJ', desc: 'Sharjah'),
          EmirateItem(code: 'AJM', desc: 'Ajman'),
          EmirateItem(code: 'UAQ', desc: 'Umm Al Quwain'),
          EmirateItem(code: 'RAK', desc: 'Ras Al Khaimah'),
          EmirateItem(code: 'FUJ', desc: 'Fujairah'),
        ];
        _isLoadingDropdowns = false;
      });
    }
  }

  @override
  void dispose() {
    _mainController.dispose();
    _fabController.dispose();
    _licenseProgressTimer?.cancel();
    _vatProgressTimer?.cancel();
    _bankProgressTimer?.cancel();
    _contractorTypeController.dispose();
    _firstNameController.dispose();
    _middleNameController.dispose();
    _lastNameController.dispose();
    _mobileController.dispose();
    _addressController.dispose();
    _emiratesController.dispose();
    _accountHolderController.dispose();
    _ibanController.dispose();
    _bankNameController.dispose();
    _branchNameController.dispose();
    _bankAddressController.dispose();
    _firmNameController.dispose();
    _vatAddressController.dispose();
    _trnController.dispose();
    _vatDateController.dispose();
    _licenseNumberController.dispose();
    _issuingAuthorityController.dispose();
    _licenseTypeController.dispose();
    _establishmentDateController.dispose();
    _licenseExpiryDateController.dispose();
    _tradeNameController.dispose();
    _responsiblePersonController.dispose();
    _licenseAddressController.dispose();
    _effectiveDateController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final isDesktop = constraints.maxWidth > 1200;
        final isTablet =
            constraints.maxWidth > 800 && constraints.maxWidth <= 1200;
        final isMobile = constraints.maxWidth <= 800;

        return Scaffold(
          backgroundColor: Colors.white,
          appBar: _buildModernAppBar(),
          body: FadeTransition(
            opacity: _fadeAnimation,
            child: SlideTransition(
              position: _slideAnimation,
              child: Container(
                decoration: const BoxDecoration(color: Color(0xFFF8FAFC)),
                child: SingleChildScrollView(
                  padding: EdgeInsets.symmetric(
                    horizontal: isDesktop ? 48 : (isTablet ? 32 : 24),
                    vertical: 24,
                  ),
                  child: Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: isDesktop ? 1400 : double.infinity,
                      ),
                      child: ScaleTransition(
                        scale: _scaleAnimation,
                        child: Form(
                          key: _formKey,
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildAnimatedHeader(),
                              const SizedBox(height: 32),
                              // Main Content - Two columns on desktop
                              if (isDesktop)
                                _buildDesktopLayout()
                              else
                                _buildMobileLayout(),
                              const SizedBox(height: 48),
                              _buildAnimatedSubmitButton(),
                              const SizedBox(height: 48),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildDesktopLayout() {
    return Column(
      children: [
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left Column
            Expanded(
              child: Column(
                children: [
                  // Personal Details
                  _buildModernSection(
                    title: 'Personal Details',
                    icon: Icons.person_rounded,
                    children: [
                      ModernDropdown(
                        label: 'Contractor Type',
                        icon: Icons.business_center_outlined,
                        items: _contractorTypes,
                        value: _contractorTypeController.text.isNotEmpty
                            ? _contractorTypeController.text
                            : null,
                        onChanged: (String? value) {
                          if (!_isLoadingDropdowns) {
                            setState(() {
                              _contractorTypeController.text = value ?? '';
                            });
                          }
                        },
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _firstNameController,
                        label: 'First Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _middleNameController,
                        label: 'Middle Name',
                        icon: Icons.person_outline_rounded,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _lastNameController,
                        label: 'Last Name',
                        icon: Icons.person_outline_rounded,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _mobileController,
                        label: 'Mobile Number',
                        icon: Icons.phone_outlined,
                        isPhone: true,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _addressController,
                        label: 'Address',
                        icon: Icons.home_outlined,
                      ),
                      const SizedBox(height: 20),
                      ModernDropdown(
                        label: 'Emirates',
                        icon: Icons.public_outlined,
                        items: _emirates.map((e) => e.desc).toList(),
                        value: _selectedEmirate?.desc,
                        onChanged: (String? value) {
                          if (!_isLoadingDropdowns && value != null) {
                            setState(() {
                              _selectedEmirate = _emirates.firstWhere(
                                (e) => e.desc == value,
                                orElse: () => _emirates.first,
                              );
                              _emiratesController.text = _selectedEmirate!.desc;
                            });
                          }
                        },
                      ),
                      const SizedBox(height: 20),
                      FileUploadWidget(
                        label: 'Contractor Certificate',
                        icon: Icons.file_copy_outlined,
                        isRequired: true,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _contractorCertificatePath,
                        onFileSelected: (String? filePath) {
                          setState(() {
                            _contractorCertificatePath = filePath;
                          });
                        },
                      ),
                      const SizedBox(height: 20),
                      FileUploadWidget(
                        label: 'Upload Photograph',
                        icon: Icons.photo_camera_outlined,
                        isRequired: false,
                        allowedExtensions: ['jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _photographPath,
                        onFileSelected: (String? filePath) {
                          setState(() {
                            _photographPath = filePath;
                          });
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),

                  // Bank Details
                  _buildModernSection(
                    title: 'Bank Details',
                    icon: Icons.account_balance_outlined,
                    children: [
                      FileUploadWidget(
                        label: 'Bank Document Upload',
                        icon: Icons.upload_file_outlined,
                        isRequired: false,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _bankDocumentPath,
                        onFileSelected: (String? filePath) async {
                          setState(() {
                            _bankDocumentPath = filePath;
                            _isProcessingBankOCR = true;
                            _bankOcrError = null;
                          });

                          if (filePath != null) {
                            await _processBankDocumentOCR(filePath);
                          }
                        },
                      ),
                      if (_isProcessingBankOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFF0F9FF),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFF3B82F6).withOpacity(0.2),
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Color(0xFF3B82F6),
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: Text(
                                        _bankOcrCurrentStep,
                                        style: const TextStyle(
                                          fontWeight: FontWeight.w600,
                                          color: Color(0xFF1E40AF),
                                        ),
                                      ),
                                    ),
                                    if (_bankEstimatedTimeLeft > 0)
                                      Text(
                                        '${_bankEstimatedTimeLeft}s',
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.grey.shade600,
                                        ),
                                      ),
                                  ],
                                ),
                                const SizedBox(height: 12),
                                LinearProgressIndicator(
                                  value: _bankOcrProgress,
                                  backgroundColor: Colors.grey.shade200,
                                  valueColor:
                                      const AlwaysStoppedAnimation<Color>(
                                        Color(0xFF3B82F6),
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      if (_bankOcrError != null && !_isProcessingBankOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFFEF2F2),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFFEF4444).withOpacity(0.2),
                              ),
                            ),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error_outline_rounded,
                                  color: Color(0xFFDC2626),
                                  size: 20,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    _bankOcrError!,
                                    style: const TextStyle(
                                      color: Color(0xFFB91C1C),
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _accountHolderController,
                        label: 'Account Holder Name',
                        icon: Icons.person_outline_rounded,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _ibanController,
                        label: 'IBAN Number',
                        icon: Icons.account_balance_wallet_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _bankNameController,
                        label: 'Bank Name',
                        icon: Icons.business_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _branchNameController,
                        label: 'Branch Name',
                        icon: Icons.map_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _bankAddressController,
                        label: 'Bank Address',
                        icon: Icons.location_city_outlined,
                        isRequired: false,
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(width: 24),
            // Right Column
            Expanded(
              child: Column(
                children: [
                  // VAT Certificate
                  _buildModernSection(
                    title: 'VAT Certificate (Non-Mandatory)',
                    icon: Icons.receipt_long_outlined,
                    subtitle:
                        'Not mandatory for firms with turnover below 375,000 AED per annum',
                    children: [
                      FileUploadWidget(
                        label: 'VAT Certificate Upload',
                        icon: Icons.upload_file_outlined,
                        isRequired: false,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _vatCertificatePath,
                        onFileSelected: (String? filePath) async {
                          setState(() {
                            _vatCertificatePath = filePath;
                            _isProcessingVatOCR = true;
                            _vatOcrError = null;
                          });

                          if (filePath != null) {
                            await _processVATCertificateOCR(filePath);
                          }
                        },
                      ),
                      if (_isProcessingVatOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFF0F9FF),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFF3B82F6).withOpacity(0.2),
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Color(0xFF3B82F6),
                                      ),
                                    ),
                                    const SizedBox(width: 12),
                                    Expanded(
                                      child: Text(
                                        _vatOcrCurrentStep,
                                        style: const TextStyle(
                                          fontWeight: FontWeight.w600,
                                          color: Color(0xFF1E40AF),
                                        ),
                                      ),
                                    ),
                                    if (_vatEstimatedTimeLeft > 0)
                                      Text(
                                        '${_vatEstimatedTimeLeft}s',
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.grey.shade600,
                                        ),
                                      ),
                                  ],
                                ),
                                const SizedBox(height: 12),
                                LinearProgressIndicator(
                                  value: _vatOcrProgress,
                                  backgroundColor: Colors.grey.shade200,
                                  valueColor:
                                      const AlwaysStoppedAnimation<Color>(
                                        Color(0xFF3B82F6),
                                      ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      if (_vatOcrError != null && !_isProcessingVatOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFFEF2F2),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFFEF4444).withOpacity(0.2),
                              ),
                            ),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error_outline_rounded,
                                  color: Color(0xFFDC2626),
                                  size: 20,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    _vatOcrError!,
                                    style: const TextStyle(
                                      color: Color(0xFFB91C1C),
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _firmNameController,
                        label: 'Firm Name',
                        icon: Icons.business_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _vatAddressController,
                        label: 'Registered Address',
                        icon: Icons.home_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _trnController,
                        label: 'Tax Registration Number',
                        icon: Icons.pin_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _vatDateController,
                        label: 'Effective Date',
                        icon: Icons.event_outlined,
                        isRequired: false,
                      ),
                    ],
                  ),
                  const SizedBox(height: 24),
                  // Commercial License
                  _buildModernSection(
                    title: 'Commercial License (Non-Mandatory)',
                    icon: Icons.workspace_premium_outlined,
                    subtitle:
                        'Note: Each emirate has separate licensing authority. Different emirates require different licenses.',
                    children: [
                      FileUploadWidget(
                        label: 'Commercial License Upload',
                        icon: Icons.upload_file_outlined,
                        isRequired: false,
                        allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
                        formType: 'contractor',
                        currentFilePath: _licenseDocumentPath,
                        onFileSelected: (String? filePath) async {
                          setState(() {
                            _licenseDocumentPath = filePath;
                            _isProcessingLicenseOCR = true;
                            _licenseOcrError = null;
                          });

                          if (filePath != null) {
                            await _processCommercialLicenseOCR(filePath);
                          }
                        },
                      ),
                      if (_isProcessingLicenseOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Container(
                                padding: const EdgeInsets.all(16),
                                decoration: BoxDecoration(
                                  color: const Color(0xFFF0F9FF),
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(
                                    color: const Color(
                                      0xFF3B82F6,
                                    ).withOpacity(0.2),
                                  ),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Row(
                                      children: [
                                        const SizedBox(
                                          width: 20,
                                          height: 20,
                                          child: CircularProgressIndicator(
                                            strokeWidth: 2,
                                            color: Color(0xFF3B82F6),
                                          ),
                                        ),
                                        const SizedBox(width: 12),
                                        Expanded(
                                          child: Text(
                                            _licenseOcrCurrentStep,
                                            style: const TextStyle(
                                              fontWeight: FontWeight.w600,
                                              color: Color(0xFF1E40AF),
                                            ),
                                          ),
                                        ),
                                        if (_licenseEstimatedTimeLeft > 0)
                                          Text(
                                            '${_licenseEstimatedTimeLeft}s',
                                            style: TextStyle(
                                              fontSize: 12,
                                              color: Colors.grey.shade600,
                                            ),
                                          ),
                                      ],
                                    ),
                                    const SizedBox(height: 12),
                                    LinearProgressIndicator(
                                      value: _licenseOcrProgress,
                                      backgroundColor: Colors.grey.shade200,
                                      valueColor:
                                          const AlwaysStoppedAnimation<Color>(
                                            Color(0xFF3B82F6),
                                          ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),
                      if (_licenseOcrError != null && !_isProcessingLicenseOCR)
                        Padding(
                          padding: const EdgeInsets.only(top: 16.0),
                          child: Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: const Color(0xFFFEF2F2),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: const Color(0xFFEF4444).withOpacity(0.2),
                              ),
                            ),
                            child: Row(
                              children: [
                                const Icon(
                                  Icons.error_outline_rounded,
                                  color: Color(0xFFDC2626),
                                  size: 20,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    _licenseOcrError!,
                                    style: const TextStyle(
                                      color: Color(0xFFB91C1C),
                                      fontSize: 14,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _licenseNumberController,
                        label: 'License Number',
                        icon: Icons.pin_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _issuingAuthorityController,
                        label: 'Issuing Authority',
                        icon: Icons.account_balance_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _licenseTypeController,
                        label: 'License Type',
                        icon: Icons.category_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _establishmentDateController,
                        label: 'Establishment Date',
                        icon: Icons.event_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _licenseExpiryDateController,
                        label: 'Expiry Date',
                        icon: Icons.event_available_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _tradeNameController,
                        label: 'Trade Name',
                        icon: Icons.store_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _responsiblePersonController,
                        label: 'Responsible Person',
                        icon: Icons.person_outline_rounded,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernTextField(
                        controller: _licenseAddressController,
                        label: 'Registered Address',
                        icon: Icons.home_outlined,
                        isRequired: false,
                      ),
                      const SizedBox(height: 20),
                      _buildModernDateField(
                        controller: _effectiveDateController,
                        label: 'Effective Registration Date',
                        icon: Icons.event_outlined,
                        isRequired: false,
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Personal Details
        _buildModernSection(
          title: 'Personal Details',
          icon: Icons.person_rounded,
          children: [
            ModernDropdown(
              label: 'Contractor Type',
              icon: Icons.business_center_outlined,
              items: _contractorTypes,
              value: _contractorTypeController.text.isNotEmpty
                  ? _contractorTypeController.text
                  : null,
              onChanged: (String? value) {
                if (!_isLoadingDropdowns) {
                  setState(() {
                    _contractorTypeController.text = value ?? '';
                  });
                }
              },
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _firstNameController,
              label: 'First Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _middleNameController,
              label: 'Middle Name',
              icon: Icons.person_outline_rounded,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _lastNameController,
              label: 'Last Name',
              icon: Icons.person_outline_rounded,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _mobileController,
              label: 'Mobile Number',
              icon: Icons.phone_outlined,
              isPhone: true,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _addressController,
              label: 'Address',
              icon: Icons.home_outlined,
            ),
            const SizedBox(height: 20),
            ModernDropdown(
              label: 'Emirates',
              icon: Icons.public_outlined,
              items: _emirates.map((e) => e.desc).toList(),
              value: _selectedEmirate?.desc,
              onChanged: (String? value) {
                if (!_isLoadingDropdowns && value != null) {
                  setState(() {
                    _selectedEmirate = _emirates.firstWhere(
                      (e) => e.desc == value,
                      orElse: () => _emirates.first,
                    );
                    _emiratesController.text = _selectedEmirate!.desc;
                  });
                }
              },
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Contractor Certificate',
              icon: Icons.file_copy_outlined,
              isRequired: false,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _contractorCertificatePath,
              onFileSelected: (String? filePath) {
                setState(() {
                  _contractorCertificatePath = filePath;
                });
              },
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Upload Photograph',
              icon: Icons.photo_camera_outlined,
              isRequired: false,
              allowedExtensions: ['jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _photographPath,
              onFileSelected: (String? filePath) {
                setState(() {
                  _photographPath = filePath;
                });
              },
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Bank Details
        _buildModernSection(
          title: 'Bank Details',
          icon: Icons.account_balance_outlined,
          children: [
            _buildModernTextField(
              controller: _accountHolderController,
              label: 'Account Holder Name',
              icon: Icons.person_outline_rounded,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _ibanController,
              label: 'IBAN Number',
              icon: Icons.account_balance_wallet_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankNameController,
              label: 'Bank Name',
              icon: Icons.business_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _branchNameController,
              label: 'Branch Name',
              icon: Icons.map_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _bankAddressController,
              label: 'Bank Address',
              icon: Icons.location_city_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            FileUploadWidget(
              label: 'Bank Document Upload',
              icon: Icons.upload_file_outlined,
              isRequired: false,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _bankDocumentPath,
              onFileSelected: (String? filePath) async {
                setState(() {
                  _bankDocumentPath = filePath;
                  _isProcessingBankOCR = true;
                  _bankOcrError = null;
                });

                if (filePath != null) {
                  await _processBankDocumentOCR(filePath);
                }
              },
            ),
          ],
        ),
        const SizedBox(height: 24),
        // VAT Certificate
        _buildModernSection(
          title: 'VAT Certificate',
          icon: Icons.receipt_long_outlined,
          subtitle:
              'Not mandatory for firms with turnover below 375,000 AED per annum',
          children: [
            FileUploadWidget(
              label: 'VAT Certificate Upload',
              icon: Icons.upload_file_outlined,
              isRequired: false,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _vatCertificatePath,
              onFileSelected: (String? filePath) async {
                setState(() {
                  _vatCertificatePath = filePath;
                  _isProcessingVatOCR = true;
                  _vatOcrError = null;
                });

                if (filePath != null) {
                  await _processVATCertificateOCR(filePath);
                }
              },
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _firmNameController,
              label: 'Firm Name',
              icon: Icons.business_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _vatAddressController,
              label: 'Registered Address',
              icon: Icons.home_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _trnController,
              label: 'Tax Registration Number',
              icon: Icons.pin_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _vatDateController,
              label: 'Effective Date',
              icon: Icons.event_outlined,
              isRequired: false,
            ),
          ],
        ),
        const SizedBox(height: 24),
        // Commercial License
        _buildModernSection(
          title: 'Commercial License',
          icon: Icons.workspace_premium_outlined,
          subtitle:
              'Note: Each emirate has separate licensing authority. Different emirates require different licenses.',
          children: [
            FileUploadWidget(
              label: 'Commercial License Upload',
              icon: Icons.upload_file_outlined,
              isRequired: false,
              allowedExtensions: ['pdf', 'jpg', 'jpeg', 'png'],
              formType: 'contractor',
              currentFilePath: _licenseDocumentPath,
              onFileSelected: (String? filePath) async {
                setState(() {
                  _licenseDocumentPath = filePath;
                  _isProcessingLicenseOCR = true;
                  _licenseOcrError = null;
                });

                if (filePath != null) {
                  await _processCommercialLicenseOCR(filePath);
                }
              },
            ),
            if (_isProcessingLicenseOCR)
              Padding(
                padding: const EdgeInsets.only(top: 16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: const Color(0xFFF0F9FF),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: const Color(0xFF3B82F6).withOpacity(0.2),
                        ),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  color: Color(0xFF3B82F6),
                                ),
                              ),
                              const SizedBox(width: 12),
                              Expanded(
                                child: Text(
                                  _licenseOcrCurrentStep,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.w600,
                                    color: Color(0xFF1E40AF),
                                  ),
                                ),
                              ),
                              if (_licenseEstimatedTimeLeft > 0)
                                Text(
                                  '${_licenseEstimatedTimeLeft}s',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.grey.shade600,
                                  ),
                                ),
                            ],
                          ),
                          const SizedBox(height: 12),
                          LinearProgressIndicator(
                            value: _licenseOcrProgress,
                            backgroundColor: Colors.grey.shade200,
                            valueColor: const AlwaysStoppedAnimation<Color>(
                              Color(0xFF3B82F6),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            if (_licenseOcrError != null && !_isProcessingLicenseOCR)
              Padding(
                padding: const EdgeInsets.only(top: 16.0),
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: const Color(0xFFFEF2F2),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: const Color(0xFFEF4444).withOpacity(0.2),
                    ),
                  ),
                  child: Row(
                    children: [
                      const Icon(
                        Icons.error_outline_rounded,
                        color: Color(0xFFDC2626),
                        size: 20,
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: Text(
                          _licenseOcrError!,
                          style: const TextStyle(
                            color: Color(0xFFB91C1C),
                            fontSize: 14,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _licenseNumberController,
              label: 'License Number',
              icon: Icons.pin_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _issuingAuthorityController,
              label: 'Issuing Authority',
              icon: Icons.account_balance_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _licenseTypeController,
              label: 'License Type',
              icon: Icons.category_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _establishmentDateController,
              label: 'Establishment Date',
              icon: Icons.event_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _licenseExpiryDateController,
              label: 'Expiry Date',
              icon: Icons.event_available_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _tradeNameController,
              label: 'Trade Name',
              icon: Icons.store_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _responsiblePersonController,
              label: 'Responsible Person',
              icon: Icons.person_outline_rounded,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernTextField(
              controller: _licenseAddressController,
              label: 'Registered Address',
              icon: Icons.home_outlined,
              isRequired: false,
            ),
            const SizedBox(height: 20),
            _buildModernDateField(
              controller: _effectiveDateController,
              label: 'Effective Registration Date',
              icon: Icons.event_outlined,
              isRequired: false,
            ),
          ],
        ),
      ],
    );
  }

  PreferredSizeWidget _buildModernAppBar() {
    return AppBar(
      elevation: 0,
      backgroundColor: Colors.white,
      foregroundColor: const Color(0xFF1E3A8A),
      systemOverlayStyle: const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
      ),
      leading: Navigator.of(context).canPop()
          ? Padding(
              padding: const EdgeInsets.all(8.0),
              child: CustomBackButton(animated: false, size: 36),
            )
          : null,
      title: Text(
        'Contractor Registration',
        style: TextStyle(
          fontWeight: FontWeight.w600,
          fontSize: 20,
          color: const Color(0xFF1E3A8A),
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(
            Icons.help_outline_rounded,
            color: Color(0xFF1E3A8A),
          ),
          onPressed: () => _showHelpDialog(),
        ),
      ],
    );
  }

  Widget _buildModernSection({
    required String title,
    required IconData icon,
    required List<Widget> children,
    bool isOptional = false,
    String? subtitle,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 16,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section Header
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: const Color(0xFFF8FAFC),
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  width: 48,
                  height: 48,
                  decoration: BoxDecoration(
                    color: const Color(0xFF1E3A8A).withOpacity(0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(icon, color: const Color(0xFF1E3A8A), size: 24),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        title,
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF1F2937),
                        ),
                      ),
                      if (isOptional)
                        Text(
                          'Optional',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                        ),
                      if (subtitle != null)
                        Padding(
                          padding: const EdgeInsets.only(top: 4),
                          child: Text(
                            subtitle,
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey.shade600,
                              fontStyle: FontStyle.italic,
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Section Content
          Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: children,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildModernTextField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isPhone = false,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      keyboardType: isPhone ? TextInputType.phone : TextInputType.text,
      validator: (value) {
        if (isRequired && (value == null || value.trim().isEmpty)) {
          return 'Please enter $label';
        }
        if (isPhone && value != null && value.isNotEmpty) {
          return ContractorService.validateMobileNumber(value);
        }
        if (label.toLowerCase().contains('iban')) {
          return ContractorService.validateIban(value);
        }
        if (label.toLowerCase().contains('tax registration')) {
          return ContractorService.validateTaxRegistrationNumber(value);
        }
        if (label.toLowerCase().contains('name') &&
            (label.toLowerCase().contains('first') ||
                label.toLowerCase().contains('last') ||
                label.toLowerCase().contains('account holder') ||
                label.toLowerCase().contains('responsible person'))) {
          return ContractorService.validateName(value, label);
        }
        return null;
      },
    );
  }

  Widget _buildModernDateField({
    required TextEditingController controller,
    required String label,
    required IconData icon,
    bool isRequired = true,
  }) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(
        labelText: isRequired ? '$label *' : label,
        prefixIcon: Icon(icon, color: Colors.grey.shade600),
        suffixIcon: const Icon(
          Icons.calendar_today_rounded,
          color: Colors.grey,
        ),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: BorderSide(color: Colors.grey.shade300),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: Color(0xFF1E3A8A), width: 2),
        ),
        filled: true,
        fillColor: const Color(0xFFF8FAFC),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 16,
          vertical: 16,
        ),
      ),
      readOnly: true,
      onTap: () async {
        final date = await showDatePicker(
          context: context,
          initialDate: DateTime.now(),
          firstDate: DateTime(1900),
          lastDate: DateTime(2100),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: Color(0xFF1E3A8A),
                ),
              ),
              child: child!,
            );
          },
        );
        if (date != null) {
          controller.text = date.toString().split(' ').first;
        }
      },
      validator: (value) {
        if (isRequired && (value == null || value.isEmpty)) {
          return 'Please enter $label';
        }
        return null;
      },
    );
  }

  Widget _buildAnimatedSubmitButton() {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton(
        onPressed: _isSubmitting ? null : _submitForm,
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1E3A8A),
          foregroundColor: Colors.white,
          elevation: 0,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        child: _isSubmitting
            ? const Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Text('Submitting...', style: TextStyle(color: Colors.white)),
                ],
              )
            : const Text(
                'Submit Registration',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(
                Icons.help_outline_rounded,
                size: 48,
                color: Color(0xFF1E3A8A),
              ),
              const SizedBox(height: 16),
              Text(
                'Registration Help',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: const Color(0xFF1F2937),
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'Fill in all required fields marked with *. Optional fields can be skipped.',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.grey.shade600),
              ),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: () => context.pop(),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF1E3A8A),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text(
                    'Got it',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAnimatedHeader() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(32),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF1E3A8A), Color(0xFF3B82F6)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.blue.withOpacity(0.15),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: const Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Welcome!',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          SizedBox(height: 12),
          Text(
            'Complete your contractor registration',
            style: TextStyle(fontSize: 18, color: Colors.white70),
          ),
        ],
      ),
    );
  }

  // OCR Processing Methods
  void _toast(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          duration: const Duration(seconds: 3),
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  void _startLicenseProgressTracking() {
    _licenseOcrStartTime = DateTime.now();
    _licenseProgressTimer = Timer.periodic(const Duration(milliseconds: 100), (
      timer,
    ) {
      if (!_isProcessingLicenseOCR) {
        timer.cancel();
        return;
      }

      setState(() {
        if (_licenseEstimatedTimeLeft > 0) {
          _licenseEstimatedTimeLeft = (_licenseEstimatedTimeLeft - 0.1)
              .round()
              .clamp(0, 100);
        }
      });
    });
  }

  void _startVatProgressTracking() {
    _vatOcrStartTime = DateTime.now();
    _vatProgressTimer = Timer.periodic(const Duration(milliseconds: 100), (
      timer,
    ) {
      if (!_isProcessingVatOCR) {
        timer.cancel();
        return;
      }

      setState(() {
        if (_vatEstimatedTimeLeft > 0) {
          _vatEstimatedTimeLeft = (_vatEstimatedTimeLeft - 0.1).round().clamp(
            0,
            100,
          );
        }
      });
    });
  }

  void _startBankProgressTracking() {
    _bankOcrStartTime = DateTime.now();
    _bankProgressTimer = Timer.periodic(const Duration(milliseconds: 100), (
      timer,
    ) {
      if (!_isProcessingBankOCR) {
        timer.cancel();
        return;
      }

      setState(() {
        if (_bankEstimatedTimeLeft > 0) {
          _bankEstimatedTimeLeft = (_bankEstimatedTimeLeft - 0.1).round().clamp(
            0,
            100,
          );
        }
      });
    });
  }

  Future<void> _processCommercialLicenseOCR(String filePath) async {
    try {
      print('=== CONTRACTOR LICENSE OCR START ===');
      print('Processing contractor license file: $filePath');

      _startLicenseProgressTracking();

      // Step 1: File Loading (0-30%)
      if (mounted) {
        setState(() {
          _licenseOcrCurrentStep = '📄 Loading license document...';
          _licenseOcrProgress = 0.1;
          _licenseEstimatedTimeLeft = 15;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 2: OCR Processing (30-70%)
      if (mounted) {
        setState(() {
          _licenseOcrCurrentStep = '🔍 Extracting license information...';
          _licenseOcrProgress = 0.4;
          _licenseEstimatedTimeLeft = 10;
        });
      }

      // Process the commercial license document with OCR
      final tradeLicenseData = await TradeLicenseOCRService.processTradeLicense(
        filePath,
      );

      // Step 3: Data Extraction (70-90%)
      if (mounted) {
        setState(() {
          _licenseOcrCurrentStep = '✨ Processing extracted data...';
          _licenseOcrProgress = 0.8;
          _licenseEstimatedTimeLeft = 5;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 4: Complete (90-100%)
      if (mounted) {
        setState(() {
          _licenseOcrProgress = 1.0;
          _licenseOcrCurrentStep = '✅ Processing complete!';
          _licenseEstimatedTimeLeft = 0;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      if (mounted) {
        setState(() {
          _isProcessingLicenseOCR = false;
          _licenseProgressTimer?.cancel();

          // Auto-fill form fields if OCR extracted any valid data
          if (tradeLicenseData.isValid) {
            print('OCR extracted valid data, auto-filling fields...');

            int fieldsFilledCount = 0;

            // Fill license details
            if (tradeLicenseData.licenseNumber != null) {
              _licenseNumberController.text = tradeLicenseData.licenseNumber!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.issuingAuthority != null) {
              _issuingAuthorityController.text =
                  tradeLicenseData.issuingAuthority!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.establishmentDate != null) {
              _establishmentDateController.text =
                  tradeLicenseData.establishmentDate!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.expiryDate != null) {
              _licenseExpiryDateController.text = tradeLicenseData.expiryDate!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.tradeName != null) {
              _tradeNameController.text = tradeLicenseData.tradeName!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.responsiblePerson != null) {
              _responsiblePersonController.text =
                  tradeLicenseData.responsiblePerson!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.registeredAddress != null) {
              _licenseAddressController.text =
                  tradeLicenseData.registeredAddress!;
              fieldsFilledCount++;
            }

            if (tradeLicenseData.effectiveRegistrationDate != null) {
              _effectiveDateController.text =
                  tradeLicenseData.effectiveRegistrationDate!;
              fieldsFilledCount++;
            }

            _licenseOcrError = null;

            // Show appropriate success message based on completeness
            if (tradeLicenseData.isCompletelyValid) {
              _toast(
                '🎉 Commercial license processed successfully! All $fieldsFilledCount fields auto-filled in ${DateTime.now().difference(_licenseOcrStartTime!).inSeconds}s.',
              );
            } else {
              _toast(
                '✨ Commercial license processed! $fieldsFilledCount fields auto-filled. Please complete remaining fields manually.',
              );
            }

            print(
              'OCR auto-fill completed successfully - $fieldsFilledCount fields filled',
            );
          } else {
            print('OCR did not extract enough valid data');
            _licenseOcrError =
                'Could not extract complete information from the document';
            _toast(
              '⚠️ Document processed but no valid fields could be extracted. Please fill them manually.',
            );
          }
        });
      }
    } catch (e) {
      print('OCR processing error: $e');
      if (mounted) {
        setState(() {
          _isProcessingLicenseOCR = false;
          _licenseProgressTimer?.cancel();
          _licenseOcrError = 'Failed to process document: $e';
        });
        _toast('❌ OCR processing failed. Please fill the fields manually.');
      }
    }
  }

  Future<void> _processVATCertificateOCR(String filePath) async {
    try {
      print('=== CONTRACTOR VAT CERTIFICATE OCR START ===');
      print('Processing contractor VAT certificate file: $filePath');

      _startVatProgressTracking();

      // Step 1: File Loading (0-30%)
      if (mounted) {
        setState(() {
          _vatOcrCurrentStep = '📄 Loading VAT certificate...';
          _vatOcrProgress = 0.1;
          _vatEstimatedTimeLeft = 10;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 2: OCR Processing (30-70%)
      if (mounted) {
        setState(() {
          _vatOcrCurrentStep = '🔍 Extracting VAT information...';
          _vatOcrProgress = 0.4;
          _vatEstimatedTimeLeft = 7;
        });
      }

      // Process the VAT certificate document with OCR
      final vatData = await VATRegistrationOCRService.processVATRegistration(
        filePath,
      );

      // Step 3: Data Extraction (70-90%)
      if (mounted) {
        setState(() {
          _vatOcrCurrentStep = '✨ Processing extracted data...';
          _vatOcrProgress = 0.8;
          _vatEstimatedTimeLeft = 3;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 4: Complete (90-100%)
      if (mounted) {
        setState(() {
          _vatOcrProgress = 1.0;
          _vatOcrCurrentStep = '✅ Processing complete!';
          _vatEstimatedTimeLeft = 0;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      if (mounted) {
        setState(() {
          _isProcessingVatOCR = false;
          _vatProgressTimer?.cancel();

          // Auto-fill form fields if OCR extracted any valid data
          if (vatData.isValid) {
            print('VAT OCR extracted valid data, auto-filling fields...');

            int fieldsFilledCount = 0;

            // Fill VAT details
            if (vatData.companyName != null) {
              _firmNameController.text = vatData.companyName!;
              fieldsFilledCount++;
            }

            if (vatData.registeredAddress != null) {
              _vatAddressController.text = vatData.registeredAddress!;
              fieldsFilledCount++;
            }

            if (vatData.vatNumber != null) {
              _trnController.text = vatData.vatNumber!;
              fieldsFilledCount++;
            }

            if (vatData.effectiveDate != null) {
              _vatDateController.text = vatData.effectiveDate!;
              fieldsFilledCount++;
            }

            _vatOcrError = null;

            // Show appropriate success message
            if (fieldsFilledCount > 0) {
              _toast(
                '✨ VAT certificate processed! $fieldsFilledCount fields auto-filled. Please review and complete remaining fields.',
              );
            } else {
              _toast(
                '⚠️ VAT certificate processed but no fields could be extracted. Please fill them manually.',
              );
            }

            print(
              'VAT OCR auto-fill completed successfully - $fieldsFilledCount fields filled',
            );
          } else {
            print('VAT OCR did not extract enough valid data');
            _vatOcrError =
                'Could not extract VAT information from the document';
            _toast(
              '⚠️ VAT certificate processed but no valid fields could be extracted. Please fill them manually.',
            );
          }
        });
      }
    } catch (e) {
      print('VAT OCR processing error: $e');
      if (mounted) {
        setState(() {
          _isProcessingVatOCR = false;
          _vatProgressTimer?.cancel();
          _vatOcrError = 'Failed to process VAT document: $e';
        });
        _toast('❌ VAT OCR processing failed. Please fill the fields manually.');
      }
    }
  }

  Future<void> _processBankDocumentOCR(String filePath) async {
    try {
      print('=== CONTRACTOR BANK DOCUMENT OCR START ===');
      print('Processing contractor bank document file: $filePath');

      _startBankProgressTracking();

      // Step 1: File Loading (0-30%)
      if (mounted) {
        setState(() {
          _bankOcrCurrentStep = '📄 Loading bank document...';
          _bankOcrProgress = 0.1;
          _bankEstimatedTimeLeft = 8;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 2: OCR Processing (30-70%)
      if (mounted) {
        setState(() {
          _bankOcrCurrentStep = '🔍 Extracting bank information...';
          _bankOcrProgress = 0.4;
          _bankEstimatedTimeLeft = 5;
        });
      }

      // Process the bank document with OCR
      final bankData = await BankDetailsOCRService.processBankDocument(
        filePath,
      );

      // Step 3: Data Extraction (70-90%)
      if (mounted) {
        setState(() {
          _bankOcrCurrentStep = '✨ Processing extracted data...';
          _bankOcrProgress = 0.8;
          _bankEstimatedTimeLeft = 2;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      // Step 4: Complete (90-100%)
      if (mounted) {
        setState(() {
          _bankOcrProgress = 1.0;
          _bankOcrCurrentStep = '✅ Processing complete!';
          _bankEstimatedTimeLeft = 0;
        });
      }
      await Future.delayed(const Duration(milliseconds: 500));

      if (mounted) {
        setState(() {
          _isProcessingBankOCR = false;
          _bankProgressTimer?.cancel();

          // Auto-fill form fields if OCR extracted any valid data
          if (bankData.isValid) {
            print('Bank OCR extracted valid data, auto-filling fields...');

            int fieldsFilledCount = 0;

            // Fill bank details
            if (bankData.accountHolderName != null) {
              _accountHolderController.text = bankData.accountHolderName!;
              fieldsFilledCount++;
            }

            if (bankData.ibanNumber != null) {
              _ibanController.text = bankData.ibanNumber!;
              fieldsFilledCount++;
            }

            if (bankData.bankName != null) {
              _bankNameController.text = bankData.bankName!;
              fieldsFilledCount++;
            }

            if (bankData.branchName != null) {
              _branchNameController.text = bankData.branchName!;
              fieldsFilledCount++;
            }

            if (bankData.bankAddress != null) {
              _bankAddressController.text = bankData.bankAddress!;
              fieldsFilledCount++;
            }

            _bankOcrError = null;

            // Show appropriate success message
            if (fieldsFilledCount > 0) {
              _toast(
                '✨ Bank document processed! $fieldsFilledCount fields auto-filled. Please review and complete remaining fields.',
              );
            } else {
              _toast(
                '⚠️ Bank document processed but no fields could be extracted. Please fill them manually.',
              );
            }

            print(
              'Bank OCR auto-fill completed successfully - $fieldsFilledCount fields filled',
            );
          } else {
            print('Bank OCR did not extract enough valid data');
            _bankOcrError =
                'Could not extract bank information from the document';
            _toast(
              '⚠️ Bank document processed but no valid fields could be extracted. Please fill them manually.',
            );
          }
        });
      }
    } catch (e) {
      print('Bank OCR processing error: $e');
      if (mounted) {
        setState(() {
          _isProcessingBankOCR = false;
          _bankProgressTimer?.cancel();
          _bankOcrError = 'Failed to process bank document: $e';
        });
        _toast(
          '❌ Bank OCR processing failed. Please fill the fields manually.',
        );
      }
    }
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() => _isSubmitting = true);
      try {
        final request = ContractorRegistrationRequest(
          contractorType: _contractorTypeController.text,
          firstName: _firstNameController.text,
          middleName: _middleNameController.text,
          lastName: _lastNameController.text,
          mobileNumber: ContractorService.formatMobileNumber(
            _mobileController.text,
          ),
          address: _addressController.text,
          area: _selectedEmirate?.code ?? '',
          emirates: _selectedEmirate?.desc ?? '',

          // Contractor Certificate
          contractorCertificate: _contractorCertificatePath ?? '',
          // Photo
          profilePhoto: _photographPath ?? '',
          // Bank
          accountHolderName: _accountHolderController.text,
          ibanNumber: ContractorService.formatIban(_ibanController.text),
          bankName: _bankNameController.text,
          branchName: _branchNameController.text,
          bankAddress: _bankAddressController.text,
          bankDocument: _bankDocumentPath ?? '',
          // VAT
          vatCertificate: _vatCertificatePath ?? '',
          firmName: _firmNameController.text,
          vatAddress: _vatAddressController.text,
          taxRegistrationNumber: ContractorService.formatTaxRegistrationNumber(
            _trnController.text,
          ),
          vatEffectiveDate: _vatDateController.text,
          // License
          licenseDocument: _licenseDocumentPath ?? '',
          licenseNumber: _licenseNumberController.text,
          issuingAuthority: _issuingAuthorityController.text,
          licenseType: _licenseTypeController.text,
          establishmentDate: _establishmentDateController.text,
          licenseExpiryDate: _licenseExpiryDateController.text,
          tradeName: _tradeNameController.text,
          responsiblePerson: _responsiblePersonController.text,
          licenseAddress: _licenseAddressController.text,
          effectiveDate: _effectiveDateController.text,
        );
        final response = await ContractorService.registerContractor(request);
        if (!mounted) return;
        setState(() => _isSubmitting = false);
        if (response.success) {
          // Set user as authenticated after successful registration
          final userData = UserData(
            emplName:
                '${_firstNameController.text} ${_lastNameController.text}',
            areaCode: _selectedEmirate?.code ?? '',
            roles: ['contractor'],
            pages: [],
            userID: _mobileController.text,
          );
          AuthManager.setUser(userData);

          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.white, size: 20),
                  const SizedBox(width: 8),
                  Expanded(child: Text('Registration successful!')),
                ],
              ),
              backgroundColor: Colors.green,
              behavior: SnackBarBehavior.floating,
              duration: const Duration(seconds: 2),
            ),
          );

          // Navigate to home screen after successful registration
          await Future.delayed(const Duration(seconds: 1));
          if (mounted) {
            print(
              '🏗️ Contractor registration successful, navigating to home with query params',
            );
            context.go(
              '${AppRouter.home}?newRegistration=true&role=contractor',
            );
          }
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.error, color: Colors.white, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text('Registration failed: ${response.message}'),
                  ),
                ],
              ),
              backgroundColor: Colors.red,
              behavior: SnackBarBehavior.floating,
              duration: const Duration(seconds: 5),
            ),
          );
        }
      } catch (e) {
        if (!mounted) return;
        setState(() => _isSubmitting = false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white, size: 20),
                const SizedBox(width: 8),
                Expanded(child: Text('Registration failed: $e')),
              ],
            ),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }
}


