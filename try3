using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using sparshWebService.DataAccess; // DatabaseHelper
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace sparshWebService.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public sealed class SmsUaeController : ControllerBase
    {
        private readonly IConfiguration _cfg;
        private readonly ILogger<SmsUaeController> _log;
        private readonly DatabaseHelper _db;

        public SmsUaeController(IConfiguration cfg, ILogger<SmsUaeController> log, DatabaseHelper db)
        {
            _cfg = cfg;
            _log = log;
            _db = db;
        }

        // ===== Request models =====
        public sealed class SmsUaeRequest
        {
            public string MobileNo { get; set; } = "";   // e.g. "971521302203" or "521302203"
            public string Message { get; set; } = "";    // e.g. "Dear User Your OTP is : 123456 Birla White (RAK)"
            public string Priority { get; set; } = "High";
            public string CountryCode { get; set; } = "ALL";
        }

        public sealed class RouteByMobileRequest
        {
            public string MobileNo { get; set; } = "";
        }

        // ===== Kyoto options (override via appsettings:SmsUae) =====
        private sealed class SmsUaeOptions
        {
            public string BaseUrl { get; set; } = "http://sms.kyoto-tech.com/sendurl.aspx";
            public string User { get; set; } = "RAK1976487";
            public string Password { get; set; } = "ybsjy19u";
            public string SenderId { get; set; } = "RAKWHITE";

            public bool UseProxy { get; set; } = true;
            public string ProxyHost { get; set; } = "185.46.212.90";
            public int ProxyPort { get; set; } = 80;
            public string ProxyUser { get; set; } = "rajendra.sikhwal";
            public string ProxyPassword { get; set; } = "Raju@45103";

            // Only relevant if you switch BaseUrl to HTTPS
            public bool TrustAllSsl { get; set; } = true;
        }

        private SmsUaeOptions LoadOptions()
        {
            var opt = new SmsUaeOptions();
            var section = _cfg.GetSection("SmsUae");
            if (section.Exists()) section.Bind(opt);
            return opt;
        }

        // --- Forwarding options (override via appsettings:SmsForward) ---
        private sealed class SmsForwardOptions
        {
            public string TargetUrl { get; set; } =
                "https://www.birlawhite.com:55230/api/SmsUae/send";


            // If your environment uses intercepting proxy/self-signed certs
            public bool TrustAllSsl { get; set; } = false;
            public int TimeoutSeconds { get; set; } = 30;
        }

        private SmsForwardOptions LoadForwardOptions()
        {
            var opt = new SmsForwardOptions();
            var section = _cfg.GetSection("SmsForward");
            if (section.Exists()) section.Bind(opt);
            return opt;
        }

        // ===== Health =====
        [HttpGet("health")]
        public IActionResult Health() => Ok(new { status = "OK", utc = DateTime.UtcNow });

        // ===== Helpers =====
        private static string Digits(string? s)
        {
            if (string.IsNullOrEmpty(s)) return "";
            var sb = new StringBuilder(s.Length);
            foreach (var ch in s)
                if (ch >= '0' && ch <= '9') sb.Append(ch);
            return sb.ToString();
        }

        private static string LastNDigits(string s, int n)
        {
            var d = Digits(s);
            return d.Length <= n ? d : d.Substring(d.Length - n);
        }

        private static string SqlDigitsExpr(string column)
        {
            // Remove space, +, -, (, ) in SQL side
            return $"REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(ISNULL({column},''),' ',''),'-',''),'+',''),'(',''),')','')";
        }

        private static string NormalizeToMsisdn(string raw)
        {
            // For Kyoto: ensure "971" + 9 digits
            var d9 = LastNDigits(raw, 9);
            return "971" + d9;
        }

        private (bool found, string inflType) FindInflTypeByMobile(string mobileInput)
        {
            // Accept any input; compare on digits-only using 9 and 11 last digits
            var m9 = LastNDigits(mobileInput, 9);
            var m11 = LastNDigits(mobileInput, 11);
            if (string.IsNullOrEmpty(m9)) return (false, "");

            var digitsSql = SqlDigitsExpr("mobileNo");

            // If your table truly stores ONLY 9-digit values, the equality on @m9 already covers it.
            // RIGHT(...,11) handles stored 11-digit formats.
            var sql = $@"
SELECT TOP 1 inflType
FROM dbo.ctmInfluncr WITH (NOLOCK)
WHERE RIGHT({digitsSql}, 9)  = @m9
   OR RIGHT({digitsSql}, 11) = @m11
   OR mobileNo = @m9
   OR mobileNo = @m11
ORDER BY ISNULL(createDt, '1900-01-01') DESC;";

            var prms = new Dictionary<string, object?>
            {
                ["@m9"] = m9,
                ["@m11"] = m11
            };

            var rows = _db.QaEWebBean(sql, prms) ?? new List<Dictionary<string, object>>();
            if (rows.Count == 0) return (false, "");

            var inflType = (rows[0]["inflType"]?.ToString() ?? "").Trim().ToUpperInvariant();
            return (true, inflType);
        }

        // ===== 1) Verify: /api/SmsUae/verify-mobile =====
        [HttpPost("verify-mobile")]
        public IActionResult VerifyMobile([FromBody] RouteByMobileRequest req)
        {
            try
            {
                if (req == null || string.IsNullOrWhiteSpace(req.MobileNo))
                    return BadRequest(new { success = false, message = "MobileNo is required." });

                var (found, inflType) = FindInflTypeByMobile(req.MobileNo);
                if (!found)
                    return NotFound(new { success = false, exists = false, message = "Mobile not registered." });

                return Ok(new { success = true, exists = true, inflType });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "verify-mobile failed");
                return StatusCode(500, new { success = false, message = "Error verifying mobile.", error = ex.Message });
            }
        }

        // ===== 2) Route: /api/SmsUae/route-by-mobile =====
        [HttpPost("route-by-mobile")]
        public IActionResult RouteByMobile([FromBody] RouteByMobileRequest req)
        {
            try
            {
                if (req == null || string.IsNullOrWhiteSpace(req.MobileNo))
                    return BadRequest(new { success = false, message = "MobileNo is required." });

                var (found, inflType) = FindInflTypeByMobile(req.MobileNo);
                if (!found)
                    return NotFound(new { success = false, exists = false, message = "Mobile not registered." });

                var route = inflType == "PN" ? "painter" : "contractor";
                var message = route == "painter" ? "navigate to painter screen" : "navigate to contractor screen";

                return Ok(new { success = true, exists = true, inflType, route, message });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "route-by-mobile failed");
                return StatusCode(500, new { success = false, message = "Error deciding route.", error = ex.Message });
            }
        }

        // ===== 3) Direct Send (Forward JSON to external API): /api/SmsUae/send =====
        [HttpPost("send")]
        public async Task<IActionResult> Send([FromBody] SmsUaeRequest req, CancellationToken ct)
        {
            if (req is null ||
                string.IsNullOrWhiteSpace(req.MobileNo) ||
                string.IsNullOrWhiteSpace(req.Message))
            {
                return BadRequest(new { success = false, message = "mobileNo and message are required." });
            }

            var fwd = LoadForwardOptions();

            // Build HttpClient handler (proxy/trust settings if needed)
            var handler = new HttpClientHandler();

            if (fwd.TrustAllSsl)
            {
                handler.ServerCertificateCustomValidationCallback =
                    HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
            }

            try
            {
                using var http = new HttpClient(handler, disposeHandler: true)
                {
                    Timeout = TimeSpan.FromSeconds(fwd.TimeoutSeconds <= 0 ? 30 : fwd.TimeoutSeconds)
                };

                // Serialize with camelCase to match external API keys
                var json = JsonSerializer.Serialize(req, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });

                using var content = new StringContent(json, Encoding.UTF8, "application/json");

                var resp = await http.PostAsync(fwd.TargetUrl, content, ct);
                var respBody = await resp.Content.ReadAsStringAsync(ct);

                // Pass-through style response (plus meta for debugging)
                return StatusCode((int)resp.StatusCode, new
                {
                    success = resp.IsSuccessStatusCode,
                    statusCode = (int)resp.StatusCode,
                    forwardedTo = fwd.TargetUrl,
                    requestBody = req,          // echoes what we sent
                    response = respBody
                });
            }
            catch (TaskCanceledException tex) when (!ct.IsCancellationRequested)
            {
                // Timeout
                _log.LogError(tex, "SmsUaeController.send timed out");
                return StatusCode(504, new { success = false, message = "Upstream timeout.", error = tex.Message });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "SmsUaeController.send failed");
                return StatusCode(500, new { success = false, message = "Error forwarding SMS.", error = ex.Message });
            }
        }

        // ===== 4) Verify + Send (Kyoto form-post): /api/SmsUae/send-if-registered =====
        [HttpPost("send-if-registered")]
        public async Task<IActionResult> SendIfRegistered([FromBody] SmsUaeRequest req, CancellationToken ct)
        {
            try
            {
                if (req is null || string.IsNullOrWhiteSpace(req.MobileNo) || string.IsNullOrWhiteSpace(req.Message))
                    return BadRequest(new { success = false, message = "MobileNo and Message are required." });

                // 1) verify
                var (found, inflType) = FindInflTypeByMobile(req.MobileNo);
                if (!found)
                    return NotFound(new { success = false, exists = false, message = "Mobile not registered." });

                // 2) normalize to MSISDN for Kyoto (971 + last 9)
                var msisdn = NormalizeToMsisdn(req.MobileNo);

                // forward to Kyoto with normalized number
                var toSend = new SmsUaeRequest
                {
                    MobileNo = msisdn,
                    Message = req.Message,
                    Priority = string.IsNullOrWhiteSpace(req.Priority) ? "High" : req.Priority,
                    CountryCode = string.IsNullOrWhiteSpace(req.CountryCode) ? "ALL" : req.CountryCode
                };

                var opt = LoadOptions();

                static string FormEnc(string s) => Uri.EscapeDataString(s ?? string.Empty);
                var sb = new StringBuilder();
                sb.Append("user=").Append(FormEnc(opt.User))
                  .Append("&pwd=").Append(FormEnc(opt.Password))
                  .Append("&senderid=").Append(FormEnc(opt.SenderId))
                  .Append("&mobileno=").Append(FormEnc(toSend.MobileNo))
                  .Append("&msgtext=").Append(FormEnc(toSend.Message))
                  .Append("&priority=").Append(FormEnc(toSend.Priority))
                  .Append("&CountryCode=").Append(FormEnc(toSend.CountryCode));
                var formBody = sb.ToString();

                var handler = new HttpClientHandler();
                if (opt.UseProxy && !string.IsNullOrWhiteSpace(opt.ProxyHost))
                {
                    var proxy = new WebProxy(opt.ProxyHost, opt.ProxyPort)
                    {
                        BypassProxyOnLocal = false,
                        Credentials = new NetworkCredential(opt.ProxyUser, opt.ProxyPassword)
                    };
                    handler.Proxy = proxy;
                    handler.UseProxy = true;
                }
                if (opt.TrustAllSsl)
                {
                    handler.ServerCertificateCustomValidationCallback =
                        HttpClientHandler.DangerousAcceptAnyServerCertificateValidator;
                }

                using var http = new HttpClient(handler, disposeHandler: true);
                using var content = new StringContent(formBody, Encoding.UTF8, "application/x-www-form-urlencoded");
                var resp = await http.PostAsync(opt.BaseUrl, content, ct);
                var body = await resp.Content.ReadAsStringAsync(ct);

                var route = inflType == "PN" ? "painter" : "contractor";
                return Ok(new
                {
                    success = true,
                    exists = true,
                    inflType,
                    route,
                    kyotoStatus = (int)resp.StatusCode,
                    kyotoResponse = body
                });
            }
            catch (Exception ex)
            {
                _log.LogError(ex, "send-if-registered failed");
                return StatusCode(500, new { success = false, message = "Error sending SMS.", error = ex.Message });
            }
        }
    }
}
